
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014038  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000109c  080141c8  080141c8  000241c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015264  08015264  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08015264  08015264  00025264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801526c  0801526c  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801526c  0801526c  0002526c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015270  08015270  00025270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08015274  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e8  2**0
                  CONTENTS
 10 .bss          000061e4  200001e8  200001e8  000301e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200063cc  200063cc  000301e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e491  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a29  00000000  00000000  0004e6a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a18  00000000  00000000  000520d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d48  00000000  00000000  00053af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004afe  00000000  00000000  00055838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dfc1  00000000  00000000  0005a336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db557  00000000  00000000  000782f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015384e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000084d0  00000000  00000000  001538a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080141b0 	.word	0x080141b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	080141b0 	.word	0x080141b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ffc:	f005 fcc6 	bl	800698c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001000:	f000 f850 	bl	80010a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001004:	f000 fb48 	bl	8001698 <MX_GPIO_Init>
	MX_TIM8_Init();
 8001008:	f000 fa72 	bl	80014f0 <MX_TIM8_Init>
	MX_TIM1_Init();
 800100c:	f000 f8d6 	bl	80011bc <MX_TIM1_Init>
	MX_USART3_UART_Init();
 8001010:	f000 fb18 	bl	8001644 <MX_USART3_UART_Init>
	MX_I2C1_Init();
 8001014:	f000 f8a4 	bl	8001160 <MX_I2C1_Init>
	MX_TIM2_Init();
 8001018:	f000 f96e 	bl	80012f8 <MX_TIM2_Init>
	MX_TIM4_Init();
 800101c:	f000 fa14 	bl	8001448 <MX_TIM4_Init>
	MX_TIM3_Init();
 8001020:	f000 f9be 	bl	80013a0 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	OLED_Init();
 8001024:	f004 ffa2 	bl	8005f6c <OLED_Init>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8001028:	f00b fe20 	bl	800cc6c <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 800102c:	4a11      	ldr	r2, [pc, #68]	; (8001074 <main+0x7c>)
 800102e:	2100      	movs	r1, #0
 8001030:	4811      	ldr	r0, [pc, #68]	; (8001078 <main+0x80>)
 8001032:	f00b fe65 	bl	800cd00 <osThreadNew>
 8001036:	4603      	mov	r3, r0
 8001038:	4a10      	ldr	r2, [pc, #64]	; (800107c <main+0x84>)
 800103a:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of OLEDTask */
	OLEDTaskHandle = osThreadNew(oled_show, NULL, &OLEDTask_attributes);
 800103c:	4a10      	ldr	r2, [pc, #64]	; (8001080 <main+0x88>)
 800103e:	2100      	movs	r1, #0
 8001040:	4810      	ldr	r0, [pc, #64]	; (8001084 <main+0x8c>)
 8001042:	f00b fe5d 	bl	800cd00 <osThreadNew>
 8001046:	4603      	mov	r3, r0
 8001048:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <main+0x90>)
 800104a:	6013      	str	r3, [r2, #0]

	/* creation of GyroRead */
	GyroReadHandle = osThreadNew(gyro_read, NULL, &GyroRead_attributes);
 800104c:	4a0f      	ldr	r2, [pc, #60]	; (800108c <main+0x94>)
 800104e:	2100      	movs	r1, #0
 8001050:	480f      	ldr	r0, [pc, #60]	; (8001090 <main+0x98>)
 8001052:	f00b fe55 	bl	800cd00 <osThreadNew>
 8001056:	4603      	mov	r3, r0
 8001058:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <main+0x9c>)
 800105a:	6013      	str	r3, [r2, #0]

	/* creation of ServoMotor */
	ServoMotorHandle = osThreadNew(servoMotor, NULL, &ServoMotor_attributes);
 800105c:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <main+0xa0>)
 800105e:	2100      	movs	r1, #0
 8001060:	480e      	ldr	r0, [pc, #56]	; (800109c <main+0xa4>)
 8001062:	f00b fe4d 	bl	800cd00 <osThreadNew>
 8001066:	4603      	mov	r3, r0
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <main+0xa8>)
 800106a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 800106c:	f00b fe22 	bl	800ccb4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001070:	e7fe      	b.n	8001070 <main+0x78>
 8001072:	bf00      	nop
 8001074:	080142b4 	.word	0x080142b4
 8001078:	08005619 	.word	0x08005619
 800107c:	20000404 	.word	0x20000404
 8001080:	080142d8 	.word	0x080142d8
 8001084:	080059fd 	.word	0x080059fd
 8001088:	20000408 	.word	0x20000408
 800108c:	080142fc 	.word	0x080142fc
 8001090:	08005a09 	.word	0x08005a09
 8001094:	2000040c 	.word	0x2000040c
 8001098:	08014320 	.word	0x08014320
 800109c:	08005be9 	.word	0x08005be9
 80010a0:	20000410 	.word	0x20000410

080010a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b094      	sub	sp, #80	; 0x50
 80010a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010aa:	f107 0320 	add.w	r3, r7, #32
 80010ae:	2230      	movs	r2, #48	; 0x30
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f00e fc12 	bl	800f8dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	4b22      	ldr	r3, [pc, #136]	; (8001158 <SystemClock_Config+0xb4>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <SystemClock_Config+0xb4>)
 80010d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d6:	6413      	str	r3, [r2, #64]	; 0x40
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <SystemClock_Config+0xb4>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e4:	2300      	movs	r3, #0
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	4b1c      	ldr	r3, [pc, #112]	; (800115c <SystemClock_Config+0xb8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a1b      	ldr	r2, [pc, #108]	; (800115c <SystemClock_Config+0xb8>)
 80010ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b19      	ldr	r3, [pc, #100]	; (800115c <SystemClock_Config+0xb8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001100:	2302      	movs	r3, #2
 8001102:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001104:	2301      	movs	r3, #1
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001108:	2310      	movs	r3, #16
 800110a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800110c:	2300      	movs	r3, #0
 800110e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001110:	f107 0320 	add.w	r3, r7, #32
 8001114:	4618      	mov	r0, r3
 8001116:	f008 fbd3 	bl	80098c0 <HAL_RCC_OscConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0x80>
		Error_Handler();
 8001120:	f004 fd78 	bl	8005c14 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001124:	230f      	movs	r3, #15
 8001126:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f008 fe36 	bl	8009db0 <HAL_RCC_ClockConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0xaa>
		Error_Handler();
 800114a:	f004 fd63 	bl	8005c14 <Error_Handler>
	}
}
 800114e:	bf00      	nop
 8001150:	3750      	adds	r7, #80	; 0x50
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40007000 	.word	0x40007000

08001160 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001166:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <MX_I2C1_Init+0x54>)
 8001168:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_I2C1_Init+0x50>)
 800116c:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <MX_I2C1_Init+0x58>)
 800116e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_I2C1_Init+0x50>)
 800117e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001182:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001184:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_I2C1_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_I2C1_Init+0x50>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <MX_I2C1_Init+0x50>)
 800119e:	f006 f80d 	bl	80071bc <HAL_I2C_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2C1_Init+0x4c>
		Error_Handler();
 80011a8:	f004 fd34 	bl	8005c14 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000204 	.word	0x20000204
 80011b4:	40005400 	.word	0x40005400
 80011b8:	00061a80 	.word	0x00061a80

080011bc <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b096      	sub	sp, #88	; 0x58
 80011c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80011c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80011d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80011da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]
 80011ea:	615a      	str	r2, [r3, #20]
 80011ec:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2220      	movs	r2, #32
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f00e fb71 	bl	800f8dc <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80011fa:	4b3d      	ldr	r3, [pc, #244]	; (80012f0 <MX_TIM1_Init+0x134>)
 80011fc:	4a3d      	ldr	r2, [pc, #244]	; (80012f4 <MX_TIM1_Init+0x138>)
 80011fe:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 160;
 8001200:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001202:	22a0      	movs	r2, #160	; 0xa0
 8001204:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001206:	4b3a      	ldr	r3, [pc, #232]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000;
 800120c:	4b38      	ldr	r3, [pc, #224]	; (80012f0 <MX_TIM1_Init+0x134>)
 800120e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001212:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001214:	4b36      	ldr	r3, [pc, #216]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800121a:	4b35      	ldr	r3, [pc, #212]	; (80012f0 <MX_TIM1_Init+0x134>)
 800121c:	2200      	movs	r2, #0
 800121e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001220:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001222:	2280      	movs	r2, #128	; 0x80
 8001224:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001226:	4832      	ldr	r0, [pc, #200]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001228:	f008 ffa2 	bl	800a170 <HAL_TIM_Base_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM1_Init+0x7a>
		Error_Handler();
 8001232:	f004 fcef 	bl	8005c14 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800123c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001240:	4619      	mov	r1, r3
 8001242:	482b      	ldr	r0, [pc, #172]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001244:	f009 fe16 	bl	800ae74 <HAL_TIM_ConfigClockSource>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0x96>
		Error_Handler();
 800124e:	f004 fce1 	bl	8005c14 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001252:	4827      	ldr	r0, [pc, #156]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001254:	f008 ffdb 	bl	800a20e <HAL_TIM_PWM_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM1_Init+0xa6>
		Error_Handler();
 800125e:	f004 fcd9 	bl	8005c14 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800126a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800126e:	4619      	mov	r1, r3
 8001270:	481f      	ldr	r0, [pc, #124]	; (80012f0 <MX_TIM1_Init+0x134>)
 8001272:	f00a fb6d 	bl	800b950 <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 800127c:	f004 fcca 	bl	8005c14 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001280:	2360      	movs	r3, #96	; 0x60
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001288:	2300      	movs	r3, #0
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8001298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129c:	220c      	movs	r2, #12
 800129e:	4619      	mov	r1, r3
 80012a0:	4813      	ldr	r0, [pc, #76]	; (80012f0 <MX_TIM1_Init+0x134>)
 80012a2:	f009 fd25 	bl	800acf0 <HAL_TIM_PWM_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0xf4>
			!= HAL_OK) {
		Error_Handler();
 80012ac:	f004 fcb2 	bl	8005c14 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c8:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4619      	mov	r1, r3
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <MX_TIM1_Init+0x134>)
 80012d4:	f00a fbb8 	bl	800ba48 <HAL_TIMEx_ConfigBreakDeadTime>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM1_Init+0x126>
			!= HAL_OK) {
		Error_Handler();
 80012de:	f004 fc99 	bl	8005c14 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80012e2:	4803      	ldr	r0, [pc, #12]	; (80012f0 <MX_TIM1_Init+0x134>)
 80012e4:	f005 f984 	bl	80065f0 <HAL_TIM_MspPostInit>

}
 80012e8:	bf00      	nop
 80012ea:	3758      	adds	r7, #88	; 0x58
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000258 	.word	0x20000258
 80012f4:	40010000 	.word	0x40010000

080012f8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08c      	sub	sp, #48	; 0x30
 80012fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	2224      	movs	r2, #36	; 0x24
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f00e fae8 	bl	800f8dc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001314:	4b21      	ldr	r3, [pc, #132]	; (800139c <MX_TIM2_Init+0xa4>)
 8001316:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800131a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <MX_TIM2_Init+0xa4>)
 800131e:	2200      	movs	r2, #0
 8001320:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001322:	4b1e      	ldr	r3, [pc, #120]	; (800139c <MX_TIM2_Init+0xa4>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001328:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_TIM2_Init+0xa4>)
 800132a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800132e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_TIM2_Init+0xa4>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_TIM2_Init+0xa4>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800133c:	2301      	movs	r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001344:	2301      	movs	r3, #1
 8001346:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001354:	2301      	movs	r3, #1
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	4619      	mov	r1, r3
 8001366:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_TIM2_Init+0xa4>)
 8001368:	f009 f9ea 	bl	800a740 <HAL_TIM_Encoder_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM2_Init+0x7e>
		Error_Handler();
 8001372:	f004 fc4f 	bl	8005c14 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	4619      	mov	r1, r3
 8001382:	4806      	ldr	r0, [pc, #24]	; (800139c <MX_TIM2_Init+0xa4>)
 8001384:	f00a fae4 	bl	800b950 <HAL_TIMEx_MasterConfigSynchronization>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800138e:	f004 fc41 	bl	8005c14 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	3730      	adds	r7, #48	; 0x30
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200002a0 	.word	0x200002a0

080013a0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80013b0:	463b      	mov	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80013bc:	4b20      	ldr	r3, [pc, #128]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013be:	4a21      	ldr	r2, [pc, #132]	; (8001444 <MX_TIM3_Init+0xa4>)
 80013c0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72 - 1;
 80013c2:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013c4:	2247      	movs	r2, #71	; 0x47
 80013c6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 0xffff - 1;
 80013ce:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80013d4:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK) {
 80013e2:	4817      	ldr	r0, [pc, #92]	; (8001440 <MX_TIM3_Init+0xa0>)
 80013e4:	f009 f834 	bl	800a450 <HAL_TIM_IC_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM3_Init+0x52>
		Error_Handler();
 80013ee:	f004 fc11 	bl	8005c14 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	4619      	mov	r1, r3
 8001400:	480f      	ldr	r0, [pc, #60]	; (8001440 <MX_TIM3_Init+0xa0>)
 8001402:	f00a faa5 	bl	800b950 <HAL_TIMEx_MasterConfigSynchronization>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM3_Init+0x70>
			!= HAL_OK) {
		Error_Handler();
 800140c:	f004 fc02 	bl	8005c14 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001410:	2300      	movs	r3, #0
 8001412:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001414:	2301      	movs	r3, #1
 8001416:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	4619      	mov	r1, r3
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <MX_TIM3_Init+0xa0>)
 8001428:	f009 fbc6 	bl	800abb8 <HAL_TIM_IC_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM3_Init+0x96>
		Error_Handler();
 8001432:	f004 fbef 	bl	8005c14 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200002e8 	.word	0x200002e8
 8001444:	40000400 	.word	0x40000400

08001448 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b08c      	sub	sp, #48	; 0x30
 800144c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	2224      	movs	r2, #36	; 0x24
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f00e fa40 	bl	800f8dc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001464:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001466:	4a21      	ldr	r2, [pc, #132]	; (80014ec <MX_TIM4_Init+0xa4>)
 8001468:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <MX_TIM4_Init+0xa0>)
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001478:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800147c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001484:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <MX_TIM4_Init+0xa0>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800148a:	2301      	movs	r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001492:	2301      	movs	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014a2:	2301      	movs	r3, #1
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	4619      	mov	r1, r3
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <MX_TIM4_Init+0xa0>)
 80014b6:	f009 f943 	bl	800a740 <HAL_TIM_Encoder_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM4_Init+0x7c>
		Error_Handler();
 80014c0:	f004 fba8 	bl	8005c14 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_TIM4_Init+0xa0>)
 80014d2:	f00a fa3d 	bl	800b950 <HAL_TIMEx_MasterConfigSynchronization>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM4_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 80014dc:	f004 fb9a 	bl	8005c14 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	3730      	adds	r7, #48	; 0x30
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000330 	.word	0x20000330
 80014ec:	40000800 	.word	0x40000800

080014f0 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b096      	sub	sp, #88	; 0x58
 80014f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80014f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001504:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800150e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]
 800151e:	615a      	str	r2, [r3, #20]
 8001520:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2220      	movs	r2, #32
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f00e f9d7 	bl	800f8dc <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800152e:	4b43      	ldr	r3, [pc, #268]	; (800163c <MX_TIM8_Init+0x14c>)
 8001530:	4a43      	ldr	r2, [pc, #268]	; (8001640 <MX_TIM8_Init+0x150>)
 8001532:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8001534:	4b41      	ldr	r3, [pc, #260]	; (800163c <MX_TIM8_Init+0x14c>)
 8001536:	2200      	movs	r2, #0
 8001538:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153a:	4b40      	ldr	r3, [pc, #256]	; (800163c <MX_TIM8_Init+0x14c>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 7199;
 8001540:	4b3e      	ldr	r3, [pc, #248]	; (800163c <MX_TIM8_Init+0x14c>)
 8001542:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001546:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001548:	4b3c      	ldr	r3, [pc, #240]	; (800163c <MX_TIM8_Init+0x14c>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800154e:	4b3b      	ldr	r3, [pc, #236]	; (800163c <MX_TIM8_Init+0x14c>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001554:	4b39      	ldr	r3, [pc, #228]	; (800163c <MX_TIM8_Init+0x14c>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 800155a:	4838      	ldr	r0, [pc, #224]	; (800163c <MX_TIM8_Init+0x14c>)
 800155c:	f008 fe08 	bl	800a170 <HAL_TIM_Base_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM8_Init+0x7a>
		Error_Handler();
 8001566:	f004 fb55 	bl	8005c14 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8001570:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001574:	4619      	mov	r1, r3
 8001576:	4831      	ldr	r0, [pc, #196]	; (800163c <MX_TIM8_Init+0x14c>)
 8001578:	f009 fc7c 	bl	800ae74 <HAL_TIM_ConfigClockSource>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM8_Init+0x96>
		Error_Handler();
 8001582:	f004 fb47 	bl	8005c14 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8001586:	482d      	ldr	r0, [pc, #180]	; (800163c <MX_TIM8_Init+0x14c>)
 8001588:	f008 fe41 	bl	800a20e <HAL_TIM_PWM_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM8_Init+0xa6>
		Error_Handler();
 8001592:	f004 fb3f 	bl	8005c14 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800159e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015a2:	4619      	mov	r1, r3
 80015a4:	4825      	ldr	r0, [pc, #148]	; (800163c <MX_TIM8_Init+0x14c>)
 80015a6:	f00a f9d3 	bl	800b950 <HAL_TIMEx_MasterConfigSynchronization>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM8_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80015b0:	f004 fb30 	bl	8005c14 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b4:	2360      	movs	r3, #96	; 0x60
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015c0:	2300      	movs	r3, #0
 80015c2:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015cc:	2300      	movs	r3, #0
 80015ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1)
 80015d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d4:	2200      	movs	r2, #0
 80015d6:	4619      	mov	r1, r3
 80015d8:	4818      	ldr	r0, [pc, #96]	; (800163c <MX_TIM8_Init+0x14c>)
 80015da:	f009 fb89 	bl	800acf0 <HAL_TIM_PWM_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM8_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 80015e4:	f004 fb16 	bl	8005c14 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3)
 80015e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ec:	2208      	movs	r2, #8
 80015ee:	4619      	mov	r1, r3
 80015f0:	4812      	ldr	r0, [pc, #72]	; (800163c <MX_TIM8_Init+0x14c>)
 80015f2:	f009 fb7d 	bl	800acf0 <HAL_TIM_PWM_ConfigChannel>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM8_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 80015fc:	f004 fb0a 	bl	8005c14 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001618:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	4619      	mov	r1, r3
 8001622:	4806      	ldr	r0, [pc, #24]	; (800163c <MX_TIM8_Init+0x14c>)
 8001624:	f00a fa10 	bl	800ba48 <HAL_TIMEx_ConfigBreakDeadTime>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM8_Init+0x142>
			!= HAL_OK) {
		Error_Handler();
 800162e:	f004 faf1 	bl	8005c14 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	3758      	adds	r7, #88	; 0x58
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000378 	.word	0x20000378
 8001640:	40010400 	.word	0x40010400

08001644 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 800164a:	4a12      	ldr	r2, [pc, #72]	; (8001694 <MX_USART3_UART_Init+0x50>)
 800164c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001654:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 800166a:	220c      	movs	r2, #12
 800166c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_USART3_UART_Init+0x4c>)
 800167c:	f00a fa4a 	bl	800bb14 <HAL_UART_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8001686:	f004 fac5 	bl	8005c14 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200003c0 	.word	0x200003c0
 8001694:	40004800 	.word	0x40004800

08001698 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b3a      	ldr	r3, [pc, #232]	; (800179c <MX_GPIO_Init+0x104>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a39      	ldr	r2, [pc, #228]	; (800179c <MX_GPIO_Init+0x104>)
 80016b8:	f043 0310 	orr.w	r3, r3, #16
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b37      	ldr	r3, [pc, #220]	; (800179c <MX_GPIO_Init+0x104>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b33      	ldr	r3, [pc, #204]	; (800179c <MX_GPIO_Init+0x104>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a32      	ldr	r2, [pc, #200]	; (800179c <MX_GPIO_Init+0x104>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b30      	ldr	r3, [pc, #192]	; (800179c <MX_GPIO_Init+0x104>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	4b2c      	ldr	r3, [pc, #176]	; (800179c <MX_GPIO_Init+0x104>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a2b      	ldr	r2, [pc, #172]	; (800179c <MX_GPIO_Init+0x104>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b29      	ldr	r3, [pc, #164]	; (800179c <MX_GPIO_Init+0x104>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	4b25      	ldr	r3, [pc, #148]	; (800179c <MX_GPIO_Init+0x104>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a24      	ldr	r2, [pc, #144]	; (800179c <MX_GPIO_Init+0x104>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b22      	ldr	r3, [pc, #136]	; (800179c <MX_GPIO_Init+0x104>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 800171e:	2200      	movs	r2, #0
 8001720:	f44f 51bf 	mov.w	r1, #6112	; 0x17e0
 8001724:	481e      	ldr	r0, [pc, #120]	; (80017a0 <MX_GPIO_Init+0x108>)
 8001726:	f005 fd15 	bl	8007154 <HAL_GPIO_WritePin>
			OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin | OLED_DC_Pin
					| UltraSensor_Trigger_Pin | LED3_Pin | CIN1_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin | AIN1_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	210c      	movs	r1, #12
 800172e:	481d      	ldr	r0, [pc, #116]	; (80017a4 <MX_GPIO_Init+0x10c>)
 8001730:	f005 fd10 	bl	8007154 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CIN2_GPIO_Port, CIN2_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2120      	movs	r1, #32
 8001738:	481b      	ldr	r0, [pc, #108]	; (80017a8 <MX_GPIO_Init+0x110>)
 800173a:	f005 fd0b 	bl	8007154 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
	 UltraSensor_Trigger_Pin LED3_Pin CIN1_Pin */
	GPIO_InitStruct.Pin = OLED_SCL_Pin | OLED_SDA_Pin | OLED_RST_Pin
 800173e:	f44f 53bf 	mov.w	r3, #6112	; 0x17e0
 8001742:	617b      	str	r3, [r7, #20]
			| OLED_DC_Pin | UltraSensor_Trigger_Pin | LED3_Pin | CIN1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001744:	2301      	movs	r3, #1
 8001746:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	4812      	ldr	r0, [pc, #72]	; (80017a0 <MX_GPIO_Init+0x108>)
 8001758:	f005 fb60 	bl	8006e1c <HAL_GPIO_Init>

	/*Configure GPIO pins : AIN2_Pin AIN1_Pin */
	GPIO_InitStruct.Pin = AIN2_Pin | AIN1_Pin;
 800175c:	230c      	movs	r3, #12
 800175e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001768:	2302      	movs	r3, #2
 800176a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	480c      	ldr	r0, [pc, #48]	; (80017a4 <MX_GPIO_Init+0x10c>)
 8001774:	f005 fb52 	bl	8006e1c <HAL_GPIO_Init>

	/*Configure GPIO pin : CIN2_Pin */
	GPIO_InitStruct.Pin = CIN2_Pin;
 8001778:	2320      	movs	r3, #32
 800177a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(CIN2_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	4806      	ldr	r0, [pc, #24]	; (80017a8 <MX_GPIO_Init+0x110>)
 8001790:	f005 fb44 	bl	8006e1c <HAL_GPIO_Init>

}
 8001794:	bf00      	nop
 8001796:	3728      	adds	r7, #40	; 0x28
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40023800 	.word	0x40023800
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40020000 	.word	0x40020000
 80017a8:	40020800 	.word	0x40020800

080017ac <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// For own reference, this function seems to be called after
// interrupt from the HAL_UART_Receive_IT function
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b08b      	sub	sp, #44	; 0x2c
 80017b0:	af02      	add	r7, sp, #8
 80017b2:	6078      	str	r0, [r7, #4]
	//Prevent unused argument(s) compilation warning
	UNUSED(huart);
	static i = 0; //static means it doesn't get erase after every loop

	if (aRxBuffer[0] == 'n') {
 80017b4:	4b27      	ldr	r3, [pc, #156]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b6e      	cmp	r3, #110	; 0x6e
 80017ba:	d106      	bne.n	80017ca <HAL_UART_RxCpltCallback+0x1e>
		i = 0;
 80017bc:	4b26      	ldr	r3, [pc, #152]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
		newCmdReceived = 1;
 80017c2:	4b26      	ldr	r3, [pc, #152]	; (800185c <HAL_UART_RxCpltCallback+0xb0>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]
 80017c8:	e01e      	b.n	8001808 <HAL_UART_RxCpltCallback+0x5c>
	} else if (i == 0) {
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d109      	bne.n	80017e6 <HAL_UART_RxCpltCallback+0x3a>
		cmd = aRxBuffer[0];
 80017d2:	4b20      	ldr	r3, [pc, #128]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	4b22      	ldr	r3, [pc, #136]	; (8001860 <HAL_UART_RxCpltCallback+0xb4>)
 80017d8:	701a      	strb	r2, [r3, #0]
		i++;
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	3301      	adds	r3, #1
 80017e0:	4a1d      	ldr	r2, [pc, #116]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	e010      	b.n	8001808 <HAL_UART_RxCpltCallback+0x5c>
	} else if (i > 0) {
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <HAL_UART_RxCpltCallback+0xac>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	dd0c      	ble.n	8001808 <HAL_UART_RxCpltCallback+0x5c>
		data = data * 10 + (aRxBuffer[0] - '0');
 80017ee:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_UART_RxCpltCallback+0xb8>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	461a      	mov	r2, r3
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4413      	add	r3, r2
 8001802:	3b30      	subs	r3, #48	; 0x30
 8001804:	4a17      	ldr	r2, [pc, #92]	; (8001864 <HAL_UART_RxCpltCallback+0xb8>)
 8001806:	6013      	str	r3, [r2, #0]
//		data = aRxBuffer[0];
	}

	uint8_t message1[20];
	HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 1);
 8001808:	2201      	movs	r2, #1
 800180a:	4912      	ldr	r1, [pc, #72]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 800180c:	4816      	ldr	r0, [pc, #88]	; (8001868 <HAL_UART_RxCpltCallback+0xbc>)
 800180e:	f00a fa60 	bl	800bcd2 <HAL_UART_Receive_IT>
//	HAL_UART_Transmit(&huart3, (uint8_t *) aRxBuffer, 1, 0xFFFF);

	sprintf(message1, "%c %d %c %d\0", aRxBuffer[0], newCmdReceived, cmd, data);
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <HAL_UART_RxCpltCallback+0xa8>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4619      	mov	r1, r3
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <HAL_UART_RxCpltCallback+0xb0>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461c      	mov	r4, r3
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_UART_RxCpltCallback+0xb4>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <HAL_UART_RxCpltCallback+0xb8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f107 000c 	add.w	r0, r7, #12
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	9200      	str	r2, [sp, #0]
 8001830:	4623      	mov	r3, r4
 8001832:	460a      	mov	r2, r1
 8001834:	490d      	ldr	r1, [pc, #52]	; (800186c <HAL_UART_RxCpltCallback+0xc0>)
 8001836:	f00e fed9 	bl	80105ec <siprintf>
	OLED_ShowString(10, 40, message1);
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	461a      	mov	r2, r3
 8001840:	2128      	movs	r1, #40	; 0x28
 8001842:	200a      	movs	r0, #10
 8001844:	f004 fb60 	bl	8005f08 <OLED_ShowString>
	OLED_Refresh_Gram(); //Refresh Ram
 8001848:	f004 f9ea 	bl	8005c20 <OLED_Refresh_Gram>
}
 800184c:	bf00      	nop
 800184e:	3724      	adds	r7, #36	; 0x24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd90      	pop	{r4, r7, pc}
 8001854:	20000428 	.word	0x20000428
 8001858:	20000460 	.word	0x20000460
 800185c:	20000429 	.word	0x20000429
 8001860:	2000042a 	.word	0x2000042a
 8001864:	2000042c 	.word	0x2000042c
 8001868:	200003c0 	.word	0x200003c0
 800186c:	080141f8 	.word	0x080141f8

08001870 <delay>:

//reference: https://controllerstech.com/hcsr04-ultrasonic-sensor-and-stm32/
void delay(uint16_t time) {
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <delay+0x30>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2200      	movs	r2, #0
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim3) < time)
 8001882:	bf00      	nop
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <delay+0x30>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	429a      	cmp	r2, r3
 800188e:	d3f9      	bcc.n	8001884 <delay+0x14>
		;

}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	200002e8 	.word	0x200002e8

080018a4 <HCSR04_Read>:
void HCSR04_Read(void) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(UltraSensor_Trigger_GPIO_Port, UltraSensor_Trigger_Pin,
 80018a8:	2201      	movs	r2, #1
 80018aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ae:	480b      	ldr	r0, [pc, #44]	; (80018dc <HCSR04_Read+0x38>)
 80018b0:	f005 fc50 	bl	8007154 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);  // pull the TRIG pin HIGH
	delay(10);  // wait for 10 us
 80018b4:	200a      	movs	r0, #10
 80018b6:	f7ff ffdb 	bl	8001870 <delay>
	HAL_GPIO_WritePin(UltraSensor_Trigger_GPIO_Port, UltraSensor_Trigger_Pin,
 80018ba:	2200      	movs	r2, #0
 80018bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c0:	4806      	ldr	r0, [pc, #24]	; (80018dc <HCSR04_Read+0x38>)
 80018c2:	f005 fc47 	bl	8007154 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);  // pull the TRIG pin low

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HCSR04_Read+0x3c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68da      	ldr	r2, [r3, #12]
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <HCSR04_Read+0x3c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f042 0202 	orr.w	r2, r2, #2
 80018d4:	60da      	str	r2, [r3, #12]
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000
 80018e0:	200002e8 	.word	0x200002e8
 80018e4:	00000000 	.word	0x00000000

080018e8 <HAL_TIM_IC_CaptureCallback>:

//Called whenever falling or rising edge is captured
// Let's write the callback function
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt source is channel1
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7f1b      	ldrb	r3, [r3, #28]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	f040 8082 	bne.w	80019fe <HAL_TIM_IC_CaptureCallback+0x116>
			{
		if (Is_First_Captured == 0) // if the first value is not captured
 80018fa:	4b45      	ldr	r3, [pc, #276]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x128>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d11a      	bne.n	8001938 <HAL_TIM_IC_CaptureCallback+0x50>
				{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001902:	2100      	movs	r1, #0
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f009 fb7d 	bl	800b004 <HAL_TIM_ReadCapturedValue>
 800190a:	4603      	mov	r3, r0
 800190c:	4a41      	ldr	r2, [pc, #260]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800190e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001910:	4b3f      	ldr	r3, [pc, #252]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6a1a      	ldr	r2, [r3, #32]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 020a 	bic.w	r2, r2, #10
 8001924:	621a      	str	r2, [r3, #32]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6a1a      	ldr	r2, [r3, #32]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0202 	orr.w	r2, r2, #2
 8001934:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8001936:	e062      	b.n	80019fe <HAL_TIM_IC_CaptureCallback+0x116>
		else if (Is_First_Captured == 1)   // if the first is already captured
 8001938:	4b35      	ldr	r3, [pc, #212]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x128>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d15e      	bne.n	80019fe <HAL_TIM_IC_CaptureCallback+0x116>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8001940:	2100      	movs	r1, #0
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f009 fb5e 	bl	800b004 <HAL_TIM_ReadCapturedValue>
 8001948:	4603      	mov	r3, r0
 800194a:	4a33      	ldr	r2, [pc, #204]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 800194c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2200      	movs	r2, #0
 8001954:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1) {
 8001956:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d907      	bls.n	8001972 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2 - IC_Val1;
 8001962:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	4a2b      	ldr	r2, [pc, #172]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x134>)
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	e00f      	b.n	8001992 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2) {
 8001972:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d909      	bls.n	8001992 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 800197e:	4b26      	ldr	r3, [pc, #152]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800198c:	33ff      	adds	r3, #255	; 0xff
 800198e:	4a23      	ldr	r2, [pc, #140]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001990:	6013      	str	r3, [r2, #0]
			Distance = Difference * 0.034 / 2;
 8001992:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fdb4 	bl	8000504 <__aeabi_ui2d>
 800199c:	a31a      	add	r3, pc, #104	; (adr r3, 8001a08 <HAL_TIM_IC_CaptureCallback+0x120>)
 800199e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a2:	f7fe fe29 	bl	80005f8 <__aeabi_dmul>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019b6:	f7fe ff49 	bl	800084c <__aeabi_ddiv>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	f7ff f911 	bl	8000be8 <__aeabi_d2f>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4a15      	ldr	r2, [pc, #84]	; (8001a20 <HAL_TIM_IC_CaptureCallback+0x138>)
 80019ca:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0; // set it back to false
 80019cc:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <HAL_TIM_IC_CaptureCallback+0x128>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6a1a      	ldr	r2, [r3, #32]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 020a 	bic.w	r2, r2, #10
 80019e0:	621a      	str	r2, [r3, #32]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6a12      	ldr	r2, [r2, #32]
 80019ec:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80019ee:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0202 	bic.w	r2, r2, #2
 80019fc:	60da      	str	r2, [r3, #12]
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	b020c49c 	.word	0xb020c49c
 8001a0c:	3fa16872 	.word	0x3fa16872
 8001a10:	20000444 	.word	0x20000444
 8001a14:	20000438 	.word	0x20000438
 8001a18:	2000043c 	.word	0x2000043c
 8001a1c:	20000440 	.word	0x20000440
 8001a20:	20000448 	.word	0x20000448
 8001a24:	20000258 	.word	0x20000258

08001a28 <task2A2L>:
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
}

// 2nd obstacle after turning left
void task2A2L(uint32_t data) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b0a0      	sub	sp, #128	; 0x80
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	uint32_t offset_show[30];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001a30:	2100      	movs	r1, #0
 8001a32:	48aa      	ldr	r0, [pc, #680]	; (8001cdc <task2A2L+0x2b4>)
 8001a34:	f008 fc44 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001a38:	2108      	movs	r1, #8
 8001a3a:	48a8      	ldr	r0, [pc, #672]	; (8001cdc <task2A2L+0x2b4>)
 8001a3c:	f008 fc40 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001a40:	210c      	movs	r1, #12
 8001a42:	48a7      	ldr	r0, [pc, #668]	; (8001ce0 <task2A2L+0x2b8>)
 8001a44:	f008 fc3c 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	2108      	movs	r1, #8
 8001a4c:	48a5      	ldr	r0, [pc, #660]	; (8001ce4 <task2A2L+0x2bc>)
 8001a4e:	f005 fb81 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2104      	movs	r1, #4
 8001a56:	48a3      	ldr	r0, [pc, #652]	; (8001ce4 <task2A2L+0x2bc>)
 8001a58:	f005 fb7c 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a62:	48a1      	ldr	r0, [pc, #644]	; (8001ce8 <task2A2L+0x2c0>)
 8001a64:	f005 fb76 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2120      	movs	r1, #32
 8001a6c:	489f      	ldr	r0, [pc, #636]	; (8001cec <task2A2L+0x2c4>)
 8001a6e:	f005 fb71 	bl	8007154 <HAL_GPIO_WritePin>
	moving = 0;
 8001a72:	4b9f      	ldr	r3, [pc, #636]	; (8001cf0 <task2A2L+0x2c8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]

	if (continueMoving) {
 8001a78:	4b9e      	ldr	r3, [pc, #632]	; (8001cf4 <task2A2L+0x2cc>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 81bf 	beq.w	8001e00 <task2A2L+0x3d8>
		//	uint8_t continueMoving;
		//if picture detected is left Yln
		if (data == 'l') {
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b6c      	cmp	r3, #108	; 0x6c
 8001a86:	f040 80d2 	bne.w	8001c2e <task2A2L+0x206>
			htim1.Instance->CCR4 = 117;
 8001a8a:	4b95      	ldr	r3, [pc, #596]	; (8001ce0 <task2A2L+0x2b8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2275      	movs	r2, #117	; 0x75
 8001a90:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8001a92:	4b92      	ldr	r3, [pc, #584]	; (8001cdc <task2A2L+0x2b4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a9a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2000);
 8001a9c:	4b8f      	ldr	r3, [pc, #572]	; (8001cdc <task2A2L+0x2b4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001aa4:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 1;
 8001aa6:	4b92      	ldr	r3, [pc, #584]	; (8001cf0 <task2A2L+0x2c8>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8001aac:	e020      	b.n	8001af0 <task2A2L+0xc8>
				if ((int) totalAngle >= 60) {
 8001aae:	4b92      	ldr	r3, [pc, #584]	; (8001cf8 <task2A2L+0x2d0>)
 8001ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7ff f84e 	bl	8000b58 <__aeabi_d2iz>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b3b      	cmp	r3, #59	; 0x3b
 8001ac0:	dc1b      	bgt.n	8001afa <task2A2L+0xd2>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001ac2:	4b8d      	ldr	r3, [pc, #564]	; (8001cf8 <task2A2L+0x2d0>)
 8001ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	f7ff f844 	bl	8000b58 <__aeabi_d2iz>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	f107 0308 	add.w	r3, r7, #8
 8001ad6:	4989      	ldr	r1, [pc, #548]	; (8001cfc <task2A2L+0x2d4>)
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f00e fd87 	bl	80105ec <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001ade:	f107 0308 	add.w	r3, r7, #8
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	2114      	movs	r1, #20
 8001ae6:	200a      	movs	r0, #10
 8001ae8:	f004 fa0e 	bl	8005f08 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001aec:	f004 f898 	bl	8005c20 <OLED_Refresh_Gram>
			while (moving) {
 8001af0:	4b7f      	ldr	r3, [pc, #508]	; (8001cf0 <task2A2L+0x2c8>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1da      	bne.n	8001aae <task2A2L+0x86>
 8001af8:	e000      	b.n	8001afc <task2A2L+0xd4>
					break;
 8001afa:	bf00      	nop
			}
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001afc:	4b77      	ldr	r3, [pc, #476]	; (8001cdc <task2A2L+0x2b4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2200      	movs	r2, #0
 8001b02:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8001b04:	4b75      	ldr	r3, [pc, #468]	; (8001cdc <task2A2L+0x2b4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(60, 1);
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8001d00 <task2A2L+0x2d8>
 8001b12:	f001 ff41 	bl	8003998 <moveGyroPID>
			htim1.Instance->CCR4 = RIGHT;
 8001b16:	4b72      	ldr	r3, [pc, #456]	; (8001ce0 <task2A2L+0x2b8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	22fa      	movs	r2, #250	; 0xfa
 8001b1c:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8001b1e:	4b6f      	ldr	r3, [pc, #444]	; (8001cdc <task2A2L+0x2b4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001b26:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001b28:	4b6c      	ldr	r3, [pc, #432]	; (8001cdc <task2A2L+0x2b4>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b30:	63da      	str	r2, [r3, #60]	; 0x3c
			// 		continueMoving = 0;

			while (moving) {
 8001b32:	e021      	b.n	8001b78 <task2A2L+0x150>
				if ((int) totalAngle <= -85) {
 8001b34:	4b70      	ldr	r3, [pc, #448]	; (8001cf8 <task2A2L+0x2d0>)
 8001b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7ff f80b 	bl	8000b58 <__aeabi_d2iz>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8001b48:	db1b      	blt.n	8001b82 <task2A2L+0x15a>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001b4a:	4b6b      	ldr	r3, [pc, #428]	; (8001cf8 <task2A2L+0x2d0>)
 8001b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b50:	4610      	mov	r0, r2
 8001b52:	4619      	mov	r1, r3
 8001b54:	f7ff f800 	bl	8000b58 <__aeabi_d2iz>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	f107 0308 	add.w	r3, r7, #8
 8001b5e:	4967      	ldr	r1, [pc, #412]	; (8001cfc <task2A2L+0x2d4>)
 8001b60:	4618      	mov	r0, r3
 8001b62:	f00e fd43 	bl	80105ec <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001b66:	f107 0308 	add.w	r3, r7, #8
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	2114      	movs	r1, #20
 8001b6e:	200a      	movs	r0, #10
 8001b70:	f004 f9ca 	bl	8005f08 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001b74:	f004 f854 	bl	8005c20 <OLED_Refresh_Gram>
			while (moving) {
 8001b78:	4b5d      	ldr	r3, [pc, #372]	; (8001cf0 <task2A2L+0x2c8>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1d9      	bne.n	8001b34 <task2A2L+0x10c>
 8001b80:	e000      	b.n	8001b84 <task2A2L+0x15c>
					break;
 8001b82:	bf00      	nop
			}

			moving = 0;
 8001b84:	4b5a      	ldr	r3, [pc, #360]	; (8001cf0 <task2A2L+0x2c8>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(50.0, 1);
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8001d04 <task2A2L+0x2dc>
 8001b90:	f002 faee 	bl	8004170 <moveGyroPIDOld>
			moving = 0;
 8001b94:	4b56      	ldr	r3, [pc, #344]	; (8001cf0 <task2A2L+0x2c8>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
			delay(100);
 8001b9a:	2064      	movs	r0, #100	; 0x64
 8001b9c:	f7ff fe68 	bl	8001870 <delay>
			moving = 1;
 8001ba0:	4b53      	ldr	r3, [pc, #332]	; (8001cf0 <task2A2L+0x2c8>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	701a      	strb	r2, [r3, #0]
			htim1.Instance->CCR4 = RIGHT;
 8001ba6:	4b4e      	ldr	r3, [pc, #312]	; (8001ce0 <task2A2L+0x2b8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	22fa      	movs	r2, #250	; 0xfa
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8001bae:	4b4b      	ldr	r3, [pc, #300]	; (8001cdc <task2A2L+0x2b4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001bb6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001bb8:	4b48      	ldr	r3, [pc, #288]	; (8001cdc <task2A2L+0x2b4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bc0:	63da      	str	r2, [r3, #60]	; 0x3c

			while (moving) {
 8001bc2:	e021      	b.n	8001c08 <task2A2L+0x1e0>
				if ((int) totalAngle <= -90) // was 95. was 90
 8001bc4:	4b4c      	ldr	r3, [pc, #304]	; (8001cf8 <task2A2L+0x2d0>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f7fe ffc3 	bl	8000b58 <__aeabi_d2iz>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8001bd8:	db1b      	blt.n	8001c12 <task2A2L+0x1ea>
						{
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001bda:	4b47      	ldr	r3, [pc, #284]	; (8001cf8 <task2A2L+0x2d0>)
 8001bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be0:	4610      	mov	r0, r2
 8001be2:	4619      	mov	r1, r3
 8001be4:	f7fe ffb8 	bl	8000b58 <__aeabi_d2iz>
 8001be8:	4602      	mov	r2, r0
 8001bea:	f107 0308 	add.w	r3, r7, #8
 8001bee:	4943      	ldr	r1, [pc, #268]	; (8001cfc <task2A2L+0x2d4>)
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f00e fcfb 	bl	80105ec <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001bf6:	f107 0308 	add.w	r3, r7, #8
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	2114      	movs	r1, #20
 8001bfe:	200a      	movs	r0, #10
 8001c00:	f004 f982 	bl	8005f08 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001c04:	f004 f80c 	bl	8005c20 <OLED_Refresh_Gram>
			while (moving) {
 8001c08:	4b39      	ldr	r3, [pc, #228]	; (8001cf0 <task2A2L+0x2c8>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1d9      	bne.n	8001bc4 <task2A2L+0x19c>
 8001c10:	e000      	b.n	8001c14 <task2A2L+0x1ec>
					break;
 8001c12:	bf00      	nop
			}
			actualAngle = 0;
 8001c14:	493c      	ldr	r1, [pc, #240]	; (8001d08 <task2A2L+0x2e0>)
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	e9c1 2300 	strd	r2, r3, [r1]
			moving = 0;
 8001c22:	4b33      	ldr	r3, [pc, #204]	; (8001cf0 <task2A2L+0x2c8>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
			moveUltraEndLeft();
 8001c28:	f001 fc8c 	bl	8003544 <moveUltraEndLeft>
 8001c2c:	e2aa      	b.n	8002184 <task2A2L+0x75c>

		} else {
			htim1.Instance->CCR4 = RIGHT;
 8001c2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ce0 <task2A2L+0x2b8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	22fa      	movs	r2, #250	; 0xfa
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8001c36:	4b29      	ldr	r3, [pc, #164]	; (8001cdc <task2A2L+0x2b4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001c3e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001c40:	4b26      	ldr	r3, [pc, #152]	; (8001cdc <task2A2L+0x2b4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c48:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 1;
 8001c4a:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <task2A2L+0x2c8>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8001c50:	e021      	b.n	8001c96 <task2A2L+0x26e>
				if ((int) totalAngle <= -1 * 60) {
 8001c52:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <task2A2L+0x2d0>)
 8001c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f7fe ff7c 	bl	8000b58 <__aeabi_d2iz>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f113 0f3b 	cmn.w	r3, #59	; 0x3b
 8001c66:	db1b      	blt.n	8001ca0 <task2A2L+0x278>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001c68:	4b23      	ldr	r3, [pc, #140]	; (8001cf8 <task2A2L+0x2d0>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	4610      	mov	r0, r2
 8001c70:	4619      	mov	r1, r3
 8001c72:	f7fe ff71 	bl	8000b58 <__aeabi_d2iz>
 8001c76:	4602      	mov	r2, r0
 8001c78:	f107 0308 	add.w	r3, r7, #8
 8001c7c:	491f      	ldr	r1, [pc, #124]	; (8001cfc <task2A2L+0x2d4>)
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f00e fcb4 	bl	80105ec <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001c84:	f107 0308 	add.w	r3, r7, #8
 8001c88:	461a      	mov	r2, r3
 8001c8a:	2114      	movs	r1, #20
 8001c8c:	200a      	movs	r0, #10
 8001c8e:	f004 f93b 	bl	8005f08 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001c92:	f003 ffc5 	bl	8005c20 <OLED_Refresh_Gram>
			while (moving) {
 8001c96:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <task2A2L+0x2c8>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1d9      	bne.n	8001c52 <task2A2L+0x22a>
 8001c9e:	e000      	b.n	8001ca2 <task2A2L+0x27a>
					break;
 8001ca0:	bf00      	nop
			}
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <task2A2L+0x2b4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <task2A2L+0x2b4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(45.0, 1);
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8001d0c <task2A2L+0x2e4>
 8001cb8:	f001 fe6e 	bl	8003998 <moveGyroPID>
			htim1.Instance->CCR4 = 110;
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <task2A2L+0x2b8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	226e      	movs	r2, #110	; 0x6e
 8001cc2:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <task2A2L+0x2b4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ccc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 8001cce:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <task2A2L+0x2b4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001cd6:	63da      	str	r2, [r3, #60]	; 0x3c
			while (moving) {
 8001cd8:	e03b      	b.n	8001d52 <task2A2L+0x32a>
 8001cda:	bf00      	nop
 8001cdc:	20000378 	.word	0x20000378
 8001ce0:	20000258 	.word	0x20000258
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40020800 	.word	0x40020800
 8001cf0:	20000414 	.word	0x20000414
 8001cf4:	20000416 	.word	0x20000416
 8001cf8:	20000418 	.word	0x20000418
 8001cfc:	08014208 	.word	0x08014208
 8001d00:	42700000 	.word	0x42700000
 8001d04:	42480000 	.word	0x42480000
 8001d08:	20000420 	.word	0x20000420
 8001d0c:	42340000 	.word	0x42340000
				if ((int) totalAngle >= 85) {
 8001d10:	4ba9      	ldr	r3, [pc, #676]	; (8001fb8 <task2A2L+0x590>)
 8001d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d16:	4610      	mov	r0, r2
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f7fe ff1d 	bl	8000b58 <__aeabi_d2iz>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b54      	cmp	r3, #84	; 0x54
 8001d22:	dc1b      	bgt.n	8001d5c <task2A2L+0x334>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001d24:	4ba4      	ldr	r3, [pc, #656]	; (8001fb8 <task2A2L+0x590>)
 8001d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f7fe ff13 	bl	8000b58 <__aeabi_d2iz>
 8001d32:	4602      	mov	r2, r0
 8001d34:	f107 0308 	add.w	r3, r7, #8
 8001d38:	49a0      	ldr	r1, [pc, #640]	; (8001fbc <task2A2L+0x594>)
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f00e fc56 	bl	80105ec <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001d40:	f107 0308 	add.w	r3, r7, #8
 8001d44:	461a      	mov	r2, r3
 8001d46:	2114      	movs	r1, #20
 8001d48:	200a      	movs	r0, #10
 8001d4a:	f004 f8dd 	bl	8005f08 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001d4e:	f003 ff67 	bl	8005c20 <OLED_Refresh_Gram>
			while (moving) {
 8001d52:	4b9b      	ldr	r3, [pc, #620]	; (8001fc0 <task2A2L+0x598>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1da      	bne.n	8001d10 <task2A2L+0x2e8>
 8001d5a:	e000      	b.n	8001d5e <task2A2L+0x336>
					break;
 8001d5c:	bf00      	nop
			}
			moving = 0;
 8001d5e:	4b98      	ldr	r3, [pc, #608]	; (8001fc0 <task2A2L+0x598>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(70.0, 1); // prev 23
 8001d64:	2001      	movs	r0, #1
 8001d66:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8001fc4 <task2A2L+0x59c>
 8001d6a:	f002 fa01 	bl	8004170 <moveGyroPIDOld>
			moving = 0;
 8001d6e:	4b94      	ldr	r3, [pc, #592]	; (8001fc0 <task2A2L+0x598>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
			htim1.Instance->CCR4 = 115;
 8001d74:	4b94      	ldr	r3, [pc, #592]	; (8001fc8 <task2A2L+0x5a0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2273      	movs	r2, #115	; 0x73
 8001d7a:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8001d7c:	4b93      	ldr	r3, [pc, #588]	; (8001fcc <task2A2L+0x5a4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d84:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 8001d86:	4b91      	ldr	r3, [pc, #580]	; (8001fcc <task2A2L+0x5a4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d8e:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100);
 8001d90:	2064      	movs	r0, #100	; 0x64
 8001d92:	f7ff fd6d 	bl	8001870 <delay>
			moving = 1;
 8001d96:	4b8a      	ldr	r3, [pc, #552]	; (8001fc0 <task2A2L+0x598>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8001d9c:	e020      	b.n	8001de0 <task2A2L+0x3b8>
				if ((int) totalAngle >= 92) {
 8001d9e:	4b86      	ldr	r3, [pc, #536]	; (8001fb8 <task2A2L+0x590>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	f7fe fed6 	bl	8000b58 <__aeabi_d2iz>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b5b      	cmp	r3, #91	; 0x5b
 8001db0:	dc1b      	bgt.n	8001dea <task2A2L+0x3c2>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001db2:	4b81      	ldr	r3, [pc, #516]	; (8001fb8 <task2A2L+0x590>)
 8001db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f7fe fecc 	bl	8000b58 <__aeabi_d2iz>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f107 0308 	add.w	r3, r7, #8
 8001dc6:	497d      	ldr	r1, [pc, #500]	; (8001fbc <task2A2L+0x594>)
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f00e fc0f 	bl	80105ec <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001dce:	f107 0308 	add.w	r3, r7, #8
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	2114      	movs	r1, #20
 8001dd6:	200a      	movs	r0, #10
 8001dd8:	f004 f896 	bl	8005f08 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001ddc:	f003 ff20 	bl	8005c20 <OLED_Refresh_Gram>
			while (moving) {
 8001de0:	4b77      	ldr	r3, [pc, #476]	; (8001fc0 <task2A2L+0x598>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1da      	bne.n	8001d9e <task2A2L+0x376>
 8001de8:	e000      	b.n	8001dec <task2A2L+0x3c4>
					break;
 8001dea:	bf00      	nop
			}
			actualAngle = 0;
 8001dec:	4978      	ldr	r1, [pc, #480]	; (8001fd0 <task2A2L+0x5a8>)
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	e9c1 2300 	strd	r2, r3, [r1]
			moveUltraEnd();
 8001dfa:	f001 f993 	bl	8003124 <moveUltraEnd>
 8001dfe:	e1c1      	b.n	8002184 <task2A2L+0x75c>
		}
	} else {
		// meaning continueMoving is 0, indicating that the car
		// stopped because ultrasonic distance hit before target angle hit
		//if picture detected is left Yln
		if (data == 'l') {
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b6c      	cmp	r3, #108	; 0x6c
 8001e04:	f040 80ea 	bne.w	8001fdc <task2A2L+0x5b4>
			htim1.Instance->CCR4 = 115;
 8001e08:	4b6f      	ldr	r3, [pc, #444]	; (8001fc8 <task2A2L+0x5a0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2273      	movs	r2, #115	; 0x73
 8001e0e:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8001e10:	4b6e      	ldr	r3, [pc, #440]	; (8001fcc <task2A2L+0x5a4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e18:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 8001e1a:	4b6c      	ldr	r3, [pc, #432]	; (8001fcc <task2A2L+0x5a4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e22:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 1;
 8001e24:	4b66      	ldr	r3, [pc, #408]	; (8001fc0 <task2A2L+0x598>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8001e2a:	e020      	b.n	8001e6e <task2A2L+0x446>
				if ((int) actualAngle >= 40) {
 8001e2c:	4b68      	ldr	r3, [pc, #416]	; (8001fd0 <task2A2L+0x5a8>)
 8001e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	f7fe fe8f 	bl	8000b58 <__aeabi_d2iz>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b27      	cmp	r3, #39	; 0x27
 8001e3e:	dc1b      	bgt.n	8001e78 <task2A2L+0x450>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001e40:	4b5d      	ldr	r3, [pc, #372]	; (8001fb8 <task2A2L+0x590>)
 8001e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f7fe fe85 	bl	8000b58 <__aeabi_d2iz>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	f107 0308 	add.w	r3, r7, #8
 8001e54:	4959      	ldr	r1, [pc, #356]	; (8001fbc <task2A2L+0x594>)
 8001e56:	4618      	mov	r0, r3
 8001e58:	f00e fbc8 	bl	80105ec <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001e5c:	f107 0308 	add.w	r3, r7, #8
 8001e60:	461a      	mov	r2, r3
 8001e62:	2114      	movs	r1, #20
 8001e64:	200a      	movs	r0, #10
 8001e66:	f004 f84f 	bl	8005f08 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001e6a:	f003 fed9 	bl	8005c20 <OLED_Refresh_Gram>
			while (moving) {
 8001e6e:	4b54      	ldr	r3, [pc, #336]	; (8001fc0 <task2A2L+0x598>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1da      	bne.n	8001e2c <task2A2L+0x404>
 8001e76:	e000      	b.n	8001e7a <task2A2L+0x452>
					break;
 8001e78:	bf00      	nop
			}
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8001e7a:	4b54      	ldr	r3, [pc, #336]	; (8001fcc <task2A2L+0x5a4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8001e82:	4b52      	ldr	r3, [pc, #328]	; (8001fcc <task2A2L+0x5a4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2200      	movs	r2, #0
 8001e88:	63da      	str	r2, [r3, #60]	; 0x3c
			moveGyroPID(73.0, 1);
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8001fd4 <task2A2L+0x5ac>
 8001e90:	f001 fd82 	bl	8003998 <moveGyroPID>
			htim1.Instance->CCR4 = RIGHT;
 8001e94:	4b4c      	ldr	r3, [pc, #304]	; (8001fc8 <task2A2L+0x5a0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	22fa      	movs	r2, #250	; 0xfa
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8001e9c:	4b4b      	ldr	r3, [pc, #300]	; (8001fcc <task2A2L+0x5a4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ea4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001ea6:	4b49      	ldr	r3, [pc, #292]	; (8001fcc <task2A2L+0x5a4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001eae:	63da      	str	r2, [r3, #60]	; 0x3c
			// 		continueMoving = 0;

			while (moving) {
 8001eb0:	e021      	b.n	8001ef6 <task2A2L+0x4ce>
				if ((int) actualAngle <= -1 * 90) {
 8001eb2:	4b47      	ldr	r3, [pc, #284]	; (8001fd0 <task2A2L+0x5a8>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f7fe fe4c 	bl	8000b58 <__aeabi_d2iz>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8001ec6:	db1b      	blt.n	8001f00 <task2A2L+0x4d8>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001ec8:	4b3b      	ldr	r3, [pc, #236]	; (8001fb8 <task2A2L+0x590>)
 8001eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f7fe fe41 	bl	8000b58 <__aeabi_d2iz>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	f107 0308 	add.w	r3, r7, #8
 8001edc:	4937      	ldr	r1, [pc, #220]	; (8001fbc <task2A2L+0x594>)
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f00e fb84 	bl	80105ec <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001ee4:	f107 0308 	add.w	r3, r7, #8
 8001ee8:	461a      	mov	r2, r3
 8001eea:	2114      	movs	r1, #20
 8001eec:	200a      	movs	r0, #10
 8001eee:	f004 f80b 	bl	8005f08 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001ef2:	f003 fe95 	bl	8005c20 <OLED_Refresh_Gram>
			while (moving) {
 8001ef6:	4b32      	ldr	r3, [pc, #200]	; (8001fc0 <task2A2L+0x598>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1d9      	bne.n	8001eb2 <task2A2L+0x48a>
 8001efe:	e000      	b.n	8001f02 <task2A2L+0x4da>
					break;
 8001f00:	bf00      	nop
			}

			moving = 0;
 8001f02:	4b2f      	ldr	r3, [pc, #188]	; (8001fc0 <task2A2L+0x598>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(40.0, 1);
 8001f08:	2001      	movs	r0, #1
 8001f0a:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8001fd8 <task2A2L+0x5b0>
 8001f0e:	f002 f92f 	bl	8004170 <moveGyroPIDOld>
			moving = 0;
 8001f12:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <task2A2L+0x598>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
			htim1.Instance->CCR4 = RIGHT;
 8001f18:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <task2A2L+0x5a0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	22fa      	movs	r2, #250	; 0xfa
 8001f1e:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8001f20:	4b2a      	ldr	r3, [pc, #168]	; (8001fcc <task2A2L+0x5a4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f28:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001f2a:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <task2A2L+0x5a4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f32:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100);
 8001f34:	2064      	movs	r0, #100	; 0x64
 8001f36:	f7ff fc9b 	bl	8001870 <delay>
			moving = 0;
 8001f3a:	4b21      	ldr	r3, [pc, #132]	; (8001fc0 <task2A2L+0x598>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
			osDelay(1);
 8001f40:	2001      	movs	r0, #1
 8001f42:	f00a ff70 	bl	800ce26 <osDelay>
			moving = 1;
 8001f46:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <task2A2L+0x598>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8001f4c:	e021      	b.n	8001f92 <task2A2L+0x56a>
				if ((int) totalAngle <= -1 * 90) // note: i changed to actualAngle to try, original was totalAngle = -100
 8001f4e:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <task2A2L+0x590>)
 8001f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f54:	4610      	mov	r0, r2
 8001f56:	4619      	mov	r1, r3
 8001f58:	f7fe fdfe 	bl	8000b58 <__aeabi_d2iz>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8001f62:	db1b      	blt.n	8001f9c <task2A2L+0x574>
						{
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8001f64:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <task2A2L+0x590>)
 8001f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f7fe fdf3 	bl	8000b58 <__aeabi_d2iz>
 8001f72:	4602      	mov	r2, r0
 8001f74:	f107 0308 	add.w	r3, r7, #8
 8001f78:	4910      	ldr	r1, [pc, #64]	; (8001fbc <task2A2L+0x594>)
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f00e fb36 	bl	80105ec <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8001f80:	f107 0308 	add.w	r3, r7, #8
 8001f84:	461a      	mov	r2, r3
 8001f86:	2114      	movs	r1, #20
 8001f88:	200a      	movs	r0, #10
 8001f8a:	f003 ffbd 	bl	8005f08 <OLED_ShowString>
				OLED_Refresh_Gram();
 8001f8e:	f003 fe47 	bl	8005c20 <OLED_Refresh_Gram>
			while (moving) {
 8001f92:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <task2A2L+0x598>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1d9      	bne.n	8001f4e <task2A2L+0x526>
 8001f9a:	e000      	b.n	8001f9e <task2A2L+0x576>
					break;
 8001f9c:	bf00      	nop
			}
			actualAngle = 0;
 8001f9e:	490c      	ldr	r1, [pc, #48]	; (8001fd0 <task2A2L+0x5a8>)
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	e9c1 2300 	strd	r2, r3, [r1]
			moving = 0;
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <task2A2L+0x598>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
			moveUltraEndLeft();
 8001fb2:	f001 fac7 	bl	8003544 <moveUltraEndLeft>
 8001fb6:	e0e5      	b.n	8002184 <task2A2L+0x75c>
 8001fb8:	20000418 	.word	0x20000418
 8001fbc:	08014208 	.word	0x08014208
 8001fc0:	20000414 	.word	0x20000414
 8001fc4:	428c0000 	.word	0x428c0000
 8001fc8:	20000258 	.word	0x20000258
 8001fcc:	20000378 	.word	0x20000378
 8001fd0:	20000420 	.word	0x20000420
 8001fd4:	42920000 	.word	0x42920000
 8001fd8:	42200000 	.word	0x42200000

		} else if (data == 'r') {
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b72      	cmp	r3, #114	; 0x72
 8001fe0:	f040 80d0 	bne.w	8002184 <task2A2L+0x75c>
			htim1.Instance->CCR4 = RIGHT;
 8001fe4:	4b7a      	ldr	r3, [pc, #488]	; (80021d0 <task2A2L+0x7a8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	22fa      	movs	r2, #250	; 0xfa
 8001fea:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8001fec:	4b79      	ldr	r3, [pc, #484]	; (80021d4 <task2A2L+0x7ac>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ff4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 1000);
 8001ff6:	4b77      	ldr	r3, [pc, #476]	; (80021d4 <task2A2L+0x7ac>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ffe:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 1;
 8002000:	4b75      	ldr	r3, [pc, #468]	; (80021d8 <task2A2L+0x7b0>)
 8002002:	2201      	movs	r2, #1
 8002004:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8002006:	e021      	b.n	800204c <task2A2L+0x624>
				if ((int) totalAngle <= -1 * 60) // was 65
 8002008:	4b74      	ldr	r3, [pc, #464]	; (80021dc <task2A2L+0x7b4>)
 800200a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200e:	4610      	mov	r0, r2
 8002010:	4619      	mov	r1, r3
 8002012:	f7fe fda1 	bl	8000b58 <__aeabi_d2iz>
 8002016:	4603      	mov	r3, r0
 8002018:	f113 0f3b 	cmn.w	r3, #59	; 0x3b
 800201c:	db1b      	blt.n	8002056 <task2A2L+0x62e>
						{
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 800201e:	4b6f      	ldr	r3, [pc, #444]	; (80021dc <task2A2L+0x7b4>)
 8002020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	f7fe fd96 	bl	8000b58 <__aeabi_d2iz>
 800202c:	4602      	mov	r2, r0
 800202e:	f107 0308 	add.w	r3, r7, #8
 8002032:	496b      	ldr	r1, [pc, #428]	; (80021e0 <task2A2L+0x7b8>)
 8002034:	4618      	mov	r0, r3
 8002036:	f00e fad9 	bl	80105ec <siprintf>
				OLED_ShowString(10, 20, offset_show);
 800203a:	f107 0308 	add.w	r3, r7, #8
 800203e:	461a      	mov	r2, r3
 8002040:	2114      	movs	r1, #20
 8002042:	200a      	movs	r0, #10
 8002044:	f003 ff60 	bl	8005f08 <OLED_ShowString>
				OLED_Refresh_Gram();
 8002048:	f003 fdea 	bl	8005c20 <OLED_Refresh_Gram>
			while (moving) {
 800204c:	4b62      	ldr	r3, [pc, #392]	; (80021d8 <task2A2L+0x7b0>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1d9      	bne.n	8002008 <task2A2L+0x5e0>
 8002054:	e000      	b.n	8002058 <task2A2L+0x630>
					break;
 8002056:	bf00      	nop
			}
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002058:	4b5e      	ldr	r3, [pc, #376]	; (80021d4 <task2A2L+0x7ac>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2200      	movs	r2, #0
 800205e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8002060:	4b5c      	ldr	r3, [pc, #368]	; (80021d4 <task2A2L+0x7ac>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2200      	movs	r2, #0
 8002066:	63da      	str	r2, [r3, #60]	; 0x3c
			moving = 0;
 8002068:	4b5b      	ldr	r3, [pc, #364]	; (80021d8 <task2A2L+0x7b0>)
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(45.0, 1); // was 55
 800206e:	2001      	movs	r0, #1
 8002070:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 80021e4 <task2A2L+0x7bc>
 8002074:	f002 f87c 	bl	8004170 <moveGyroPIDOld>
			htim1.Instance->CCR4 = 110;
 8002078:	4b55      	ldr	r3, [pc, #340]	; (80021d0 <task2A2L+0x7a8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	226e      	movs	r2, #110	; 0x6e
 800207e:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8002080:	4b54      	ldr	r3, [pc, #336]	; (80021d4 <task2A2L+0x7ac>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002088:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 800208a:	4b52      	ldr	r3, [pc, #328]	; (80021d4 <task2A2L+0x7ac>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002092:	63da      	str	r2, [r3, #60]	; 0x3c
			while (moving) {
 8002094:	e020      	b.n	80020d8 <task2A2L+0x6b0>
				if ((int) actualAngle >= 83) {
 8002096:	4b54      	ldr	r3, [pc, #336]	; (80021e8 <task2A2L+0x7c0>)
 8002098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209c:	4610      	mov	r0, r2
 800209e:	4619      	mov	r1, r3
 80020a0:	f7fe fd5a 	bl	8000b58 <__aeabi_d2iz>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b52      	cmp	r3, #82	; 0x52
 80020a8:	dc1b      	bgt.n	80020e2 <task2A2L+0x6ba>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 80020aa:	4b4c      	ldr	r3, [pc, #304]	; (80021dc <task2A2L+0x7b4>)
 80020ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b0:	4610      	mov	r0, r2
 80020b2:	4619      	mov	r1, r3
 80020b4:	f7fe fd50 	bl	8000b58 <__aeabi_d2iz>
 80020b8:	4602      	mov	r2, r0
 80020ba:	f107 0308 	add.w	r3, r7, #8
 80020be:	4948      	ldr	r1, [pc, #288]	; (80021e0 <task2A2L+0x7b8>)
 80020c0:	4618      	mov	r0, r3
 80020c2:	f00e fa93 	bl	80105ec <siprintf>
				OLED_ShowString(10, 20, offset_show);
 80020c6:	f107 0308 	add.w	r3, r7, #8
 80020ca:	461a      	mov	r2, r3
 80020cc:	2114      	movs	r1, #20
 80020ce:	200a      	movs	r0, #10
 80020d0:	f003 ff1a 	bl	8005f08 <OLED_ShowString>
				OLED_Refresh_Gram();
 80020d4:	f003 fda4 	bl	8005c20 <OLED_Refresh_Gram>
			while (moving) {
 80020d8:	4b3f      	ldr	r3, [pc, #252]	; (80021d8 <task2A2L+0x7b0>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1da      	bne.n	8002096 <task2A2L+0x66e>
 80020e0:	e000      	b.n	80020e4 <task2A2L+0x6bc>
					break;
 80020e2:	bf00      	nop
			}
			moving = 0;
 80020e4:	4b3c      	ldr	r3, [pc, #240]	; (80021d8 <task2A2L+0x7b0>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
			moveGyroPIDOld(60.0, 1); // prev 23
 80020ea:	2001      	movs	r0, #1
 80020ec:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 80021ec <task2A2L+0x7c4>
 80020f0:	f002 f83e 	bl	8004170 <moveGyroPIDOld>
			moving = 0;
 80020f4:	4b38      	ldr	r3, [pc, #224]	; (80021d8 <task2A2L+0x7b0>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
			htim1.Instance->CCR4 = 115;
 80020fa:	4b35      	ldr	r3, [pc, #212]	; (80021d0 <task2A2L+0x7a8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2273      	movs	r2, #115	; 0x73
 8002100:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1000);
 8002102:	4b34      	ldr	r3, [pc, #208]	; (80021d4 <task2A2L+0x7ac>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800210a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 800210c:	4b31      	ldr	r3, [pc, #196]	; (80021d4 <task2A2L+0x7ac>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002114:	63da      	str	r2, [r3, #60]	; 0x3c
			delay(100); // delay because gyro needs time to reset
 8002116:	2064      	movs	r0, #100	; 0x64
 8002118:	f7ff fbaa 	bl	8001870 <delay>
			moving = 1;
 800211c:	4b2e      	ldr	r3, [pc, #184]	; (80021d8 <task2A2L+0x7b0>)
 800211e:	2201      	movs	r2, #1
 8002120:	701a      	strb	r2, [r3, #0]
			while (moving) {
 8002122:	e020      	b.n	8002166 <task2A2L+0x73e>
				if ((int) totalAngle >= 105) {
 8002124:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <task2A2L+0x7b4>)
 8002126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212a:	4610      	mov	r0, r2
 800212c:	4619      	mov	r1, r3
 800212e:	f7fe fd13 	bl	8000b58 <__aeabi_d2iz>
 8002132:	4603      	mov	r3, r0
 8002134:	2b68      	cmp	r3, #104	; 0x68
 8002136:	dc1b      	bgt.n	8002170 <task2A2L+0x748>
					break;
				}
				sprintf(offset_show, "angle %5d\0", (int) (totalAngle));
 8002138:	4b28      	ldr	r3, [pc, #160]	; (80021dc <task2A2L+0x7b4>)
 800213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	f7fe fd09 	bl	8000b58 <__aeabi_d2iz>
 8002146:	4602      	mov	r2, r0
 8002148:	f107 0308 	add.w	r3, r7, #8
 800214c:	4924      	ldr	r1, [pc, #144]	; (80021e0 <task2A2L+0x7b8>)
 800214e:	4618      	mov	r0, r3
 8002150:	f00e fa4c 	bl	80105ec <siprintf>
				OLED_ShowString(10, 20, offset_show);
 8002154:	f107 0308 	add.w	r3, r7, #8
 8002158:	461a      	mov	r2, r3
 800215a:	2114      	movs	r1, #20
 800215c:	200a      	movs	r0, #10
 800215e:	f003 fed3 	bl	8005f08 <OLED_ShowString>
				OLED_Refresh_Gram();
 8002162:	f003 fd5d 	bl	8005c20 <OLED_Refresh_Gram>
			while (moving) {
 8002166:	4b1c      	ldr	r3, [pc, #112]	; (80021d8 <task2A2L+0x7b0>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1da      	bne.n	8002124 <task2A2L+0x6fc>
 800216e:	e000      	b.n	8002172 <task2A2L+0x74a>
					break;
 8002170:	bf00      	nop
			}
			actualAngle = 0;
 8002172:	491d      	ldr	r1, [pc, #116]	; (80021e8 <task2A2L+0x7c0>)
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	e9c1 2300 	strd	r2, r3, [r1]
			moveUltraEnd();
 8002180:	f000 ffd0 	bl	8003124 <moveUltraEnd>
		}
	}

	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <task2A2L+0x7ac>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2200      	movs	r2, #0
 800218a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <task2A2L+0x7ac>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2200      	movs	r2, #0
 8002192:	63da      	str	r2, [r3, #60]	; 0x3c
	htim1.Instance->CCR4 = STRAIGHT;
 8002194:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <task2A2L+0x7a8>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2297      	movs	r2, #151	; 0x97
 800219a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800219c:	2201      	movs	r2, #1
 800219e:	2108      	movs	r1, #8
 80021a0:	4813      	ldr	r0, [pc, #76]	; (80021f0 <task2A2L+0x7c8>)
 80021a2:	f004 ffd7 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2104      	movs	r1, #4
 80021aa:	4811      	ldr	r0, [pc, #68]	; (80021f0 <task2A2L+0x7c8>)
 80021ac:	f004 ffd2 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80021b0:	2201      	movs	r2, #1
 80021b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021b6:	480f      	ldr	r0, [pc, #60]	; (80021f4 <task2A2L+0x7cc>)
 80021b8:	f004 ffcc 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80021bc:	2200      	movs	r2, #0
 80021be:	2120      	movs	r1, #32
 80021c0:	480d      	ldr	r0, [pc, #52]	; (80021f8 <task2A2L+0x7d0>)
 80021c2:	f004 ffc7 	bl	8007154 <HAL_GPIO_WritePin>
}
 80021c6:	bf00      	nop
 80021c8:	3780      	adds	r7, #128	; 0x80
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000258 	.word	0x20000258
 80021d4:	20000378 	.word	0x20000378
 80021d8:	20000414 	.word	0x20000414
 80021dc:	20000418 	.word	0x20000418
 80021e0:	08014208 	.word	0x08014208
 80021e4:	42340000 	.word	0x42340000
 80021e8:	20000420 	.word	0x20000420
 80021ec:	42700000 	.word	0x42700000
 80021f0:	40020000 	.word	0x40020000
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40020800 	.word	0x40020800

080021fc <secObstL>:

void secObstL() {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
//
//	osDelay(200);
//
//	moveGyroPID(distanceTraveled, 1);

	left90();
 8002200:	f002 fe80 	bl	8004f04 <left90>
	osDelay(100);
 8002204:	2064      	movs	r0, #100	; 0x64
 8002206:	f00a fe0e 	bl	800ce26 <osDelay>
	right90();
 800220a:	f003 f8df 	bl	80053cc <right90>
	osDelay(100);
 800220e:	2064      	movs	r0, #100	; 0x64
 8002210:	f00a fe09 	bl	800ce26 <osDelay>
	right90();
 8002214:	f003 f8da 	bl	80053cc <right90>
	osDelay(300);
 8002218:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800221c:	f00a fe03 	bl	800ce26 <osDelay>
	move(0,0);
 8002220:	2000      	movs	r0, #0
 8002222:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8002264 <secObstL+0x68>
 8002226:	f002 fa7d 	bl	8004724 <move>
	moveGyroPID(60, 1);
 800222a:	2001      	movs	r0, #1
 800222c:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8002268 <secObstL+0x6c>
 8002230:	f001 fbb2 	bl	8003998 <moveGyroPID>
	osDelay(100);
 8002234:	2064      	movs	r0, #100	; 0x64
 8002236:	f00a fdf6 	bl	800ce26 <osDelay>
	right90();
 800223a:	f003 f8c7 	bl	80053cc <right90>
	osDelay(100);
 800223e:	2064      	movs	r0, #100	; 0x64
 8002240:	f00a fdf1 	bl	800ce26 <osDelay>
	move(0,0);
 8002244:	2000      	movs	r0, #0
 8002246:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8002264 <secObstL+0x68>
 800224a:	f002 fa6b 	bl	8004724 <move>
	moveGyroPID(distanceTraveled, 1);
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <secObstL+0x70>)
 8002250:	edd3 7a00 	vldr	s15, [r3]
 8002254:	2001      	movs	r0, #1
 8002256:	eeb0 0a67 	vmov.f32	s0, s15
 800225a:	f001 fb9d 	bl	8003998 <moveGyroPID>
//	right90();
//	osDelay(100);
//	left90();
//	osDelay(100);
//	parkingMoveUltra();
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	00000000 	.word	0x00000000
 8002268:	42700000 	.word	0x42700000
 800226c:	20000434 	.word	0x20000434

08002270 <secObstR>:

void secObstR() {
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
	osDelay(100);
 8002276:	2064      	movs	r0, #100	; 0x64
 8002278:	f00a fdd5 	bl	800ce26 <osDelay>
	right90();
 800227c:	f003 f8a6 	bl	80053cc <right90>
	osDelay(100);
 8002280:	2064      	movs	r0, #100	; 0x64
 8002282:	f00a fdd0 	bl	800ce26 <osDelay>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 8002286:	4b29      	ldr	r3, [pc, #164]	; (800232c <secObstR+0xbc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2297      	movs	r2, #151	; 0x97
 800228c:	641a      	str	r2, [r3, #64]	; 0x40

	moveGyroPID(5, 1);
 800228e:	2001      	movs	r0, #1
 8002290:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002294:	f001 fb80 	bl	8003998 <moveGyroPID>
	osDelay(100);
 8002298:	2064      	movs	r0, #100	; 0x64
 800229a:	f00a fdc4 	bl	800ce26 <osDelay>
	left90();
 800229e:	f002 fe31 	bl	8004f04 <left90>
	uint8_t messageA[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80022a2:	2100      	movs	r1, #0
 80022a4:	4822      	ldr	r0, [pc, #136]	; (8002330 <secObstR+0xc0>)
 80022a6:	f008 f80b 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80022aa:	2108      	movs	r1, #8
 80022ac:	4820      	ldr	r0, [pc, #128]	; (8002330 <secObstR+0xc0>)
 80022ae:	f008 f807 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80022b2:	210c      	movs	r1, #12
 80022b4:	481d      	ldr	r0, [pc, #116]	; (800232c <secObstR+0xbc>)
 80022b6:	f008 f803 	bl	800a2c0 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 80022ba:	4b1c      	ldr	r3, [pc, #112]	; (800232c <secObstR+0xbc>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2297      	movs	r2, #151	; 0x97
 80022c0:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80022c2:	2201      	movs	r2, #1
 80022c4:	2108      	movs	r1, #8
 80022c6:	481b      	ldr	r0, [pc, #108]	; (8002334 <secObstR+0xc4>)
 80022c8:	f004 ff44 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80022cc:	2200      	movs	r2, #0
 80022ce:	2104      	movs	r1, #4
 80022d0:	4818      	ldr	r0, [pc, #96]	; (8002334 <secObstR+0xc4>)
 80022d2:	f004 ff3f 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80022d6:	2201      	movs	r2, #1
 80022d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022dc:	4816      	ldr	r0, [pc, #88]	; (8002338 <secObstR+0xc8>)
 80022de:	f004 ff39 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2120      	movs	r1, #32
 80022e6:	4815      	ldr	r0, [pc, #84]	; (800233c <secObstR+0xcc>)
 80022e8:	f004 ff34 	bl	8007154 <HAL_GPIO_WritePin>
	moving = 1;
 80022ec:	4b14      	ldr	r3, [pc, #80]	; (8002340 <secObstR+0xd0>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	701a      	strb	r2, [r3, #0]
	osDelay(200);
 80022f2:	20c8      	movs	r0, #200	; 0xc8
 80022f4:	f00a fd97 	bl	800ce26 <osDelay>
	moveGyroPID(10, 1);
 80022f8:	2001      	movs	r0, #1
 80022fa:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80022fe:	f001 fb4b 	bl	8003998 <moveGyroPID>

	osDelay(100);
 8002302:	2064      	movs	r0, #100	; 0x64
 8002304:	f00a fd8f 	bl	800ce26 <osDelay>
	moveGyroPID(5, 1);
 8002308:	2001      	movs	r0, #1
 800230a:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800230e:	f001 fb43 	bl	8003998 <moveGyroPID>
	osDelay(100);
 8002312:	2064      	movs	r0, #100	; 0x64
 8002314:	f00a fd87 	bl	800ce26 <osDelay>
	left90();
 8002318:	f002 fdf4 	bl	8004f04 <left90>
	osDelay(300);
 800231c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002320:	f00a fd81 	bl	800ce26 <osDelay>
//	left90();
//	osDelay(100);
//	right90();
//	osDelay(100);
//	parkingMoveUltra();
}
 8002324:	bf00      	nop
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000258 	.word	0x20000258
 8002330:	20000378 	.word	0x20000378
 8002334:	40020000 	.word	0x40020000
 8002338:	40021000 	.word	0x40021000
 800233c:	40020800 	.word	0x40020800
 8002340:	20000414 	.word	0x20000414
 8002344:	00000000 	.word	0x00000000

08002348 <moveUltra>:

void moveUltra() {
 8002348:	b580      	push	{r7, lr}
 800234a:	b0ae      	sub	sp, #184	; 0xb8
 800234c:	af00      	add	r7, sp, #0

#define PID_LIM_MIN 3650
#define PID_LIM_MAX 3850

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800234e:	2100      	movs	r1, #0
 8002350:	488e      	ldr	r0, [pc, #568]	; (800258c <moveUltra+0x244>)
 8002352:	f007 ffb5 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002356:	2108      	movs	r1, #8
 8002358:	488c      	ldr	r0, [pc, #560]	; (800258c <moveUltra+0x244>)
 800235a:	f007 ffb1 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800235e:	210c      	movs	r1, #12
 8002360:	488b      	ldr	r0, [pc, #556]	; (8002590 <moveUltra+0x248>)
 8002362:	f007 ffad 	bl	800a2c0 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8002366:	4b8a      	ldr	r3, [pc, #552]	; (8002590 <moveUltra+0x248>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2297      	movs	r2, #151	; 0x97
 800236c:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(40);
 800236e:	2028      	movs	r0, #40	; 0x28
 8002370:	f00a fd59 	bl	800ce26 <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 8002374:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002378:	2224      	movs	r2, #36	; 0x24
 800237a:	2100      	movs	r1, #0
 800237c:	4618      	mov	r0, r3
 800237e:	f00d faad 	bl	800f8dc <memset>
 8002382:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002386:	653b      	str	r3, [r7, #80]	; 0x50
 8002388:	f640 6342 	movw	r3, #3650	; 0xe42
 800238c:	65bb      	str	r3, [r7, #88]	; 0x58
 800238e:	f640 730a 	movw	r3, #3850	; 0xf0a
 8002392:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002394:	4b7f      	ldr	r3, [pc, #508]	; (8002594 <moveUltra+0x24c>)
 8002396:	663b      	str	r3, [r7, #96]	; 0x60
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 8002398:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800239c:	2224      	movs	r2, #36	; 0x24
 800239e:	2100      	movs	r1, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f00d fa9b 	bl	800f8dc <memset>
 80023a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ac:	f640 6342 	movw	r3, #3650	; 0xe42
 80023b0:	637b      	str	r3, [r7, #52]	; 0x34
 80023b2:	f640 730a 	movw	r3, #3850	; 0xf0a
 80023b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80023b8:	4b76      	ldr	r3, [pc, #472]	; (8002594 <moveUltra+0x24c>)
 80023ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 80023bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023c0:	4618      	mov	r0, r3
 80023c2:	f003 fe5f 	bl	8006084 <PIDController_Init>
	PIDController_Init(&pidRight);
 80023c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023ca:	4618      	mov	r0, r3
 80023cc:	f003 fe5a 	bl	8006084 <PIDController_Init>

	//reset angle
	actualAngle = 0;
 80023d0:	4971      	ldr	r1, [pc, #452]	; (8002598 <moveUltra+0x250>)
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	e9c1 2300 	strd	r2, r3, [r1]

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 80023de:	4b6f      	ldr	r3, [pc, #444]	; (800259c <moveUltra+0x254>)
 80023e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float wheel_rotationTicksR = 779; // for back right wheel
 80023e4:	4b6e      	ldr	r3, [pc, #440]	; (80025a0 <moveUltra+0x258>)
 80023e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	float wheel_circumference = 21.1; // NEED TO MEASURE AND CHANGE
 80023ea:	4b6e      	ldr	r3, [pc, #440]	; (80025a4 <moveUltra+0x25c>)
 80023ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 80023f0:	213c      	movs	r1, #60	; 0x3c
 80023f2:	486d      	ldr	r0, [pc, #436]	; (80025a8 <moveUltra+0x260>)
 80023f4:	f008 fa4a 	bl	800a88c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 80023f8:	213c      	movs	r1, #60	; 0x3c
 80023fa:	486c      	ldr	r0, [pc, #432]	; (80025ac <moveUltra+0x264>)
 80023fc:	f008 fa46 	bl	800a88c <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8002400:	4b69      	ldr	r3, [pc, #420]	; (80025a8 <moveUltra+0x260>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 800240a:	4b68      	ldr	r3, [pc, #416]	; (80025ac <moveUltra+0x264>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8002414:	f004 fb20 	bl	8006a58 <HAL_GetTick>
 8002418:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	uint32_t prevTime = startTime;
 800241c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002420:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8002424:	f04f 0300 	mov.w	r3, #0
 8002428:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float distErrOffset;

	int servo;

	//pwm values
	uint16_t pwmValA = 3750;
 8002440:	f640 63a6 	movw	r3, #3750	; 0xea6
 8002444:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	uint16_t pwmValC = 3750;
 8002448:	f640 63a6 	movw	r3, #3750	; 0xea6
 800244c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002450:	2201      	movs	r2, #1
 8002452:	2108      	movs	r1, #8
 8002454:	4856      	ldr	r0, [pc, #344]	; (80025b0 <moveUltra+0x268>)
 8002456:	f004 fe7d 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800245a:	2200      	movs	r2, #0
 800245c:	2104      	movs	r1, #4
 800245e:	4854      	ldr	r0, [pc, #336]	; (80025b0 <moveUltra+0x268>)
 8002460:	f004 fe78 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8002464:	2201      	movs	r2, #1
 8002466:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800246a:	4852      	ldr	r0, [pc, #328]	; (80025b4 <moveUltra+0x26c>)
 800246c:	f004 fe72 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8002470:	2200      	movs	r2, #0
 8002472:	2120      	movs	r1, #32
 8002474:	4850      	ldr	r0, [pc, #320]	; (80025b8 <moveUltra+0x270>)
 8002476:	f004 fe6d 	bl	8007154 <HAL_GPIO_WritePin>

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 800247a:	4b44      	ldr	r3, [pc, #272]	; (800258c <moveUltra+0x244>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8002482:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8002484:	4b41      	ldr	r3, [pc, #260]	; (800258c <moveUltra+0x244>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 800248c:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 800248e:	f004 fae3 	bl	8006a58 <HAL_GetTick>
 8002492:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		moving = 1;
 8002496:	4b49      	ldr	r3, [pc, #292]	; (80025bc <moveUltra+0x274>)
 8002498:	2201      	movs	r2, #1
 800249a:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 800249c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80024a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b3c      	cmp	r3, #60	; 0x3c
 80024a8:	d9e7      	bls.n	800247a <moveUltra+0x132>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 80024aa:	4b3f      	ldr	r3, [pc, #252]	; (80025a8 <moveUltra+0x260>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 80024b4:	4b3d      	ldr	r3, [pc, #244]	; (80025ac <moveUltra+0x264>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	67fb      	str	r3, [r7, #124]	; 0x7c

			diffLeft = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			diffRight = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 80024c8:	4b37      	ldr	r3, [pc, #220]	; (80025a8 <moveUltra+0x260>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0310 	and.w	r3, r3, #16
 80024d2:	2b10      	cmp	r3, #16
 80024d4:	d118      	bne.n	8002508 <moveUltra+0x1c0>
				if (leftTick < leftTick_prev)
 80024d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80024da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024de:	429a      	cmp	r2, r3
 80024e0:	da07      	bge.n	80024f2 <moveUltra+0x1aa>
					diffLeft = leftTick_prev - leftTick;
 80024e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80024f0:	e022      	b.n	8002538 <moveUltra+0x1f0>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 80024f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024f6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80024fa:	33ff      	adds	r3, #255	; 0xff
 80024fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002500:	4413      	add	r3, r2
 8002502:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002506:	e017      	b.n	8002538 <moveUltra+0x1f0>
			} else {
				if (leftTick > leftTick_prev)
 8002508:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800250c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002510:	429a      	cmp	r2, r3
 8002512:	dd07      	ble.n	8002524 <moveUltra+0x1dc>
					diffLeft = leftTick - leftTick_prev;
 8002514:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002518:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002522:	e009      	b.n	8002538 <moveUltra+0x1f0>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 8002524:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002528:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800252c:	33ff      	adds	r3, #255	; 0xff
 800252e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002532:	4413      	add	r3, r2
 8002534:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 8002538:	4b1c      	ldr	r3, [pc, #112]	; (80025ac <moveUltra+0x264>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0310 	and.w	r3, r3, #16
 8002542:	2b10      	cmp	r3, #16
 8002544:	d115      	bne.n	8002572 <moveUltra+0x22a>
				if (rightTick < rightTick_prev)
 8002546:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002548:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800254c:	429a      	cmp	r2, r3
 800254e:	da06      	bge.n	800255e <moveUltra+0x216>
					diffRight = rightTick_prev - rightTick;
 8002550:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002554:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800255c:	e039      	b.n	80025d2 <moveUltra+0x28a>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 800255e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002560:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002564:	33ff      	adds	r3, #255	; 0xff
 8002566:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800256a:	4413      	add	r3, r2
 800256c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002570:	e02f      	b.n	80025d2 <moveUltra+0x28a>
			} else {
				if (rightTick > rightTick_prev)
 8002572:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002574:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002578:	429a      	cmp	r2, r3
 800257a:	dd21      	ble.n	80025c0 <moveUltra+0x278>
					diffRight = rightTick - rightTick_prev;
 800257c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800257e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002588:	e023      	b.n	80025d2 <moveUltra+0x28a>
 800258a:	bf00      	nop
 800258c:	20000378 	.word	0x20000378
 8002590:	20000258 	.word	0x20000258
 8002594:	3d4ccccd 	.word	0x3d4ccccd
 8002598:	20000420 	.word	0x20000420
 800259c:	44440000 	.word	0x44440000
 80025a0:	4442c000 	.word	0x4442c000
 80025a4:	41a8cccd 	.word	0x41a8cccd
 80025a8:	200002a0 	.word	0x200002a0
 80025ac:	20000330 	.word	0x20000330
 80025b0:	40020000 	.word	0x40020000
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40020800 	.word	0x40020800
 80025bc:	20000414 	.word	0x20000414
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 80025c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025c4:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80025c8:	33ff      	adds	r3, #255	; 0xff
 80025ca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80025cc:	4413      	add	r3, r2
 80025ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 80025d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025d6:	ee07 3a90 	vmov	s15, r3
 80025da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025de:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80025e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025e6:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80025ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ee:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
					* wheel_circumference;
			totalDistance_left += distLeft;
 80025f2:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 80025f6:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80025fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025fe:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 8002602:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002606:	ee07 3a90 	vmov	s15, r3
 800260a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800260e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002612:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002616:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800261a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261e:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
					* wheel_circumference;
			totalDistance_right += distRight;
 8002622:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002626:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800262a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800262e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			// 1.015 veer right, 1.005 veer left, 1.010 ABIT right, 1.008 almost perfect.

#define pwmValAadjust 300;
#define pwmValBadjust 525;

			pwmValA = PIDController_Update(&pidLeft,
 8002632:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002636:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800263a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800263e:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8002642:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002646:	4611      	mov	r1, r2
 8002648:	edd7 0a2a 	vldr	s1, [r7, #168]	; 0xa8
 800264c:	eeb0 0a67 	vmov.f32	s0, s15
 8002650:	4618      	mov	r0, r3
 8002652:	f003 fd2f 	bl	80060b4 <PIDController_Update>
 8002656:	4603      	mov	r3, r0
					totalDistance_right * STRAIGHTRATIOF, totalDistance_left,
					pwmValA) - pwmValAadjust
 8002658:	b29b      	uxth	r3, r3
			pwmValA = PIDController_Update(&pidLeft,
 800265a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800265e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
			;

			pwmValC = PIDController_Update(&pidRight, totalDistance_left,
 8002662:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002666:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800266a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800266e:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8002672:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002676:	4611      	mov	r1, r2
 8002678:	eef0 0a67 	vmov.f32	s1, s15
 800267c:	ed97 0a2a 	vldr	s0, [r7, #168]	; 0xa8
 8002680:	4618      	mov	r0, r3
 8002682:	f003 fd17 	bl	80060b4 <PIDController_Update>
 8002686:	4603      	mov	r3, r0
					totalDistance_right * STRAIGHTRATIOF, pwmValC)
					+ pwmValBadjust
 8002688:	b29b      	uxth	r3, r3
			pwmValC = PIDController_Update(&pidRight, totalDistance_left,
 800268a:	f203 230d 	addw	r3, r3, #525	; 0x20d
 800268e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
			;

			pwmValA = PIDController_Update(&pidLeft,
 8002692:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002696:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800269a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800269e:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 80026a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026a6:	4611      	mov	r1, r2
 80026a8:	edd7 0a2a 	vldr	s1, [r7, #168]	; 0xa8
 80026ac:	eeb0 0a67 	vmov.f32	s0, s15
 80026b0:	4618      	mov	r0, r3
 80026b2:	f003 fcff 	bl	80060b4 <PIDController_Update>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
					totalDistance_right * STRAIGHTRATIOF, totalDistance_left,
					pwmValA);

			pwmValC = PIDController_Update(&pidRight, totalDistance_left,
 80026bc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80026c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80026c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026c8:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 80026cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026d0:	4611      	mov	r1, r2
 80026d2:	eef0 0a67 	vmov.f32	s1, s15
 80026d6:	ed97 0a2a 	vldr	s0, [r7, #168]	; 0xa8
 80026da:	4618      	mov	r0, r3
 80026dc:	f003 fcea 	bl	80060b4 <PIDController_Update>
 80026e0:	4603      	mov	r3, r0
 80026e2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
					totalDistance_right * STRAIGHTRATIOF, pwmValC);

			if (actualAngle < -0.33) //veering right
 80026e6:	4b4e      	ldr	r3, [pc, #312]	; (8002820 <moveUltra+0x4d8>)
 80026e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026ec:	a348      	add	r3, pc, #288	; (adr r3, 8002810 <moveUltra+0x4c8>)
 80026ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f2:	f7fe f9f3 	bl	8000adc <__aeabi_dcmplt>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d004      	beq.n	8002706 <moveUltra+0x3be>
					{

				htim1.Instance->CCR4 = 138; //left abit. prev: 138
 80026fc:	4b49      	ldr	r3, [pc, #292]	; (8002824 <moveUltra+0x4dc>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	228a      	movs	r2, #138	; 0x8a
 8002702:	641a      	str	r2, [r3, #64]	; 0x40
 8002704:	e013      	b.n	800272e <moveUltra+0x3e6>
			} else if (actualAngle > 0.33) //veering left
 8002706:	4b46      	ldr	r3, [pc, #280]	; (8002820 <moveUltra+0x4d8>)
 8002708:	e9d3 0100 	ldrd	r0, r1, [r3]
 800270c:	a342      	add	r3, pc, #264	; (adr r3, 8002818 <moveUltra+0x4d0>)
 800270e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002712:	f7fe fa01 	bl	8000b18 <__aeabi_dcmpgt>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d004      	beq.n	8002726 <moveUltra+0x3de>
					{

				htim1.Instance->CCR4 = 155; //right a bit. prev: 152
 800271c:	4b41      	ldr	r3, [pc, #260]	; (8002824 <moveUltra+0x4dc>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	229b      	movs	r2, #155	; 0x9b
 8002722:	641a      	str	r2, [r3, #64]	; 0x40
 8002724:	e003      	b.n	800272e <moveUltra+0x3e6>
			} else {
				//				 servo = STRAIGHT;
				htim1.Instance->CCR4 = STRAIGHT; //Straight
 8002726:	4b3f      	ldr	r3, [pc, #252]	; (8002824 <moveUltra+0x4dc>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2297      	movs	r2, #151	; 0x97
 800272c:	641a      	str	r2, [r3, #64]	; 0x40
			}

			osDelay(10);
 800272e:	200a      	movs	r0, #10
 8002730:	f00a fb79 	bl	800ce26 <osDelay>

			prevTime = currTime;
 8002734:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002738:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 800273c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002740:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 8002744:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002746:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			//taking in decimal place
			if (Distance < 13.5) // prev was 10
 800274a:	4b37      	ldr	r3, [pc, #220]	; (8002828 <moveUltra+0x4e0>)
 800274c:	edd3 7a00 	vldr	s15, [r3]
 8002750:	eeb2 7a0b 	vmov.f32	s14, #43	; 0x41580000  13.5
 8002754:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275c:	d515      	bpl.n	800278a <moveUltra+0x442>
					{
				while (Distance > 8) {
 800275e:	e009      	b.n	8002774 <moveUltra+0x42c>

					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 2000);
 8002760:	4b32      	ldr	r3, [pc, #200]	; (800282c <moveUltra+0x4e4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002768:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,2000);
 800276a:	4b30      	ldr	r3, [pc, #192]	; (800282c <moveUltra+0x4e4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002772:	63da      	str	r2, [r3, #60]	; 0x3c
				while (Distance > 8) {
 8002774:	4b2c      	ldr	r3, [pc, #176]	; (8002828 <moveUltra+0x4e0>)
 8002776:	edd3 7a00 	vldr	s15, [r3]
 800277a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800277e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002786:	dceb      	bgt.n	8002760 <moveUltra+0x418>
				}
				break;
 8002788:	e000      	b.n	800278c <moveUltra+0x444>
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 800278a:	e676      	b.n	800247a <moveUltra+0x132>
			}
		}
	}

	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 800278c:	4b27      	ldr	r3, [pc, #156]	; (800282c <moveUltra+0x4e4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2200      	movs	r2, #0
 8002792:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_3, 0);
 8002794:	4b25      	ldr	r3, [pc, #148]	; (800282c <moveUltra+0x4e4>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2200      	movs	r2, #0
 800279a:	63da      	str	r2, [r3, #60]	; 0x3c
	distanceTraveled = distanceTraveled
			+ ((totalDistance_left + totalDistance_right) / 2) + 10 + 15; // travelled + err + not counting
 800279c:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 80027a0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80027a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027a8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80027ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80027b0:	4b1f      	ldr	r3, [pc, #124]	; (8002830 <moveUltra+0x4e8>)
 80027b2:	edd3 7a00 	vldr	s15, [r3]
 80027b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80027be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027c2:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80027c6:	ee77 7a87 	vadd.f32	s15, s15, s14
	distanceTraveled = distanceTraveled
 80027ca:	4b19      	ldr	r3, [pc, #100]	; (8002830 <moveUltra+0x4e8>)
 80027cc:	edc3 7a00 	vstr	s15, [r3]
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80027d0:	2201      	movs	r2, #1
 80027d2:	2108      	movs	r1, #8
 80027d4:	4817      	ldr	r0, [pc, #92]	; (8002834 <moveUltra+0x4ec>)
 80027d6:	f004 fcbd 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80027da:	2200      	movs	r2, #0
 80027dc:	2104      	movs	r1, #4
 80027de:	4815      	ldr	r0, [pc, #84]	; (8002834 <moveUltra+0x4ec>)
 80027e0:	f004 fcb8 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80027e4:	2201      	movs	r2, #1
 80027e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027ea:	4813      	ldr	r0, [pc, #76]	; (8002838 <moveUltra+0x4f0>)
 80027ec:	f004 fcb2 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80027f0:	2200      	movs	r2, #0
 80027f2:	2120      	movs	r1, #32
 80027f4:	4811      	ldr	r0, [pc, #68]	; (800283c <moveUltra+0x4f4>)
 80027f6:	f004 fcad 	bl	8007154 <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 80027fa:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <moveUltra+0x4dc>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2297      	movs	r2, #151	; 0x97
 8002800:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 8002802:	200a      	movs	r0, #10
 8002804:	f00a fb0f 	bl	800ce26 <osDelay>
	return;
 8002808:	bf00      	nop

}
 800280a:	37b8      	adds	r7, #184	; 0xb8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	51eb851f 	.word	0x51eb851f
 8002814:	bfd51eb8 	.word	0xbfd51eb8
 8002818:	51eb851f 	.word	0x51eb851f
 800281c:	3fd51eb8 	.word	0x3fd51eb8
 8002820:	20000420 	.word	0x20000420
 8002824:	20000258 	.word	0x20000258
 8002828:	20000448 	.word	0x20000448
 800282c:	20000378 	.word	0x20000378
 8002830:	20000434 	.word	0x20000434
 8002834:	40020000 	.word	0x40020000
 8002838:	40021000 	.word	0x40021000
 800283c:	40020800 	.word	0x40020800

08002840 <parkingMoveUltra>:

void parkingMoveUltra() {
 8002840:	b580      	push	{r7, lr}
 8002842:	b0ae      	sub	sp, #184	; 0xb8
 8002844:	af00      	add	r7, sp, #0

#define PID_LIM_MIN  1800 //
#define PID_LIM_MAX  2200 //

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002846:	2100      	movs	r1, #0
 8002848:	488a      	ldr	r0, [pc, #552]	; (8002a74 <parkingMoveUltra+0x234>)
 800284a:	f007 fd39 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800284e:	2108      	movs	r1, #8
 8002850:	4888      	ldr	r0, [pc, #544]	; (8002a74 <parkingMoveUltra+0x234>)
 8002852:	f007 fd35 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002856:	210c      	movs	r1, #12
 8002858:	4887      	ldr	r0, [pc, #540]	; (8002a78 <parkingMoveUltra+0x238>)
 800285a:	f007 fd31 	bl	800a2c0 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 800285e:	4b86      	ldr	r3, [pc, #536]	; (8002a78 <parkingMoveUltra+0x238>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2297      	movs	r2, #151	; 0x97
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 8002866:	2064      	movs	r0, #100	; 0x64
 8002868:	f00a fadd 	bl	800ce26 <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 800286c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002870:	2224      	movs	r2, #36	; 0x24
 8002872:	2100      	movs	r1, #0
 8002874:	4618      	mov	r0, r3
 8002876:	f00d f831 	bl	800f8dc <memset>
 800287a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800287e:	653b      	str	r3, [r7, #80]	; 0x50
 8002880:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8002884:	65bb      	str	r3, [r7, #88]	; 0x58
 8002886:	f640 0398 	movw	r3, #2200	; 0x898
 800288a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800288c:	4b7b      	ldr	r3, [pc, #492]	; (8002a7c <parkingMoveUltra+0x23c>)
 800288e:	663b      	str	r3, [r7, #96]	; 0x60
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 8002890:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002894:	2224      	movs	r2, #36	; 0x24
 8002896:	2100      	movs	r1, #0
 8002898:	4618      	mov	r0, r3
 800289a:	f00d f81f 	bl	800f8dc <memset>
 800289e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028a4:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80028a8:	637b      	str	r3, [r7, #52]	; 0x34
 80028aa:	f640 0398 	movw	r3, #2200	; 0x898
 80028ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80028b0:	4b72      	ldr	r3, [pc, #456]	; (8002a7c <parkingMoveUltra+0x23c>)
 80028b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 80028b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028b8:	4618      	mov	r0, r3
 80028ba:	f003 fbe3 	bl	8006084 <PIDController_Init>
	PIDController_Init(&pidRight);
 80028be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028c2:	4618      	mov	r0, r3
 80028c4:	f003 fbde 	bl	8006084 <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 80028c8:	4b6d      	ldr	r3, [pc, #436]	; (8002a80 <parkingMoveUltra+0x240>)
 80028ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float wheel_rotationTicksR = 779; // for back right wheel
 80028ce:	4b6d      	ldr	r3, [pc, #436]	; (8002a84 <parkingMoveUltra+0x244>)
 80028d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	float wheel_circumference = 23.56f; // NEED TO MEASURE AND CHANGE
 80028d4:	4b6c      	ldr	r3, [pc, #432]	; (8002a88 <parkingMoveUltra+0x248>)
 80028d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 80028da:	213c      	movs	r1, #60	; 0x3c
 80028dc:	486b      	ldr	r0, [pc, #428]	; (8002a8c <parkingMoveUltra+0x24c>)
 80028de:	f007 ffd5 	bl	800a88c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 80028e2:	213c      	movs	r1, #60	; 0x3c
 80028e4:	486a      	ldr	r0, [pc, #424]	; (8002a90 <parkingMoveUltra+0x250>)
 80028e6:	f007 ffd1 	bl	800a88c <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 80028ea:	4b68      	ldr	r3, [pc, #416]	; (8002a8c <parkingMoveUltra+0x24c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 80028f4:	4b66      	ldr	r3, [pc, #408]	; (8002a90 <parkingMoveUltra+0x250>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 80028fe:	f004 f8ab 	bl	8006a58 <HAL_GetTick>
 8002902:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	uint32_t prevTime = startTime;
 8002906:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800290a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 800291e:	2300      	movs	r3, #0
 8002920:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 2000;
 800292a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800292e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	uint16_t pwmValC = 2000;
 8002932:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002936:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800293a:	2201      	movs	r2, #1
 800293c:	2108      	movs	r1, #8
 800293e:	4855      	ldr	r0, [pc, #340]	; (8002a94 <parkingMoveUltra+0x254>)
 8002940:	f004 fc08 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002944:	2200      	movs	r2, #0
 8002946:	2104      	movs	r1, #4
 8002948:	4852      	ldr	r0, [pc, #328]	; (8002a94 <parkingMoveUltra+0x254>)
 800294a:	f004 fc03 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 800294e:	2201      	movs	r2, #1
 8002950:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002954:	4850      	ldr	r0, [pc, #320]	; (8002a98 <parkingMoveUltra+0x258>)
 8002956:	f004 fbfd 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 800295a:	2200      	movs	r2, #0
 800295c:	2120      	movs	r1, #32
 800295e:	484f      	ldr	r0, [pc, #316]	; (8002a9c <parkingMoveUltra+0x25c>)
 8002960:	f004 fbf8 	bl	8007154 <HAL_GPIO_WritePin>

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8002964:	4b43      	ldr	r3, [pc, #268]	; (8002a74 <parkingMoveUltra+0x234>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 800296c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 800296e:	4b41      	ldr	r3, [pc, #260]	; (8002a74 <parkingMoveUltra+0x234>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8002976:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 8002978:	f004 f86e 	bl	8006a58 <HAL_GetTick>
 800297c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		moving = 1;
 8002980:	4b47      	ldr	r3, [pc, #284]	; (8002aa0 <parkingMoveUltra+0x260>)
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60) {
 8002986:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800298a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b3c      	cmp	r3, #60	; 0x3c
 8002992:	d9e7      	bls.n	8002964 <parkingMoveUltra+0x124>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 8002994:	4b3d      	ldr	r3, [pc, #244]	; (8002a8c <parkingMoveUltra+0x24c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 800299e:	4b3c      	ldr	r3, [pc, #240]	; (8002a90 <parkingMoveUltra+0x250>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	67fb      	str	r3, [r7, #124]	; 0x7c

			diffLeft = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			diffRight = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 80029b2:	4b36      	ldr	r3, [pc, #216]	; (8002a8c <parkingMoveUltra+0x24c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0310 	and.w	r3, r3, #16
 80029bc:	2b10      	cmp	r3, #16
 80029be:	d118      	bne.n	80029f2 <parkingMoveUltra+0x1b2>
				if (leftTick < leftTick_prev)
 80029c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80029c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029c8:	429a      	cmp	r2, r3
 80029ca:	da07      	bge.n	80029dc <parkingMoveUltra+0x19c>
					diffLeft = leftTick_prev - leftTick;
 80029cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80029da:	e022      	b.n	8002a22 <parkingMoveUltra+0x1e2>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 80029dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029e0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80029e4:	33ff      	adds	r3, #255	; 0xff
 80029e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029ea:	4413      	add	r3, r2
 80029ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80029f0:	e017      	b.n	8002a22 <parkingMoveUltra+0x1e2>
			} else {
				if (leftTick > leftTick_prev)
 80029f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80029f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029fa:	429a      	cmp	r2, r3
 80029fc:	dd07      	ble.n	8002a0e <parkingMoveUltra+0x1ce>
					diffLeft = leftTick - leftTick_prev;
 80029fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a0c:	e009      	b.n	8002a22 <parkingMoveUltra+0x1e2>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 8002a0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a12:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002a16:	33ff      	adds	r3, #255	; 0xff
 8002a18:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 8002a22:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <parkingMoveUltra+0x250>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	2b10      	cmp	r3, #16
 8002a2e:	d115      	bne.n	8002a5c <parkingMoveUltra+0x21c>
				if (rightTick < rightTick_prev)
 8002a30:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002a32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a36:	429a      	cmp	r2, r3
 8002a38:	da06      	bge.n	8002a48 <parkingMoveUltra+0x208>
					diffRight = rightTick_prev - rightTick;
 8002a3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a46:	e036      	b.n	8002ab6 <parkingMoveUltra+0x276>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 8002a48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a4a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002a4e:	33ff      	adds	r3, #255	; 0xff
 8002a50:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a54:	4413      	add	r3, r2
 8002a56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a5a:	e02c      	b.n	8002ab6 <parkingMoveUltra+0x276>
			} else {
				if (rightTick > rightTick_prev)
 8002a5c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002a5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a62:	429a      	cmp	r2, r3
 8002a64:	dd1e      	ble.n	8002aa4 <parkingMoveUltra+0x264>
					diffRight = rightTick - rightTick_prev;
 8002a66:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002a68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a72:	e020      	b.n	8002ab6 <parkingMoveUltra+0x276>
 8002a74:	20000378 	.word	0x20000378
 8002a78:	20000258 	.word	0x20000258
 8002a7c:	3d4ccccd 	.word	0x3d4ccccd
 8002a80:	44440000 	.word	0x44440000
 8002a84:	4442c000 	.word	0x4442c000
 8002a88:	41bc7ae1 	.word	0x41bc7ae1
 8002a8c:	200002a0 	.word	0x200002a0
 8002a90:	20000330 	.word	0x20000330
 8002a94:	40020000 	.word	0x40020000
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40020800 	.word	0x40020800
 8002aa0:	20000414 	.word	0x20000414
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 8002aa4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002aa8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002aac:	33ff      	adds	r3, #255	; 0xff
 8002aae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 8002ab6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002aba:	ee07 3a90 	vmov	s15, r3
 8002abe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ac2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aca:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad2:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
					* wheel_circumference;
			totalDistance_left += distLeft;
 8002ad6:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8002ada:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ae2:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 8002ae6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002aea:	ee07 3a90 	vmov	s15, r3
 8002aee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002af2:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002afa:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b02:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
					* wheel_circumference;
			totalDistance_right += distRight;
 8002b06:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002b0a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b12:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4

#define pwmValAadjust 620;
			pwmValA = PIDController_Update(&pidLeft,
 8002b16:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002b1a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b22:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8002b26:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	edd7 0a2a 	vldr	s1, [r7, #168]	; 0xa8
 8002b30:	eeb0 0a67 	vmov.f32	s0, s15
 8002b34:	4618      	mov	r0, r3
 8002b36:	f003 fabd 	bl	80060b4 <PIDController_Update>
 8002b3a:	4603      	mov	r3, r0
					totalDistance_right * STRAIGHTRATIOF, totalDistance_left,
					pwmValA) + pwmValAadjust
 8002b3c:	b29b      	uxth	r3, r3
			pwmValA = PIDController_Update(&pidLeft,
 8002b3e:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8002b42:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
			;

			pwmValC = PIDController_Update(&pidRight, totalDistance_left,
 8002b46:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002b4a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b52:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8002b56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	eef0 0a67 	vmov.f32	s1, s15
 8002b60:	ed97 0a2a 	vldr	s0, [r7, #168]	; 0xa8
 8002b64:	4618      	mov	r0, r3
 8002b66:	f003 faa5 	bl	80060b4 <PIDController_Update>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
					totalDistance_right * STRAIGHTRATIOF, pwmValC);

			//if robot doesnt go straight, using gyro to adjust, straight = 145
			if (actualAngle < -0.50) //veering right
 8002b70:	4b46      	ldr	r3, [pc, #280]	; (8002c8c <parkingMoveUltra+0x44c>)
 8002b72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	4b45      	ldr	r3, [pc, #276]	; (8002c90 <parkingMoveUltra+0x450>)
 8002b7c:	f7fd ffae 	bl	8000adc <__aeabi_dcmplt>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <parkingMoveUltra+0x34e>
					{

				htim1.Instance->CCR4 = 142; //left abit
 8002b86:	4b43      	ldr	r3, [pc, #268]	; (8002c94 <parkingMoveUltra+0x454>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	228e      	movs	r2, #142	; 0x8e
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40
//				osDelay(10);
			}
			if (actualAngle > 0.00) //veering left
 8002b8e:	4b3f      	ldr	r3, [pc, #252]	; (8002c8c <parkingMoveUltra+0x44c>)
 8002b90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	f7fd ffbc 	bl	8000b18 <__aeabi_dcmpgt>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <parkingMoveUltra+0x36e>
					{

				htim1.Instance->CCR4 = 155; //right a bit
 8002ba6:	4b3b      	ldr	r3, [pc, #236]	; (8002c94 <parkingMoveUltra+0x454>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	229b      	movs	r2, #155	; 0x9b
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40
//				osDelay(10);
			}
			if (actualAngle == 0.00) {
 8002bae:	4b37      	ldr	r3, [pc, #220]	; (8002c8c <parkingMoveUltra+0x44c>)
 8002bb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	f7fd ff84 	bl	8000ac8 <__aeabi_dcmpeq>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <parkingMoveUltra+0x38e>
//				 servo = STRAIGHT;
				htim1.Instance->CCR4 = STRAIGHT; //Straight
 8002bc6:	4b33      	ldr	r3, [pc, #204]	; (8002c94 <parkingMoveUltra+0x454>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2297      	movs	r2, #151	; 0x97
 8002bcc:	641a      	str	r2, [r3, #64]	; 0x40
//				osDelay(10);
			}

			prevTime = currTime;
 8002bce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 8002bd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 8002bde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002be0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			//taking in decimal place
			if (Distance < 4) // prev was 10
 8002be4:	4b2c      	ldr	r3, [pc, #176]	; (8002c98 <parkingMoveUltra+0x458>)
 8002be6:	edd3 7a00 	vldr	s15, [r3]
 8002bea:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002bee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf6:	d515      	bpl.n	8002c24 <parkingMoveUltra+0x3e4>
					{
				while (Distance > 2) {
 8002bf8:	e009      	b.n	8002c0e <parkingMoveUltra+0x3ce>

					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 750);
 8002bfa:	4b28      	ldr	r3, [pc, #160]	; (8002c9c <parkingMoveUltra+0x45c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002c02:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,750);
 8002c04:	4b25      	ldr	r3, [pc, #148]	; (8002c9c <parkingMoveUltra+0x45c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002c0c:	63da      	str	r2, [r3, #60]	; 0x3c
				while (Distance > 2) {
 8002c0e:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <parkingMoveUltra+0x458>)
 8002c10:	edd3 7a00 	vldr	s15, [r3]
 8002c14:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c20:	dceb      	bgt.n	8002bfa <parkingMoveUltra+0x3ba>
				}
				break;
 8002c22:	e000      	b.n	8002c26 <parkingMoveUltra+0x3e6>
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8002c24:	e69e      	b.n	8002964 <parkingMoveUltra+0x124>
			}
		}
	}

	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA / 4);
 8002c26:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002c2a:	089b      	lsrs	r3, r3, #2
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	4b1b      	ldr	r3, [pc, #108]	; (8002c9c <parkingMoveUltra+0x45c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_3, pwmValC / 4);
 8002c34:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002c38:	089b      	lsrs	r3, r3, #2
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <parkingMoveUltra+0x45c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	63da      	str	r2, [r3, #60]	; 0x3c

//	moving = 0;
	move(0, 0);
 8002c42:	2000      	movs	r0, #0
 8002c44:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8002ca0 <parkingMoveUltra+0x460>
 8002c48:	f001 fd6c 	bl	8004724 <move>
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	2108      	movs	r1, #8
 8002c50:	4814      	ldr	r0, [pc, #80]	; (8002ca4 <parkingMoveUltra+0x464>)
 8002c52:	f004 fa7f 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002c56:	2200      	movs	r2, #0
 8002c58:	2104      	movs	r1, #4
 8002c5a:	4812      	ldr	r0, [pc, #72]	; (8002ca4 <parkingMoveUltra+0x464>)
 8002c5c:	f004 fa7a 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8002c60:	2201      	movs	r2, #1
 8002c62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c66:	4810      	ldr	r0, [pc, #64]	; (8002ca8 <parkingMoveUltra+0x468>)
 8002c68:	f004 fa74 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2120      	movs	r1, #32
 8002c70:	480e      	ldr	r0, [pc, #56]	; (8002cac <parkingMoveUltra+0x46c>)
 8002c72:	f004 fa6f 	bl	8007154 <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 8002c76:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <parkingMoveUltra+0x454>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2297      	movs	r2, #151	; 0x97
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 8002c7e:	200a      	movs	r0, #10
 8002c80:	f00a f8d1 	bl	800ce26 <osDelay>
	return;
 8002c84:	bf00      	nop
}
 8002c86:	37b8      	adds	r7, #184	; 0xb8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	20000420 	.word	0x20000420
 8002c90:	bfe00000 	.word	0xbfe00000
 8002c94:	20000258 	.word	0x20000258
 8002c98:	20000448 	.word	0x20000448
 8002c9c:	20000378 	.word	0x20000378
 8002ca0:	00000000 	.word	0x00000000
 8002ca4:	40020000 	.word	0x40020000
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40020800 	.word	0x40020800

08002cb0 <tooClose>:

void tooClose() {
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b0ae      	sub	sp, #184	; 0xb8
 8002cb4:	af00      	add	r7, sp, #0
#define PID_LIM_MIN  1800 //
#define PID_LIM_MAX  2200 //

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	488e      	ldr	r0, [pc, #568]	; (8002ef4 <tooClose+0x244>)
 8002cba:	f007 fb01 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002cbe:	2108      	movs	r1, #8
 8002cc0:	488c      	ldr	r0, [pc, #560]	; (8002ef4 <tooClose+0x244>)
 8002cc2:	f007 fafd 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002cc6:	210c      	movs	r1, #12
 8002cc8:	488b      	ldr	r0, [pc, #556]	; (8002ef8 <tooClose+0x248>)
 8002cca:	f007 faf9 	bl	800a2c0 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8002cce:	4b8a      	ldr	r3, [pc, #552]	; (8002ef8 <tooClose+0x248>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2297      	movs	r2, #151	; 0x97
 8002cd4:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(40);
 8002cd6:	2028      	movs	r0, #40	; 0x28
 8002cd8:	f00a f8a5 	bl	800ce26 <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 8002cdc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ce0:	2224      	movs	r2, #36	; 0x24
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f00c fdf9 	bl	800f8dc <memset>
 8002cea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002cee:	653b      	str	r3, [r7, #80]	; 0x50
 8002cf0:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8002cf4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002cf6:	f640 0398 	movw	r3, #2200	; 0x898
 8002cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cfc:	4b7f      	ldr	r3, [pc, #508]	; (8002efc <tooClose+0x24c>)
 8002cfe:	663b      	str	r3, [r7, #96]	; 0x60
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 8002d00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d04:	2224      	movs	r2, #36	; 0x24
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f00c fde7 	bl	800f8dc <memset>
 8002d0e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d14:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8002d18:	637b      	str	r3, [r7, #52]	; 0x34
 8002d1a:	f640 0398 	movw	r3, #2200	; 0x898
 8002d1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d20:	4b76      	ldr	r3, [pc, #472]	; (8002efc <tooClose+0x24c>)
 8002d22:	63fb      	str	r3, [r7, #60]	; 0x3c
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 8002d24:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f003 f9ab 	bl	8006084 <PIDController_Init>
	PIDController_Init(&pidRight);
 8002d2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d32:	4618      	mov	r0, r3
 8002d34:	f003 f9a6 	bl	8006084 <PIDController_Init>

	//reset angle
	actualAngle = 0;
 8002d38:	4971      	ldr	r1, [pc, #452]	; (8002f00 <tooClose+0x250>)
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	e9c1 2300 	strd	r2, r3, [r1]

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8002d46:	4b6f      	ldr	r3, [pc, #444]	; (8002f04 <tooClose+0x254>)
 8002d48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float wheel_rotationTicksR = 779; // for back right wheel
 8002d4c:	4b6e      	ldr	r3, [pc, #440]	; (8002f08 <tooClose+0x258>)
 8002d4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	float wheel_circumference = 21.1; // NEED TO MEASURE AND CHANGE
 8002d52:	4b6e      	ldr	r3, [pc, #440]	; (8002f0c <tooClose+0x25c>)
 8002d54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8002d58:	213c      	movs	r1, #60	; 0x3c
 8002d5a:	486d      	ldr	r0, [pc, #436]	; (8002f10 <tooClose+0x260>)
 8002d5c:	f007 fd96 	bl	800a88c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 8002d60:	213c      	movs	r1, #60	; 0x3c
 8002d62:	486c      	ldr	r0, [pc, #432]	; (8002f14 <tooClose+0x264>)
 8002d64:	f007 fd92 	bl	800a88c <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8002d68:	4b69      	ldr	r3, [pc, #420]	; (8002f10 <tooClose+0x260>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8002d72:	4b68      	ldr	r3, [pc, #416]	; (8002f14 <tooClose+0x264>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8002d7c:	f003 fe6c 	bl	8006a58 <HAL_GetTick>
 8002d80:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	uint32_t prevTime = startTime;
 8002d84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float distErrOffset;

	int servo;

	//pwm values
	uint16_t pwmValA = 2000;
 8002da8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002dac:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	uint16_t pwmValC = 2000;
 8002db0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002db4:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002db8:	2200      	movs	r2, #0
 8002dba:	2108      	movs	r1, #8
 8002dbc:	4856      	ldr	r0, [pc, #344]	; (8002f18 <tooClose+0x268>)
 8002dbe:	f004 f9c9 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	2104      	movs	r1, #4
 8002dc6:	4854      	ldr	r0, [pc, #336]	; (8002f18 <tooClose+0x268>)
 8002dc8:	f004 f9c4 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dd2:	4852      	ldr	r0, [pc, #328]	; (8002f1c <tooClose+0x26c>)
 8002dd4:	f004 f9be 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8002dd8:	2201      	movs	r2, #1
 8002dda:	2120      	movs	r1, #32
 8002ddc:	4850      	ldr	r0, [pc, #320]	; (8002f20 <tooClose+0x270>)
 8002dde:	f004 f9b9 	bl	8007154 <HAL_GPIO_WritePin>
	// outdoor

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8002de2:	4b44      	ldr	r3, [pc, #272]	; (8002ef4 <tooClose+0x244>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8002dea:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8002dec:	4b41      	ldr	r3, [pc, #260]	; (8002ef4 <tooClose+0x244>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8002df4:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 8002df6:	f003 fe2f 	bl	8006a58 <HAL_GetTick>
 8002dfa:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		moving = 1;
 8002dfe:	4b49      	ldr	r3, [pc, #292]	; (8002f24 <tooClose+0x274>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 8002e04:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002e08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b3c      	cmp	r3, #60	; 0x3c
 8002e10:	d9e7      	bls.n	8002de2 <tooClose+0x132>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 8002e12:	4b3f      	ldr	r3, [pc, #252]	; (8002f10 <tooClose+0x260>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8002e1c:	4b3d      	ldr	r3, [pc, #244]	; (8002f14 <tooClose+0x264>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	67fb      	str	r3, [r7, #124]	; 0x7c

			diffLeft = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			diffRight = 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8002e30:	4b37      	ldr	r3, [pc, #220]	; (8002f10 <tooClose+0x260>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	2b10      	cmp	r3, #16
 8002e3c:	d118      	bne.n	8002e70 <tooClose+0x1c0>
				if (leftTick < leftTick_prev)
 8002e3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e46:	429a      	cmp	r2, r3
 8002e48:	da07      	bge.n	8002e5a <tooClose+0x1aa>
					diffLeft = leftTick_prev - leftTick;
 8002e4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e58:	e022      	b.n	8002ea0 <tooClose+0x1f0>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 8002e5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e5e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002e62:	33ff      	adds	r3, #255	; 0xff
 8002e64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e68:	4413      	add	r3, r2
 8002e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e6e:	e017      	b.n	8002ea0 <tooClose+0x1f0>
			} else {
				if (leftTick > leftTick_prev)
 8002e70:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	dd07      	ble.n	8002e8c <tooClose+0x1dc>
					diffLeft = leftTick - leftTick_prev;
 8002e7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e8a:	e009      	b.n	8002ea0 <tooClose+0x1f0>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 8002e8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e90:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002e94:	33ff      	adds	r3, #255	; 0xff
 8002e96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 8002ea0:	4b1c      	ldr	r3, [pc, #112]	; (8002f14 <tooClose+0x264>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0310 	and.w	r3, r3, #16
 8002eaa:	2b10      	cmp	r3, #16
 8002eac:	d115      	bne.n	8002eda <tooClose+0x22a>
				if (rightTick < rightTick_prev)
 8002eae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002eb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	da06      	bge.n	8002ec6 <tooClose+0x216>
					diffRight = rightTick_prev - rightTick;
 8002eb8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ebc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ec4:	e039      	b.n	8002f3a <tooClose+0x28a>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 8002ec6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ec8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002ecc:	33ff      	adds	r3, #255	; 0xff
 8002ece:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ed8:	e02f      	b.n	8002f3a <tooClose+0x28a>
			} else {
				if (rightTick > rightTick_prev)
 8002eda:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002edc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	dd21      	ble.n	8002f28 <tooClose+0x278>
					diffRight = rightTick - rightTick_prev;
 8002ee4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002ee6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ef0:	e023      	b.n	8002f3a <tooClose+0x28a>
 8002ef2:	bf00      	nop
 8002ef4:	20000378 	.word	0x20000378
 8002ef8:	20000258 	.word	0x20000258
 8002efc:	3d4ccccd 	.word	0x3d4ccccd
 8002f00:	20000420 	.word	0x20000420
 8002f04:	44440000 	.word	0x44440000
 8002f08:	4442c000 	.word	0x4442c000
 8002f0c:	41a8cccd 	.word	0x41a8cccd
 8002f10:	200002a0 	.word	0x200002a0
 8002f14:	20000330 	.word	0x20000330
 8002f18:	40020000 	.word	0x40020000
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40020800 	.word	0x40020800
 8002f24:	20000414 	.word	0x20000414
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 8002f28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f2c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002f30:	33ff      	adds	r3, #255	; 0xff
 8002f32:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002f34:	4413      	add	r3, r2
 8002f36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 8002f3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f3e:	ee07 3a90 	vmov	s15, r3
 8002f42:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f46:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f4e:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f56:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
					* wheel_circumference;
			totalDistance_left += distLeft;
 8002f5a:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8002f5e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002f62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f66:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 8002f6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f6e:	ee07 3a90 	vmov	s15, r3
 8002f72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f76:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f7e:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f86:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
					* wheel_circumference;
			totalDistance_right += distRight;
 8002f8a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002f8e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f96:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			// 1.015 veer right, 1.005 veer left, 1.010 ABIT right, 1.008 almost perfect.

#define pwmValAadjust 300;
#define pwmValBadjust 525;

			pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 8002f9a:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8002f9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	edd7 0a2a 	vldr	s1, [r7, #168]	; 0xa8
 8002fa8:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 8002fac:	4618      	mov	r0, r3
 8002fae:	f003 f881 	bl	80060b4 <PIDController_Update>
 8002fb2:	4603      	mov	r3, r0
					totalDistance_left * STRAIGHTRATIOR, pwmValA)
					- pwmValAadjust
 8002fb4:	b29b      	uxth	r3, r3
			pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 8002fb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002fba:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
			;

			pwmValC = PIDController_Update(&pidRight,
 8002fbe:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8002fc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	edd7 0a29 	vldr	s1, [r7, #164]	; 0xa4
 8002fcc:	ed97 0a2a 	vldr	s0, [r7, #168]	; 0xa8
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f003 f86f 	bl	80060b4 <PIDController_Update>
 8002fd6:	4603      	mov	r3, r0
					totalDistance_left * STRAIGHTRATIOR, totalDistance_right,
					pwmValC) + pwmValBadjust
 8002fd8:	b29b      	uxth	r3, r3
			pwmValC = PIDController_Update(&pidRight,
 8002fda:	f203 230d 	addw	r3, r3, #525	; 0x20d
 8002fde:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
			;

			pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 8002fe2:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8002fe6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002fea:	4611      	mov	r1, r2
 8002fec:	edd7 0a2a 	vldr	s1, [r7, #168]	; 0xa8
 8002ff0:	ed97 0a29 	vldr	s0, [r7, #164]	; 0xa4
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f003 f85d 	bl	80060b4 <PIDController_Update>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
					totalDistance_left * STRAIGHTRATIOR, pwmValA);

			pwmValC = PIDController_Update(&pidRight,
 8003000:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8003004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003008:	4611      	mov	r1, r2
 800300a:	edd7 0a29 	vldr	s1, [r7, #164]	; 0xa4
 800300e:	ed97 0a2a 	vldr	s0, [r7, #168]	; 0xa8
 8003012:	4618      	mov	r0, r3
 8003014:	f003 f84e 	bl	80060b4 <PIDController_Update>
 8003018:	4603      	mov	r3, r0
 800301a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
					totalDistance_left * STRAIGHTRATIOR, totalDistance_right,
					pwmValC);

			//if robot doesnt go straight, using gyro to adjust, straight = 145

			if (actualAngle > 0.33) //veering left
 800301e:	4b3a      	ldr	r3, [pc, #232]	; (8003108 <tooClose+0x458>)
 8003020:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003024:	a334      	add	r3, pc, #208	; (adr r3, 80030f8 <tooClose+0x448>)
 8003026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302a:	f7fd fd75 	bl	8000b18 <__aeabi_dcmpgt>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d004      	beq.n	800303e <tooClose+0x38e>
					{
				//				 servo = STRAIGHT;
				htim1.Instance->CCR4 = 138; //left abit
 8003034:	4b35      	ldr	r3, [pc, #212]	; (800310c <tooClose+0x45c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	228a      	movs	r2, #138	; 0x8a
 800303a:	641a      	str	r2, [r3, #64]	; 0x40
 800303c:	e013      	b.n	8003066 <tooClose+0x3b6>
			} else if (actualAngle < -0.33) //veering right
 800303e:	4b32      	ldr	r3, [pc, #200]	; (8003108 <tooClose+0x458>)
 8003040:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003044:	a32e      	add	r3, pc, #184	; (adr r3, 8003100 <tooClose+0x450>)
 8003046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304a:	f7fd fd47 	bl	8000adc <__aeabi_dcmplt>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d004      	beq.n	800305e <tooClose+0x3ae>
					{
				//					 servo = STRAIGHT;
				htim1.Instance->CCR4 = 155; //right a bit
 8003054:	4b2d      	ldr	r3, [pc, #180]	; (800310c <tooClose+0x45c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	229b      	movs	r2, #155	; 0x9b
 800305a:	641a      	str	r2, [r3, #64]	; 0x40
 800305c:	e003      	b.n	8003066 <tooClose+0x3b6>
			} else {
				//				 servo = STRAIGHT;
				htim1.Instance->CCR4 = STRAIGHT; //Straight
 800305e:	4b2b      	ldr	r3, [pc, #172]	; (800310c <tooClose+0x45c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2297      	movs	r2, #151	; 0x97
 8003064:	641a      	str	r2, [r3, #64]	; 0x40
			}
			osDelay(10);
 8003066:	200a      	movs	r0, #10
 8003068:	f009 fedd 	bl	800ce26 <osDelay>

			if (Distance > 5) {
 800306c:	4b28      	ldr	r3, [pc, #160]	; (8003110 <tooClose+0x460>)
 800306e:	edd3 7a00 	vldr	s15, [r3]
 8003072:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003076:	eef4 7ac7 	vcmpe.f32	s15, s14
 800307a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307e:	dd0c      	ble.n	800309a <tooClose+0x3ea>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 8003080:	4b24      	ldr	r3, [pc, #144]	; (8003114 <tooClose+0x464>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2200      	movs	r2, #0
 8003086:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,0);
 8003088:	4b22      	ldr	r3, [pc, #136]	; (8003114 <tooClose+0x464>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2200      	movs	r2, #0
 800308e:	63da      	str	r2, [r3, #60]	; 0x3c
				htim1.Instance->CCR4 = STRAIGHT; //centre
 8003090:	4b1e      	ldr	r3, [pc, #120]	; (800310c <tooClose+0x45c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2297      	movs	r2, #151	; 0x97
 8003096:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8003098:	e00b      	b.n	80030b2 <tooClose+0x402>
			}
			prevTime = currTime;
 800309a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800309e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 80030a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 80030aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 80030b0:	e697      	b.n	8002de2 <tooClose+0x132>
		}
	}
	//	moving = 0;
	//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80030b2:	2201      	movs	r2, #1
 80030b4:	2108      	movs	r1, #8
 80030b6:	4818      	ldr	r0, [pc, #96]	; (8003118 <tooClose+0x468>)
 80030b8:	f004 f84c 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80030bc:	2200      	movs	r2, #0
 80030be:	2104      	movs	r1, #4
 80030c0:	4815      	ldr	r0, [pc, #84]	; (8003118 <tooClose+0x468>)
 80030c2:	f004 f847 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80030c6:	2201      	movs	r2, #1
 80030c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030cc:	4813      	ldr	r0, [pc, #76]	; (800311c <tooClose+0x46c>)
 80030ce:	f004 f841 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80030d2:	2200      	movs	r2, #0
 80030d4:	2120      	movs	r1, #32
 80030d6:	4812      	ldr	r0, [pc, #72]	; (8003120 <tooClose+0x470>)
 80030d8:	f004 f83c 	bl	8007154 <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <tooClose+0x45c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2297      	movs	r2, #151	; 0x97
 80030e2:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 80030e4:	200a      	movs	r0, #10
 80030e6:	f009 fe9e 	bl	800ce26 <osDelay>
	return;
 80030ea:	bf00      	nop
}
 80030ec:	37b8      	adds	r7, #184	; 0xb8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	f3af 8000 	nop.w
 80030f8:	51eb851f 	.word	0x51eb851f
 80030fc:	3fd51eb8 	.word	0x3fd51eb8
 8003100:	51eb851f 	.word	0x51eb851f
 8003104:	bfd51eb8 	.word	0xbfd51eb8
 8003108:	20000420 	.word	0x20000420
 800310c:	20000258 	.word	0x20000258
 8003110:	20000448 	.word	0x20000448
 8003114:	20000378 	.word	0x20000378
 8003118:	40020000 	.word	0x40020000
 800311c:	40021000 	.word	0x40021000
 8003120:	40020800 	.word	0x40020800

08003124 <moveUltraEnd>:
void moveUltraEnd() {
 8003124:	b580      	push	{r7, lr}
 8003126:	b0ae      	sub	sp, #184	; 0xb8
 8003128:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800312a:	2100      	movs	r1, #0
 800312c:	488e      	ldr	r0, [pc, #568]	; (8003368 <moveUltraEnd+0x244>)
 800312e:	f007 f8c7 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8003132:	2108      	movs	r1, #8
 8003134:	488c      	ldr	r0, [pc, #560]	; (8003368 <moveUltraEnd+0x244>)
 8003136:	f007 f8c3 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800313a:	210c      	movs	r1, #12
 800313c:	488b      	ldr	r0, [pc, #556]	; (800336c <moveUltraEnd+0x248>)
 800313e:	f007 f8bf 	bl	800a2c0 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8003142:	4b8a      	ldr	r3, [pc, #552]	; (800336c <moveUltraEnd+0x248>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2297      	movs	r2, #151	; 0x97
 8003148:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 800314a:	2064      	movs	r0, #100	; 0x64
 800314c:	f009 fe6b 	bl	800ce26 <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 8003150:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003154:	2224      	movs	r2, #36	; 0x24
 8003156:	2100      	movs	r1, #0
 8003158:	4618      	mov	r0, r3
 800315a:	f00c fbbf 	bl	800f8dc <memset>
 800315e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003162:	653b      	str	r3, [r7, #80]	; 0x50
 8003164:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8003168:	65bb      	str	r3, [r7, #88]	; 0x58
 800316a:	f640 0398 	movw	r3, #2200	; 0x898
 800316e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003170:	4b7f      	ldr	r3, [pc, #508]	; (8003370 <moveUltraEnd+0x24c>)
 8003172:	663b      	str	r3, [r7, #96]	; 0x60
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 8003174:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003178:	2224      	movs	r2, #36	; 0x24
 800317a:	2100      	movs	r1, #0
 800317c:	4618      	mov	r0, r3
 800317e:	f00c fbad 	bl	800f8dc <memset>
 8003182:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003186:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003188:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800318c:	637b      	str	r3, [r7, #52]	; 0x34
 800318e:	f640 0398 	movw	r3, #2200	; 0x898
 8003192:	63bb      	str	r3, [r7, #56]	; 0x38
 8003194:	4b76      	ldr	r3, [pc, #472]	; (8003370 <moveUltraEnd+0x24c>)
 8003196:	63fb      	str	r3, [r7, #60]	; 0x3c
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 8003198:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800319c:	4618      	mov	r0, r3
 800319e:	f002 ff71 	bl	8006084 <PIDController_Init>
	PIDController_Init(&pidRight);
 80031a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031a6:	4618      	mov	r0, r3
 80031a8:	f002 ff6c 	bl	8006084 <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 80031ac:	4b71      	ldr	r3, [pc, #452]	; (8003374 <moveUltraEnd+0x250>)
 80031ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 80031b2:	4b71      	ldr	r3, [pc, #452]	; (8003378 <moveUltraEnd+0x254>)
 80031b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 22.4f; // NEED TO MEASURE AND CHANGE
 80031b8:	4b70      	ldr	r3, [pc, #448]	; (800337c <moveUltraEnd+0x258>)
 80031ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 80031be:	213c      	movs	r1, #60	; 0x3c
 80031c0:	486f      	ldr	r0, [pc, #444]	; (8003380 <moveUltraEnd+0x25c>)
 80031c2:	f007 fb63 	bl	800a88c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 80031c6:	213c      	movs	r1, #60	; 0x3c
 80031c8:	486e      	ldr	r0, [pc, #440]	; (8003384 <moveUltraEnd+0x260>)
 80031ca:	f007 fb5f 	bl	800a88c <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 80031ce:	4b6c      	ldr	r3, [pc, #432]	; (8003380 <moveUltraEnd+0x25c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 80031d8:	4b6a      	ldr	r3, [pc, #424]	; (8003384 <moveUltraEnd+0x260>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 80031e2:	f003 fc39 	bl	8006a58 <HAL_GetTick>
 80031e6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 80031ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 8003208:	2300      	movs	r3, #0
 800320a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	actualAngle = 0.00;
 800320e:	495e      	ldr	r1, [pc, #376]	; (8003388 <moveUltraEnd+0x264>)
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	e9c1 2300 	strd	r2, r3, [r1]
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 3000;
 800321c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003220:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t pwmValC = 3000;
 8003224:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003228:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800322c:	2201      	movs	r2, #1
 800322e:	2108      	movs	r1, #8
 8003230:	4856      	ldr	r0, [pc, #344]	; (800338c <moveUltraEnd+0x268>)
 8003232:	f003 ff8f 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003236:	2200      	movs	r2, #0
 8003238:	2104      	movs	r1, #4
 800323a:	4854      	ldr	r0, [pc, #336]	; (800338c <moveUltraEnd+0x268>)
 800323c:	f003 ff8a 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8003240:	2201      	movs	r2, #1
 8003242:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003246:	4852      	ldr	r0, [pc, #328]	; (8003390 <moveUltraEnd+0x26c>)
 8003248:	f003 ff84 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 800324c:	2200      	movs	r2, #0
 800324e:	2120      	movs	r1, #32
 8003250:	4850      	ldr	r0, [pc, #320]	; (8003394 <moveUltraEnd+0x270>)
 8003252:	f003 ff7f 	bl	8007154 <HAL_GPIO_WritePin>

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8003256:	4b44      	ldr	r3, [pc, #272]	; (8003368 <moveUltraEnd+0x244>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800325e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8003260:	4b41      	ldr	r3, [pc, #260]	; (8003368 <moveUltraEnd+0x244>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8003268:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 800326a:	f003 fbf5 	bl	8006a58 <HAL_GetTick>
 800326e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		moving = 1;
 8003272:	4b49      	ldr	r3, [pc, #292]	; (8003398 <moveUltraEnd+0x274>)
 8003274:	2201      	movs	r2, #1
 8003276:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 8003278:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800327c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b3c      	cmp	r3, #60	; 0x3c
 8003284:	d9e7      	bls.n	8003256 <moveUltraEnd+0x132>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 8003286:	4b3e      	ldr	r3, [pc, #248]	; (8003380 <moveUltraEnd+0x25c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8003290:	4b3c      	ldr	r3, [pc, #240]	; (8003384 <moveUltraEnd+0x260>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	67fb      	str	r3, [r7, #124]	; 0x7c

			diffLeft = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			diffRight = 0;
 800329e:	2300      	movs	r3, #0
 80032a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 80032a4:	4b36      	ldr	r3, [pc, #216]	; (8003380 <moveUltraEnd+0x25c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0310 	and.w	r3, r3, #16
 80032ae:	2b10      	cmp	r3, #16
 80032b0:	d118      	bne.n	80032e4 <moveUltraEnd+0x1c0>
				if (leftTick < leftTick_prev)
 80032b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032ba:	429a      	cmp	r2, r3
 80032bc:	da07      	bge.n	80032ce <moveUltraEnd+0x1aa>
					diffLeft = leftTick_prev - leftTick;
 80032be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032cc:	e022      	b.n	8003314 <moveUltraEnd+0x1f0>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 80032ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032d2:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80032d6:	33ff      	adds	r3, #255	; 0xff
 80032d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032dc:	4413      	add	r3, r2
 80032de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032e2:	e017      	b.n	8003314 <moveUltraEnd+0x1f0>
			} else {
				if (leftTick > leftTick_prev)
 80032e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032ec:	429a      	cmp	r2, r3
 80032ee:	dd07      	ble.n	8003300 <moveUltraEnd+0x1dc>
					diffLeft = leftTick - leftTick_prev;
 80032f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032fe:	e009      	b.n	8003314 <moveUltraEnd+0x1f0>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 8003300:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003304:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003308:	33ff      	adds	r3, #255	; 0xff
 800330a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800330e:	4413      	add	r3, r2
 8003310:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 8003314:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <moveUltraEnd+0x260>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0310 	and.w	r3, r3, #16
 800331e:	2b10      	cmp	r3, #16
 8003320:	d115      	bne.n	800334e <moveUltraEnd+0x22a>
				if (rightTick < rightTick_prev)
 8003322:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003324:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003328:	429a      	cmp	r2, r3
 800332a:	da06      	bge.n	800333a <moveUltraEnd+0x216>
					diffRight = rightTick_prev - rightTick;
 800332c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003330:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003338:	e039      	b.n	80033ae <moveUltraEnd+0x28a>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 800333a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800333c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003340:	33ff      	adds	r3, #255	; 0xff
 8003342:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003346:	4413      	add	r3, r2
 8003348:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800334c:	e02f      	b.n	80033ae <moveUltraEnd+0x28a>
			} else {
				if (rightTick > rightTick_prev)
 800334e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003350:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003354:	429a      	cmp	r2, r3
 8003356:	dd21      	ble.n	800339c <moveUltraEnd+0x278>
					diffRight = rightTick - rightTick_prev;
 8003358:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800335a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003364:	e023      	b.n	80033ae <moveUltraEnd+0x28a>
 8003366:	bf00      	nop
 8003368:	20000378 	.word	0x20000378
 800336c:	20000258 	.word	0x20000258
 8003370:	3d4ccccd 	.word	0x3d4ccccd
 8003374:	44440000 	.word	0x44440000
 8003378:	4442c000 	.word	0x4442c000
 800337c:	41b33333 	.word	0x41b33333
 8003380:	200002a0 	.word	0x200002a0
 8003384:	20000330 	.word	0x20000330
 8003388:	20000420 	.word	0x20000420
 800338c:	40020000 	.word	0x40020000
 8003390:	40021000 	.word	0x40021000
 8003394:	40020800 	.word	0x40020800
 8003398:	20000414 	.word	0x20000414
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 800339c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033a0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80033a4:	33ff      	adds	r3, #255	; 0xff
 80033a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80033a8:	4413      	add	r3, r2
 80033aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 80033ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033b2:	ee07 3a90 	vmov	s15, r3
 80033b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80033ba:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80033be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033c2:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80033c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ca:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
					* wheel_circumference;
			totalDistance_left += distLeft;
 80033ce:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 80033d2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80033d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033da:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 80033de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033e2:	ee07 3a90 	vmov	s15, r3
 80033e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80033ea:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80033ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033f2:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80033f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033fa:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
					* wheel_circumference;
			totalDistance_right += distRight;
 80033fe:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003402:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800340a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			 pwmValA = PIDController_Update(&pidLeft, totalDistance_right*STRAIGHTRATIOF, totalDistance_left, pwmValA);
//
//			 pwmValC = PIDController_Update(&pidRight, totalDistance_left, totalDistance_right*STRAIGHTRATIOF, pwmValC);

			//if robot doesnt go straight, using gyro to adjust, straight = 145
			if (actualAngle < 0.00) //veering right
 800340e:	4b46      	ldr	r3, [pc, #280]	; (8003528 <moveUltraEnd+0x404>)
 8003410:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	f7fd fb5e 	bl	8000adc <__aeabi_dcmplt>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d006      	beq.n	8003434 <moveUltraEnd+0x310>
					{

				htim1.Instance->CCR4 = 138; //left abit
 8003426:	4b41      	ldr	r3, [pc, #260]	; (800352c <moveUltraEnd+0x408>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	228a      	movs	r2, #138	; 0x8a
 800342c:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 800342e:	200a      	movs	r0, #10
 8003430:	f009 fcf9 	bl	800ce26 <osDelay>
			}
			if (actualAngle > 0.00) //veering left
 8003434:	4b3c      	ldr	r3, [pc, #240]	; (8003528 <moveUltraEnd+0x404>)
 8003436:	e9d3 0100 	ldrd	r0, r1, [r3]
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	f7fd fb69 	bl	8000b18 <__aeabi_dcmpgt>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d006      	beq.n	800345a <moveUltraEnd+0x336>
					{

				htim1.Instance->CCR4 = 152; //right a bit
 800344c:	4b37      	ldr	r3, [pc, #220]	; (800352c <moveUltraEnd+0x408>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2298      	movs	r2, #152	; 0x98
 8003452:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 8003454:	200a      	movs	r0, #10
 8003456:	f009 fce6 	bl	800ce26 <osDelay>
			}
			if (actualAngle == 0.00) {
 800345a:	4b33      	ldr	r3, [pc, #204]	; (8003528 <moveUltraEnd+0x404>)
 800345c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	f7fd fb2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d006      	beq.n	8003480 <moveUltraEnd+0x35c>
				//				 servo = STRAIGHT;
				htim1.Instance->CCR4 = STRAIGHT; //Straight
 8003472:	4b2e      	ldr	r3, [pc, #184]	; (800352c <moveUltraEnd+0x408>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2297      	movs	r2, #151	; 0x97
 8003478:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 800347a:	200a      	movs	r0, #10
 800347c:	f009 fcd3 	bl	800ce26 <osDelay>
			}

			prevTime = currTime;
 8003480:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003484:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 8003488:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800348c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 8003490:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003492:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			//taking in decimal place
			if (Distance < 2) {
 8003496:	4b26      	ldr	r3, [pc, #152]	; (8003530 <moveUltraEnd+0x40c>)
 8003498:	edd3 7a00 	vldr	s15, [r3]
 800349c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80034a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a8:	d417      	bmi.n	80034da <moveUltraEnd+0x3b6>
				break;
			}
			sprintf(messageA, "angle %5d\0", (int) (actualAngle));
 80034aa:	4b1f      	ldr	r3, [pc, #124]	; (8003528 <moveUltraEnd+0x404>)
 80034ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b0:	4610      	mov	r0, r2
 80034b2:	4619      	mov	r1, r3
 80034b4:	f7fd fb50 	bl	8000b58 <__aeabi_d2iz>
 80034b8:	4602      	mov	r2, r0
 80034ba:	f107 0318 	add.w	r3, r7, #24
 80034be:	491d      	ldr	r1, [pc, #116]	; (8003534 <moveUltraEnd+0x410>)
 80034c0:	4618      	mov	r0, r3
 80034c2:	f00d f893 	bl	80105ec <siprintf>
			OLED_ShowString(10, 20, messageA);
 80034c6:	f107 0318 	add.w	r3, r7, #24
 80034ca:	461a      	mov	r2, r3
 80034cc:	2114      	movs	r1, #20
 80034ce:	200a      	movs	r0, #10
 80034d0:	f002 fd1a 	bl	8005f08 <OLED_ShowString>
			OLED_Refresh_Gram();
 80034d4:	f002 fba4 	bl	8005c20 <OLED_Refresh_Gram>
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 80034d8:	e6bd      	b.n	8003256 <moveUltraEnd+0x132>
				break;
 80034da:	bf00      	nop
		}
	}

//	moving = 0;
	move(1, 0);
 80034dc:	2000      	movs	r0, #0
 80034de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80034e2:	f001 f91f 	bl	8004724 <move>
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80034e6:	2201      	movs	r2, #1
 80034e8:	2108      	movs	r1, #8
 80034ea:	4813      	ldr	r0, [pc, #76]	; (8003538 <moveUltraEnd+0x414>)
 80034ec:	f003 fe32 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80034f0:	2200      	movs	r2, #0
 80034f2:	2104      	movs	r1, #4
 80034f4:	4810      	ldr	r0, [pc, #64]	; (8003538 <moveUltraEnd+0x414>)
 80034f6:	f003 fe2d 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80034fa:	2201      	movs	r2, #1
 80034fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003500:	480e      	ldr	r0, [pc, #56]	; (800353c <moveUltraEnd+0x418>)
 8003502:	f003 fe27 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003506:	2200      	movs	r2, #0
 8003508:	2120      	movs	r1, #32
 800350a:	480d      	ldr	r0, [pc, #52]	; (8003540 <moveUltraEnd+0x41c>)
 800350c:	f003 fe22 	bl	8007154 <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 8003510:	4b06      	ldr	r3, [pc, #24]	; (800352c <moveUltraEnd+0x408>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2297      	movs	r2, #151	; 0x97
 8003516:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 8003518:	200a      	movs	r0, #10
 800351a:	f009 fc84 	bl	800ce26 <osDelay>
	return;
 800351e:	bf00      	nop

}
 8003520:	37b8      	adds	r7, #184	; 0xb8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000420 	.word	0x20000420
 800352c:	20000258 	.word	0x20000258
 8003530:	20000448 	.word	0x20000448
 8003534:	08014208 	.word	0x08014208
 8003538:	40020000 	.word	0x40020000
 800353c:	40021000 	.word	0x40021000
 8003540:	40020800 	.word	0x40020800

08003544 <moveUltraEndLeft>:

void moveUltraEndLeft() {
 8003544:	b580      	push	{r7, lr}
 8003546:	b0ae      	sub	sp, #184	; 0xb8
 8003548:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800354a:	2100      	movs	r1, #0
 800354c:	488e      	ldr	r0, [pc, #568]	; (8003788 <moveUltraEndLeft+0x244>)
 800354e:	f006 feb7 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8003552:	2108      	movs	r1, #8
 8003554:	488c      	ldr	r0, [pc, #560]	; (8003788 <moveUltraEndLeft+0x244>)
 8003556:	f006 feb3 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800355a:	210c      	movs	r1, #12
 800355c:	488b      	ldr	r0, [pc, #556]	; (800378c <moveUltraEndLeft+0x248>)
 800355e:	f006 feaf 	bl	800a2c0 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8003562:	4b8a      	ldr	r3, [pc, #552]	; (800378c <moveUltraEndLeft+0x248>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2297      	movs	r2, #151	; 0x97
 8003568:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 800356a:	2064      	movs	r0, #100	; 0x64
 800356c:	f009 fc5b 	bl	800ce26 <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 8003570:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003574:	2224      	movs	r2, #36	; 0x24
 8003576:	2100      	movs	r1, #0
 8003578:	4618      	mov	r0, r3
 800357a:	f00c f9af 	bl	800f8dc <memset>
 800357e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003582:	653b      	str	r3, [r7, #80]	; 0x50
 8003584:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8003588:	65bb      	str	r3, [r7, #88]	; 0x58
 800358a:	f640 0398 	movw	r3, #2200	; 0x898
 800358e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003590:	4b7f      	ldr	r3, [pc, #508]	; (8003790 <moveUltraEndLeft+0x24c>)
 8003592:	663b      	str	r3, [r7, #96]	; 0x60
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 8003594:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003598:	2224      	movs	r2, #36	; 0x24
 800359a:	2100      	movs	r1, #0
 800359c:	4618      	mov	r0, r3
 800359e:	f00c f99d 	bl	800f8dc <memset>
 80035a2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80035a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035a8:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80035ac:	637b      	str	r3, [r7, #52]	; 0x34
 80035ae:	f640 0398 	movw	r3, #2200	; 0x898
 80035b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80035b4:	4b76      	ldr	r3, [pc, #472]	; (8003790 <moveUltraEndLeft+0x24c>)
 80035b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 80035b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035bc:	4618      	mov	r0, r3
 80035be:	f002 fd61 	bl	8006084 <PIDController_Init>
	PIDController_Init(&pidRight);
 80035c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035c6:	4618      	mov	r0, r3
 80035c8:	f002 fd5c 	bl	8006084 <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 80035cc:	4b71      	ldr	r3, [pc, #452]	; (8003794 <moveUltraEndLeft+0x250>)
 80035ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 80035d2:	4b71      	ldr	r3, [pc, #452]	; (8003798 <moveUltraEndLeft+0x254>)
 80035d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 22.4f; // NEED TO MEASURE AND CHANGE
 80035d8:	4b70      	ldr	r3, [pc, #448]	; (800379c <moveUltraEndLeft+0x258>)
 80035da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 80035de:	213c      	movs	r1, #60	; 0x3c
 80035e0:	486f      	ldr	r0, [pc, #444]	; (80037a0 <moveUltraEndLeft+0x25c>)
 80035e2:	f007 f953 	bl	800a88c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 80035e6:	213c      	movs	r1, #60	; 0x3c
 80035e8:	486e      	ldr	r0, [pc, #440]	; (80037a4 <moveUltraEndLeft+0x260>)
 80035ea:	f007 f94f 	bl	800a88c <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 80035ee:	4b6c      	ldr	r3, [pc, #432]	; (80037a0 <moveUltraEndLeft+0x25c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 80035f8:	4b6a      	ldr	r3, [pc, #424]	; (80037a4 <moveUltraEndLeft+0x260>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8003602:	f003 fa29 	bl	8006a58 <HAL_GetTick>
 8003606:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 800360a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800360e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float totalDistance_right = 0;
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8003622:	2300      	movs	r3, #0
 8003624:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int diffRight = 0;
 8003628:	2300      	movs	r3, #0
 800362a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 3000;
 800362e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003632:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t pwmValC = 3000;
 8003636:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800363a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800363e:	2201      	movs	r2, #1
 8003640:	2108      	movs	r1, #8
 8003642:	4859      	ldr	r0, [pc, #356]	; (80037a8 <moveUltraEndLeft+0x264>)
 8003644:	f003 fd86 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003648:	2200      	movs	r2, #0
 800364a:	2104      	movs	r1, #4
 800364c:	4856      	ldr	r0, [pc, #344]	; (80037a8 <moveUltraEndLeft+0x264>)
 800364e:	f003 fd81 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8003652:	2201      	movs	r2, #1
 8003654:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003658:	4854      	ldr	r0, [pc, #336]	; (80037ac <moveUltraEndLeft+0x268>)
 800365a:	f003 fd7b 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 800365e:	2200      	movs	r2, #0
 8003660:	2120      	movs	r1, #32
 8003662:	4853      	ldr	r0, [pc, #332]	; (80037b0 <moveUltraEndLeft+0x26c>)
 8003664:	f003 fd76 	bl	8007154 <HAL_GPIO_WritePin>

	totalAngle = 0.0;
 8003668:	4952      	ldr	r1, [pc, #328]	; (80037b4 <moveUltraEndLeft+0x270>)
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	e9c1 2300 	strd	r2, r3, [r1]

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8003676:	4b44      	ldr	r3, [pc, #272]	; (8003788 <moveUltraEndLeft+0x244>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800367e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8003680:	4b41      	ldr	r3, [pc, #260]	; (8003788 <moveUltraEndLeft+0x244>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8003688:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 800368a:	f003 f9e5 	bl	8006a58 <HAL_GetTick>
 800368e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		moving = 1;
 8003692:	4b49      	ldr	r3, [pc, #292]	; (80037b8 <moveUltraEndLeft+0x274>)
 8003694:	2201      	movs	r2, #1
 8003696:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 8003698:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800369c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b3c      	cmp	r3, #60	; 0x3c
 80036a4:	d9e7      	bls.n	8003676 <moveUltraEndLeft+0x132>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 80036a6:	4b3e      	ldr	r3, [pc, #248]	; (80037a0 <moveUltraEndLeft+0x25c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 80036b0:	4b3c      	ldr	r3, [pc, #240]	; (80037a4 <moveUltraEndLeft+0x260>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	67fb      	str	r3, [r7, #124]	; 0x7c

			diffLeft = 0;
 80036b8:	2300      	movs	r3, #0
 80036ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			diffRight = 0;
 80036be:	2300      	movs	r3, #0
 80036c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 80036c4:	4b36      	ldr	r3, [pc, #216]	; (80037a0 <moveUltraEndLeft+0x25c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0310 	and.w	r3, r3, #16
 80036ce:	2b10      	cmp	r3, #16
 80036d0:	d118      	bne.n	8003704 <moveUltraEndLeft+0x1c0>
				if (leftTick < leftTick_prev)
 80036d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036da:	429a      	cmp	r2, r3
 80036dc:	da07      	bge.n	80036ee <moveUltraEndLeft+0x1aa>
					diffLeft = leftTick_prev - leftTick;
 80036de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036ec:	e022      	b.n	8003734 <moveUltraEndLeft+0x1f0>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 80036ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80036f2:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80036f6:	33ff      	adds	r3, #255	; 0xff
 80036f8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036fc:	4413      	add	r3, r2
 80036fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003702:	e017      	b.n	8003734 <moveUltraEndLeft+0x1f0>
			} else {
				if (leftTick > leftTick_prev)
 8003704:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003708:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800370c:	429a      	cmp	r2, r3
 800370e:	dd07      	ble.n	8003720 <moveUltraEndLeft+0x1dc>
					diffLeft = leftTick - leftTick_prev;
 8003710:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003714:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800371e:	e009      	b.n	8003734 <moveUltraEndLeft+0x1f0>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 8003720:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003724:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003728:	33ff      	adds	r3, #255	; 0xff
 800372a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800372e:	4413      	add	r3, r2
 8003730:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 8003734:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <moveUltraEndLeft+0x260>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0310 	and.w	r3, r3, #16
 800373e:	2b10      	cmp	r3, #16
 8003740:	d115      	bne.n	800376e <moveUltraEndLeft+0x22a>
				if (rightTick < rightTick_prev)
 8003742:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003744:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003748:	429a      	cmp	r2, r3
 800374a:	da06      	bge.n	800375a <moveUltraEndLeft+0x216>
					diffRight = rightTick_prev - rightTick;
 800374c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003750:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003758:	e039      	b.n	80037ce <moveUltraEndLeft+0x28a>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 800375a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800375c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003760:	33ff      	adds	r3, #255	; 0xff
 8003762:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003766:	4413      	add	r3, r2
 8003768:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800376c:	e02f      	b.n	80037ce <moveUltraEndLeft+0x28a>
			} else {
				if (rightTick > rightTick_prev)
 800376e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003770:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003774:	429a      	cmp	r2, r3
 8003776:	dd21      	ble.n	80037bc <moveUltraEndLeft+0x278>
					diffRight = rightTick - rightTick_prev;
 8003778:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800377a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003784:	e023      	b.n	80037ce <moveUltraEndLeft+0x28a>
 8003786:	bf00      	nop
 8003788:	20000378 	.word	0x20000378
 800378c:	20000258 	.word	0x20000258
 8003790:	3d4ccccd 	.word	0x3d4ccccd
 8003794:	44440000 	.word	0x44440000
 8003798:	4442c000 	.word	0x4442c000
 800379c:	41b33333 	.word	0x41b33333
 80037a0:	200002a0 	.word	0x200002a0
 80037a4:	20000330 	.word	0x20000330
 80037a8:	40020000 	.word	0x40020000
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40020800 	.word	0x40020800
 80037b4:	20000418 	.word	0x20000418
 80037b8:	20000414 	.word	0x20000414
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 80037bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80037c0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80037c4:	33ff      	adds	r3, #255	; 0xff
 80037c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80037c8:	4413      	add	r3, r2
 80037ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 80037ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80037da:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80037de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037e2:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80037e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ea:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
					* wheel_circumference;
			totalDistance_left += distLeft;
 80037ee:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 80037f2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80037f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037fa:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 80037fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003802:	ee07 3a90 	vmov	s15, r3
 8003806:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800380a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800380e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003812:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800381a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
					* wheel_circumference;
			totalDistance_right += distRight;
 800381e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003822:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003826:	ee77 7a27 	vadd.f32	s15, s14, s15
 800382a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			 pwmValA = PIDController_Update(&pidLeft, totalDistance_right*STRAIGHTRATIOF, totalDistance_left, pwmValA);
//
//			 pwmValC = PIDController_Update(&pidRight, totalDistance_left, totalDistance_right*STRAIGHTRATIOF, pwmValC);

			//if robot doesnt go straight, using gyro to adjust, straight = 145
			if (totalAngle < 0.00) //veering right
 800382e:	4b46      	ldr	r3, [pc, #280]	; (8003948 <moveUltraEndLeft+0x404>)
 8003830:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	f7fd f94e 	bl	8000adc <__aeabi_dcmplt>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d006      	beq.n	8003854 <moveUltraEndLeft+0x310>
					{

				htim1.Instance->CCR4 = 138; //left abit
 8003846:	4b41      	ldr	r3, [pc, #260]	; (800394c <moveUltraEndLeft+0x408>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	228a      	movs	r2, #138	; 0x8a
 800384c:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 800384e:	200a      	movs	r0, #10
 8003850:	f009 fae9 	bl	800ce26 <osDelay>
			}
			if (totalAngle > 0.00) //veering left
 8003854:	4b3c      	ldr	r3, [pc, #240]	; (8003948 <moveUltraEndLeft+0x404>)
 8003856:	e9d3 0100 	ldrd	r0, r1, [r3]
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	f7fd f959 	bl	8000b18 <__aeabi_dcmpgt>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d006      	beq.n	800387a <moveUltraEndLeft+0x336>
					{

				htim1.Instance->CCR4 = 152; //right a bit
 800386c:	4b37      	ldr	r3, [pc, #220]	; (800394c <moveUltraEndLeft+0x408>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2298      	movs	r2, #152	; 0x98
 8003872:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 8003874:	200a      	movs	r0, #10
 8003876:	f009 fad6 	bl	800ce26 <osDelay>
			}
			if (totalAngle == 0.00) {
 800387a:	4b33      	ldr	r3, [pc, #204]	; (8003948 <moveUltraEndLeft+0x404>)
 800387c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	f7fd f91e 	bl	8000ac8 <__aeabi_dcmpeq>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d006      	beq.n	80038a0 <moveUltraEndLeft+0x35c>
				//				 servo = STRAIGHT;
				htim1.Instance->CCR4 = STRAIGHT; //Straight
 8003892:	4b2e      	ldr	r3, [pc, #184]	; (800394c <moveUltraEndLeft+0x408>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2297      	movs	r2, #151	; 0x97
 8003898:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 800389a:	200a      	movs	r0, #10
 800389c:	f009 fac3 	bl	800ce26 <osDelay>
			}

			prevTime = currTime;
 80038a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			leftTick_prev = leftTick;
 80038a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			rightTick_prev = rightTick;
 80038b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			//taking in decimal place
			if (Distance < 8) {
 80038b6:	4b26      	ldr	r3, [pc, #152]	; (8003950 <moveUltraEndLeft+0x40c>)
 80038b8:	edd3 7a00 	vldr	s15, [r3]
 80038bc:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80038c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c8:	d417      	bmi.n	80038fa <moveUltraEndLeft+0x3b6>
				break;
			}
			sprintf(messageA, "angle %5d\0", (int) (actualAngle));
 80038ca:	4b22      	ldr	r3, [pc, #136]	; (8003954 <moveUltraEndLeft+0x410>)
 80038cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d0:	4610      	mov	r0, r2
 80038d2:	4619      	mov	r1, r3
 80038d4:	f7fd f940 	bl	8000b58 <__aeabi_d2iz>
 80038d8:	4602      	mov	r2, r0
 80038da:	f107 0318 	add.w	r3, r7, #24
 80038de:	491e      	ldr	r1, [pc, #120]	; (8003958 <moveUltraEndLeft+0x414>)
 80038e0:	4618      	mov	r0, r3
 80038e2:	f00c fe83 	bl	80105ec <siprintf>
			OLED_ShowString(10, 20, messageA);
 80038e6:	f107 0318 	add.w	r3, r7, #24
 80038ea:	461a      	mov	r2, r3
 80038ec:	2114      	movs	r1, #20
 80038ee:	200a      	movs	r0, #10
 80038f0:	f002 fb0a 	bl	8005f08 <OLED_ShowString>
			OLED_Refresh_Gram();
 80038f4:	f002 f994 	bl	8005c20 <OLED_Refresh_Gram>
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 80038f8:	e6bd      	b.n	8003676 <moveUltraEndLeft+0x132>
				break;
 80038fa:	bf00      	nop
		}
	}

//	moving = 0;
	move(1, 0);
 80038fc:	2000      	movs	r0, #0
 80038fe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003902:	f000 ff0f 	bl	8004724 <move>
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8003906:	2201      	movs	r2, #1
 8003908:	2108      	movs	r1, #8
 800390a:	4814      	ldr	r0, [pc, #80]	; (800395c <moveUltraEndLeft+0x418>)
 800390c:	f003 fc22 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003910:	2200      	movs	r2, #0
 8003912:	2104      	movs	r1, #4
 8003914:	4811      	ldr	r0, [pc, #68]	; (800395c <moveUltraEndLeft+0x418>)
 8003916:	f003 fc1d 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 800391a:	2201      	movs	r2, #1
 800391c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003920:	480f      	ldr	r0, [pc, #60]	; (8003960 <moveUltraEndLeft+0x41c>)
 8003922:	f003 fc17 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003926:	2200      	movs	r2, #0
 8003928:	2120      	movs	r1, #32
 800392a:	480e      	ldr	r0, [pc, #56]	; (8003964 <moveUltraEndLeft+0x420>)
 800392c:	f003 fc12 	bl	8007154 <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 8003930:	4b06      	ldr	r3, [pc, #24]	; (800394c <moveUltraEndLeft+0x408>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2297      	movs	r2, #151	; 0x97
 8003936:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 8003938:	200a      	movs	r0, #10
 800393a:	f009 fa74 	bl	800ce26 <osDelay>
	return;
 800393e:	bf00      	nop

}
 8003940:	37b8      	adds	r7, #184	; 0xb8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	20000418 	.word	0x20000418
 800394c:	20000258 	.word	0x20000258
 8003950:	20000448 	.word	0x20000448
 8003954:	20000420 	.word	0x20000420
 8003958:	08014208 	.word	0x08014208
 800395c:	40020000 	.word	0x40020000
 8003960:	40021000 	.word	0x40021000
 8003964:	40020800 	.word	0x40020800

08003968 <sendToRPI>:
/**
 * @brief send msg to RPI through UART after execute command
 * @param msg[] for the message to be sent
 * @retval None
 */
void sendToRPI(char *msg) {
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg), 0xFFFF);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7fc fc2d 	bl	80001d0 <strlen>
 8003976:	4603      	mov	r3, r0
 8003978:	b29a      	uxth	r2, r3
 800397a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4803      	ldr	r0, [pc, #12]	; (8003990 <sendToRPI+0x28>)
 8003982:	f008 f914 	bl	800bbae <HAL_UART_Transmit>
}
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	200003c0 	.word	0x200003c0
 8003994:	00000000 	.word	0x00000000

08003998 <moveGyroPID>:

//gyro for straight

void moveGyroPID(float distance, int forward) {
 8003998:	b5b0      	push	{r4, r5, r7, lr}
 800399a:	b0b2      	sub	sp, #200	; 0xc8
 800399c:	af00      	add	r7, sp, #0
 800399e:	ed87 0a01 	vstr	s0, [r7, #4]
 80039a2:	6038      	str	r0, [r7, #0]

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80039a4:	2100      	movs	r1, #0
 80039a6:	489c      	ldr	r0, [pc, #624]	; (8003c18 <moveGyroPID+0x280>)
 80039a8:	f006 fc8a 	bl	800a2c0 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80039ac:	2108      	movs	r1, #8
 80039ae:	489a      	ldr	r0, [pc, #616]	; (8003c18 <moveGyroPID+0x280>)
 80039b0:	f006 fc86 	bl	800a2c0 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80039b4:	210c      	movs	r1, #12
 80039b6:	4899      	ldr	r0, [pc, #612]	; (8003c1c <moveGyroPID+0x284>)
 80039b8:	f006 fc82 	bl	800a2c0 <HAL_TIM_PWM_Start>

		htim1.Instance->CCR4 = STRAIGHT; //centre
 80039bc:	4b97      	ldr	r3, [pc, #604]	; (8003c1c <moveGyroPID+0x284>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2297      	movs	r2, #151	; 0x97
 80039c2:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(40);
 80039c4:	2028      	movs	r0, #40	; 0x28
 80039c6:	f009 fa2e 	bl	800ce26 <osDelay>

		// init PID controller (left)
		PIDController pidLeft = { PID_KP, PID_KI,
 80039ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039ce:	2224      	movs	r2, #36	; 0x24
 80039d0:	2100      	movs	r1, #0
 80039d2:	4618      	mov	r0, r3
 80039d4:	f00b ff82 	bl	800f8dc <memset>
 80039d8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80039dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80039de:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80039e2:	663b      	str	r3, [r7, #96]	; 0x60
 80039e4:	f640 0398 	movw	r3, #2200	; 0x898
 80039e8:	667b      	str	r3, [r7, #100]	; 0x64
 80039ea:	4b8d      	ldr	r3, [pc, #564]	; (8003c20 <moveGyroPID+0x288>)
 80039ec:	66bb      	str	r3, [r7, #104]	; 0x68
		PID_LIM_MIN, PID_LIM_MAX,
		SAMPLE_TIME_S };

		// init PID controller (right)
		PIDController pidRight = { PID_KP, PID_KI,
 80039ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039f2:	2224      	movs	r2, #36	; 0x24
 80039f4:	2100      	movs	r1, #0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f00b ff70 	bl	800f8dc <memset>
 80039fc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003a00:	637b      	str	r3, [r7, #52]	; 0x34
 8003a02:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8003a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a08:	f640 0398 	movw	r3, #2200	; 0x898
 8003a0c:	643b      	str	r3, [r7, #64]	; 0x40
 8003a0e:	4b84      	ldr	r3, [pc, #528]	; (8003c20 <moveGyroPID+0x288>)
 8003a10:	647b      	str	r3, [r7, #68]	; 0x44
		PID_LIM_MIN, PID_LIM_MAX,
		SAMPLE_TIME_S };

		PIDController_Init(&pidLeft);
 8003a12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a16:	4618      	mov	r0, r3
 8003a18:	f002 fb34 	bl	8006084 <PIDController_Init>
		PIDController_Init(&pidRight);
 8003a1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a20:	4618      	mov	r0, r3
 8003a22:	f002 fb2f 	bl	8006084 <PIDController_Init>

		//reset angle
		actualAngle = 0;
 8003a26:	497f      	ldr	r1, [pc, #508]	; (8003c24 <moveGyroPID+0x28c>)
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	e9c1 2300 	strd	r2, r3, [r1]

		// wheel information
		float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 8003a34:	4b7c      	ldr	r3, [pc, #496]	; (8003c28 <moveGyroPID+0x290>)
 8003a36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		float wheel_rotationTicksR = 779; // for back right wheel
 8003a3a:	4b7c      	ldr	r3, [pc, #496]	; (8003c2c <moveGyroPID+0x294>)
 8003a3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		float wheel_circumference = 21.1; // NEED TO MEASURE AND CHANGE
 8003a40:	4b7b      	ldr	r3, [pc, #492]	; (8003c30 <moveGyroPID+0x298>)
 8003a42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		// start encoder
		HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8003a46:	213c      	movs	r1, #60	; 0x3c
 8003a48:	487a      	ldr	r0, [pc, #488]	; (8003c34 <moveGyroPID+0x29c>)
 8003a4a:	f006 ff1f 	bl	800a88c <HAL_TIM_Encoder_Start>
		HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 8003a4e:	213c      	movs	r1, #60	; 0x3c
 8003a50:	4879      	ldr	r0, [pc, #484]	; (8003c38 <moveGyroPID+0x2a0>)
 8003a52:	f006 ff1b 	bl	800a88c <HAL_TIM_Encoder_Start>

		// wheel ticks
		int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8003a56:	4b77      	ldr	r3, [pc, #476]	; (8003c34 <moveGyroPID+0x29c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8003a60:	4b75      	ldr	r3, [pc, #468]	; (8003c38 <moveGyroPID+0x2a0>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

		// cpu ticks
		uint32_t startTime = HAL_GetTick();
 8003a6a:	f002 fff5 	bl	8006a58 <HAL_GetTick>
 8003a6e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		uint32_t prevTime = startTime;
 8003a72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		uint32_t currTime;

		// distance checkers for both wheels
		float totalDistance_left = 0;
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		float totalDistance_right = 0;
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		float distRight;

		int leftTick;
		int rightTick;

		int diffLeft = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		int diffRight = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		float distErrOffset;

		int servo;

		//pwm values
		uint16_t pwmValA = 2000;
 8003a96:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003a9a:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
		uint16_t pwmValC = 2000;
 8003a9e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003aa2:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0

		// OLED variables for testing PID
		uint8_t messageA[20];
		uint8_t messageB[20];

		if (forward) {
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d015      	beq.n	8003ad8 <moveGyroPID+0x140>
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8003aac:	2201      	movs	r2, #1
 8003aae:	2108      	movs	r1, #8
 8003ab0:	4862      	ldr	r0, [pc, #392]	; (8003c3c <moveGyroPID+0x2a4>)
 8003ab2:	f003 fb4f 	bl	8007154 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2104      	movs	r1, #4
 8003aba:	4860      	ldr	r0, [pc, #384]	; (8003c3c <moveGyroPID+0x2a4>)
 8003abc:	f003 fb4a 	bl	8007154 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ac6:	485e      	ldr	r0, [pc, #376]	; (8003c40 <moveGyroPID+0x2a8>)
 8003ac8:	f003 fb44 	bl	8007154 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8003acc:	2200      	movs	r2, #0
 8003ace:	2120      	movs	r1, #32
 8003ad0:	485c      	ldr	r0, [pc, #368]	; (8003c44 <moveGyroPID+0x2ac>)
 8003ad2:	f003 fb3f 	bl	8007154 <HAL_GPIO_WritePin>
 8003ad6:	e014      	b.n	8003b02 <moveGyroPID+0x16a>
		} else {
			HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8003ad8:	2200      	movs	r2, #0
 8003ada:	2108      	movs	r1, #8
 8003adc:	4857      	ldr	r0, [pc, #348]	; (8003c3c <moveGyroPID+0x2a4>)
 8003ade:	f003 fb39 	bl	8007154 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	2104      	movs	r1, #4
 8003ae6:	4855      	ldr	r0, [pc, #340]	; (8003c3c <moveGyroPID+0x2a4>)
 8003ae8:	f003 fb34 	bl	8007154 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8003aec:	2200      	movs	r2, #0
 8003aee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003af2:	4853      	ldr	r0, [pc, #332]	; (8003c40 <moveGyroPID+0x2a8>)
 8003af4:	f003 fb2e 	bl	8007154 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8003af8:	2201      	movs	r2, #1
 8003afa:	2120      	movs	r1, #32
 8003afc:	4851      	ldr	r0, [pc, #324]	; (8003c44 <moveGyroPID+0x2ac>)
 8003afe:	f003 fb29 	bl	8007154 <HAL_GPIO_WritePin>
	//		else
	//			distErrOffset = DISTANCE_ERROR_OFFSETR;
	//	}

		// outdoor
		if (forward) {
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d045      	beq.n	8003b94 <moveGyroPID+0x1fc>
			if (distance == 10)
 8003b08:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b0c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b10:	eef4 7a47 	vcmp.f32	s15, s14
 8003b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b18:	d103      	bne.n	8003b22 <moveGyroPID+0x18a>
				distErrOffset = -0.2;
 8003b1a:	4b4b      	ldr	r3, [pc, #300]	; (8003c48 <moveGyroPID+0x2b0>)
 8003b1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b20:	e0a7      	b.n	8003c72 <moveGyroPID+0x2da>
			else if (distance == 20)
 8003b22:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b26:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003b2a:	eef4 7a47 	vcmp.f32	s15, s14
 8003b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b32:	d103      	bne.n	8003b3c <moveGyroPID+0x1a4>
				distErrOffset = -0.15;
 8003b34:	4b45      	ldr	r3, [pc, #276]	; (8003c4c <moveGyroPID+0x2b4>)
 8003b36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b3a:	e09a      	b.n	8003c72 <moveGyroPID+0x2da>
			else if (distance == 30)
 8003b3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b40:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003b44:	eef4 7a47 	vcmp.f32	s15, s14
 8003b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4c:	d103      	bne.n	8003b56 <moveGyroPID+0x1be>
				distErrOffset = DISTANCE_ERROR_OFFSETF;
 8003b4e:	4b40      	ldr	r3, [pc, #256]	; (8003c50 <moveGyroPID+0x2b8>)
 8003b50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b54:	e08d      	b.n	8003c72 <moveGyroPID+0x2da>
			else if (distance == 40)
 8003b56:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b5a:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003c54 <moveGyroPID+0x2bc>
 8003b5e:	eef4 7a47 	vcmp.f32	s15, s14
 8003b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b66:	d103      	bne.n	8003b70 <moveGyroPID+0x1d8>
				distErrOffset = DISTANCE_ERROR_OFFSETF;
 8003b68:	4b39      	ldr	r3, [pc, #228]	; (8003c50 <moveGyroPID+0x2b8>)
 8003b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b6e:	e080      	b.n	8003c72 <moveGyroPID+0x2da>
			else if (distance == 50)
 8003b70:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b74:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003c58 <moveGyroPID+0x2c0>
 8003b78:	eef4 7a47 	vcmp.f32	s15, s14
 8003b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b80:	d104      	bne.n	8003b8c <moveGyroPID+0x1f4>
				distErrOffset = 0;
 8003b82:	f04f 0300 	mov.w	r3, #0
 8003b86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b8a:	e072      	b.n	8003c72 <moveGyroPID+0x2da>
			else
				distErrOffset = DISTANCE_ERROR_OFFSETF;
 8003b8c:	4b30      	ldr	r3, [pc, #192]	; (8003c50 <moveGyroPID+0x2b8>)
 8003b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b92:	e06e      	b.n	8003c72 <moveGyroPID+0x2da>
		} else {
			if (distance == 10)
 8003b94:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b98:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b9c:	eef4 7a47 	vcmp.f32	s15, s14
 8003ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ba4:	d103      	bne.n	8003bae <moveGyroPID+0x216>
				distErrOffset = -0.1;
 8003ba6:	4b2d      	ldr	r3, [pc, #180]	; (8003c5c <moveGyroPID+0x2c4>)
 8003ba8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003bac:	e061      	b.n	8003c72 <moveGyroPID+0x2da>
			else if (distance == 20)
 8003bae:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bb2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003bb6:	eef4 7a47 	vcmp.f32	s15, s14
 8003bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bbe:	d103      	bne.n	8003bc8 <moveGyroPID+0x230>
				distErrOffset = DISTANCE_ERROR_OFFSETR;
 8003bc0:	4b27      	ldr	r3, [pc, #156]	; (8003c60 <moveGyroPID+0x2c8>)
 8003bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003bc6:	e054      	b.n	8003c72 <moveGyroPID+0x2da>
			else if (distance == 30)
 8003bc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bcc:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003bd0:	eef4 7a47 	vcmp.f32	s15, s14
 8003bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd8:	d103      	bne.n	8003be2 <moveGyroPID+0x24a>
				distErrOffset = -0.03;
 8003bda:	4b22      	ldr	r3, [pc, #136]	; (8003c64 <moveGyroPID+0x2cc>)
 8003bdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003be0:	e047      	b.n	8003c72 <moveGyroPID+0x2da>
			else if (distance == 40)
 8003be2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003be6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003c54 <moveGyroPID+0x2bc>
 8003bea:	eef4 7a47 	vcmp.f32	s15, s14
 8003bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf2:	d103      	bne.n	8003bfc <moveGyroPID+0x264>
				distErrOffset = -0.02;
 8003bf4:	4b1c      	ldr	r3, [pc, #112]	; (8003c68 <moveGyroPID+0x2d0>)
 8003bf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003bfa:	e03a      	b.n	8003c72 <moveGyroPID+0x2da>
			else if (distance == 50)
 8003bfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c00:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003c58 <moveGyroPID+0x2c0>
 8003c04:	eef4 7a47 	vcmp.f32	s15, s14
 8003c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c0c:	d12e      	bne.n	8003c6c <moveGyroPID+0x2d4>
				distErrOffset = 0;
 8003c0e:	f04f 0300 	mov.w	r3, #0
 8003c12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003c16:	e02c      	b.n	8003c72 <moveGyroPID+0x2da>
 8003c18:	20000378 	.word	0x20000378
 8003c1c:	20000258 	.word	0x20000258
 8003c20:	3d4ccccd 	.word	0x3d4ccccd
 8003c24:	20000420 	.word	0x20000420
 8003c28:	44440000 	.word	0x44440000
 8003c2c:	4442c000 	.word	0x4442c000
 8003c30:	41a8cccd 	.word	0x41a8cccd
 8003c34:	200002a0 	.word	0x200002a0
 8003c38:	20000330 	.word	0x20000330
 8003c3c:	40020000 	.word	0x40020000
 8003c40:	40021000 	.word	0x40021000
 8003c44:	40020800 	.word	0x40020800
 8003c48:	be4ccccd 	.word	0xbe4ccccd
 8003c4c:	be19999a 	.word	0xbe19999a
 8003c50:	bd0f5c29 	.word	0xbd0f5c29
 8003c54:	42200000 	.word	0x42200000
 8003c58:	42480000 	.word	0x42480000
 8003c5c:	bdcccccd 	.word	0xbdcccccd
 8003c60:	bd75c28f 	.word	0xbd75c28f
 8003c64:	bcf5c28f 	.word	0xbcf5c28f
 8003c68:	bca3d70a 	.word	0xbca3d70a
			else
				distErrOffset = DISTANCE_ERROR_OFFSETR;
 8003c6c:	4bcc      	ldr	r3, [pc, #816]	; (8003fa0 <moveGyroPID+0x608>)
 8003c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		/*Infinite loop*/
		for (;;) {
			if (totalDistance_left >= (distance + distanceError) * 0.9
 8003c72:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8003c76:	f7fc fc67 	bl	8000548 <__aeabi_f2d>
 8003c7a:	4604      	mov	r4, r0
 8003c7c:	460d      	mov	r5, r1
 8003c7e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003c82:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c8a:	ee17 0a90 	vmov	r0, s15
 8003c8e:	f7fc fc5b 	bl	8000548 <__aeabi_f2d>
 8003c92:	a3c1      	add	r3, pc, #772	; (adr r3, 8003f98 <moveGyroPID+0x600>)
 8003c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c98:	f7fc fcae 	bl	80005f8 <__aeabi_dmul>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	4629      	mov	r1, r5
 8003ca4:	f7fc ff2e 	bl	8000b04 <__aeabi_dcmpge>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d11d      	bne.n	8003cea <moveGyroPID+0x352>
					|| totalDistance_right >= (distance + distanceError) * 0.9) {
 8003cae:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8003cb2:	f7fc fc49 	bl	8000548 <__aeabi_f2d>
 8003cb6:	4604      	mov	r4, r0
 8003cb8:	460d      	mov	r5, r1
 8003cba:	ed97 7a01 	vldr	s14, [r7, #4]
 8003cbe:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cc6:	ee17 0a90 	vmov	r0, s15
 8003cca:	f7fc fc3d 	bl	8000548 <__aeabi_f2d>
 8003cce:	a3b2      	add	r3, pc, #712	; (adr r3, 8003f98 <moveGyroPID+0x600>)
 8003cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd4:	f7fc fc90 	bl	80005f8 <__aeabi_dmul>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4620      	mov	r0, r4
 8003cde:	4629      	mov	r1, r5
 8003ce0:	f7fc ff10 	bl	8000b04 <__aeabi_dcmpge>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d007      	beq.n	8003cfa <moveGyroPID+0x362>
				pwmValA = 1000;
 8003cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cee:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
				pwmValC = 1000;
 8003cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cf6:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0

			}

			__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8003cfa:	4baa      	ldr	r3, [pc, #680]	; (8003fa4 <moveGyroPID+0x60c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8003d02:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 8003d04:	4ba7      	ldr	r3, [pc, #668]	; (8003fa4 <moveGyroPID+0x60c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8003d0c:	63da      	str	r2, [r3, #60]	; 0x3c
			currTime = HAL_GetTick();
 8003d0e:	f002 fea3 	bl	8006a58 <HAL_GetTick>
 8003d12:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			moving = 1;
 8003d16:	4ba4      	ldr	r3, [pc, #656]	; (8003fa8 <moveGyroPID+0x610>)
 8003d18:	2201      	movs	r2, #1
 8003d1a:	701a      	strb	r2, [r3, #0]

			if (currTime - prevTime > 60L) {
 8003d1c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003d20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b3c      	cmp	r3, #60	; 0x3c
 8003d28:	d9a3      	bls.n	8003c72 <moveGyroPID+0x2da>
				leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 8003d2a:	4ba0      	ldr	r3, [pc, #640]	; (8003fac <moveGyroPID+0x614>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8003d34:	4b9e      	ldr	r3, [pc, #632]	; (8003fb0 <moveGyroPID+0x618>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

				diffLeft = 0;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
				diffRight = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

				if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8003d4a:	4b98      	ldr	r3, [pc, #608]	; (8003fac <moveGyroPID+0x614>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b10      	cmp	r3, #16
 8003d56:	d118      	bne.n	8003d8a <moveGyroPID+0x3f2>
					if (leftTick < leftTick_prev)
 8003d58:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003d5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d60:	429a      	cmp	r2, r3
 8003d62:	da07      	bge.n	8003d74 <moveGyroPID+0x3dc>
						diffLeft = leftTick_prev - leftTick;
 8003d64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d72:	e022      	b.n	8003dba <moveGyroPID+0x422>
					else
						diffLeft = (65535 - leftTick) + leftTick_prev;
 8003d74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d78:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003d7c:	33ff      	adds	r3, #255	; 0xff
 8003d7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d82:	4413      	add	r3, r2
 8003d84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d88:	e017      	b.n	8003dba <moveGyroPID+0x422>
				} else {
					if (leftTick > leftTick_prev)
 8003d8a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003d8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d92:	429a      	cmp	r2, r3
 8003d94:	dd07      	ble.n	8003da6 <moveGyroPID+0x40e>
						diffLeft = leftTick - leftTick_prev;
 8003d96:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003d9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003da4:	e009      	b.n	8003dba <moveGyroPID+0x422>
					else
						diffLeft = 65535 - leftTick_prev + leftTick;
 8003da6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003daa:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003dae:	33ff      	adds	r3, #255	; 0xff
 8003db0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003db4:	4413      	add	r3, r2
 8003db6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
				}

				if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 8003dba:	4b7d      	ldr	r3, [pc, #500]	; (8003fb0 <moveGyroPID+0x618>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0310 	and.w	r3, r3, #16
 8003dc4:	2b10      	cmp	r3, #16
 8003dc6:	d118      	bne.n	8003dfa <moveGyroPID+0x462>
					if (rightTick < rightTick_prev)
 8003dc8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003dcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	da07      	bge.n	8003de4 <moveGyroPID+0x44c>
						diffRight = rightTick_prev - rightTick;
 8003dd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003de2:	e022      	b.n	8003e2a <moveGyroPID+0x492>
					else
						diffRight = (65535 - rightTick) + rightTick_prev;
 8003de4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003de8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003dec:	33ff      	adds	r3, #255	; 0xff
 8003dee:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003df2:	4413      	add	r3, r2
 8003df4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003df8:	e017      	b.n	8003e2a <moveGyroPID+0x492>
				} else {
					if (rightTick > rightTick_prev)
 8003dfa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003dfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e02:	429a      	cmp	r2, r3
 8003e04:	dd07      	ble.n	8003e16 <moveGyroPID+0x47e>
						diffRight = rightTick - rightTick_prev;
 8003e06:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003e0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e14:	e009      	b.n	8003e2a <moveGyroPID+0x492>
					else
						diffRight = 65535 - rightTick_prev + rightTick;
 8003e16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e1a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003e1e:	33ff      	adds	r3, #255	; 0xff
 8003e20:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003e24:	4413      	add	r3, r2
 8003e26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				}

				// left measured distance
				distLeft = ((float) diffLeft / wheel_rotationTicksL)
 8003e2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e2e:	ee07 3a90 	vmov	s15, r3
 8003e32:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003e36:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8003e3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e3e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e46:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
						* wheel_circumference;
				totalDistance_left += distLeft;
 8003e4a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003e4e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003e52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e56:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8

				// right measured distance
				distRight = ((float) diffRight / wheel_rotationTicksR)
 8003e5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e5e:	ee07 3a90 	vmov	s15, r3
 8003e62:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003e66:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e6e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e76:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
						* wheel_circumference;
				totalDistance_right += distRight;
 8003e7a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003e7e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003e82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e86:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
				// 1.015 veer right, 1.005 veer left, 1.010 ABIT right, 1.008 almost perfect.

	#define pwmValAadjust 300;
	#define pwmValBadjust 525;

				if (forward) {
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d030      	beq.n	8003ef2 <moveGyroPID+0x55a>

					pwmValA = PIDController_Update(&pidLeft,
 8003e90:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8003e94:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003e98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e9c:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8003ea0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ea4:	4611      	mov	r1, r2
 8003ea6:	edd7 0a2e 	vldr	s1, [r7, #184]	; 0xb8
 8003eaa:	eeb0 0a67 	vmov.f32	s0, s15
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f002 f900 	bl	80060b4 <PIDController_Update>
 8003eb4:	4603      	mov	r3, r0
							totalDistance_right * STRAIGHTRATIOF,
							totalDistance_left, pwmValA) - pwmValAadjust
 8003eb6:	b29b      	uxth	r3, r3
					pwmValA = PIDController_Update(&pidLeft,
 8003eb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003ebc:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
					;

					pwmValC = PIDController_Update(&pidRight, totalDistance_left,
 8003ec0:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8003ec4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003ec8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ecc:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8003ed0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ed4:	4611      	mov	r1, r2
 8003ed6:	eef0 0a67 	vmov.f32	s1, s15
 8003eda:	ed97 0a2e 	vldr	s0, [r7, #184]	; 0xb8
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f002 f8e8 	bl	80060b4 <PIDController_Update>
 8003ee4:	4603      	mov	r3, r0
							totalDistance_right * STRAIGHTRATIOF, pwmValC)
							+ pwmValBadjust
 8003ee6:	b29b      	uxth	r3, r3
					pwmValC = PIDController_Update(&pidRight, totalDistance_left,
 8003ee8:	f203 230d 	addw	r3, r3, #525	; 0x20d
 8003eec:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 8003ef0:	e023      	b.n	8003f3a <moveGyroPID+0x5a2>
					;
				} else {
					pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 8003ef2:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8003ef6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003efa:	4611      	mov	r1, r2
 8003efc:	edd7 0a2e 	vldr	s1, [r7, #184]	; 0xb8
 8003f00:	ed97 0a2d 	vldr	s0, [r7, #180]	; 0xb4
 8003f04:	4618      	mov	r0, r3
 8003f06:	f002 f8d5 	bl	80060b4 <PIDController_Update>
 8003f0a:	4603      	mov	r3, r0
							totalDistance_left * STRAIGHTRATIOR, pwmValA)
							- pwmValAadjust
 8003f0c:	b29b      	uxth	r3, r3
					pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 8003f0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003f12:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
					;

					pwmValC = PIDController_Update(&pidRight,
 8003f16:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8003f1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f1e:	4611      	mov	r1, r2
 8003f20:	edd7 0a2d 	vldr	s1, [r7, #180]	; 0xb4
 8003f24:	ed97 0a2e 	vldr	s0, [r7, #184]	; 0xb8
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f002 f8c3 	bl	80060b4 <PIDController_Update>
 8003f2e:	4603      	mov	r3, r0
							totalDistance_left * STRAIGHTRATIOR,
							totalDistance_right, pwmValC) + pwmValBadjust
 8003f30:	b29b      	uxth	r3, r3
					pwmValC = PIDController_Update(&pidRight,
 8003f32:	f203 230d 	addw	r3, r3, #525	; 0x20d
 8003f36:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
					;
				}

				if (forward) {
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d039      	beq.n	8003fb4 <moveGyroPID+0x61c>

					pwmValA = PIDController_Update(&pidLeft,
 8003f40:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8003f44:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003f48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f4c:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8003f50:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f54:	4611      	mov	r1, r2
 8003f56:	edd7 0a2e 	vldr	s1, [r7, #184]	; 0xb8
 8003f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f002 f8a8 	bl	80060b4 <PIDController_Update>
 8003f64:	4603      	mov	r3, r0
 8003f66:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
							totalDistance_right * STRAIGHTRATIOF,
							totalDistance_left, pwmValA);

					pwmValC = PIDController_Update(&pidRight, totalDistance_left,
 8003f6a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8003f6e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003f72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f76:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8003f7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f7e:	4611      	mov	r1, r2
 8003f80:	eef0 0a67 	vmov.f32	s1, s15
 8003f84:	ed97 0a2e 	vldr	s0, [r7, #184]	; 0xb8
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f002 f893 	bl	80060b4 <PIDController_Update>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 8003f94:	e02c      	b.n	8003ff0 <moveGyroPID+0x658>
 8003f96:	bf00      	nop
 8003f98:	cccccccd 	.word	0xcccccccd
 8003f9c:	3feccccc 	.word	0x3feccccc
 8003fa0:	bd75c28f 	.word	0xbd75c28f
 8003fa4:	20000378 	.word	0x20000378
 8003fa8:	20000414 	.word	0x20000414
 8003fac:	200002a0 	.word	0x200002a0
 8003fb0:	20000330 	.word	0x20000330
							totalDistance_right * STRAIGHTRATIOF, pwmValC);
				} else {
					pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 8003fb4:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8003fb8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	edd7 0a2e 	vldr	s1, [r7, #184]	; 0xb8
 8003fc2:	ed97 0a2d 	vldr	s0, [r7, #180]	; 0xb4
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f002 f874 	bl	80060b4 <PIDController_Update>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
							totalDistance_left * STRAIGHTRATIOR, pwmValA);

					pwmValC = PIDController_Update(&pidRight,
 8003fd2:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8003fd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003fda:	4611      	mov	r1, r2
 8003fdc:	edd7 0a2d 	vldr	s1, [r7, #180]	; 0xb4
 8003fe0:	ed97 0a2e 	vldr	s0, [r7, #184]	; 0xb8
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f002 f865 	bl	80060b4 <PIDController_Update>
 8003fea:	4603      	mov	r3, r0
 8003fec:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
							totalDistance_left * STRAIGHTRATIOR,
							totalDistance_right, pwmValC);
				}

				distanceError = distErrOffset * distance;
 8003ff0:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003ff4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ffc:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

				//if robot doesnt go straight, using gyro to adjust, straight = 145
				if (forward) {
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d024      	beq.n	8004050 <moveGyroPID+0x6b8>
					if (actualAngle < -0.33) //veering right
 8004006:	4b54      	ldr	r3, [pc, #336]	; (8004158 <moveGyroPID+0x7c0>)
 8004008:	e9d3 0100 	ldrd	r0, r1, [r3]
 800400c:	a34e      	add	r3, pc, #312	; (adr r3, 8004148 <moveGyroPID+0x7b0>)
 800400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004012:	f7fc fd63 	bl	8000adc <__aeabi_dcmplt>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d004      	beq.n	8004026 <moveGyroPID+0x68e>
							{

						htim1.Instance->CCR4 = 138; //left abit. prev: 138
 800401c:	4b4f      	ldr	r3, [pc, #316]	; (800415c <moveGyroPID+0x7c4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	228a      	movs	r2, #138	; 0x8a
 8004022:	641a      	str	r2, [r3, #64]	; 0x40
 8004024:	e038      	b.n	8004098 <moveGyroPID+0x700>
					} else if (actualAngle > 0.33) //veering left
 8004026:	4b4c      	ldr	r3, [pc, #304]	; (8004158 <moveGyroPID+0x7c0>)
 8004028:	e9d3 0100 	ldrd	r0, r1, [r3]
 800402c:	a348      	add	r3, pc, #288	; (adr r3, 8004150 <moveGyroPID+0x7b8>)
 800402e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004032:	f7fc fd71 	bl	8000b18 <__aeabi_dcmpgt>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d004      	beq.n	8004046 <moveGyroPID+0x6ae>
							{

						htim1.Instance->CCR4 = 155; //right a bit. prev: 152
 800403c:	4b47      	ldr	r3, [pc, #284]	; (800415c <moveGyroPID+0x7c4>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	229b      	movs	r2, #155	; 0x9b
 8004042:	641a      	str	r2, [r3, #64]	; 0x40
 8004044:	e028      	b.n	8004098 <moveGyroPID+0x700>
					} else {
						//				 servo = STRAIGHT;
						htim1.Instance->CCR4 = STRAIGHT; //Straight
 8004046:	4b45      	ldr	r3, [pc, #276]	; (800415c <moveGyroPID+0x7c4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2297      	movs	r2, #151	; 0x97
 800404c:	641a      	str	r2, [r3, #64]	; 0x40
 800404e:	e023      	b.n	8004098 <moveGyroPID+0x700>
					}

				} else {
					if (actualAngle > 0.33) //veering left
 8004050:	4b41      	ldr	r3, [pc, #260]	; (8004158 <moveGyroPID+0x7c0>)
 8004052:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004056:	a33e      	add	r3, pc, #248	; (adr r3, 8004150 <moveGyroPID+0x7b8>)
 8004058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405c:	f7fc fd5c 	bl	8000b18 <__aeabi_dcmpgt>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d004      	beq.n	8004070 <moveGyroPID+0x6d8>
							{
						//				 servo = STRAIGHT;
						htim1.Instance->CCR4 = 138; //left abit
 8004066:	4b3d      	ldr	r3, [pc, #244]	; (800415c <moveGyroPID+0x7c4>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	228a      	movs	r2, #138	; 0x8a
 800406c:	641a      	str	r2, [r3, #64]	; 0x40
 800406e:	e013      	b.n	8004098 <moveGyroPID+0x700>
					} else if (actualAngle < -0.33) //veering right
 8004070:	4b39      	ldr	r3, [pc, #228]	; (8004158 <moveGyroPID+0x7c0>)
 8004072:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004076:	a334      	add	r3, pc, #208	; (adr r3, 8004148 <moveGyroPID+0x7b0>)
 8004078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407c:	f7fc fd2e 	bl	8000adc <__aeabi_dcmplt>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d004      	beq.n	8004090 <moveGyroPID+0x6f8>
							{
	//					 servo = STRAIGHT;
						htim1.Instance->CCR4 = 155; //right a bit
 8004086:	4b35      	ldr	r3, [pc, #212]	; (800415c <moveGyroPID+0x7c4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	229b      	movs	r2, #155	; 0x9b
 800408c:	641a      	str	r2, [r3, #64]	; 0x40
 800408e:	e003      	b.n	8004098 <moveGyroPID+0x700>
					} else {
						//				 servo = STRAIGHT;
						htim1.Instance->CCR4 = STRAIGHT; //Straight
 8004090:	4b32      	ldr	r3, [pc, #200]	; (800415c <moveGyroPID+0x7c4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2297      	movs	r2, #151	; 0x97
 8004096:	641a      	str	r2, [r3, #64]	; 0x40
					}
				}
				osDelay(10);
 8004098:	200a      	movs	r0, #10
 800409a:	f008 fec4 	bl	800ce26 <osDelay>

				if (totalDistance_left >= (distance + distanceError)
 800409e:	ed97 7a01 	vldr	s14, [r7, #4]
 80040a2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80040a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040aa:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80040ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b6:	da0c      	bge.n	80040d2 <moveGyroPID+0x73a>
						|| totalDistance_right >= (distance + distanceError)) {
 80040b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80040bc:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80040c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040c4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80040c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d0:	db0c      	blt.n	80040ec <moveGyroPID+0x754>
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 80040d2:	4b23      	ldr	r3, [pc, #140]	; (8004160 <moveGyroPID+0x7c8>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2200      	movs	r2, #0
 80040d8:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,0);
 80040da:	4b21      	ldr	r3, [pc, #132]	; (8004160 <moveGyroPID+0x7c8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2200      	movs	r2, #0
 80040e0:	63da      	str	r2, [r3, #60]	; 0x3c
					htim1.Instance->CCR4 = STRAIGHT; //centre
 80040e2:	4b1e      	ldr	r3, [pc, #120]	; (800415c <moveGyroPID+0x7c4>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2297      	movs	r2, #151	; 0x97
 80040e8:	641a      	str	r2, [r3, #64]	; 0x40
	//				sprintf(messageB, "SRight: %2d\0", pwmValC);
	//				OLED_ShowString(10, 40, messageB);
	//				sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
	//				OLED_ShowString(10, 50, messageB);
	//				OLED_Refresh_Gram();
					break;
 80040ea:	e00c      	b.n	8004106 <moveGyroPID+0x76e>
	//			sprintf(messageA, "SLeft: %2d\0", diffLeft);
	//			OLED_ShowString(10, 30, messageA);
	//			sprintf(messageB, "SRight: %2d\0", diffRight);
	//			OLED_ShowString(10, 40, messageB);

				prevTime = currTime;
 80040ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
				leftTick_prev = leftTick;
 80040f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
				rightTick_prev = rightTick;
 80040fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004100:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			if (totalDistance_left >= (distance + distanceError) * 0.9
 8004104:	e5b5      	b.n	8003c72 <moveGyroPID+0x2da>
			}
		}
	//	moving = 0;
	//	offsetAngle = targetAngle - actualAngle;
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8004106:	2201      	movs	r2, #1
 8004108:	2108      	movs	r1, #8
 800410a:	4816      	ldr	r0, [pc, #88]	; (8004164 <moveGyroPID+0x7cc>)
 800410c:	f003 f822 	bl	8007154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8004110:	2200      	movs	r2, #0
 8004112:	2104      	movs	r1, #4
 8004114:	4813      	ldr	r0, [pc, #76]	; (8004164 <moveGyroPID+0x7cc>)
 8004116:	f003 f81d 	bl	8007154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 800411a:	2201      	movs	r2, #1
 800411c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004120:	4811      	ldr	r0, [pc, #68]	; (8004168 <moveGyroPID+0x7d0>)
 8004122:	f003 f817 	bl	8007154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8004126:	2200      	movs	r2, #0
 8004128:	2120      	movs	r1, #32
 800412a:	4810      	ldr	r0, [pc, #64]	; (800416c <moveGyroPID+0x7d4>)
 800412c:	f003 f812 	bl	8007154 <HAL_GPIO_WritePin>
		htim1.Instance->CCR4 = STRAIGHT; //centre
 8004130:	4b0a      	ldr	r3, [pc, #40]	; (800415c <moveGyroPID+0x7c4>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2297      	movs	r2, #151	; 0x97
 8004136:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(10);
 8004138:	200a      	movs	r0, #10
 800413a:	f008 fe74 	bl	800ce26 <osDelay>
		return;
 800413e:	bf00      	nop
}
 8004140:	37c8      	adds	r7, #200	; 0xc8
 8004142:	46bd      	mov	sp, r7
 8004144:	bdb0      	pop	{r4, r5, r7, pc}
 8004146:	bf00      	nop
 8004148:	51eb851f 	.word	0x51eb851f
 800414c:	bfd51eb8 	.word	0xbfd51eb8
 8004150:	51eb851f 	.word	0x51eb851f
 8004154:	3fd51eb8 	.word	0x3fd51eb8
 8004158:	20000420 	.word	0x20000420
 800415c:	20000258 	.word	0x20000258
 8004160:	20000378 	.word	0x20000378
 8004164:	40020000 	.word	0x40020000
 8004168:	40021000 	.word	0x40021000
 800416c:	40020800 	.word	0x40020800

08004170 <moveGyroPIDOld>:

// this is without the drastic servo movement
void moveGyroPIDOld(float distance, int forward) {
 8004170:	b580      	push	{r7, lr}
 8004172:	b0b2      	sub	sp, #200	; 0xc8
 8004174:	af00      	add	r7, sp, #0
 8004176:	ed87 0a01 	vstr	s0, [r7, #4]
 800417a:	6038      	str	r0, [r7, #0]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800417c:	2100      	movs	r1, #0
 800417e:	48bc      	ldr	r0, [pc, #752]	; (8004470 <moveGyroPIDOld+0x300>)
 8004180:	f006 f89e 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8004184:	2108      	movs	r1, #8
 8004186:	48ba      	ldr	r0, [pc, #744]	; (8004470 <moveGyroPIDOld+0x300>)
 8004188:	f006 f89a 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800418c:	210c      	movs	r1, #12
 800418e:	48b9      	ldr	r0, [pc, #740]	; (8004474 <moveGyroPIDOld+0x304>)
 8004190:	f006 f896 	bl	800a2c0 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8004194:	4bb7      	ldr	r3, [pc, #732]	; (8004474 <moveGyroPIDOld+0x304>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2297      	movs	r2, #151	; 0x97
 800419a:	641a      	str	r2, [r3, #64]	; 0x40

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 800419c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80041a0:	2224      	movs	r2, #36	; 0x24
 80041a2:	2100      	movs	r1, #0
 80041a4:	4618      	mov	r0, r3
 80041a6:	f00b fb99 	bl	800f8dc <memset>
 80041aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80041ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80041b0:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80041b4:	663b      	str	r3, [r7, #96]	; 0x60
 80041b6:	f640 0398 	movw	r3, #2200	; 0x898
 80041ba:	667b      	str	r3, [r7, #100]	; 0x64
 80041bc:	4bae      	ldr	r3, [pc, #696]	; (8004478 <moveGyroPIDOld+0x308>)
 80041be:	66bb      	str	r3, [r7, #104]	; 0x68
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 80041c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80041c4:	2224      	movs	r2, #36	; 0x24
 80041c6:	2100      	movs	r1, #0
 80041c8:	4618      	mov	r0, r3
 80041ca:	f00b fb87 	bl	800f8dc <memset>
 80041ce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80041d2:	637b      	str	r3, [r7, #52]	; 0x34
 80041d4:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80041d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041da:	f640 0398 	movw	r3, #2200	; 0x898
 80041de:	643b      	str	r3, [r7, #64]	; 0x40
 80041e0:	4ba5      	ldr	r3, [pc, #660]	; (8004478 <moveGyroPIDOld+0x308>)
 80041e2:	647b      	str	r3, [r7, #68]	; 0x44
	PID_LIM_MIN, PID_LIM_MAX,
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 80041e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80041e8:	4618      	mov	r0, r3
 80041ea:	f001 ff4b 	bl	8006084 <PIDController_Init>
	PIDController_Init(&pidRight);
 80041ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80041f2:	4618      	mov	r0, r3
 80041f4:	f001 ff46 	bl	8006084 <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 80041f8:	4ba0      	ldr	r3, [pc, #640]	; (800447c <moveGyroPIDOld+0x30c>)
 80041fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float wheel_rotationTicksR = 779; // for back right wheel
 80041fe:	4ba0      	ldr	r3, [pc, #640]	; (8004480 <moveGyroPIDOld+0x310>)
 8004200:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	float wheel_circumference = 21.1f; // NEED TO MEASURE AND CHANGE
 8004204:	4b9f      	ldr	r3, [pc, #636]	; (8004484 <moveGyroPIDOld+0x314>)
 8004206:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 800420a:	213c      	movs	r1, #60	; 0x3c
 800420c:	489e      	ldr	r0, [pc, #632]	; (8004488 <moveGyroPIDOld+0x318>)
 800420e:	f006 fb3d 	bl	800a88c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 8004212:	213c      	movs	r1, #60	; 0x3c
 8004214:	489d      	ldr	r0, [pc, #628]	; (800448c <moveGyroPIDOld+0x31c>)
 8004216:	f006 fb39 	bl	800a88c <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 800421a:	4b9b      	ldr	r3, [pc, #620]	; (8004488 <moveGyroPIDOld+0x318>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 8004224:	4b99      	ldr	r3, [pc, #612]	; (800448c <moveGyroPIDOld+0x31c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 800422e:	f002 fc13 	bl	8006a58 <HAL_GetTick>
 8004232:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	uint32_t prevTime = startTime;
 8004236:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800423a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float totalDistance_right = 0;
 8004246:	f04f 0300 	mov.w	r3, #0
 800424a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 800424e:	2300      	movs	r3, #0
 8004250:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	int diffRight = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 2000;
 800425a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800425e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	uint16_t pwmValC = 2000 * STRAIGHTRATIOF;
 8004262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004266:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];

	if (forward) {
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d015      	beq.n	800429c <moveGyroPIDOld+0x12c>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8004270:	2201      	movs	r2, #1
 8004272:	2108      	movs	r1, #8
 8004274:	4886      	ldr	r0, [pc, #536]	; (8004490 <moveGyroPIDOld+0x320>)
 8004276:	f002 ff6d 	bl	8007154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800427a:	2200      	movs	r2, #0
 800427c:	2104      	movs	r1, #4
 800427e:	4884      	ldr	r0, [pc, #528]	; (8004490 <moveGyroPIDOld+0x320>)
 8004280:	f002 ff68 	bl	8007154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8004284:	2201      	movs	r2, #1
 8004286:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800428a:	4882      	ldr	r0, [pc, #520]	; (8004494 <moveGyroPIDOld+0x324>)
 800428c:	f002 ff62 	bl	8007154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8004290:	2200      	movs	r2, #0
 8004292:	2120      	movs	r1, #32
 8004294:	4880      	ldr	r0, [pc, #512]	; (8004498 <moveGyroPIDOld+0x328>)
 8004296:	f002 ff5d 	bl	8007154 <HAL_GPIO_WritePin>
 800429a:	e014      	b.n	80042c6 <moveGyroPIDOld+0x156>
	} else {
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 800429c:	2200      	movs	r2, #0
 800429e:	2108      	movs	r1, #8
 80042a0:	487b      	ldr	r0, [pc, #492]	; (8004490 <moveGyroPIDOld+0x320>)
 80042a2:	f002 ff57 	bl	8007154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80042a6:	2201      	movs	r2, #1
 80042a8:	2104      	movs	r1, #4
 80042aa:	4879      	ldr	r0, [pc, #484]	; (8004490 <moveGyroPIDOld+0x320>)
 80042ac:	f002 ff52 	bl	8007154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 80042b0:	2200      	movs	r2, #0
 80042b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042b6:	4877      	ldr	r0, [pc, #476]	; (8004494 <moveGyroPIDOld+0x324>)
 80042b8:	f002 ff4c 	bl	8007154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 80042bc:	2201      	movs	r2, #1
 80042be:	2120      	movs	r1, #32
 80042c0:	4875      	ldr	r0, [pc, #468]	; (8004498 <moveGyroPIDOld+0x328>)
 80042c2:	f002 ff47 	bl	8007154 <HAL_GPIO_WritePin>
	}

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 80042c6:	4b6a      	ldr	r3, [pc, #424]	; (8004470 <moveGyroPIDOld+0x300>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80042ce:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 80042d0:	4b67      	ldr	r3, [pc, #412]	; (8004470 <moveGyroPIDOld+0x300>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 80042d8:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 80042da:	f002 fbbd 	bl	8006a58 <HAL_GetTick>
 80042de:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
		moving = 1;
 80042e2:	4b6e      	ldr	r3, [pc, #440]	; (800449c <moveGyroPIDOld+0x32c>)
 80042e4:	2201      	movs	r2, #1
 80042e6:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 80042e8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80042ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b3c      	cmp	r3, #60	; 0x3c
 80042f4:	d9e7      	bls.n	80042c6 <moveGyroPIDOld+0x156>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 80042f6:	4b64      	ldr	r3, [pc, #400]	; (8004488 <moveGyroPIDOld+0x318>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 8004300:	4b62      	ldr	r3, [pc, #392]	; (800448c <moveGyroPIDOld+0x31c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

			diffLeft = 0;
 800430a:	2300      	movs	r3, #0
 800430c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			diffRight = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8004316:	4b5c      	ldr	r3, [pc, #368]	; (8004488 <moveGyroPIDOld+0x318>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b10      	cmp	r3, #16
 8004322:	d118      	bne.n	8004356 <moveGyroPIDOld+0x1e6>
				if (leftTick < leftTick_prev)
 8004324:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004328:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800432c:	429a      	cmp	r2, r3
 800432e:	da07      	bge.n	8004340 <moveGyroPIDOld+0x1d0>
					diffLeft = leftTick_prev - leftTick;
 8004330:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004334:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800433e:	e022      	b.n	8004386 <moveGyroPIDOld+0x216>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 8004340:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004344:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004348:	33ff      	adds	r3, #255	; 0xff
 800434a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800434e:	4413      	add	r3, r2
 8004350:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004354:	e017      	b.n	8004386 <moveGyroPIDOld+0x216>
			} else {
				if (leftTick > leftTick_prev)
 8004356:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800435a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800435e:	429a      	cmp	r2, r3
 8004360:	dd07      	ble.n	8004372 <moveGyroPIDOld+0x202>
					diffLeft = leftTick - leftTick_prev;
 8004362:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004366:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004370:	e009      	b.n	8004386 <moveGyroPIDOld+0x216>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 8004372:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004376:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800437a:	33ff      	adds	r3, #255	; 0xff
 800437c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004380:	4413      	add	r3, r2
 8004382:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 8004386:	4b41      	ldr	r3, [pc, #260]	; (800448c <moveGyroPIDOld+0x31c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	2b10      	cmp	r3, #16
 8004392:	d118      	bne.n	80043c6 <moveGyroPIDOld+0x256>
				if (rightTick < rightTick_prev)
 8004394:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004398:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800439c:	429a      	cmp	r2, r3
 800439e:	da07      	bge.n	80043b0 <moveGyroPIDOld+0x240>
					diffRight = rightTick_prev - rightTick;
 80043a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80043a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043ae:	e022      	b.n	80043f6 <moveGyroPIDOld+0x286>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 80043b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043b4:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80043b8:	33ff      	adds	r3, #255	; 0xff
 80043ba:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80043be:	4413      	add	r3, r2
 80043c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043c4:	e017      	b.n	80043f6 <moveGyroPIDOld+0x286>
			} else {
				if (rightTick > rightTick_prev)
 80043c6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80043ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043ce:	429a      	cmp	r2, r3
 80043d0:	dd07      	ble.n	80043e2 <moveGyroPIDOld+0x272>
					diffRight = rightTick - rightTick_prev;
 80043d2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80043d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043e0:	e009      	b.n	80043f6 <moveGyroPIDOld+0x286>
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 80043e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043e6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80043ea:	33ff      	adds	r3, #255	; 0xff
 80043ec:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80043f0:	4413      	add	r3, r2
 80043f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 80043f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80043fa:	ee07 3a90 	vmov	s15, r3
 80043fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004402:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8004406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800440a:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 800440e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004412:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
					* wheel_circumference;
			totalDistance_left += distLeft;
 8004416:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800441a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800441e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004422:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 8004426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800442a:	ee07 3a90 	vmov	s15, r3
 800442e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004432:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8004436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800443a:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 800443e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004442:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
					* wheel_circumference;
			totalDistance_right += distRight;
 8004446:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800444a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800444e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004452:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
//				 pwmValA = PIDController_Update(&pidLeft, totalDistance_right, totalDistance_left*STRAIGHTRATIOR, pwmValA);
//
//				 pwmValC = PIDController_Update(&pidRight, totalDistance_left*STRAIGHTRATIOR, totalDistance_right, pwmValC);
//			 }

			if (forward) {
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d025      	beq.n	80044a8 <moveGyroPIDOld+0x338>
				distanceError = DISTANCE_ERROR_OFFSETF * distance;
 800445c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004460:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80044a0 <moveGyroPIDOld+0x330>
 8004464:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004468:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 800446c:	e024      	b.n	80044b8 <moveGyroPIDOld+0x348>
 800446e:	bf00      	nop
 8004470:	20000378 	.word	0x20000378
 8004474:	20000258 	.word	0x20000258
 8004478:	3d4ccccd 	.word	0x3d4ccccd
 800447c:	44440000 	.word	0x44440000
 8004480:	4442c000 	.word	0x4442c000
 8004484:	41a8cccd 	.word	0x41a8cccd
 8004488:	200002a0 	.word	0x200002a0
 800448c:	20000330 	.word	0x20000330
 8004490:	40020000 	.word	0x40020000
 8004494:	40021000 	.word	0x40021000
 8004498:	40020800 	.word	0x40020800
 800449c:	20000414 	.word	0x20000414
 80044a0:	bd0f5c29 	.word	0xbd0f5c29
 80044a4:	bd75c28f 	.word	0xbd75c28f
			} else {
				distanceError = DISTANCE_ERROR_OFFSETR * distance;
 80044a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80044ac:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 80044a4 <moveGyroPIDOld+0x334>
 80044b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044b4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
			}

			//if robot doesnt go straight, using gyro to adjust, straight = 145
			if (forward) {
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d030      	beq.n	8004520 <moveGyroPIDOld+0x3b0>
				if (totalAngle < 0.00) //veering right
 80044be:	4b90      	ldr	r3, [pc, #576]	; (8004700 <moveGyroPIDOld+0x590>)
 80044c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	f7fc fb06 	bl	8000adc <__aeabi_dcmplt>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <moveGyroPIDOld+0x36e>
						{

					htim1.Instance->CCR4 = 140; //left abit. prev: 138
 80044d6:	4b8b      	ldr	r3, [pc, #556]	; (8004704 <moveGyroPIDOld+0x594>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	228c      	movs	r2, #140	; 0x8c
 80044dc:	641a      	str	r2, [r3, #64]	; 0x40
				}
				if (totalAngle > 0.00) //veering left
 80044de:	4b88      	ldr	r3, [pc, #544]	; (8004700 <moveGyroPIDOld+0x590>)
 80044e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80044e4:	f04f 0200 	mov.w	r2, #0
 80044e8:	f04f 0300 	mov.w	r3, #0
 80044ec:	f7fc fb14 	bl	8000b18 <__aeabi_dcmpgt>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <moveGyroPIDOld+0x38e>
						{

					htim1.Instance->CCR4 = 155; //right a bit. prev: 152
 80044f6:	4b83      	ldr	r3, [pc, #524]	; (8004704 <moveGyroPIDOld+0x594>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	229b      	movs	r2, #155	; 0x9b
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40
				}
				if (totalAngle == 0.00) {
 80044fe:	4b80      	ldr	r3, [pc, #512]	; (8004700 <moveGyroPIDOld+0x590>)
 8004500:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	f7fc fadc 	bl	8000ac8 <__aeabi_dcmpeq>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d036      	beq.n	8004584 <moveGyroPIDOld+0x414>
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = STRAIGHT; //Straight
 8004516:	4b7b      	ldr	r3, [pc, #492]	; (8004704 <moveGyroPIDOld+0x594>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2297      	movs	r2, #151	; 0x97
 800451c:	641a      	str	r2, [r3, #64]	; 0x40
 800451e:	e031      	b.n	8004584 <moveGyroPIDOld+0x414>
				}

			} else {
				if (totalAngle > 0.00) //veering left
 8004520:	4b77      	ldr	r3, [pc, #476]	; (8004700 <moveGyroPIDOld+0x590>)
 8004522:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	f04f 0300 	mov.w	r3, #0
 800452e:	f7fc faf3 	bl	8000b18 <__aeabi_dcmpgt>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <moveGyroPIDOld+0x3d0>
						{
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = 140; //left abit
 8004538:	4b72      	ldr	r3, [pc, #456]	; (8004704 <moveGyroPIDOld+0x594>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	228c      	movs	r2, #140	; 0x8c
 800453e:	641a      	str	r2, [r3, #64]	; 0x40
				}
				if (totalAngle < 0.00) //veering right
 8004540:	4b6f      	ldr	r3, [pc, #444]	; (8004700 <moveGyroPIDOld+0x590>)
 8004542:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	f04f 0300 	mov.w	r3, #0
 800454e:	f7fc fac5 	bl	8000adc <__aeabi_dcmplt>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <moveGyroPIDOld+0x3f4>
						{
					servo = STRAIGHT;
 8004558:	2397      	movs	r3, #151	; 0x97
 800455a:	67fb      	str	r3, [r7, #124]	; 0x7c
					htim1.Instance->CCR4 = 155; //right a bit
 800455c:	4b69      	ldr	r3, [pc, #420]	; (8004704 <moveGyroPIDOld+0x594>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	229b      	movs	r2, #155	; 0x9b
 8004562:	641a      	str	r2, [r3, #64]	; 0x40
				}
				if (totalAngle == 0.00) {
 8004564:	4b66      	ldr	r3, [pc, #408]	; (8004700 <moveGyroPIDOld+0x590>)
 8004566:	e9d3 0100 	ldrd	r0, r1, [r3]
 800456a:	f04f 0200 	mov.w	r2, #0
 800456e:	f04f 0300 	mov.w	r3, #0
 8004572:	f7fc faa9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <moveGyroPIDOld+0x414>
					//				 servo = STRAIGHT;
					htim1.Instance->CCR4 = STRAIGHT; //Straight
 800457c:	4b61      	ldr	r3, [pc, #388]	; (8004704 <moveGyroPIDOld+0x594>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2297      	movs	r2, #151	; 0x97
 8004582:	641a      	str	r2, [r3, #64]	; 0x40
				}
			}
			osDelay(10);
 8004584:	200a      	movs	r0, #10
 8004586:	f008 fc4e 	bl	800ce26 <osDelay>
			if (totalDistance_left >= (distance + distanceError)
 800458a:	ed97 7a01 	vldr	s14, [r7, #4]
 800458e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004596:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800459a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800459e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a2:	da0c      	bge.n	80045be <moveGyroPIDOld+0x44e>
					|| totalDistance_right >= (distance + distanceError)) {
 80045a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80045a8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80045ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045b0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80045b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045bc:	db3f      	blt.n	800463e <moveGyroPIDOld+0x4ce>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 80045be:	4b52      	ldr	r3, [pc, #328]	; (8004708 <moveGyroPIDOld+0x598>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2200      	movs	r2, #0
 80045c4:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,0);
 80045c6:	4b50      	ldr	r3, [pc, #320]	; (8004708 <moveGyroPIDOld+0x598>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2200      	movs	r2, #0
 80045cc:	63da      	str	r2, [r3, #60]	; 0x3c
//				 moving = 0;
				sprintf(messageA, "dist: %.2f\0", distance);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7fb ffba 	bl	8000548 <__aeabi_f2d>
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	f107 0020 	add.w	r0, r7, #32
 80045dc:	494b      	ldr	r1, [pc, #300]	; (800470c <moveGyroPIDOld+0x59c>)
 80045de:	f00c f805 	bl	80105ec <siprintf>
				OLED_ShowString(10, 10, messageA);
 80045e2:	f107 0320 	add.w	r3, r7, #32
 80045e6:	461a      	mov	r2, r3
 80045e8:	210a      	movs	r1, #10
 80045ea:	200a      	movs	r0, #10
 80045ec:	f001 fc8c 	bl	8005f08 <OLED_ShowString>
//				sprintf(messageA, "SLeft: %2d\0", pwmValA);
//				OLED_ShowString(10, 20, messageA);
				sprintf(messageA, "TLeft: %.2f\0", totalDistance_left);
 80045f0:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80045f4:	f7fb ffa8 	bl	8000548 <__aeabi_f2d>
 80045f8:	4602      	mov	r2, r0
 80045fa:	460b      	mov	r3, r1
 80045fc:	f107 0020 	add.w	r0, r7, #32
 8004600:	4943      	ldr	r1, [pc, #268]	; (8004710 <moveGyroPIDOld+0x5a0>)
 8004602:	f00b fff3 	bl	80105ec <siprintf>
				OLED_ShowString(10, 30, messageA);
 8004606:	f107 0320 	add.w	r3, r7, #32
 800460a:	461a      	mov	r2, r3
 800460c:	211e      	movs	r1, #30
 800460e:	200a      	movs	r0, #10
 8004610:	f001 fc7a 	bl	8005f08 <OLED_ShowString>
//
//				sprintf(messageB, "SRight: %2d\0", pwmValC);
//				OLED_ShowString(10, 40, messageB);
				sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
 8004614:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8004618:	f7fb ff96 	bl	8000548 <__aeabi_f2d>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	f107 000c 	add.w	r0, r7, #12
 8004624:	493b      	ldr	r1, [pc, #236]	; (8004714 <moveGyroPIDOld+0x5a4>)
 8004626:	f00b ffe1 	bl	80105ec <siprintf>
				OLED_ShowString(10, 50, messageB);
 800462a:	f107 030c 	add.w	r3, r7, #12
 800462e:	461a      	mov	r2, r3
 8004630:	2132      	movs	r1, #50	; 0x32
 8004632:	200a      	movs	r0, #10
 8004634:	f001 fc68 	bl	8005f08 <OLED_ShowString>
				OLED_Refresh_Gram();
 8004638:	f001 faf2 	bl	8005c20 <OLED_Refresh_Gram>
				break;
 800463c:	e043      	b.n	80046c6 <moveGyroPIDOld+0x556>
//			// OLED
//			sprintf(messageA, "SLeft: %2d\0", diffLeft);
//			OLED_ShowString(10, 30, messageA);
//			sprintf(messageB, "SRight: %2d\0", diffRight);
//			OLED_ShowString(10, 40, messageB);
			sprintf(messageA, "dist: %.2f\0", distance);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7fb ff82 	bl	8000548 <__aeabi_f2d>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	f107 0020 	add.w	r0, r7, #32
 800464c:	492f      	ldr	r1, [pc, #188]	; (800470c <moveGyroPIDOld+0x59c>)
 800464e:	f00b ffcd 	bl	80105ec <siprintf>
			OLED_ShowString(10, 10, messageA);
 8004652:	f107 0320 	add.w	r3, r7, #32
 8004656:	461a      	mov	r2, r3
 8004658:	210a      	movs	r1, #10
 800465a:	200a      	movs	r0, #10
 800465c:	f001 fc54 	bl	8005f08 <OLED_ShowString>

			sprintf(messageA, "TLeft: %.2f\0", totalDistance_left);
 8004660:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8004664:	f7fb ff70 	bl	8000548 <__aeabi_f2d>
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	f107 0020 	add.w	r0, r7, #32
 8004670:	4927      	ldr	r1, [pc, #156]	; (8004710 <moveGyroPIDOld+0x5a0>)
 8004672:	f00b ffbb 	bl	80105ec <siprintf>
			OLED_ShowString(10, 30, messageA);
 8004676:	f107 0320 	add.w	r3, r7, #32
 800467a:	461a      	mov	r2, r3
 800467c:	211e      	movs	r1, #30
 800467e:	200a      	movs	r0, #10
 8004680:	f001 fc42 	bl	8005f08 <OLED_ShowString>

			sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
 8004684:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8004688:	f7fb ff5e 	bl	8000548 <__aeabi_f2d>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	f107 000c 	add.w	r0, r7, #12
 8004694:	491f      	ldr	r1, [pc, #124]	; (8004714 <moveGyroPIDOld+0x5a4>)
 8004696:	f00b ffa9 	bl	80105ec <siprintf>
			OLED_ShowString(10, 50, messageB);
 800469a:	f107 030c 	add.w	r3, r7, #12
 800469e:	461a      	mov	r2, r3
 80046a0:	2132      	movs	r1, #50	; 0x32
 80046a2:	200a      	movs	r0, #10
 80046a4:	f001 fc30 	bl	8005f08 <OLED_ShowString>
			OLED_Refresh_Gram();
 80046a8:	f001 faba 	bl	8005c20 <OLED_Refresh_Gram>

			prevTime = currTime;
 80046ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			leftTick_prev = leftTick;
 80046b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			rightTick_prev = rightTick;
 80046bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 80046c4:	e5ff      	b.n	80042c6 <moveGyroPIDOld+0x156>
		}
	}
//	moving = 0;
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80046c6:	2201      	movs	r2, #1
 80046c8:	2108      	movs	r1, #8
 80046ca:	4813      	ldr	r0, [pc, #76]	; (8004718 <moveGyroPIDOld+0x5a8>)
 80046cc:	f002 fd42 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80046d0:	2200      	movs	r2, #0
 80046d2:	2104      	movs	r1, #4
 80046d4:	4810      	ldr	r0, [pc, #64]	; (8004718 <moveGyroPIDOld+0x5a8>)
 80046d6:	f002 fd3d 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 80046da:	2201      	movs	r2, #1
 80046dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80046e0:	480e      	ldr	r0, [pc, #56]	; (800471c <moveGyroPIDOld+0x5ac>)
 80046e2:	f002 fd37 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 80046e6:	2200      	movs	r2, #0
 80046e8:	2120      	movs	r1, #32
 80046ea:	480d      	ldr	r0, [pc, #52]	; (8004720 <moveGyroPIDOld+0x5b0>)
 80046ec:	f002 fd32 	bl	8007154 <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 80046f0:	4b04      	ldr	r3, [pc, #16]	; (8004704 <moveGyroPIDOld+0x594>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2297      	movs	r2, #151	; 0x97
 80046f6:	641a      	str	r2, [r3, #64]	; 0x40
	return;
 80046f8:	bf00      	nop
}
 80046fa:	37c8      	adds	r7, #200	; 0xc8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	20000418 	.word	0x20000418
 8004704:	20000258 	.word	0x20000258
 8004708:	20000378 	.word	0x20000378
 800470c:	08014214 	.word	0x08014214
 8004710:	08014220 	.word	0x08014220
 8004714:	08014230 	.word	0x08014230
 8004718:	40020000 	.word	0x40020000
 800471c:	40021000 	.word	0x40021000
 8004720:	40020800 	.word	0x40020800

08004724 <move>:

void move(float distance, int forward) {
 8004724:	b580      	push	{r7, lr}
 8004726:	b0b0      	sub	sp, #192	; 0xc0
 8004728:	af00      	add	r7, sp, #0
 800472a:	ed87 0a01 	vstr	s0, [r7, #4]
 800472e:	6038      	str	r0, [r7, #0]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8004730:	2100      	movs	r1, #0
 8004732:	48d1      	ldr	r0, [pc, #836]	; (8004a78 <move+0x354>)
 8004734:	f005 fdc4 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8004738:	2108      	movs	r1, #8
 800473a:	48cf      	ldr	r0, [pc, #828]	; (8004a78 <move+0x354>)
 800473c:	f005 fdc0 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8004740:	210c      	movs	r1, #12
 8004742:	48ce      	ldr	r0, [pc, #824]	; (8004a7c <move+0x358>)
 8004744:	f005 fdbc 	bl	800a2c0 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8004748:	4bcc      	ldr	r3, [pc, #816]	; (8004a7c <move+0x358>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2297      	movs	r2, #151	; 0x97
 800474e:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 8004750:	2064      	movs	r0, #100	; 0x64
 8004752:	f008 fb68 	bl	800ce26 <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI, 500, 1500,
 8004756:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800475a:	2224      	movs	r2, #36	; 0x24
 800475c:	2100      	movs	r1, #0
 800475e:	4618      	mov	r0, r3
 8004760:	f00b f8bc 	bl	800f8dc <memset>
 8004764:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004768:	657b      	str	r3, [r7, #84]	; 0x54
 800476a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800476e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004770:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004774:	663b      	str	r3, [r7, #96]	; 0x60
 8004776:	4bc2      	ldr	r3, [pc, #776]	; (8004a80 <move+0x35c>)
 8004778:	667b      	str	r3, [r7, #100]	; 0x64
	SAMPLE_TIME_S };

	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI, 500, 1500,
 800477a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800477e:	2224      	movs	r2, #36	; 0x24
 8004780:	2100      	movs	r1, #0
 8004782:	4618      	mov	r0, r3
 8004784:	f00b f8aa 	bl	800f8dc <memset>
 8004788:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800478c:	633b      	str	r3, [r7, #48]	; 0x30
 800478e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004792:	63bb      	str	r3, [r7, #56]	; 0x38
 8004794:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004798:	63fb      	str	r3, [r7, #60]	; 0x3c
 800479a:	4bb9      	ldr	r3, [pc, #740]	; (8004a80 <move+0x35c>)
 800479c:	643b      	str	r3, [r7, #64]	; 0x40
	SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 800479e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80047a2:	4618      	mov	r0, r3
 80047a4:	f001 fc6e 	bl	8006084 <PIDController_Init>
	PIDController_Init(&pidRight);
 80047a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047ac:	4618      	mov	r0, r3
 80047ae:	f001 fc69 	bl	8006084 <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 784; // for back left wheel, around 1550-1600
 80047b2:	4bb4      	ldr	r3, [pc, #720]	; (8004a84 <move+0x360>)
 80047b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float wheel_rotationTicksR = 779; // for back right wheel
 80047b8:	4bb3      	ldr	r3, [pc, #716]	; (8004a88 <move+0x364>)
 80047ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	float wheel_circumference = 22.4f; // NEED TO MEASURE AND CHANGE
 80047be:	4bb3      	ldr	r3, [pc, #716]	; (8004a8c <move+0x368>)
 80047c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 80047c4:	213c      	movs	r1, #60	; 0x3c
 80047c6:	48b2      	ldr	r0, [pc, #712]	; (8004a90 <move+0x36c>)
 80047c8:	f006 f860 	bl	800a88c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //encoderB
 80047cc:	213c      	movs	r1, #60	; 0x3c
 80047ce:	48b1      	ldr	r0, [pc, #708]	; (8004a94 <move+0x370>)
 80047d0:	f006 f85c 	bl	800a88c <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 80047d4:	4bae      	ldr	r3, [pc, #696]	; (8004a90 <move+0x36c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim4);
 80047de:	4bad      	ldr	r3, [pc, #692]	; (8004a94 <move+0x370>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 80047e8:	f002 f936 	bl	8006a58 <HAL_GetTick>
 80047ec:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint32_t prevTime = startTime;
 80047f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 80047f8:	f04f 0300 	mov.w	r3, #0
 80047fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	float totalDistance_right = 0;
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8004808:	2300      	movs	r3, #0
 800480a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	int diffRight = 0;
 800480e:	2300      	movs	r3, #0
 8004810:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float distanceError;

	int servo;

	//pwm values
	uint16_t pwmValA = 2000;
 8004814:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004818:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	uint16_t pwmValC = 2000;
 800481c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004820:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];

	if (forward) {
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d015      	beq.n	8004856 <move+0x132>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800482a:	2201      	movs	r2, #1
 800482c:	2108      	movs	r1, #8
 800482e:	489a      	ldr	r0, [pc, #616]	; (8004a98 <move+0x374>)
 8004830:	f002 fc90 	bl	8007154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8004834:	2200      	movs	r2, #0
 8004836:	2104      	movs	r1, #4
 8004838:	4897      	ldr	r0, [pc, #604]	; (8004a98 <move+0x374>)
 800483a:	f002 fc8b 	bl	8007154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 800483e:	2201      	movs	r2, #1
 8004840:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004844:	4895      	ldr	r0, [pc, #596]	; (8004a9c <move+0x378>)
 8004846:	f002 fc85 	bl	8007154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 800484a:	2200      	movs	r2, #0
 800484c:	2120      	movs	r1, #32
 800484e:	4894      	ldr	r0, [pc, #592]	; (8004aa0 <move+0x37c>)
 8004850:	f002 fc80 	bl	8007154 <HAL_GPIO_WritePin>
 8004854:	e014      	b.n	8004880 <move+0x15c>
	} else {
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8004856:	2200      	movs	r2, #0
 8004858:	2108      	movs	r1, #8
 800485a:	488f      	ldr	r0, [pc, #572]	; (8004a98 <move+0x374>)
 800485c:	f002 fc7a 	bl	8007154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8004860:	2201      	movs	r2, #1
 8004862:	2104      	movs	r1, #4
 8004864:	488c      	ldr	r0, [pc, #560]	; (8004a98 <move+0x374>)
 8004866:	f002 fc75 	bl	8007154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 800486a:	2200      	movs	r2, #0
 800486c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004870:	488a      	ldr	r0, [pc, #552]	; (8004a9c <move+0x378>)
 8004872:	f002 fc6f 	bl	8007154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8004876:	2201      	movs	r2, #1
 8004878:	2120      	movs	r1, #32
 800487a:	4889      	ldr	r0, [pc, #548]	; (8004aa0 <move+0x37c>)
 800487c:	f002 fc6a 	bl	8007154 <HAL_GPIO_WritePin>
	}

	/*Infinite loop*/
	for (;;) {

		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8004880:	4b7d      	ldr	r3, [pc, #500]	; (8004a78 <move+0x354>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8004888:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,pwmValC);
 800488a:	4b7b      	ldr	r3, [pc, #492]	; (8004a78 <move+0x354>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8004892:	63da      	str	r2, [r3, #60]	; 0x3c
		currTime = HAL_GetTick();
 8004894:	f002 f8e0 	bl	8006a58 <HAL_GetTick>
 8004898:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		moving = 1;
 800489c:	4b81      	ldr	r3, [pc, #516]	; (8004aa4 <move+0x380>)
 800489e:	2201      	movs	r2, #1
 80048a0:	701a      	strb	r2, [r3, #0]

		if (currTime - prevTime > 60L) {
 80048a2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80048a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b3c      	cmp	r3, #60	; 0x3c
 80048ae:	d9e7      	bls.n	8004880 <move+0x15c>
			leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 80048b0:	4b77      	ldr	r3, [pc, #476]	; (8004a90 <move+0x36c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			rightTick = __HAL_TIM_GET_COUNTER(&htim4);
 80048ba:	4b76      	ldr	r3, [pc, #472]	; (8004a94 <move+0x370>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			diffLeft = 0;
 80048c4:	2300      	movs	r3, #0
 80048c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			diffRight = 0;
 80048ca:	2300      	movs	r3, #0
 80048cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 80048d0:	4b6f      	ldr	r3, [pc, #444]	; (8004a90 <move+0x36c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0310 	and.w	r3, r3, #16
 80048da:	2b10      	cmp	r3, #16
 80048dc:	d118      	bne.n	8004910 <move+0x1ec>
				if (leftTick < leftTick_prev)
 80048de:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80048e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048e6:	429a      	cmp	r2, r3
 80048e8:	da07      	bge.n	80048fa <move+0x1d6>
					diffLeft = leftTick_prev - leftTick;
 80048ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80048ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048f8:	e022      	b.n	8004940 <move+0x21c>
				else
					diffLeft = (65535 - leftTick) + leftTick_prev;
 80048fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048fe:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004902:	33ff      	adds	r3, #255	; 0xff
 8004904:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004908:	4413      	add	r3, r2
 800490a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800490e:	e017      	b.n	8004940 <move+0x21c>
			} else {
				if (leftTick > leftTick_prev)
 8004910:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004914:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004918:	429a      	cmp	r2, r3
 800491a:	dd07      	ble.n	800492c <move+0x208>
					diffLeft = leftTick - leftTick_prev;
 800491c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004920:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800492a:	e009      	b.n	8004940 <move+0x21c>
				else
					diffLeft = 65535 - leftTick_prev + leftTick;
 800492c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004930:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004934:	33ff      	adds	r3, #255	; 0xff
 8004936:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800493a:	4413      	add	r3, r2
 800493c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			}

			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 8004940:	4b54      	ldr	r3, [pc, #336]	; (8004a94 <move+0x370>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0310 	and.w	r3, r3, #16
 800494a:	2b10      	cmp	r3, #16
 800494c:	d118      	bne.n	8004980 <move+0x25c>
				if (rightTick < rightTick_prev)
 800494e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004952:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004956:	429a      	cmp	r2, r3
 8004958:	da07      	bge.n	800496a <move+0x246>
					diffRight = rightTick_prev - rightTick;
 800495a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800495e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004968:	e022      	b.n	80049b0 <move+0x28c>
				else
					diffRight = (65535 - rightTick) + rightTick_prev;
 800496a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800496e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8004972:	33ff      	adds	r3, #255	; 0xff
 8004974:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004978:	4413      	add	r3, r2
 800497a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800497e:	e017      	b.n	80049b0 <move+0x28c>
			} else {
				if (rightTick > rightTick_prev)
 8004980:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004984:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004988:	429a      	cmp	r2, r3
 800498a:	dd07      	ble.n	800499c <move+0x278>
					diffRight = rightTick - rightTick_prev;
 800498c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004990:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800499a:	e009      	b.n	80049b0 <move+0x28c>
				else
					diffRight = 65535 - rightTick_prev + rightTick;
 800499c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80049a0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80049a4:	33ff      	adds	r3, #255	; 0xff
 80049a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049aa:	4413      	add	r3, r2
 80049ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			}

			// left measured distance
			distLeft = ((float) diffLeft / wheel_rotationTicksL)
 80049b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80049b4:	ee07 3a90 	vmov	s15, r3
 80049b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80049bc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80049c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049c4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80049c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049cc:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
					* wheel_circumference;
			totalDistance_left += distLeft;
 80049d0:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80049d4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80049d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049dc:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0

			// right measured distance
			distRight = ((float) diffRight / wheel_rotationTicksR)
 80049e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049e4:	ee07 3a90 	vmov	s15, r3
 80049e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80049ec:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80049f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049f4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80049f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049fc:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
					* wheel_circumference;
			totalDistance_right += distRight;
 8004a00:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8004a04:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8004a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a0c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
			// 1.015 veer right, 1.005 veer left, 1.010 ABIT right, 1.008 almost perfect.

#define pwmValAadjust 300;
#define pwmValBadjust 525;

			if (forward) {
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d04c      	beq.n	8004ab0 <move+0x38c>

				pwmValA = PIDController_Update(&pidLeft,
 8004a16:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8004a1a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004a1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a22:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8004a26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a2a:	4611      	mov	r1, r2
 8004a2c:	edd7 0a2c 	vldr	s1, [r7, #176]	; 0xb0
 8004a30:	eeb0 0a67 	vmov.f32	s0, s15
 8004a34:	4618      	mov	r0, r3
 8004a36:	f001 fb3d 	bl	80060b4 <PIDController_Update>
 8004a3a:	4603      	mov	r3, r0
						totalDistance_right * STRAIGHTRATIOF,
						totalDistance_left, pwmValA) - pwmValAadjust
 8004a3c:	b29b      	uxth	r3, r3
				pwmValA = PIDController_Update(&pidLeft,
 8004a3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a42:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
				;

				pwmValC = PIDController_Update(&pidRight, totalDistance_left,
 8004a46:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8004a4a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a52:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8004a56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a5a:	4611      	mov	r1, r2
 8004a5c:	eef0 0a67 	vmov.f32	s1, s15
 8004a60:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 8004a64:	4618      	mov	r0, r3
 8004a66:	f001 fb25 	bl	80060b4 <PIDController_Update>
 8004a6a:	4603      	mov	r3, r0
						totalDistance_right * STRAIGHTRATIOF, pwmValC)
						+ pwmValBadjust
 8004a6c:	b29b      	uxth	r3, r3
				pwmValC = PIDController_Update(&pidRight, totalDistance_left,
 8004a6e:	f203 230d 	addw	r3, r3, #525	; 0x20d
 8004a72:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8004a76:	e03f      	b.n	8004af8 <move+0x3d4>
 8004a78:	20000378 	.word	0x20000378
 8004a7c:	20000258 	.word	0x20000258
 8004a80:	3d4ccccd 	.word	0x3d4ccccd
 8004a84:	44440000 	.word	0x44440000
 8004a88:	4442c000 	.word	0x4442c000
 8004a8c:	41b33333 	.word	0x41b33333
 8004a90:	200002a0 	.word	0x200002a0
 8004a94:	20000330 	.word	0x20000330
 8004a98:	40020000 	.word	0x40020000
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	40020800 	.word	0x40020800
 8004aa4:	20000414 	.word	0x20000414
 8004aa8:	bd0f5c29 	.word	0xbd0f5c29
 8004aac:	bd75c28f 	.word	0xbd75c28f
				;
			} else {
				pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 8004ab0:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8004ab4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004ab8:	4611      	mov	r1, r2
 8004aba:	edd7 0a2c 	vldr	s1, [r7, #176]	; 0xb0
 8004abe:	ed97 0a2b 	vldr	s0, [r7, #172]	; 0xac
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f001 faf6 	bl	80060b4 <PIDController_Update>
 8004ac8:	4603      	mov	r3, r0
						totalDistance_left * STRAIGHTRATIOR, pwmValA)
						- pwmValAadjust
 8004aca:	b29b      	uxth	r3, r3
				pwmValA = PIDController_Update(&pidLeft, totalDistance_right,
 8004acc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ad0:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
				;

				pwmValC = PIDController_Update(&pidRight,
 8004ad4:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8004ad8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004adc:	4611      	mov	r1, r2
 8004ade:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 8004ae2:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f001 fae4 	bl	80060b4 <PIDController_Update>
 8004aec:	4603      	mov	r3, r0
						totalDistance_left * STRAIGHTRATIOR,
						totalDistance_right, pwmValC) + pwmValBadjust
 8004aee:	b29b      	uxth	r3, r3
				pwmValC = PIDController_Update(&pidRight,
 8004af0:	f203 230d 	addw	r3, r3, #525	; 0x20d
 8004af4:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
				;
			}

			if (forward) {
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d008      	beq.n	8004b10 <move+0x3ec>
				distanceError = DISTANCE_ERROR_OFFSETF * distance;
 8004afe:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b02:	ed1f 7a17 	vldr	s14, [pc, #-92]	; 8004aa8 <move+0x384>
 8004b06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b0a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 8004b0e:	e007      	b.n	8004b20 <move+0x3fc>
			} else {
				distanceError = DISTANCE_ERROR_OFFSETR * distance;
 8004b10:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b14:	ed1f 7a1b 	vldr	s14, [pc, #-108]	; 8004aac <move+0x388>
 8004b18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b1c:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
			}

			if (totalDistance_left >= (distance + distanceError)
 8004b20:	ed97 7a01 	vldr	s14, [r7, #4]
 8004b24:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b2c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8004b30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b38:	da0c      	bge.n	8004b54 <move+0x430>
					|| totalDistance_right >= (distance + distanceError)) {
 8004b3a:	ed97 7a01 	vldr	s14, [r7, #4]
 8004b3e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b46:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8004b4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b52:	db60      	blt.n	8004c16 <move+0x4f2>
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 8004b54:	4b48      	ldr	r3, [pc, #288]	; (8004c78 <move+0x554>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3,0);
 8004b5c:	4b46      	ldr	r3, [pc, #280]	; (8004c78 <move+0x554>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2200      	movs	r2, #0
 8004b62:	63da      	str	r2, [r3, #60]	; 0x3c
				moving = 0;
 8004b64:	4b45      	ldr	r3, [pc, #276]	; (8004c7c <move+0x558>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	701a      	strb	r2, [r3, #0]
				sprintf(messageA, "dist: %.2f\0", distance);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fb fcec 	bl	8000548 <__aeabi_f2d>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	f107 001c 	add.w	r0, r7, #28
 8004b78:	4941      	ldr	r1, [pc, #260]	; (8004c80 <move+0x55c>)
 8004b7a:	f00b fd37 	bl	80105ec <siprintf>
				OLED_ShowString(10, 10, messageA);
 8004b7e:	f107 031c 	add.w	r3, r7, #28
 8004b82:	461a      	mov	r2, r3
 8004b84:	210a      	movs	r1, #10
 8004b86:	200a      	movs	r0, #10
 8004b88:	f001 f9be 	bl	8005f08 <OLED_ShowString>
				sprintf(messageA, "SLeft: %2d\0", pwmValA);
 8004b8c:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8004b90:	f107 031c 	add.w	r3, r7, #28
 8004b94:	493b      	ldr	r1, [pc, #236]	; (8004c84 <move+0x560>)
 8004b96:	4618      	mov	r0, r3
 8004b98:	f00b fd28 	bl	80105ec <siprintf>
				OLED_ShowString(10, 20, messageA);
 8004b9c:	f107 031c 	add.w	r3, r7, #28
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	2114      	movs	r1, #20
 8004ba4:	200a      	movs	r0, #10
 8004ba6:	f001 f9af 	bl	8005f08 <OLED_ShowString>
				sprintf(messageA, "TLeft: %.2f\0", totalDistance_left);
 8004baa:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8004bae:	f7fb fccb 	bl	8000548 <__aeabi_f2d>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	f107 001c 	add.w	r0, r7, #28
 8004bba:	4933      	ldr	r1, [pc, #204]	; (8004c88 <move+0x564>)
 8004bbc:	f00b fd16 	bl	80105ec <siprintf>
				OLED_ShowString(10, 30, messageA);
 8004bc0:	f107 031c 	add.w	r3, r7, #28
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	211e      	movs	r1, #30
 8004bc8:	200a      	movs	r0, #10
 8004bca:	f001 f99d 	bl	8005f08 <OLED_ShowString>

				sprintf(messageB, "SRight: %2d\0", pwmValC);
 8004bce:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8004bd2:	f107 0308 	add.w	r3, r7, #8
 8004bd6:	492d      	ldr	r1, [pc, #180]	; (8004c8c <move+0x568>)
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f00b fd07 	bl	80105ec <siprintf>
				OLED_ShowString(10, 40, messageB);
 8004bde:	f107 0308 	add.w	r3, r7, #8
 8004be2:	461a      	mov	r2, r3
 8004be4:	2128      	movs	r1, #40	; 0x28
 8004be6:	200a      	movs	r0, #10
 8004be8:	f001 f98e 	bl	8005f08 <OLED_ShowString>
				sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
 8004bec:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004bf0:	f7fb fcaa 	bl	8000548 <__aeabi_f2d>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	f107 0008 	add.w	r0, r7, #8
 8004bfc:	4924      	ldr	r1, [pc, #144]	; (8004c90 <move+0x56c>)
 8004bfe:	f00b fcf5 	bl	80105ec <siprintf>
				OLED_ShowString(10, 50, messageB);
 8004c02:	f107 0308 	add.w	r3, r7, #8
 8004c06:	461a      	mov	r2, r3
 8004c08:	2132      	movs	r1, #50	; 0x32
 8004c0a:	200a      	movs	r0, #10
 8004c0c:	f001 f97c 	bl	8005f08 <OLED_ShowString>
				OLED_Refresh_Gram();
 8004c10:	f001 f806 	bl	8005c20 <OLED_Refresh_Gram>
				break;
 8004c14:	e00c      	b.n	8004c30 <move+0x50c>
//			sprintf(messageA, "SLeft: %2d\0", diffLeft);
//			OLED_ShowString(10, 30, messageA);
//			sprintf(messageB, "SRight: %2d\0", diffRight);
//			OLED_ShowString(10, 40, messageB);

			prevTime = currTime;
 8004c16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			leftTick_prev = leftTick;
 8004c1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			rightTick_prev = rightTick;
 8004c26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8004c2e:	e627      	b.n	8004880 <move+0x15c>
		}
	}
	moving = 0;
 8004c30:	4b12      	ldr	r3, [pc, #72]	; (8004c7c <move+0x558>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	701a      	strb	r2, [r3, #0]
//	offsetAngle = targetAngle - actualAngle;
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8004c36:	2201      	movs	r2, #1
 8004c38:	2108      	movs	r1, #8
 8004c3a:	4816      	ldr	r0, [pc, #88]	; (8004c94 <move+0x570>)
 8004c3c:	f002 fa8a 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8004c40:	2200      	movs	r2, #0
 8004c42:	2104      	movs	r1, #4
 8004c44:	4813      	ldr	r0, [pc, #76]	; (8004c94 <move+0x570>)
 8004c46:	f002 fa85 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c50:	4811      	ldr	r0, [pc, #68]	; (8004c98 <move+0x574>)
 8004c52:	f002 fa7f 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8004c56:	2200      	movs	r2, #0
 8004c58:	2120      	movs	r1, #32
 8004c5a:	4810      	ldr	r0, [pc, #64]	; (8004c9c <move+0x578>)
 8004c5c:	f002 fa7a 	bl	8007154 <HAL_GPIO_WritePin>
	htim1.Instance->CCR4 = STRAIGHT; //centre
 8004c60:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <move+0x57c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2297      	movs	r2, #151	; 0x97
 8004c66:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(10);
 8004c68:	200a      	movs	r0, #10
 8004c6a:	f008 f8dc 	bl	800ce26 <osDelay>
	return;
 8004c6e:	bf00      	nop
}
 8004c70:	37c0      	adds	r7, #192	; 0xc0
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	20000378 	.word	0x20000378
 8004c7c:	20000414 	.word	0x20000414
 8004c80:	08014214 	.word	0x08014214
 8004c84:	08014240 	.word	0x08014240
 8004c88:	08014220 	.word	0x08014220
 8004c8c:	0801424c 	.word	0x0801424c
 8004c90:	08014230 	.word	0x08014230
 8004c94:	40020000 	.word	0x40020000
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	40020800 	.word	0x40020800
 8004ca0:	20000258 	.word	0x20000258
 8004ca4:	00000000 	.word	0x00000000

08004ca8 <bLeft90>:

void bLeft90() {
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
//	moving = 0;
//	move(0,0);
//	moveGyroPID(5.3, 0);

	// outdoor
	totalAngle = 0;
 8004cae:	4940      	ldr	r1, [pc, #256]	; (8004db0 <bLeft90+0x108>)
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t messageA[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	483d      	ldr	r0, [pc, #244]	; (8004db4 <bLeft90+0x10c>)
 8004cc0:	f005 fafe 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8004cc4:	2108      	movs	r1, #8
 8004cc6:	483b      	ldr	r0, [pc, #236]	; (8004db4 <bLeft90+0x10c>)
 8004cc8:	f005 fafa 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8004ccc:	210c      	movs	r1, #12
 8004cce:	483a      	ldr	r0, [pc, #232]	; (8004db8 <bLeft90+0x110>)
 8004cd0:	f005 faf6 	bl	800a2c0 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8004cd4:	4b38      	ldr	r3, [pc, #224]	; (8004db8 <bLeft90+0x110>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2297      	movs	r2, #151	; 0x97
 8004cda:	641a      	str	r2, [r3, #64]	; 0x40
	moveGyroPID(5.5, 1);
 8004cdc:	2001      	movs	r0, #1
 8004cde:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
 8004ce2:	f7fe fe59 	bl	8003998 <moveGyroPID>

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	2108      	movs	r1, #8
 8004cea:	4834      	ldr	r0, [pc, #208]	; (8004dbc <bLeft90+0x114>)
 8004cec:	f002 fa32 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	2104      	movs	r1, #4
 8004cf4:	4831      	ldr	r0, [pc, #196]	; (8004dbc <bLeft90+0x114>)
 8004cf6:	f002 fa2d 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d00:	482f      	ldr	r0, [pc, #188]	; (8004dc0 <bLeft90+0x118>)
 8004d02:	f002 fa27 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8004d06:	2201      	movs	r2, #1
 8004d08:	2120      	movs	r1, #32
 8004d0a:	482e      	ldr	r0, [pc, #184]	; (8004dc4 <bLeft90+0x11c>)
 8004d0c:	f002 fa22 	bl	8007154 <HAL_GPIO_WritePin>
	moving = 1;
 8004d10:	4b2d      	ldr	r3, [pc, #180]	; (8004dc8 <bLeft90+0x120>)
 8004d12:	2201      	movs	r2, #1
 8004d14:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = LEFT;
 8004d16:	4b28      	ldr	r3, [pc, #160]	; (8004db8 <bLeft90+0x110>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2269      	movs	r2, #105	; 0x69
 8004d1c:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 500);
 8004d1e:	4b25      	ldr	r3, [pc, #148]	; (8004db4 <bLeft90+0x10c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004d26:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2900);
 8004d28:	4b22      	ldr	r3, [pc, #136]	; (8004db4 <bLeft90+0x10c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f640 3254 	movw	r2, #2900	; 0xb54
 8004d30:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 8004d32:	e017      	b.n	8004d64 <bLeft90+0xbc>

		if (totalAngle <= -85) {
 8004d34:	4b1e      	ldr	r3, [pc, #120]	; (8004db0 <bLeft90+0x108>)
 8004d36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d3a:	a31b      	add	r3, pc, #108	; (adr r3, 8004da8 <bLeft90+0x100>)
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	f7fb fed6 	bl	8000af0 <__aeabi_dcmple>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d111      	bne.n	8004d6e <bLeft90+0xc6>
			break;
		}
		sprintf(messageA, "Langle %5d\0", (int) (totalAngle));
 8004d4a:	4b19      	ldr	r3, [pc, #100]	; (8004db0 <bLeft90+0x108>)
 8004d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d50:	4610      	mov	r0, r2
 8004d52:	4619      	mov	r1, r3
 8004d54:	f7fb ff00 	bl	8000b58 <__aeabi_d2iz>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	1d3b      	adds	r3, r7, #4
 8004d5c:	491b      	ldr	r1, [pc, #108]	; (8004dcc <bLeft90+0x124>)
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f00b fc44 	bl	80105ec <siprintf>
	while (moving) {
 8004d64:	4b18      	ldr	r3, [pc, #96]	; (8004dc8 <bLeft90+0x120>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e3      	bne.n	8004d34 <bLeft90+0x8c>
 8004d6c:	e000      	b.n	8004d70 <bLeft90+0xc8>
			break;
 8004d6e:	bf00      	nop
		//     OLED_ShowString(10,30, messageA);
		//     OLED_Refresh_Gram();
	}
	//  stop();
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8004d70:	4b10      	ldr	r3, [pc, #64]	; (8004db4 <bLeft90+0x10c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2200      	movs	r2, #0
 8004d76:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8004d78:	4b0e      	ldr	r3, [pc, #56]	; (8004db4 <bLeft90+0x10c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 8004d80:	4b11      	ldr	r3, [pc, #68]	; (8004dc8 <bLeft90+0x120>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	701a      	strb	r2, [r3, #0]
	move(0, 0);
 8004d86:	2000      	movs	r0, #0
 8004d88:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8004dd0 <bLeft90+0x128>
 8004d8c:	f7ff fcca 	bl	8004724 <move>
	moveGyroPID(3, 0);
 8004d90:	2000      	movs	r0, #0
 8004d92:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004d96:	f7fe fdff 	bl	8003998 <moveGyroPID>
//	//  dir = (dir + 3) % 4 ;
//	//  x += axis[dir][0] * left_90[xydir];
//	//  xydir = (xydir + 1) % 2;
//	//  y += axis[dir][1] * left_90[xydir];

}
 8004d9a:	bf00      	nop
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	f3af 8000 	nop.w
 8004da8:	00000000 	.word	0x00000000
 8004dac:	c0554000 	.word	0xc0554000
 8004db0:	20000418 	.word	0x20000418
 8004db4:	20000378 	.word	0x20000378
 8004db8:	20000258 	.word	0x20000258
 8004dbc:	40020000 	.word	0x40020000
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	40020800 	.word	0x40020800
 8004dc8:	20000414 	.word	0x20000414
 8004dcc:	0801425c 	.word	0x0801425c
	...

08004dd8 <bRight90>:

void bRight90() {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
//	move(0, 0);
//	moveGyroPID(1, 0);

	// outdoor
	uint8_t messageA[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8004dde:	2100      	movs	r1, #0
 8004de0:	483f      	ldr	r0, [pc, #252]	; (8004ee0 <bRight90+0x108>)
 8004de2:	f005 fa6d 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8004de6:	2108      	movs	r1, #8
 8004de8:	483d      	ldr	r0, [pc, #244]	; (8004ee0 <bRight90+0x108>)
 8004dea:	f005 fa69 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8004dee:	210c      	movs	r1, #12
 8004df0:	483c      	ldr	r0, [pc, #240]	; (8004ee4 <bRight90+0x10c>)
 8004df2:	f005 fa65 	bl	800a2c0 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8004df6:	4b3b      	ldr	r3, [pc, #236]	; (8004ee4 <bRight90+0x10c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2297      	movs	r2, #151	; 0x97
 8004dfc:	641a      	str	r2, [r3, #64]	; 0x40

	moveGyroPID(7, 1);
 8004dfe:	2001      	movs	r0, #1
 8004e00:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8004e04:	f7fe fdc8 	bl	8003998 <moveGyroPID>
	totalAngle = 0;
 8004e08:	4937      	ldr	r1, [pc, #220]	; (8004ee8 <bRight90+0x110>)
 8004e0a:	f04f 0200 	mov.w	r2, #0
 8004e0e:	f04f 0300 	mov.w	r3, #0
 8004e12:	e9c1 2300 	strd	r2, r3, [r1]
	osDelay(100);
 8004e16:	2064      	movs	r0, #100	; 0x64
 8004e18:	f008 f805 	bl	800ce26 <osDelay>
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	2108      	movs	r1, #8
 8004e20:	4832      	ldr	r0, [pc, #200]	; (8004eec <bRight90+0x114>)
 8004e22:	f002 f997 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8004e26:	2201      	movs	r2, #1
 8004e28:	2104      	movs	r1, #4
 8004e2a:	4830      	ldr	r0, [pc, #192]	; (8004eec <bRight90+0x114>)
 8004e2c:	f002 f992 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_RESET);
 8004e30:	2200      	movs	r2, #0
 8004e32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e36:	482e      	ldr	r0, [pc, #184]	; (8004ef0 <bRight90+0x118>)
 8004e38:	f002 f98c 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_SET);
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	2120      	movs	r1, #32
 8004e40:	482c      	ldr	r0, [pc, #176]	; (8004ef4 <bRight90+0x11c>)
 8004e42:	f002 f987 	bl	8007154 <HAL_GPIO_WritePin>
	moving = 1;
 8004e46:	4b2c      	ldr	r3, [pc, #176]	; (8004ef8 <bRight90+0x120>)
 8004e48:	2201      	movs	r2, #1
 8004e4a:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = 250;
 8004e4c:	4b25      	ldr	r3, [pc, #148]	; (8004ee4 <bRight90+0x10c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	22fa      	movs	r2, #250	; 0xfa
 8004e52:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 2700);
 8004e54:	4b22      	ldr	r3, [pc, #136]	; (8004ee0 <bRight90+0x108>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f640 228c 	movw	r2, #2700	; 0xa8c
 8004e5c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 600);
 8004e5e:	4b20      	ldr	r3, [pc, #128]	; (8004ee0 <bRight90+0x108>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f44f 7216 	mov.w	r2, #600	; 0x258
 8004e66:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 8004e68:	e017      	b.n	8004e9a <bRight90+0xc2>

		if (totalAngle > 83) {
 8004e6a:	4b1f      	ldr	r3, [pc, #124]	; (8004ee8 <bRight90+0x110>)
 8004e6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e70:	a319      	add	r3, pc, #100	; (adr r3, 8004ed8 <bRight90+0x100>)
 8004e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e76:	f7fb fe4f 	bl	8000b18 <__aeabi_dcmpgt>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d111      	bne.n	8004ea4 <bRight90+0xcc>
			break;
		}
		sprintf(messageA, "Langle %5d\0", (int) (totalAngle));
 8004e80:	4b19      	ldr	r3, [pc, #100]	; (8004ee8 <bRight90+0x110>)
 8004e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e86:	4610      	mov	r0, r2
 8004e88:	4619      	mov	r1, r3
 8004e8a:	f7fb fe65 	bl	8000b58 <__aeabi_d2iz>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	1d3b      	adds	r3, r7, #4
 8004e92:	491a      	ldr	r1, [pc, #104]	; (8004efc <bRight90+0x124>)
 8004e94:	4618      	mov	r0, r3
 8004e96:	f00b fba9 	bl	80105ec <siprintf>
	while (moving) {
 8004e9a:	4b17      	ldr	r3, [pc, #92]	; (8004ef8 <bRight90+0x120>)
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1e3      	bne.n	8004e6a <bRight90+0x92>
 8004ea2:	e000      	b.n	8004ea6 <bRight90+0xce>
			break;
 8004ea4:	bf00      	nop
		//     OLED_ShowString(10,30, messageA);
		//     OLED_Refresh_Gram();
	}
	//  stop();
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8004ea6:	4b0e      	ldr	r3, [pc, #56]	; (8004ee0 <bRight90+0x108>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8004eae:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <bRight90+0x108>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 8004eb6:	4b10      	ldr	r3, [pc, #64]	; (8004ef8 <bRight90+0x120>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	701a      	strb	r2, [r3, #0]
	move(0, 0);
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8004f00 <bRight90+0x128>
 8004ec2:	f7ff fc2f 	bl	8004724 <move>
	moveGyroPID(2.5, 0);
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8004ecc:	f7fe fd64 	bl	8003998 <moveGyroPID>

}
 8004ed0:	bf00      	nop
 8004ed2:	3718      	adds	r7, #24
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	00000000 	.word	0x00000000
 8004edc:	4054c000 	.word	0x4054c000
 8004ee0:	20000378 	.word	0x20000378
 8004ee4:	20000258 	.word	0x20000258
 8004ee8:	20000418 	.word	0x20000418
 8004eec:	40020000 	.word	0x40020000
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	40020800 	.word	0x40020800
 8004ef8:	20000414 	.word	0x20000414
 8004efc:	0801425c 	.word	0x0801425c
 8004f00:	00000000 	.word	0x00000000

08004f04 <left90>:

void left90() {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
//	//comment for task 2
//	move(0, 0);
//	moveGyroPID(10, 0);

	// outdoor
	totalAngle = 0;
 8004f0a:	493b      	ldr	r1, [pc, #236]	; (8004ff8 <left90+0xf4>)
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t messageA[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8004f18:	2100      	movs	r1, #0
 8004f1a:	4838      	ldr	r0, [pc, #224]	; (8004ffc <left90+0xf8>)
 8004f1c:	f005 f9d0 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8004f20:	2108      	movs	r1, #8
 8004f22:	4836      	ldr	r0, [pc, #216]	; (8004ffc <left90+0xf8>)
 8004f24:	f005 f9cc 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8004f28:	210c      	movs	r1, #12
 8004f2a:	4835      	ldr	r0, [pc, #212]	; (8005000 <left90+0xfc>)
 8004f2c:	f005 f9c8 	bl	800a2c0 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8004f30:	4b33      	ldr	r3, [pc, #204]	; (8005000 <left90+0xfc>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2297      	movs	r2, #151	; 0x97
 8004f36:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8004f38:	2201      	movs	r2, #1
 8004f3a:	2108      	movs	r1, #8
 8004f3c:	4831      	ldr	r0, [pc, #196]	; (8005004 <left90+0x100>)
 8004f3e:	f002 f909 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8004f42:	2200      	movs	r2, #0
 8004f44:	2104      	movs	r1, #4
 8004f46:	482f      	ldr	r0, [pc, #188]	; (8005004 <left90+0x100>)
 8004f48:	f002 f904 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f52:	482d      	ldr	r0, [pc, #180]	; (8005008 <left90+0x104>)
 8004f54:	f002 f8fe 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8004f58:	2200      	movs	r2, #0
 8004f5a:	2120      	movs	r1, #32
 8004f5c:	482b      	ldr	r0, [pc, #172]	; (800500c <left90+0x108>)
 8004f5e:	f002 f8f9 	bl	8007154 <HAL_GPIO_WritePin>
	moving = 1;
 8004f62:	4b2b      	ldr	r3, [pc, #172]	; (8005010 <left90+0x10c>)
 8004f64:	2201      	movs	r2, #1
 8004f66:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = 103;
 8004f68:	4b25      	ldr	r3, [pc, #148]	; (8005000 <left90+0xfc>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2267      	movs	r2, #103	; 0x67
 8004f6e:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 450);
 8004f70:	4b22      	ldr	r3, [pc, #136]	; (8004ffc <left90+0xf8>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8004f78:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 2700);
 8004f7a:	4b20      	ldr	r3, [pc, #128]	; (8004ffc <left90+0xf8>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f640 228c 	movw	r2, #2700	; 0xa8c
 8004f82:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 8004f84:	e01f      	b.n	8004fc6 <left90+0xc2>

		if (totalAngle >= 76) {
 8004f86:	4b1c      	ldr	r3, [pc, #112]	; (8004ff8 <left90+0xf4>)
 8004f88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f8c:	f04f 0200 	mov.w	r2, #0
 8004f90:	4b20      	ldr	r3, [pc, #128]	; (8005014 <left90+0x110>)
 8004f92:	f7fb fdb7 	bl	8000b04 <__aeabi_dcmpge>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d119      	bne.n	8004fd0 <left90+0xcc>
			break;
		}
		sprintf(messageA, "Langle %5d\0", (int) (totalAngle));
 8004f9c:	4b16      	ldr	r3, [pc, #88]	; (8004ff8 <left90+0xf4>)
 8004f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	f7fb fdd7 	bl	8000b58 <__aeabi_d2iz>
 8004faa:	4602      	mov	r2, r0
 8004fac:	1d3b      	adds	r3, r7, #4
 8004fae:	491a      	ldr	r1, [pc, #104]	; (8005018 <left90+0x114>)
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f00b fb1b 	bl	80105ec <siprintf>
		OLED_ShowString(10, 30, messageA);
 8004fb6:	1d3b      	adds	r3, r7, #4
 8004fb8:	461a      	mov	r2, r3
 8004fba:	211e      	movs	r1, #30
 8004fbc:	200a      	movs	r0, #10
 8004fbe:	f000 ffa3 	bl	8005f08 <OLED_ShowString>
		OLED_Refresh_Gram();
 8004fc2:	f000 fe2d 	bl	8005c20 <OLED_Refresh_Gram>
	while (moving) {
 8004fc6:	4b12      	ldr	r3, [pc, #72]	; (8005010 <left90+0x10c>)
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1db      	bne.n	8004f86 <left90+0x82>
 8004fce:	e000      	b.n	8004fd2 <left90+0xce>
			break;
 8004fd0:	bf00      	nop
	}
//  stop();
	osDelay(5);
 8004fd2:	2005      	movs	r0, #5
 8004fd4:	f007 ff27 	bl	800ce26 <osDelay>
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8004fd8:	4b08      	ldr	r3, [pc, #32]	; (8004ffc <left90+0xf8>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8004fe0:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <left90+0xf8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 8004fe8:	4b09      	ldr	r3, [pc, #36]	; (8005010 <left90+0x10c>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	701a      	strb	r2, [r3, #0]
//	moveGyroPID(12.25, 0);
//  dir = (dir + 3) % 4 ;
//  x += axis[dir][0] * left_90[xydir];
//  xydir = (xydir + 1) % 2;
//  y += axis[dir][1] * left_90[xydir];
}
 8004fee:	bf00      	nop
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	20000418 	.word	0x20000418
 8004ffc:	20000378 	.word	0x20000378
 8005000:	20000258 	.word	0x20000258
 8005004:	40020000 	.word	0x40020000
 8005008:	40021000 	.word	0x40021000
 800500c:	40020800 	.word	0x40020800
 8005010:	20000414 	.word	0x20000414
 8005014:	40530000 	.word	0x40530000
 8005018:	0801425c 	.word	0x0801425c

0800501c <goRoundObsticleL>:

void goRoundObsticleL() {
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
	//	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
	//	moving = 0;

	//outdooor
	// set up
	totalAngle = 0;
 8005022:	4968      	ldr	r1, [pc, #416]	; (80051c4 <goRoundObsticleL+0x1a8>)
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t messageA[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8005030:	2100      	movs	r1, #0
 8005032:	4865      	ldr	r0, [pc, #404]	; (80051c8 <goRoundObsticleL+0x1ac>)
 8005034:	f005 f944 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8005038:	2108      	movs	r1, #8
 800503a:	4863      	ldr	r0, [pc, #396]	; (80051c8 <goRoundObsticleL+0x1ac>)
 800503c:	f005 f940 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005040:	210c      	movs	r1, #12
 8005042:	4862      	ldr	r0, [pc, #392]	; (80051cc <goRoundObsticleL+0x1b0>)
 8005044:	f005 f93c 	bl	800a2c0 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8005048:	4b60      	ldr	r3, [pc, #384]	; (80051cc <goRoundObsticleL+0x1b0>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2297      	movs	r2, #151	; 0x97
 800504e:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8005050:	2201      	movs	r2, #1
 8005052:	2108      	movs	r1, #8
 8005054:	485e      	ldr	r0, [pc, #376]	; (80051d0 <goRoundObsticleL+0x1b4>)
 8005056:	f002 f87d 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800505a:	2200      	movs	r2, #0
 800505c:	2104      	movs	r1, #4
 800505e:	485c      	ldr	r0, [pc, #368]	; (80051d0 <goRoundObsticleL+0x1b4>)
 8005060:	f002 f878 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8005064:	2201      	movs	r2, #1
 8005066:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800506a:	485a      	ldr	r0, [pc, #360]	; (80051d4 <goRoundObsticleL+0x1b8>)
 800506c:	f002 f872 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8005070:	2200      	movs	r2, #0
 8005072:	2120      	movs	r1, #32
 8005074:	4858      	ldr	r0, [pc, #352]	; (80051d8 <goRoundObsticleL+0x1bc>)
 8005076:	f002 f86d 	bl	8007154 <HAL_GPIO_WritePin>
	moving = 1;
 800507a:	4b58      	ldr	r3, [pc, #352]	; (80051dc <goRoundObsticleL+0x1c0>)
 800507c:	2201      	movs	r2, #1
 800507e:	701a      	strb	r2, [r3, #0]

	// left
	htim1.Instance->CCR4 = 120;
 8005080:	4b52      	ldr	r3, [pc, #328]	; (80051cc <goRoundObsticleL+0x1b0>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2278      	movs	r2, #120	; 0x78
 8005086:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 700);
 8005088:	4b4f      	ldr	r3, [pc, #316]	; (80051c8 <goRoundObsticleL+0x1ac>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8005090:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 8005092:	4b4d      	ldr	r3, [pc, #308]	; (80051c8 <goRoundObsticleL+0x1ac>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800509a:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 800509c:	e00a      	b.n	80050b4 <goRoundObsticleL+0x98>

		if (totalAngle >= 50) {
 800509e:	4b49      	ldr	r3, [pc, #292]	; (80051c4 <goRoundObsticleL+0x1a8>)
 80050a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	4b4d      	ldr	r3, [pc, #308]	; (80051e0 <goRoundObsticleL+0x1c4>)
 80050aa:	f7fb fd2b 	bl	8000b04 <__aeabi_dcmpge>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d104      	bne.n	80050be <goRoundObsticleL+0xa2>
	while (moving) {
 80050b4:	4b49      	ldr	r3, [pc, #292]	; (80051dc <goRoundObsticleL+0x1c0>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1f0      	bne.n	800509e <goRoundObsticleL+0x82>
 80050bc:	e000      	b.n	80050c0 <goRoundObsticleL+0xa4>
			break;
 80050be:	bf00      	nop
		}
	}

	osDelay(20);
 80050c0:	2014      	movs	r0, #20
 80050c2:	f007 feb0 	bl	800ce26 <osDelay>
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 80050c6:	4b40      	ldr	r3, [pc, #256]	; (80051c8 <goRoundObsticleL+0x1ac>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2200      	movs	r2, #0
 80050cc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 80050ce:	4b3e      	ldr	r3, [pc, #248]	; (80051c8 <goRoundObsticleL+0x1ac>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2200      	movs	r2, #0
 80050d4:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 80050d6:	4b41      	ldr	r3, [pc, #260]	; (80051dc <goRoundObsticleL+0x1c0>)
 80050d8:	2200      	movs	r2, #0
 80050da:	701a      	strb	r2, [r3, #0]

	// right180
	totalAngle = 0;
 80050dc:	4939      	ldr	r1, [pc, #228]	; (80051c4 <goRoundObsticleL+0x1a8>)
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	e9c1 2300 	strd	r2, r3, [r1]
	moving = 1;
 80050ea:	4b3c      	ldr	r3, [pc, #240]	; (80051dc <goRoundObsticleL+0x1c0>)
 80050ec:	2201      	movs	r2, #1
 80050ee:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = 205;
 80050f0:	4b36      	ldr	r3, [pc, #216]	; (80051cc <goRoundObsticleL+0x1b0>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	22cd      	movs	r2, #205	; 0xcd
 80050f6:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 80050f8:	4b33      	ldr	r3, [pc, #204]	; (80051c8 <goRoundObsticleL+0x1ac>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005100:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 800);
 8005102:	4b31      	ldr	r3, [pc, #196]	; (80051c8 <goRoundObsticleL+0x1ac>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f44f 7248 	mov.w	r2, #800	; 0x320
 800510a:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 800510c:	e00a      	b.n	8005124 <goRoundObsticleL+0x108>

		if (totalAngle < -95) {
 800510e:	4b2d      	ldr	r3, [pc, #180]	; (80051c4 <goRoundObsticleL+0x1a8>)
 8005110:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005114:	f04f 0200 	mov.w	r2, #0
 8005118:	4b32      	ldr	r3, [pc, #200]	; (80051e4 <goRoundObsticleL+0x1c8>)
 800511a:	f7fb fcdf 	bl	8000adc <__aeabi_dcmplt>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d104      	bne.n	800512e <goRoundObsticleL+0x112>
	while (moving) {
 8005124:	4b2d      	ldr	r3, [pc, #180]	; (80051dc <goRoundObsticleL+0x1c0>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1f0      	bne.n	800510e <goRoundObsticleL+0xf2>
 800512c:	e000      	b.n	8005130 <goRoundObsticleL+0x114>
			break;
 800512e:	bf00      	nop
		}
	}
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8005130:	4b25      	ldr	r3, [pc, #148]	; (80051c8 <goRoundObsticleL+0x1ac>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2200      	movs	r2, #0
 8005136:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8005138:	4b23      	ldr	r3, [pc, #140]	; (80051c8 <goRoundObsticleL+0x1ac>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2200      	movs	r2, #0
 800513e:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 8005140:	4b26      	ldr	r3, [pc, #152]	; (80051dc <goRoundObsticleL+0x1c0>)
 8005142:	2200      	movs	r2, #0
 8005144:	701a      	strb	r2, [r3, #0]
	osDelay(20);
 8005146:	2014      	movs	r0, #20
 8005148:	f007 fe6d 	bl	800ce26 <osDelay>

	// left
	totalAngle = 0;
 800514c:	491d      	ldr	r1, [pc, #116]	; (80051c4 <goRoundObsticleL+0x1a8>)
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	f04f 0300 	mov.w	r3, #0
 8005156:	e9c1 2300 	strd	r2, r3, [r1]
	moving = 1;
 800515a:	4b20      	ldr	r3, [pc, #128]	; (80051dc <goRoundObsticleL+0x1c0>)
 800515c:	2201      	movs	r2, #1
 800515e:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = 102;
 8005160:	4b1a      	ldr	r3, [pc, #104]	; (80051cc <goRoundObsticleL+0x1b0>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2266      	movs	r2, #102	; 0x66
 8005166:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 700);
 8005168:	4b17      	ldr	r3, [pc, #92]	; (80051c8 <goRoundObsticleL+0x1ac>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8005170:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 8005172:	4b15      	ldr	r3, [pc, #84]	; (80051c8 <goRoundObsticleL+0x1ac>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800517a:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 800517c:	e00a      	b.n	8005194 <goRoundObsticleL+0x178>

		if (totalAngle >= 45) {
 800517e:	4b11      	ldr	r3, [pc, #68]	; (80051c4 <goRoundObsticleL+0x1a8>)
 8005180:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005184:	f04f 0200 	mov.w	r2, #0
 8005188:	4b17      	ldr	r3, [pc, #92]	; (80051e8 <goRoundObsticleL+0x1cc>)
 800518a:	f7fb fcbb 	bl	8000b04 <__aeabi_dcmpge>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d104      	bne.n	800519e <goRoundObsticleL+0x182>
	while (moving) {
 8005194:	4b11      	ldr	r3, [pc, #68]	; (80051dc <goRoundObsticleL+0x1c0>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1f0      	bne.n	800517e <goRoundObsticleL+0x162>
 800519c:	e000      	b.n	80051a0 <goRoundObsticleL+0x184>
			break;
 800519e:	bf00      	nop
		}
	}

	osDelay(20);
 80051a0:	2014      	movs	r0, #20
 80051a2:	f007 fe40 	bl	800ce26 <osDelay>
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 80051a6:	4b08      	ldr	r3, [pc, #32]	; (80051c8 <goRoundObsticleL+0x1ac>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2200      	movs	r2, #0
 80051ac:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 80051ae:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <goRoundObsticleL+0x1ac>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2200      	movs	r2, #0
 80051b4:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 80051b6:	4b09      	ldr	r3, [pc, #36]	; (80051dc <goRoundObsticleL+0x1c0>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	701a      	strb	r2, [r3, #0]
}
 80051bc:	bf00      	nop
 80051be:	3718      	adds	r7, #24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	20000418 	.word	0x20000418
 80051c8:	20000378 	.word	0x20000378
 80051cc:	20000258 	.word	0x20000258
 80051d0:	40020000 	.word	0x40020000
 80051d4:	40021000 	.word	0x40021000
 80051d8:	40020800 	.word	0x40020800
 80051dc:	20000414 	.word	0x20000414
 80051e0:	40490000 	.word	0x40490000
 80051e4:	c057c000 	.word	0xc057c000
 80051e8:	40468000 	.word	0x40468000

080051ec <goRoundObsticleR>:

void goRoundObsticleR() {
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
//	moving = 0;
//	osDelay(20);

	//outdoor
	// set up
	totalAngle = 0;
 80051f2:	496c      	ldr	r1, [pc, #432]	; (80053a4 <goRoundObsticleR+0x1b8>)
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t messageA[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8005200:	2100      	movs	r1, #0
 8005202:	4869      	ldr	r0, [pc, #420]	; (80053a8 <goRoundObsticleR+0x1bc>)
 8005204:	f005 f85c 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8005208:	2108      	movs	r1, #8
 800520a:	4867      	ldr	r0, [pc, #412]	; (80053a8 <goRoundObsticleR+0x1bc>)
 800520c:	f005 f858 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005210:	210c      	movs	r1, #12
 8005212:	4866      	ldr	r0, [pc, #408]	; (80053ac <goRoundObsticleR+0x1c0>)
 8005214:	f005 f854 	bl	800a2c0 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 8005218:	4b64      	ldr	r3, [pc, #400]	; (80053ac <goRoundObsticleR+0x1c0>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2297      	movs	r2, #151	; 0x97
 800521e:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8005220:	2201      	movs	r2, #1
 8005222:	2108      	movs	r1, #8
 8005224:	4862      	ldr	r0, [pc, #392]	; (80053b0 <goRoundObsticleR+0x1c4>)
 8005226:	f001 ff95 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800522a:	2200      	movs	r2, #0
 800522c:	2104      	movs	r1, #4
 800522e:	4860      	ldr	r0, [pc, #384]	; (80053b0 <goRoundObsticleR+0x1c4>)
 8005230:	f001 ff90 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8005234:	2201      	movs	r2, #1
 8005236:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800523a:	485e      	ldr	r0, [pc, #376]	; (80053b4 <goRoundObsticleR+0x1c8>)
 800523c:	f001 ff8a 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8005240:	2200      	movs	r2, #0
 8005242:	2120      	movs	r1, #32
 8005244:	485c      	ldr	r0, [pc, #368]	; (80053b8 <goRoundObsticleR+0x1cc>)
 8005246:	f001 ff85 	bl	8007154 <HAL_GPIO_WritePin>
	moving = 1;
 800524a:	4b5c      	ldr	r3, [pc, #368]	; (80053bc <goRoundObsticleR+0x1d0>)
 800524c:	2201      	movs	r2, #1
 800524e:	701a      	strb	r2, [r3, #0]

	//right
	totalAngle = 0;
 8005250:	4954      	ldr	r1, [pc, #336]	; (80053a4 <goRoundObsticleR+0x1b8>)
 8005252:	f04f 0200 	mov.w	r2, #0
 8005256:	f04f 0300 	mov.w	r3, #0
 800525a:	e9c1 2300 	strd	r2, r3, [r1]
	htim1.Instance->CCR4 = 180;
 800525e:	4b53      	ldr	r3, [pc, #332]	; (80053ac <goRoundObsticleR+0x1c0>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	22b4      	movs	r2, #180	; 0xb4
 8005264:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8005266:	4b50      	ldr	r3, [pc, #320]	; (80053a8 <goRoundObsticleR+0x1bc>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800526e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 800);
 8005270:	4b4d      	ldr	r3, [pc, #308]	; (80053a8 <goRoundObsticleR+0x1bc>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005278:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 800527a:	e00a      	b.n	8005292 <goRoundObsticleR+0xa6>

		if (totalAngle <= -45) {
 800527c:	4b49      	ldr	r3, [pc, #292]	; (80053a4 <goRoundObsticleR+0x1b8>)
 800527e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005282:	f04f 0200 	mov.w	r2, #0
 8005286:	4b4e      	ldr	r3, [pc, #312]	; (80053c0 <goRoundObsticleR+0x1d4>)
 8005288:	f7fb fc32 	bl	8000af0 <__aeabi_dcmple>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d104      	bne.n	800529c <goRoundObsticleR+0xb0>
	while (moving) {
 8005292:	4b4a      	ldr	r3, [pc, #296]	; (80053bc <goRoundObsticleR+0x1d0>)
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1f0      	bne.n	800527c <goRoundObsticleR+0x90>
 800529a:	e000      	b.n	800529e <goRoundObsticleR+0xb2>
			break;
 800529c:	bf00      	nop
		}
	}
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 800529e:	4b42      	ldr	r3, [pc, #264]	; (80053a8 <goRoundObsticleR+0x1bc>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2200      	movs	r2, #0
 80052a4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 80052a6:	4b40      	ldr	r3, [pc, #256]	; (80053a8 <goRoundObsticleR+0x1bc>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2200      	movs	r2, #0
 80052ac:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 80052ae:	4b43      	ldr	r3, [pc, #268]	; (80053bc <goRoundObsticleR+0x1d0>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	701a      	strb	r2, [r3, #0]
	osDelay(20);
 80052b4:	2014      	movs	r0, #20
 80052b6:	f007 fdb6 	bl	800ce26 <osDelay>

	// left180
	totalAngle = 0;
 80052ba:	493a      	ldr	r1, [pc, #232]	; (80053a4 <goRoundObsticleR+0x1b8>)
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	f04f 0300 	mov.w	r3, #0
 80052c4:	e9c1 2300 	strd	r2, r3, [r1]
	moving = 1;
 80052c8:	4b3c      	ldr	r3, [pc, #240]	; (80053bc <goRoundObsticleR+0x1d0>)
 80052ca:	2201      	movs	r2, #1
 80052cc:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = 110;
 80052ce:	4b37      	ldr	r3, [pc, #220]	; (80053ac <goRoundObsticleR+0x1c0>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	226e      	movs	r2, #110	; 0x6e
 80052d4:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 700);
 80052d6:	4b34      	ldr	r3, [pc, #208]	; (80053a8 <goRoundObsticleR+0x1bc>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80052de:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 3000);
 80052e0:	4b31      	ldr	r3, [pc, #196]	; (80053a8 <goRoundObsticleR+0x1bc>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80052e8:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 80052ea:	e00a      	b.n	8005302 <goRoundObsticleR+0x116>

		if (totalAngle >= 90) {
 80052ec:	4b2d      	ldr	r3, [pc, #180]	; (80053a4 <goRoundObsticleR+0x1b8>)
 80052ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80052f2:	f04f 0200 	mov.w	r2, #0
 80052f6:	4b33      	ldr	r3, [pc, #204]	; (80053c4 <goRoundObsticleR+0x1d8>)
 80052f8:	f7fb fc04 	bl	8000b04 <__aeabi_dcmpge>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d104      	bne.n	800530c <goRoundObsticleR+0x120>
	while (moving) {
 8005302:	4b2e      	ldr	r3, [pc, #184]	; (80053bc <goRoundObsticleR+0x1d0>)
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f0      	bne.n	80052ec <goRoundObsticleR+0x100>
 800530a:	e000      	b.n	800530e <goRoundObsticleR+0x122>
			break;
 800530c:	bf00      	nop
		}
	}
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 800530e:	4b26      	ldr	r3, [pc, #152]	; (80053a8 <goRoundObsticleR+0x1bc>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2200      	movs	r2, #0
 8005314:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8005316:	4b24      	ldr	r3, [pc, #144]	; (80053a8 <goRoundObsticleR+0x1bc>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2200      	movs	r2, #0
 800531c:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 800531e:	4b27      	ldr	r3, [pc, #156]	; (80053bc <goRoundObsticleR+0x1d0>)
 8005320:	2200      	movs	r2, #0
 8005322:	701a      	strb	r2, [r3, #0]
	osDelay(20);
 8005324:	2014      	movs	r0, #20
 8005326:	f007 fd7e 	bl	800ce26 <osDelay>

	// right
	totalAngle = 0;
 800532a:	491e      	ldr	r1, [pc, #120]	; (80053a4 <goRoundObsticleR+0x1b8>)
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	f04f 0300 	mov.w	r3, #0
 8005334:	e9c1 2300 	strd	r2, r3, [r1]
	moving = 1;
 8005338:	4b20      	ldr	r3, [pc, #128]	; (80053bc <goRoundObsticleR+0x1d0>)
 800533a:	2201      	movs	r2, #1
 800533c:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = 220;
 800533e:	4b1b      	ldr	r3, [pc, #108]	; (80053ac <goRoundObsticleR+0x1c0>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	22dc      	movs	r2, #220	; 0xdc
 8005344:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 3000);
 8005346:	4b18      	ldr	r3, [pc, #96]	; (80053a8 <goRoundObsticleR+0x1bc>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800534e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 800);
 8005350:	4b15      	ldr	r3, [pc, #84]	; (80053a8 <goRoundObsticleR+0x1bc>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005358:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 800535a:	e00a      	b.n	8005372 <goRoundObsticleR+0x186>

		if (totalAngle <= -35) {
 800535c:	4b11      	ldr	r3, [pc, #68]	; (80053a4 <goRoundObsticleR+0x1b8>)
 800535e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005362:	f04f 0200 	mov.w	r2, #0
 8005366:	4b18      	ldr	r3, [pc, #96]	; (80053c8 <goRoundObsticleR+0x1dc>)
 8005368:	f7fb fbc2 	bl	8000af0 <__aeabi_dcmple>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d104      	bne.n	800537c <goRoundObsticleR+0x190>
	while (moving) {
 8005372:	4b12      	ldr	r3, [pc, #72]	; (80053bc <goRoundObsticleR+0x1d0>)
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1f0      	bne.n	800535c <goRoundObsticleR+0x170>
 800537a:	e000      	b.n	800537e <goRoundObsticleR+0x192>
			break;
 800537c:	bf00      	nop
		}
	}
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 800537e:	4b0a      	ldr	r3, [pc, #40]	; (80053a8 <goRoundObsticleR+0x1bc>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2200      	movs	r2, #0
 8005384:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8005386:	4b08      	ldr	r3, [pc, #32]	; (80053a8 <goRoundObsticleR+0x1bc>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2200      	movs	r2, #0
 800538c:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 800538e:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <goRoundObsticleR+0x1d0>)
 8005390:	2200      	movs	r2, #0
 8005392:	701a      	strb	r2, [r3, #0]
	osDelay(20);
 8005394:	2014      	movs	r0, #20
 8005396:	f007 fd46 	bl	800ce26 <osDelay>

}
 800539a:	bf00      	nop
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	20000418 	.word	0x20000418
 80053a8:	20000378 	.word	0x20000378
 80053ac:	20000258 	.word	0x20000258
 80053b0:	40020000 	.word	0x40020000
 80053b4:	40021000 	.word	0x40021000
 80053b8:	40020800 	.word	0x40020800
 80053bc:	20000414 	.word	0x20000414
 80053c0:	c0468000 	.word	0xc0468000
 80053c4:	40568000 	.word	0x40568000
 80053c8:	c0418000 	.word	0xc0418000

080053cc <right90>:

void right90() {
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
//	//comment for task 2
////	move(0, 0);
////	moveGyroPID(10, 0);

	// outdoor
	totalAngle = 0;
 80053d2:	4935      	ldr	r1, [pc, #212]	; (80054a8 <right90+0xdc>)
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t messageA[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80053e0:	2100      	movs	r1, #0
 80053e2:	4832      	ldr	r0, [pc, #200]	; (80054ac <right90+0xe0>)
 80053e4:	f004 ff6c 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80053e8:	2108      	movs	r1, #8
 80053ea:	4830      	ldr	r0, [pc, #192]	; (80054ac <right90+0xe0>)
 80053ec:	f004 ff68 	bl	800a2c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80053f0:	210c      	movs	r1, #12
 80053f2:	482f      	ldr	r0, [pc, #188]	; (80054b0 <right90+0xe4>)
 80053f4:	f004 ff64 	bl	800a2c0 <HAL_TIM_PWM_Start>

	htim1.Instance->CCR4 = STRAIGHT; //centre
 80053f8:	4b2d      	ldr	r3, [pc, #180]	; (80054b0 <right90+0xe4>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2297      	movs	r2, #151	; 0x97
 80053fe:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8005400:	2201      	movs	r2, #1
 8005402:	2108      	movs	r1, #8
 8005404:	482b      	ldr	r0, [pc, #172]	; (80054b4 <right90+0xe8>)
 8005406:	f001 fea5 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800540a:	2200      	movs	r2, #0
 800540c:	2104      	movs	r1, #4
 800540e:	4829      	ldr	r0, [pc, #164]	; (80054b4 <right90+0xe8>)
 8005410:	f001 fea0 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, CIN1_Pin, GPIO_PIN_SET);
 8005414:	2201      	movs	r2, #1
 8005416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800541a:	4827      	ldr	r0, [pc, #156]	; (80054b8 <right90+0xec>)
 800541c:	f001 fe9a 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, CIN2_Pin, GPIO_PIN_RESET);
 8005420:	2200      	movs	r2, #0
 8005422:	2120      	movs	r1, #32
 8005424:	4825      	ldr	r0, [pc, #148]	; (80054bc <right90+0xf0>)
 8005426:	f001 fe95 	bl	8007154 <HAL_GPIO_WritePin>
	moving = 1;
 800542a:	4b25      	ldr	r3, [pc, #148]	; (80054c0 <right90+0xf4>)
 800542c:	2201      	movs	r2, #1
 800542e:	701a      	strb	r2, [r3, #0]
	htim1.Instance->CCR4 = 250;
 8005430:	4b1f      	ldr	r3, [pc, #124]	; (80054b0 <right90+0xe4>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	22fa      	movs	r2, #250	; 0xfa
 8005436:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 2700);
 8005438:	4b1c      	ldr	r3, [pc, #112]	; (80054ac <right90+0xe0>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f640 228c 	movw	r2, #2700	; 0xa8c
 8005440:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 700);
 8005442:	4b1a      	ldr	r3, [pc, #104]	; (80054ac <right90+0xe0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800544a:	63da      	str	r2, [r3, #60]	; 0x3c
	while (moving) {
 800544c:	e017      	b.n	800547e <right90+0xb2>

		if (totalAngle < -84) {
 800544e:	4b16      	ldr	r3, [pc, #88]	; (80054a8 <right90+0xdc>)
 8005450:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	4b1a      	ldr	r3, [pc, #104]	; (80054c4 <right90+0xf8>)
 800545a:	f7fb fb3f 	bl	8000adc <__aeabi_dcmplt>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d111      	bne.n	8005488 <right90+0xbc>
			break;
		}
		sprintf(messageA, "Rangle %5d\0", (int) (totalAngle));
 8005464:	4b10      	ldr	r3, [pc, #64]	; (80054a8 <right90+0xdc>)
 8005466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546a:	4610      	mov	r0, r2
 800546c:	4619      	mov	r1, r3
 800546e:	f7fb fb73 	bl	8000b58 <__aeabi_d2iz>
 8005472:	4602      	mov	r2, r0
 8005474:	1d3b      	adds	r3, r7, #4
 8005476:	4914      	ldr	r1, [pc, #80]	; (80054c8 <right90+0xfc>)
 8005478:	4618      	mov	r0, r3
 800547a:	f00b f8b7 	bl	80105ec <siprintf>
	while (moving) {
 800547e:	4b10      	ldr	r3, [pc, #64]	; (80054c0 <right90+0xf4>)
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1e3      	bne.n	800544e <right90+0x82>
 8005486:	e000      	b.n	800548a <right90+0xbe>
			break;
 8005488:	bf00      	nop
	}
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 800548a:	4b08      	ldr	r3, [pc, #32]	; (80054ac <right90+0xe0>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2200      	movs	r2, #0
 8005490:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_3, 0);
 8005492:	4b06      	ldr	r3, [pc, #24]	; (80054ac <right90+0xe0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2200      	movs	r2, #0
 8005498:	63da      	str	r2, [r3, #60]	; 0x3c
	moving = 0;
 800549a:	4b09      	ldr	r3, [pc, #36]	; (80054c0 <right90+0xf4>)
 800549c:	2200      	movs	r2, #0
 800549e:	701a      	strb	r2, [r3, #0]
	// comment for task 2
//	move(0, 0);
//	moveGyroPID(8.75, 0);
}
 80054a0:	bf00      	nop
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	20000418 	.word	0x20000418
 80054ac:	20000378 	.word	0x20000378
 80054b0:	20000258 	.word	0x20000258
 80054b4:	40020000 	.word	0x40020000
 80054b8:	40021000 	.word	0x40021000
 80054bc:	40020800 	.word	0x40020800
 80054c0:	20000414 	.word	0x20000414
 80054c4:	c0550000 	.word	0xc0550000
 80054c8:	08014268 	.word	0x08014268

080054cc <readByte>:

	osDelay(100);
}

////////////////////GYRO FUNCTIONS//////////////////////////
void readByte(uint8_t addr, uint8_t *data) {
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	4603      	mov	r3, r0
 80054d4:	6039      	str	r1, [r7, #0]
 80054d6:	71fb      	strb	r3, [r7, #7]
	buff[0] = addr;
 80054d8:	4a0f      	ldr	r2, [pc, #60]	; (8005518 <readByte+0x4c>)
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr << 1, buff, 1, 10);
 80054de:	4b0f      	ldr	r3, [pc, #60]	; (800551c <readByte+0x50>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	b299      	uxth	r1, r3
 80054e8:	230a      	movs	r3, #10
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	2301      	movs	r3, #1
 80054ee:	4a0a      	ldr	r2, [pc, #40]	; (8005518 <readByte+0x4c>)
 80054f0:	480b      	ldr	r0, [pc, #44]	; (8005520 <readByte+0x54>)
 80054f2:	f001 ffa7 	bl	8007444 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddr << 1, data, 2, 20);
 80054f6:	4b09      	ldr	r3, [pc, #36]	; (800551c <readByte+0x50>)
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	b299      	uxth	r1, r3
 8005500:	2314      	movs	r3, #20
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	2302      	movs	r3, #2
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	4805      	ldr	r0, [pc, #20]	; (8005520 <readByte+0x54>)
 800550a:	f002 f899 	bl	8007640 <HAL_I2C_Master_Receive>

}
 800550e:	bf00      	nop
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	2000044c 	.word	0x2000044c
 800551c:	20000000 	.word	0x20000000
 8005520:	20000204 	.word	0x20000204

08005524 <writeByte>:

void writeByte(uint8_t addr, uint8_t data) {
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af02      	add	r7, sp, #8
 800552a:	4603      	mov	r3, r0
 800552c:	460a      	mov	r2, r1
 800552e:	71fb      	strb	r3, [r7, #7]
 8005530:	4613      	mov	r3, r2
 8005532:	71bb      	strb	r3, [r7, #6]
	buff[0] = addr;
 8005534:	4a0a      	ldr	r2, [pc, #40]	; (8005560 <writeByte+0x3c>)
 8005536:	79fb      	ldrb	r3, [r7, #7]
 8005538:	7013      	strb	r3, [r2, #0]
	buff[1] = data;
 800553a:	4a09      	ldr	r2, [pc, #36]	; (8005560 <writeByte+0x3c>)
 800553c:	79bb      	ldrb	r3, [r7, #6]
 800553e:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr << 1, buff, 2, 20);
 8005540:	4b08      	ldr	r3, [pc, #32]	; (8005564 <writeByte+0x40>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	b29b      	uxth	r3, r3
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	b299      	uxth	r1, r3
 800554a:	2314      	movs	r3, #20
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	2302      	movs	r3, #2
 8005550:	4a03      	ldr	r2, [pc, #12]	; (8005560 <writeByte+0x3c>)
 8005552:	4805      	ldr	r0, [pc, #20]	; (8005568 <writeByte+0x44>)
 8005554:	f001 ff76 	bl	8007444 <HAL_I2C_Master_Transmit>
}
 8005558:	bf00      	nop
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	2000044c 	.word	0x2000044c
 8005564:	20000000 	.word	0x20000000
 8005568:	20000204 	.word	0x20000204

0800556c <gyroStart>:

void gyroStart() {
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
	writeByte(0x07, 0x07);
 8005570:	2107      	movs	r1, #7
 8005572:	2007      	movs	r0, #7
 8005574:	f7ff ffd6 	bl	8005524 <writeByte>
	osDelayUntil(10);
 8005578:	200a      	movs	r0, #10
 800557a:	f007 fc6f 	bl	800ce5c <osDelayUntil>

	writeByte(0x07, 0x00);
 800557e:	2100      	movs	r1, #0
 8005580:	2007      	movs	r0, #7
 8005582:	f7ff ffcf 	bl	8005524 <writeByte>
	osDelayUntil(10);
 8005586:	200a      	movs	r0, #10
 8005588:	f007 fc68 	bl	800ce5c <osDelayUntil>
}
 800558c:	bf00      	nop
 800558e:	bd80      	pop	{r7, pc}

08005590 <gyroInit>:

void gyroInit() {
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0

	writeByte(0x06, 0x00);
 8005594:	2100      	movs	r1, #0
 8005596:	2006      	movs	r0, #6
 8005598:	f7ff ffc4 	bl	8005524 <writeByte>
	osDelayUntil(10);
 800559c:	200a      	movs	r0, #10
 800559e:	f007 fc5d 	bl	800ce5c <osDelayUntil>
	writeByte(0x03, 0x80);
 80055a2:	2180      	movs	r1, #128	; 0x80
 80055a4:	2003      	movs	r0, #3
 80055a6:	f7ff ffbd 	bl	8005524 <writeByte>
	osDelayUntil(10);
 80055aa:	200a      	movs	r0, #10
 80055ac:	f007 fc56 	bl	800ce5c <osDelayUntil>
	writeByte(0x07, 0x07);
 80055b0:	2107      	movs	r1, #7
 80055b2:	2007      	movs	r0, #7
 80055b4:	f7ff ffb6 	bl	8005524 <writeByte>
	osDelayUntil(10);
 80055b8:	200a      	movs	r0, #10
 80055ba:	f007 fc4f 	bl	800ce5c <osDelayUntil>
	writeByte(0x06, 0x01);
 80055be:	2101      	movs	r1, #1
 80055c0:	2006      	movs	r0, #6
 80055c2:	f7ff ffaf 	bl	8005524 <writeByte>
	osDelayUntil(10);
 80055c6:	200a      	movs	r0, #10
 80055c8:	f007 fc48 	bl	800ce5c <osDelayUntil>
	writeByte(0x7F, 0x20);
 80055cc:	2120      	movs	r1, #32
 80055ce:	207f      	movs	r0, #127	; 0x7f
 80055d0:	f7ff ffa8 	bl	8005524 <writeByte>
	osDelayUntil(10);
 80055d4:	200a      	movs	r0, #10
 80055d6:	f007 fc41 	bl	800ce5c <osDelayUntil>
	writeByte(0x01, 0x2F);
 80055da:	212f      	movs	r1, #47	; 0x2f
 80055dc:	2001      	movs	r0, #1
 80055de:	f7ff ffa1 	bl	8005524 <writeByte>
	osDelayUntil(10);
 80055e2:	200a      	movs	r0, #10
 80055e4:	f007 fc3a 	bl	800ce5c <osDelayUntil>
	writeByte(0x0, 0x00);
 80055e8:	2100      	movs	r1, #0
 80055ea:	2000      	movs	r0, #0
 80055ec:	f7ff ff9a 	bl	8005524 <writeByte>
	osDelayUntil(10);
 80055f0:	200a      	movs	r0, #10
 80055f2:	f007 fc33 	bl	800ce5c <osDelayUntil>
	writeByte(0x7F, 0x00);
 80055f6:	2100      	movs	r1, #0
 80055f8:	207f      	movs	r0, #127	; 0x7f
 80055fa:	f7ff ff93 	bl	8005524 <writeByte>
	osDelayUntil(10);
 80055fe:	200a      	movs	r0, #10
 8005600:	f007 fc2c 	bl	800ce5c <osDelayUntil>
	writeByte(0x07, 0x00);
 8005604:	2100      	movs	r1, #0
 8005606:	2007      	movs	r0, #7
 8005608:	f7ff ff8c 	bl	8005524 <writeByte>
	osDelayUntil(10);
 800560c:	200a      	movs	r0, #10
 800560e:	f007 fc25 	bl	800ce5c <osDelayUntil>

}
 8005612:	bf00      	nop
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8005618:	b580      	push	{r7, lr}
 800561a:	b090      	sub	sp, #64	; 0x40
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint8_t instrBuffer[40], angle;
	uint16_t i = 0;
 8005620:	2300      	movs	r3, #0
 8005622:	86fb      	strh	r3, [r7, #54]	; 0x36
	HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 1);
 8005624:	2201      	movs	r2, #1
 8005626:	49c0      	ldr	r1, [pc, #768]	; (8005928 <StartDefaultTask+0x310>)
 8005628:	48c0      	ldr	r0, [pc, #768]	; (800592c <StartDefaultTask+0x314>)
 800562a:	f006 fb52 	bl	800bcd2 <HAL_UART_Receive_IT>

	moving = 0;
 800562e:	4bc0      	ldr	r3, [pc, #768]	; (8005930 <StartDefaultTask+0x318>)
 8005630:	2200      	movs	r2, #0
 8005632:	701a      	strb	r2, [r3, #0]
	cmd = data = newCmdReceived = 0;
 8005634:	4bbf      	ldr	r3, [pc, #764]	; (8005934 <StartDefaultTask+0x31c>)
 8005636:	2200      	movs	r2, #0
 8005638:	701a      	strb	r2, [r3, #0]
 800563a:	4bbf      	ldr	r3, [pc, #764]	; (8005938 <StartDefaultTask+0x320>)
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	4bbd      	ldr	r3, [pc, #756]	; (8005938 <StartDefaultTask+0x320>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	b2da      	uxtb	r2, r3
 8005646:	4bbd      	ldr	r3, [pc, #756]	; (800593c <StartDefaultTask+0x324>)
 8005648:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	for (;;) {

		//Toggle LED just to see if the code is running
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800564a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800564e:	48bc      	ldr	r0, [pc, #752]	; (8005940 <StartDefaultTask+0x328>)
 8005650:	f001 fd99 	bl	8007186 <HAL_GPIO_TogglePin>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005654:	210c      	movs	r1, #12
 8005656:	48bb      	ldr	r0, [pc, #748]	; (8005944 <StartDefaultTask+0x32c>)
 8005658:	f004 fe32 	bl	800a2c0 <HAL_TIM_PWM_Start>

		htim1.Instance->CCR4 = STRAIGHT; //centre
 800565c:	4bb9      	ldr	r3, [pc, #740]	; (8005944 <StartDefaultTask+0x32c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2297      	movs	r2, #151	; 0x97
 8005662:	641a      	str	r2, [r3, #64]	; 0x40

		sprintf(instrBuffer, "Dst: %.2f\0", Distance);
 8005664:	4bb8      	ldr	r3, [pc, #736]	; (8005948 <StartDefaultTask+0x330>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4618      	mov	r0, r3
 800566a:	f7fa ff6d 	bl	8000548 <__aeabi_f2d>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	f107 000c 	add.w	r0, r7, #12
 8005676:	49b5      	ldr	r1, [pc, #724]	; (800594c <StartDefaultTask+0x334>)
 8005678:	f00a ffb8 	bl	80105ec <siprintf>
		OLED_ShowString(10, 30, instrBuffer);
 800567c:	f107 030c 	add.w	r3, r7, #12
 8005680:	461a      	mov	r2, r3
 8005682:	211e      	movs	r1, #30
 8005684:	200a      	movs	r0, #10
 8005686:	f000 fc3f 	bl	8005f08 <OLED_ShowString>
		sprintf(instrBuffer, "Trv: %.2f\0", distanceTraveled);
 800568a:	4bb1      	ldr	r3, [pc, #708]	; (8005950 <StartDefaultTask+0x338>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4618      	mov	r0, r3
 8005690:	f7fa ff5a 	bl	8000548 <__aeabi_f2d>
 8005694:	4602      	mov	r2, r0
 8005696:	460b      	mov	r3, r1
 8005698:	f107 000c 	add.w	r0, r7, #12
 800569c:	49ad      	ldr	r1, [pc, #692]	; (8005954 <StartDefaultTask+0x33c>)
 800569e:	f00a ffa5 	bl	80105ec <siprintf>
		OLED_ShowString(10, 40, instrBuffer);
 80056a2:	f107 030c 	add.w	r3, r7, #12
 80056a6:	461a      	mov	r2, r3
 80056a8:	2128      	movs	r1, #40	; 0x28
 80056aa:	200a      	movs	r0, #10
 80056ac:	f000 fc2c 	bl	8005f08 <OLED_ShowString>
		OLED_Refresh_Gram();
 80056b0:	f000 fab6 	bl	8005c20 <OLED_Refresh_Gram>
		// 1: forward
		// 2: left
		// 3: right
		// 4: reverse
		// 5: shortest path
		if (newCmdReceived == 1) {
 80056b4:	4b9f      	ldr	r3, [pc, #636]	; (8005934 <StartDefaultTask+0x31c>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	f040 8193 	bne.w	80059e4 <StartDefaultTask+0x3cc>
			newCmdReceived = 0;
 80056be:	4b9d      	ldr	r3, [pc, #628]	; (8005934 <StartDefaultTask+0x31c>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	701a      	strb	r2, [r3, #0]
//		sprintf(instrBuffer, "d: %d\0", data);
//		sendToRPI(instrBuffer);
//		OLED_ShowString(10, 30, instrBuffer);
//		OLED_Refresh_Gram();
//		cmd = 'w';
			switch (cmd) {
 80056c4:	4b9d      	ldr	r3, [pc, #628]	; (800593c <StartDefaultTask+0x324>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	3b4c      	subs	r3, #76	; 0x4c
 80056ca:	2b2c      	cmp	r3, #44	; 0x2c
 80056cc:	f200 8186 	bhi.w	80059dc <StartDefaultTask+0x3c4>
 80056d0:	a201      	add	r2, pc, #4	; (adr r2, 80056d8 <StartDefaultTask+0xc0>)
 80056d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d6:	bf00      	nop
 80056d8:	080058e1 	.word	0x080058e1
 80056dc:	080059dd 	.word	0x080059dd
 80056e0:	080059dd 	.word	0x080059dd
 80056e4:	080059dd 	.word	0x080059dd
 80056e8:	080059dd 	.word	0x080059dd
 80056ec:	080059dd 	.word	0x080059dd
 80056f0:	080058ed 	.word	0x080058ed
 80056f4:	080059dd 	.word	0x080059dd
 80056f8:	080059bf 	.word	0x080059bf
 80056fc:	080059dd 	.word	0x080059dd
 8005700:	080059dd 	.word	0x080059dd
 8005704:	080059dd 	.word	0x080059dd
 8005708:	0800596d 	.word	0x0800596d
 800570c:	080059cb 	.word	0x080059cb
 8005710:	080059dd 	.word	0x080059dd
 8005714:	080059dd 	.word	0x080059dd
 8005718:	080059dd 	.word	0x080059dd
 800571c:	080059dd 	.word	0x080059dd
 8005720:	080059dd 	.word	0x080059dd
 8005724:	080059dd 	.word	0x080059dd
 8005728:	080059dd 	.word	0x080059dd
 800572c:	080058b5 	.word	0x080058b5
 8005730:	080059dd 	.word	0x080059dd
 8005734:	080059dd 	.word	0x080059dd
 8005738:	080058d5 	.word	0x080058d5
 800573c:	080059dd 	.word	0x080059dd
 8005740:	080059dd 	.word	0x080059dd
 8005744:	080059dd 	.word	0x080059dd
 8005748:	080059dd 	.word	0x080059dd
 800574c:	080059dd 	.word	0x080059dd
 8005750:	080059dd 	.word	0x080059dd
 8005754:	080059dd 	.word	0x080059dd
 8005758:	08005815 	.word	0x08005815
 800575c:	080059dd 	.word	0x080059dd
 8005760:	080059dd 	.word	0x080059dd
 8005764:	080059dd 	.word	0x080059dd
 8005768:	080059dd 	.word	0x080059dd
 800576c:	080059dd 	.word	0x080059dd
 8005770:	08005821 	.word	0x08005821
 8005774:	0800582d 	.word	0x0800582d
 8005778:	080059b3 	.word	0x080059b3
 800577c:	0800599b 	.word	0x0800599b
 8005780:	080059dd 	.word	0x080059dd
 8005784:	0800578d 	.word	0x0800578d
 8005788:	080058f9 	.word	0x080058f9
			case 'w':
				num_loops = floor(data / 50);
 800578c:	4b6a      	ldr	r3, [pc, #424]	; (8005938 <StartDefaultTask+0x320>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a71      	ldr	r2, [pc, #452]	; (8005958 <StartDefaultTask+0x340>)
 8005792:	fba2 2303 	umull	r2, r3, r2, r3
 8005796:	091b      	lsrs	r3, r3, #4
 8005798:	4618      	mov	r0, r3
 800579a:	f7fa feb3 	bl	8000504 <__aeabi_ui2d>
 800579e:	4602      	mov	r2, r0
 80057a0:	460b      	mov	r3, r1
 80057a2:	4610      	mov	r0, r2
 80057a4:	4619      	mov	r1, r3
 80057a6:	f7fb f9ff 	bl	8000ba8 <__aeabi_d2uiz>
 80057aa:	4603      	mov	r3, r0
 80057ac:	b2da      	uxtb	r2, r3
 80057ae:	4b6b      	ldr	r3, [pc, #428]	; (800595c <StartDefaultTask+0x344>)
 80057b0:	701a      	strb	r2, [r3, #0]
				remainder_dist = data % 50;
 80057b2:	4b61      	ldr	r3, [pc, #388]	; (8005938 <StartDefaultTask+0x320>)
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	4b68      	ldr	r3, [pc, #416]	; (8005958 <StartDefaultTask+0x340>)
 80057b8:	fba3 1302 	umull	r1, r3, r3, r2
 80057bc:	091b      	lsrs	r3, r3, #4
 80057be:	2132      	movs	r1, #50	; 0x32
 80057c0:	fb01 f303 	mul.w	r3, r1, r3
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	4b65      	ldr	r3, [pc, #404]	; (8005960 <StartDefaultTask+0x348>)
 80057ca:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < num_loops; i++) {
 80057cc:	2300      	movs	r3, #0
 80057ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057d0:	e007      	b.n	80057e2 <StartDefaultTask+0x1ca>
					moveGyroPID(50, 1);
 80057d2:	2001      	movs	r0, #1
 80057d4:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8005964 <StartDefaultTask+0x34c>
 80057d8:	f7fe f8de 	bl	8003998 <moveGyroPID>
				for (int i = 0; i < num_loops; i++) {
 80057dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057de:	3301      	adds	r3, #1
 80057e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057e2:	4b5e      	ldr	r3, [pc, #376]	; (800595c <StartDefaultTask+0x344>)
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	461a      	mov	r2, r3
 80057e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ea:	4293      	cmp	r3, r2
 80057ec:	dbf1      	blt.n	80057d2 <StartDefaultTask+0x1ba>
				}
				if (remainder_dist != 0)
 80057ee:	4b5c      	ldr	r3, [pc, #368]	; (8005960 <StartDefaultTask+0x348>)
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <StartDefaultTask+0x1f4>
					moveGyroPID(remainder_dist, 1);
 80057f6:	4b5a      	ldr	r3, [pc, #360]	; (8005960 <StartDefaultTask+0x348>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	ee07 3a90 	vmov	s15, r3
 80057fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005802:	2001      	movs	r0, #1
 8005804:	eeb0 0a67 	vmov.f32	s0, s15
 8005808:	f7fe f8c6 	bl	8003998 <moveGyroPID>
//			moveGyroPIDOld(10,1);
//			gyro_move(data, 1);
//			sendToRPI("Forward done!f\n\0");
				sendToRPI("RPI:d");
 800580c:	4856      	ldr	r0, [pc, #344]	; (8005968 <StartDefaultTask+0x350>)
 800580e:	f7fe f8ab 	bl	8003968 <sendToRPI>
				break;
 8005812:	e0e4      	b.n	80059de <StartDefaultTask+0x3c6>
			case 'l':
//			turn(1, 1);
				left90();
 8005814:	f7ff fb76 	bl	8004f04 <left90>
//			sendToRPI("Left done!\0");
				sendToRPI("RPI:d");
 8005818:	4853      	ldr	r0, [pc, #332]	; (8005968 <StartDefaultTask+0x350>)
 800581a:	f7fe f8a5 	bl	8003968 <sendToRPI>
				break;
 800581e:	e0de      	b.n	80059de <StartDefaultTask+0x3c6>
			case 'r':
//			turn(0, 1);
				right90();
 8005820:	f7ff fdd4 	bl	80053cc <right90>
//			sendToRPI("Right done!\0");
				sendToRPI("RPI:d");
 8005824:	4850      	ldr	r0, [pc, #320]	; (8005968 <StartDefaultTask+0x350>)
 8005826:	f7fe f89f 	bl	8003968 <sendToRPI>
				break;
 800582a:	e0d8      	b.n	80059de <StartDefaultTask+0x3c6>
			case 's':
				num_loops = floor(data / 50);
 800582c:	4b42      	ldr	r3, [pc, #264]	; (8005938 <StartDefaultTask+0x320>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a49      	ldr	r2, [pc, #292]	; (8005958 <StartDefaultTask+0x340>)
 8005832:	fba2 2303 	umull	r2, r3, r2, r3
 8005836:	091b      	lsrs	r3, r3, #4
 8005838:	4618      	mov	r0, r3
 800583a:	f7fa fe63 	bl	8000504 <__aeabi_ui2d>
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	4610      	mov	r0, r2
 8005844:	4619      	mov	r1, r3
 8005846:	f7fb f9af 	bl	8000ba8 <__aeabi_d2uiz>
 800584a:	4603      	mov	r3, r0
 800584c:	b2da      	uxtb	r2, r3
 800584e:	4b43      	ldr	r3, [pc, #268]	; (800595c <StartDefaultTask+0x344>)
 8005850:	701a      	strb	r2, [r3, #0]
				remainder_dist = data % 50;
 8005852:	4b39      	ldr	r3, [pc, #228]	; (8005938 <StartDefaultTask+0x320>)
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	4b40      	ldr	r3, [pc, #256]	; (8005958 <StartDefaultTask+0x340>)
 8005858:	fba3 1302 	umull	r1, r3, r3, r2
 800585c:	091b      	lsrs	r3, r3, #4
 800585e:	2132      	movs	r1, #50	; 0x32
 8005860:	fb01 f303 	mul.w	r3, r1, r3
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	b2da      	uxtb	r2, r3
 8005868:	4b3d      	ldr	r3, [pc, #244]	; (8005960 <StartDefaultTask+0x348>)
 800586a:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < num_loops; i++) {
 800586c:	2300      	movs	r3, #0
 800586e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005870:	e007      	b.n	8005882 <StartDefaultTask+0x26a>
					moveGyroPID(50, 0);
 8005872:	2000      	movs	r0, #0
 8005874:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8005964 <StartDefaultTask+0x34c>
 8005878:	f7fe f88e 	bl	8003998 <moveGyroPID>
				for (int i = 0; i < num_loops; i++) {
 800587c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587e:	3301      	adds	r3, #1
 8005880:	63bb      	str	r3, [r7, #56]	; 0x38
 8005882:	4b36      	ldr	r3, [pc, #216]	; (800595c <StartDefaultTask+0x344>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	461a      	mov	r2, r3
 8005888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588a:	4293      	cmp	r3, r2
 800588c:	dbf1      	blt.n	8005872 <StartDefaultTask+0x25a>
				}
				if (remainder_dist != 0)
 800588e:	4b34      	ldr	r3, [pc, #208]	; (8005960 <StartDefaultTask+0x348>)
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <StartDefaultTask+0x294>
					moveGyroPID(remainder_dist, 0);
 8005896:	4b32      	ldr	r3, [pc, #200]	; (8005960 <StartDefaultTask+0x348>)
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	ee07 3a90 	vmov	s15, r3
 800589e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058a2:	2000      	movs	r0, #0
 80058a4:	eeb0 0a67 	vmov.f32	s0, s15
 80058a8:	f7fe f876 	bl	8003998 <moveGyroPID>
				sendToRPI("RPI:d");
 80058ac:	482e      	ldr	r0, [pc, #184]	; (8005968 <StartDefaultTask+0x350>)
 80058ae:	f7fe f85b 	bl	8003968 <sendToRPI>
				break;
 80058b2:	e094      	b.n	80059de <StartDefaultTask+0x3c6>
			case 'a':
				if (Distance < 8)
 80058b4:	4b24      	ldr	r3, [pc, #144]	; (8005948 <StartDefaultTask+0x330>)
 80058b6:	edd3 7a00 	vldr	s15, [r3]
 80058ba:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80058be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c6:	d501      	bpl.n	80058cc <StartDefaultTask+0x2b4>
					tooClose();
 80058c8:	f7fd f9f2 	bl	8002cb0 <tooClose>
				sendToRPI("RPI:d");
 80058cc:	4826      	ldr	r0, [pc, #152]	; (8005968 <StartDefaultTask+0x350>)
 80058ce:	f7fe f84b 	bl	8003968 <sendToRPI>
				break;
 80058d2:	e084      	b.n	80059de <StartDefaultTask+0x3c6>
			case 'd':
				parkingMoveUltra();
 80058d4:	f7fc ffb4 	bl	8002840 <parkingMoveUltra>
				sendToRPI("RPI:d");
 80058d8:	4823      	ldr	r0, [pc, #140]	; (8005968 <StartDefaultTask+0x350>)
 80058da:	f7fe f845 	bl	8003968 <sendToRPI>
				break;
 80058de:	e07e      	b.n	80059de <StartDefaultTask+0x3c6>
			case 'L':
				bLeft90();
 80058e0:	f7ff f9e2 	bl	8004ca8 <bLeft90>
//			sendToRPI("Reverse Left done!\0");
				sendToRPI("RPI:d");
 80058e4:	4820      	ldr	r0, [pc, #128]	; (8005968 <StartDefaultTask+0x350>)
 80058e6:	f7fe f83f 	bl	8003968 <sendToRPI>
				break;
 80058ea:	e078      	b.n	80059de <StartDefaultTask+0x3c6>
			case 'R':
				bRight90();
 80058ec:	f7ff fa74 	bl	8004dd8 <bRight90>
//			sendToRPI("Reverse Right done!\0");
				sendToRPI("RPI:d");
 80058f0:	481d      	ldr	r0, [pc, #116]	; (8005968 <StartDefaultTask+0x350>)
 80058f2:	f7fe f839 	bl	8003968 <sendToRPI>
				break;
 80058f6:	e072      	b.n	80059de <StartDefaultTask+0x3c6>
			case 'x':
				goRoundObsticleL();
 80058f8:	f7ff fb90 	bl	800501c <goRoundObsticleL>
				osDelay(100);
 80058fc:	2064      	movs	r0, #100	; 0x64
 80058fe:	f007 fa92 	bl	800ce26 <osDelay>
				if (Distance < 8)
 8005902:	4b11      	ldr	r3, [pc, #68]	; (8005948 <StartDefaultTask+0x330>)
 8005904:	edd3 7a00 	vldr	s15, [r3]
 8005908:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800590c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005914:	d502      	bpl.n	800591c <StartDefaultTask+0x304>
					tooClose();
 8005916:	f7fd f9cb 	bl	8002cb0 <tooClose>
 800591a:	e001      	b.n	8005920 <StartDefaultTask+0x308>
				else
					moveUltra();
 800591c:	f7fc fd14 	bl	8002348 <moveUltra>

				sendToRPI("RPI:d");
 8005920:	4811      	ldr	r0, [pc, #68]	; (8005968 <StartDefaultTask+0x350>)
 8005922:	f7fe f821 	bl	8003968 <sendToRPI>
				break;
 8005926:	e05a      	b.n	80059de <StartDefaultTask+0x3c6>
 8005928:	20000428 	.word	0x20000428
 800592c:	200003c0 	.word	0x200003c0
 8005930:	20000414 	.word	0x20000414
 8005934:	20000429 	.word	0x20000429
 8005938:	2000042c 	.word	0x2000042c
 800593c:	2000042a 	.word	0x2000042a
 8005940:	40021000 	.word	0x40021000
 8005944:	20000258 	.word	0x20000258
 8005948:	20000448 	.word	0x20000448
 800594c:	08014274 	.word	0x08014274
 8005950:	20000434 	.word	0x20000434
 8005954:	08014280 	.word	0x08014280
 8005958:	51eb851f 	.word	0x51eb851f
 800595c:	20000430 	.word	0x20000430
 8005960:	20000431 	.word	0x20000431
 8005964:	42480000 	.word	0x42480000
 8005968:	0801428c 	.word	0x0801428c
			case 'X':
				goRoundObsticleR();
 800596c:	f7ff fc3e 	bl	80051ec <goRoundObsticleR>
				osDelay(100);
 8005970:	2064      	movs	r0, #100	; 0x64
 8005972:	f007 fa58 	bl	800ce26 <osDelay>
				goRoundObsticleL();
 8005976:	f7ff fb51 	bl	800501c <goRoundObsticleL>
				if (Distance < 8)
 800597a:	4b1c      	ldr	r3, [pc, #112]	; (80059ec <StartDefaultTask+0x3d4>)
 800597c:	edd3 7a00 	vldr	s15, [r3]
 8005980:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8005984:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800598c:	d501      	bpl.n	8005992 <StartDefaultTask+0x37a>
					tooClose();
 800598e:	f7fd f98f 	bl	8002cb0 <tooClose>
				sendToRPI("RPI:d");
 8005992:	4817      	ldr	r0, [pc, #92]	; (80059f0 <StartDefaultTask+0x3d8>)
 8005994:	f7fd ffe8 	bl	8003968 <sendToRPI>
				break;
 8005998:	e021      	b.n	80059de <StartDefaultTask+0x3c6>
			case 'u':
				moveUltra();
 800599a:	f7fc fcd5 	bl	8002348 <moveUltra>
				sendToRPI("RPI:d");
 800599e:	4814      	ldr	r0, [pc, #80]	; (80059f0 <StartDefaultTask+0x3d8>)
 80059a0:	f7fd ffe2 	bl	8003968 <sendToRPI>
				osDelay(50);
 80059a4:	2032      	movs	r0, #50	; 0x32
 80059a6:	f007 fa3e 	bl	800ce26 <osDelay>
				sendToRPI("RPI:s"); // command for rpi to take photo
 80059aa:	4812      	ldr	r0, [pc, #72]	; (80059f4 <StartDefaultTask+0x3dc>)
 80059ac:	f7fd ffdc 	bl	8003968 <sendToRPI>
//			osDelay(1000);
				break;
 80059b0:	e015      	b.n	80059de <StartDefaultTask+0x3c6>
			case 't': // tln or trn
				secObstL();
 80059b2:	f7fc fc23 	bl	80021fc <secObstL>
				sendToRPI("RPI:d"); // command for rpi to take photo
 80059b6:	480e      	ldr	r0, [pc, #56]	; (80059f0 <StartDefaultTask+0x3d8>)
 80059b8:	f7fd ffd6 	bl	8003968 <sendToRPI>
//			osDelay(1000);
				break;
 80059bc:	e00f      	b.n	80059de <StartDefaultTask+0x3c6>
			case 'T': // when first obstacle goes right-> Tln or Trn
				secObstR();
 80059be:	f7fc fc57 	bl	8002270 <secObstR>
				sendToRPI("RPI:d");
 80059c2:	480b      	ldr	r0, [pc, #44]	; (80059f0 <StartDefaultTask+0x3d8>)
 80059c4:	f7fd ffd0 	bl	8003968 <sendToRPI>
				break;
 80059c8:	e009      	b.n	80059de <StartDefaultTask+0x3c6>
			case 'Y': // when first obstacle goes left-> Yln or Yrn
				task2A2L(data);
 80059ca:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <StartDefaultTask+0x3e0>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fc f82a 	bl	8001a28 <task2A2L>
				sendToRPI("RPI:d");
 80059d4:	4806      	ldr	r0, [pc, #24]	; (80059f0 <StartDefaultTask+0x3d8>)
 80059d6:	f7fd ffc7 	bl	8003968 <sendToRPI>
				break;
 80059da:	e000      	b.n	80059de <StartDefaultTask+0x3c6>
			default:
				break;
 80059dc:	bf00      	nop
			}

			data = 0;
 80059de:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <StartDefaultTask+0x3e0>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]
		}
		osDelay(50);
 80059e4:	2032      	movs	r0, #50	; 0x32
 80059e6:	f007 fa1e 	bl	800ce26 <osDelay>
	for (;;) {
 80059ea:	e62e      	b.n	800564a <StartDefaultTask+0x32>
 80059ec:	20000448 	.word	0x20000448
 80059f0:	0801428c 	.word	0x0801428c
 80059f4:	08014294 	.word	0x08014294
 80059f8:	2000042c 	.word	0x2000042c

080059fc <oled_show>:
 * @brief Function implementing the OLEDTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_oled_show */
void oled_show(void *argument) {
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN oled_show */
	/* Infinite loop */

	for (;;) {
 8005a04:	e7fe      	b.n	8005a04 <oled_show+0x8>
	...

08005a08 <gyro_read>:
 * @brief Function implementing the myTask09 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_gyro_read */
void gyro_read(void *argument) {
 8005a08:	b5b0      	push	{r4, r5, r7, lr}
 8005a0a:	b090      	sub	sp, #64	; 0x40
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN gyro_read */
	/* Infinite loop */
	uint8_t val[2] = { 0, 0 };
 8005a10:	2300      	movs	r3, #0
 8005a12:	863b      	strh	r3, [r7, #48]	; 0x30
	uint16_t offset_show[20];
	int16_t angularSpeed = 0;
 8005a14:	2300      	movs	r3, #0
 8005a16:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint32_t tick = 0;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
	int dir, offset;
	offset = 0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	637b      	str	r3, [r7, #52]	; 0x34

	gyroInit();
 8005a20:	f7ff fdb6 	bl	8005590 <gyroInit>
	gyroStart();
 8005a24:	f7ff fda2 	bl	800556c <gyroStart>
	tick = HAL_GetTick();
 8005a28:	f001 f816 	bl	8006a58 <HAL_GetTick>
 8005a2c:	63f8      	str	r0, [r7, #60]	; 0x3c
	osDelayUntil(10);
 8005a2e:	200a      	movs	r0, #10
 8005a30:	f007 fa14 	bl	800ce5c <osDelayUntil>
	actualAngle = 0;
 8005a34:	4966      	ldr	r1, [pc, #408]	; (8005bd0 <gyro_read+0x1c8>)
 8005a36:	f04f 0200 	mov.w	r2, #0
 8005a3a:	f04f 0300 	mov.w	r3, #0
 8005a3e:	e9c1 2300 	strd	r2, r3, [r1]

	for (;;) {

		if (HAL_GetTick() - tick >= 100L) {
 8005a42:	f001 f809 	bl	8006a58 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	2b63      	cmp	r3, #99	; 0x63
 8005a4e:	d9f8      	bls.n	8005a42 <gyro_read+0x3a>

			//read gyro value Z-axis
			readByte(0x37, val);
 8005a50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005a54:	4619      	mov	r1, r3
 8005a56:	2037      	movs	r0, #55	; 0x37
 8005a58:	f7ff fd38 	bl	80054cc <readByte>
			//Angle per >100 ticks
			angularSpeed = (val[0] << 8) | val[1];
 8005a5c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005a60:	021b      	lsls	r3, r3, #8
 8005a62:	b21a      	sxth	r2, r3
 8005a64:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005a68:	b21b      	sxth	r3, r3
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	877b      	strh	r3, [r7, #58]	; 0x3a

			if (moving || moveStraight) {
 8005a6e:	4b59      	ldr	r3, [pc, #356]	; (8005bd4 <gyro_read+0x1cc>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d104      	bne.n	8005a80 <gyro_read+0x78>
 8005a76:	4b58      	ldr	r3, [pc, #352]	; (8005bd8 <gyro_read+0x1d0>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 8095 	beq.w	8005baa <gyro_read+0x1a2>
//			  actualAngle += (double)(angularSpeed + 0.5)*((HAL_GetTick() - tick)/16400.0)*1.02;
				totalAngle += (double) (angularSpeed + 0.5)
 8005a80:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fa fd4d 	bl	8000524 <__aeabi_i2d>
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	4b53      	ldr	r3, [pc, #332]	; (8005bdc <gyro_read+0x1d4>)
 8005a90:	f7fa fbfc 	bl	800028c <__adddf3>
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	4614      	mov	r4, r2
 8005a9a:	461d      	mov	r5, r3
						* ((HAL_GetTick() - tick) / 16400.0) * 1.02;
 8005a9c:	f000 ffdc 	bl	8006a58 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fa fd2c 	bl	8000504 <__aeabi_ui2d>
 8005aac:	a344      	add	r3, pc, #272	; (adr r3, 8005bc0 <gyro_read+0x1b8>)
 8005aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab2:	f7fa fecb 	bl	800084c <__aeabi_ddiv>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4620      	mov	r0, r4
 8005abc:	4629      	mov	r1, r5
 8005abe:	f7fa fd9b 	bl	80005f8 <__aeabi_dmul>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	4619      	mov	r1, r3
 8005aca:	a33f      	add	r3, pc, #252	; (adr r3, 8005bc8 <gyro_read+0x1c0>)
 8005acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad0:	f7fa fd92 	bl	80005f8 <__aeabi_dmul>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	4610      	mov	r0, r2
 8005ada:	4619      	mov	r1, r3
				totalAngle += (double) (angularSpeed + 0.5)
 8005adc:	4b40      	ldr	r3, [pc, #256]	; (8005be0 <gyro_read+0x1d8>)
 8005ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae2:	f7fa fbd3 	bl	800028c <__adddf3>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	493d      	ldr	r1, [pc, #244]	; (8005be0 <gyro_read+0x1d8>)
 8005aec:	e9c1 2300 	strd	r2, r3, [r1]
				actualAngle += (double) (angularSpeed + 0.5)
 8005af0:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fa fd15 	bl	8000524 <__aeabi_i2d>
 8005afa:	f04f 0200 	mov.w	r2, #0
 8005afe:	4b37      	ldr	r3, [pc, #220]	; (8005bdc <gyro_read+0x1d4>)
 8005b00:	f7fa fbc4 	bl	800028c <__adddf3>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	4614      	mov	r4, r2
 8005b0a:	461d      	mov	r5, r3
						* ((HAL_GetTick() - tick) / 16400.0) * 1.02;
 8005b0c:	f000 ffa4 	bl	8006a58 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fa fcf4 	bl	8000504 <__aeabi_ui2d>
 8005b1c:	a328      	add	r3, pc, #160	; (adr r3, 8005bc0 <gyro_read+0x1b8>)
 8005b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b22:	f7fa fe93 	bl	800084c <__aeabi_ddiv>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	4629      	mov	r1, r5
 8005b2e:	f7fa fd63 	bl	80005f8 <__aeabi_dmul>
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	4610      	mov	r0, r2
 8005b38:	4619      	mov	r1, r3
 8005b3a:	a323      	add	r3, pc, #140	; (adr r3, 8005bc8 <gyro_read+0x1c0>)
 8005b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b40:	f7fa fd5a 	bl	80005f8 <__aeabi_dmul>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4610      	mov	r0, r2
 8005b4a:	4619      	mov	r1, r3
				actualAngle += (double) (angularSpeed + 0.5)
 8005b4c:	4b20      	ldr	r3, [pc, #128]	; (8005bd0 <gyro_read+0x1c8>)
 8005b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b52:	f7fa fb9b 	bl	800028c <__adddf3>
 8005b56:	4602      	mov	r2, r0
 8005b58:	460b      	mov	r3, r1
 8005b5a:	491d      	ldr	r1, [pc, #116]	; (8005bd0 <gyro_read+0x1c8>)
 8005b5c:	e9c1 2300 	strd	r2, r3, [r1]

//			  if(actualAngle >= 720)
//			  {
//				  actualAngle = 0;
//			  }
				if (totalAngle >= 720) {
 8005b60:	4b1f      	ldr	r3, [pc, #124]	; (8005be0 <gyro_read+0x1d8>)
 8005b62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b66:	f04f 0200 	mov.w	r2, #0
 8005b6a:	4b1e      	ldr	r3, [pc, #120]	; (8005be4 <gyro_read+0x1dc>)
 8005b6c:	f7fa ffca 	bl	8000b04 <__aeabi_dcmpge>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d006      	beq.n	8005b84 <gyro_read+0x17c>
					totalAngle = 0;
 8005b76:	491a      	ldr	r1, [pc, #104]	; (8005be0 <gyro_read+0x1d8>)
 8005b78:	f04f 0200 	mov.w	r2, #0
 8005b7c:	f04f 0300 	mov.w	r3, #0
 8005b80:	e9c1 2300 	strd	r2, r3, [r1]
				}
				if (actualAngle >= 720) {
 8005b84:	4b12      	ldr	r3, [pc, #72]	; (8005bd0 <gyro_read+0x1c8>)
 8005b86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b8a:	f04f 0200 	mov.w	r2, #0
 8005b8e:	4b15      	ldr	r3, [pc, #84]	; (8005be4 <gyro_read+0x1dc>)
 8005b90:	f7fa ffb8 	bl	8000b04 <__aeabi_dcmpge>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00e      	beq.n	8005bb8 <gyro_read+0x1b0>
					actualAngle = 0;
 8005b9a:	490d      	ldr	r1, [pc, #52]	; (8005bd0 <gyro_read+0x1c8>)
 8005b9c:	f04f 0200 	mov.w	r2, #0
 8005ba0:	f04f 0300 	mov.w	r3, #0
 8005ba4:	e9c1 2300 	strd	r2, r3, [r1]
				if (actualAngle >= 720) {
 8005ba8:	e006      	b.n	8005bb8 <gyro_read+0x1b0>
				}
			} else {
				totalAngle = 0;
 8005baa:	490d      	ldr	r1, [pc, #52]	; (8005be0 <gyro_read+0x1d8>)
 8005bac:	f04f 0200 	mov.w	r2, #0
 8005bb0:	f04f 0300 	mov.w	r3, #0
 8005bb4:	e9c1 2300 	strd	r2, r3, [r1]
//

//		  sprintf(offset_show, "angle:: %5d\0", (int)(actualAngle));
//		  OLED_ShowString(10,10, offset_show);
//		  OLED_Refresh_Gram();
			tick = HAL_GetTick();
 8005bb8:	f000 ff4e 	bl	8006a58 <HAL_GetTick>
 8005bbc:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (HAL_GetTick() - tick >= 100L) {
 8005bbe:	e740      	b.n	8005a42 <gyro_read+0x3a>
 8005bc0:	00000000 	.word	0x00000000
 8005bc4:	40d00400 	.word	0x40d00400
 8005bc8:	851eb852 	.word	0x851eb852
 8005bcc:	3ff051eb 	.word	0x3ff051eb
 8005bd0:	20000420 	.word	0x20000420
 8005bd4:	20000414 	.word	0x20000414
 8005bd8:	20000415 	.word	0x20000415
 8005bdc:	3fe00000 	.word	0x3fe00000
 8005be0:	20000418 	.word	0x20000418
 8005be4:	40868000 	.word	0x40868000

08005be8 <servoMotor>:
 * @brief Function implementing the ServoMotor thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_servoMotor */
void servoMotor(void *argument) {
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b088      	sub	sp, #32
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN servoMotor */
	uint8_t message[20];
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); //will call callback function when interrupt is detected
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	4806      	ldr	r0, [pc, #24]	; (8005c0c <servoMotor+0x24>)
 8005bf4:	f004 fc7c 	bl	800a4f0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005bf8:	210c      	movs	r1, #12
 8005bfa:	4805      	ldr	r0, [pc, #20]	; (8005c10 <servoMotor+0x28>)
 8005bfc:	f004 fb60 	bl	800a2c0 <HAL_TIM_PWM_Start>
//		osDelay(2000);
//		htim1.Instance -> CCR4 = LEFT; //left
//		osDelay(2000);
//		htim1.Instance -> CCR4 = STRAIGHT; //centre
//		osDelay(2000);
		HCSR04_Read();
 8005c00:	f7fb fe50 	bl	80018a4 <HCSR04_Read>
//		sprintf(message, "distance: %5.2f\0", Distance);
//		OLED_ShowString(10, 50, message);
//		OLED_Refresh_Gram(); //Refresh Ram
		HAL_Delay(200);
 8005c04:	20c8      	movs	r0, #200	; 0xc8
 8005c06:	f000 ff33 	bl	8006a70 <HAL_Delay>
		HCSR04_Read();
 8005c0a:	e7f9      	b.n	8005c00 <servoMotor+0x18>
 8005c0c:	200002e8 	.word	0x200002e8
 8005c10:	20000258 	.word	0x20000258

08005c14 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005c18:	b672      	cpsid	i
}
 8005c1a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005c1c:	e7fe      	b.n	8005c1c <Error_Handler+0x8>
	...

08005c20 <OLED_Refresh_Gram>:
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	2300      	movs	r3, #0
 8005c28:	71fb      	strb	r3, [r7, #7]
 8005c2a:	e026      	b.n	8005c7a <OLED_Refresh_Gram+0x5a>
 8005c2c:	79fb      	ldrb	r3, [r7, #7]
 8005c2e:	3b50      	subs	r3, #80	; 0x50
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2100      	movs	r1, #0
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 f82b 	bl	8005c90 <OLED_WR_Byte>
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	2000      	movs	r0, #0
 8005c3e:	f000 f827 	bl	8005c90 <OLED_WR_Byte>
 8005c42:	2100      	movs	r1, #0
 8005c44:	2010      	movs	r0, #16
 8005c46:	f000 f823 	bl	8005c90 <OLED_WR_Byte>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	71bb      	strb	r3, [r7, #6]
 8005c4e:	e00d      	b.n	8005c6c <OLED_Refresh_Gram+0x4c>
 8005c50:	79ba      	ldrb	r2, [r7, #6]
 8005c52:	79fb      	ldrb	r3, [r7, #7]
 8005c54:	490d      	ldr	r1, [pc, #52]	; (8005c8c <OLED_Refresh_Gram+0x6c>)
 8005c56:	00d2      	lsls	r2, r2, #3
 8005c58:	440a      	add	r2, r1
 8005c5a:	4413      	add	r3, r2
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2101      	movs	r1, #1
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 f815 	bl	8005c90 <OLED_WR_Byte>
 8005c66:	79bb      	ldrb	r3, [r7, #6]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	71bb      	strb	r3, [r7, #6]
 8005c6c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	daed      	bge.n	8005c50 <OLED_Refresh_Gram+0x30>
 8005c74:	79fb      	ldrb	r3, [r7, #7]
 8005c76:	3301      	adds	r3, #1
 8005c78:	71fb      	strb	r3, [r7, #7]
 8005c7a:	79fb      	ldrb	r3, [r7, #7]
 8005c7c:	2b07      	cmp	r3, #7
 8005c7e:	d9d5      	bls.n	8005c2c <OLED_Refresh_Gram+0xc>
 8005c80:	bf00      	nop
 8005c82:	bf00      	nop
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20000464 	.word	0x20000464

08005c90 <OLED_WR_Byte>:
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	4603      	mov	r3, r0
 8005c98:	460a      	mov	r2, r1
 8005c9a:	71fb      	strb	r3, [r7, #7]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	71bb      	strb	r3, [r7, #6]
 8005ca0:	79bb      	ldrb	r3, [r7, #6]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d006      	beq.n	8005cb4 <OLED_WR_Byte+0x24>
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005cac:	481c      	ldr	r0, [pc, #112]	; (8005d20 <OLED_WR_Byte+0x90>)
 8005cae:	f001 fa51 	bl	8007154 <HAL_GPIO_WritePin>
 8005cb2:	e005      	b.n	8005cc0 <OLED_WR_Byte+0x30>
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005cba:	4819      	ldr	r0, [pc, #100]	; (8005d20 <OLED_WR_Byte+0x90>)
 8005cbc:	f001 fa4a 	bl	8007154 <HAL_GPIO_WritePin>
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	73fb      	strb	r3, [r7, #15]
 8005cc4:	e01e      	b.n	8005d04 <OLED_WR_Byte+0x74>
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2120      	movs	r1, #32
 8005cca:	4815      	ldr	r0, [pc, #84]	; (8005d20 <OLED_WR_Byte+0x90>)
 8005ccc:	f001 fa42 	bl	8007154 <HAL_GPIO_WritePin>
 8005cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	da05      	bge.n	8005ce4 <OLED_WR_Byte+0x54>
 8005cd8:	2201      	movs	r2, #1
 8005cda:	2140      	movs	r1, #64	; 0x40
 8005cdc:	4810      	ldr	r0, [pc, #64]	; (8005d20 <OLED_WR_Byte+0x90>)
 8005cde:	f001 fa39 	bl	8007154 <HAL_GPIO_WritePin>
 8005ce2:	e004      	b.n	8005cee <OLED_WR_Byte+0x5e>
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	2140      	movs	r1, #64	; 0x40
 8005ce8:	480d      	ldr	r0, [pc, #52]	; (8005d20 <OLED_WR_Byte+0x90>)
 8005cea:	f001 fa33 	bl	8007154 <HAL_GPIO_WritePin>
 8005cee:	2201      	movs	r2, #1
 8005cf0:	2120      	movs	r1, #32
 8005cf2:	480b      	ldr	r0, [pc, #44]	; (8005d20 <OLED_WR_Byte+0x90>)
 8005cf4:	f001 fa2e 	bl	8007154 <HAL_GPIO_WritePin>
 8005cf8:	79fb      	ldrb	r3, [r7, #7]
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	71fb      	strb	r3, [r7, #7]
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
 8005d00:	3301      	adds	r3, #1
 8005d02:	73fb      	strb	r3, [r7, #15]
 8005d04:	7bfb      	ldrb	r3, [r7, #15]
 8005d06:	2b07      	cmp	r3, #7
 8005d08:	d9dd      	bls.n	8005cc6 <OLED_WR_Byte+0x36>
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d10:	4803      	ldr	r0, [pc, #12]	; (8005d20 <OLED_WR_Byte+0x90>)
 8005d12:	f001 fa1f 	bl	8007154 <HAL_GPIO_WritePin>
 8005d16:	bf00      	nop
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	40021000 	.word	0x40021000

08005d24 <OLED_Clear>:
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	71fb      	strb	r3, [r7, #7]
 8005d2e:	e014      	b.n	8005d5a <OLED_Clear+0x36>
 8005d30:	2300      	movs	r3, #0
 8005d32:	71bb      	strb	r3, [r7, #6]
 8005d34:	e00a      	b.n	8005d4c <OLED_Clear+0x28>
 8005d36:	79ba      	ldrb	r2, [r7, #6]
 8005d38:	79fb      	ldrb	r3, [r7, #7]
 8005d3a:	490c      	ldr	r1, [pc, #48]	; (8005d6c <OLED_Clear+0x48>)
 8005d3c:	00d2      	lsls	r2, r2, #3
 8005d3e:	440a      	add	r2, r1
 8005d40:	4413      	add	r3, r2
 8005d42:	2200      	movs	r2, #0
 8005d44:	701a      	strb	r2, [r3, #0]
 8005d46:	79bb      	ldrb	r3, [r7, #6]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	71bb      	strb	r3, [r7, #6]
 8005d4c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	daf0      	bge.n	8005d36 <OLED_Clear+0x12>
 8005d54:	79fb      	ldrb	r3, [r7, #7]
 8005d56:	3301      	adds	r3, #1
 8005d58:	71fb      	strb	r3, [r7, #7]
 8005d5a:	79fb      	ldrb	r3, [r7, #7]
 8005d5c:	2b07      	cmp	r3, #7
 8005d5e:	d9e7      	bls.n	8005d30 <OLED_Clear+0xc>
 8005d60:	f7ff ff5e 	bl	8005c20 <OLED_Refresh_Gram>
 8005d64:	bf00      	nop
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	20000464 	.word	0x20000464

08005d70 <OLED_DrawPoint>:
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	4603      	mov	r3, r0
 8005d78:	71fb      	strb	r3, [r7, #7]
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	71bb      	strb	r3, [r7, #6]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	717b      	strb	r3, [r7, #5]
 8005d82:	2300      	movs	r3, #0
 8005d84:	73fb      	strb	r3, [r7, #15]
 8005d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	db41      	blt.n	8005e12 <OLED_DrawPoint+0xa2>
 8005d8e:	79bb      	ldrb	r3, [r7, #6]
 8005d90:	2b3f      	cmp	r3, #63	; 0x3f
 8005d92:	d83e      	bhi.n	8005e12 <OLED_DrawPoint+0xa2>
 8005d94:	79bb      	ldrb	r3, [r7, #6]
 8005d96:	08db      	lsrs	r3, r3, #3
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	f1c3 0307 	rsb	r3, r3, #7
 8005d9e:	73bb      	strb	r3, [r7, #14]
 8005da0:	79bb      	ldrb	r3, [r7, #6]
 8005da2:	f003 0307 	and.w	r3, r3, #7
 8005da6:	737b      	strb	r3, [r7, #13]
 8005da8:	7b7b      	ldrb	r3, [r7, #13]
 8005daa:	f1c3 0307 	rsb	r3, r3, #7
 8005dae:	2201      	movs	r2, #1
 8005db0:	fa02 f303 	lsl.w	r3, r2, r3
 8005db4:	73fb      	strb	r3, [r7, #15]
 8005db6:	797b      	ldrb	r3, [r7, #5]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d012      	beq.n	8005de2 <OLED_DrawPoint+0x72>
 8005dbc:	79fa      	ldrb	r2, [r7, #7]
 8005dbe:	7bbb      	ldrb	r3, [r7, #14]
 8005dc0:	4917      	ldr	r1, [pc, #92]	; (8005e20 <OLED_DrawPoint+0xb0>)
 8005dc2:	00d2      	lsls	r2, r2, #3
 8005dc4:	440a      	add	r2, r1
 8005dc6:	4413      	add	r3, r2
 8005dc8:	7818      	ldrb	r0, [r3, #0]
 8005dca:	79fa      	ldrb	r2, [r7, #7]
 8005dcc:	7bbb      	ldrb	r3, [r7, #14]
 8005dce:	7bf9      	ldrb	r1, [r7, #15]
 8005dd0:	4301      	orrs	r1, r0
 8005dd2:	b2c8      	uxtb	r0, r1
 8005dd4:	4912      	ldr	r1, [pc, #72]	; (8005e20 <OLED_DrawPoint+0xb0>)
 8005dd6:	00d2      	lsls	r2, r2, #3
 8005dd8:	440a      	add	r2, r1
 8005dda:	4413      	add	r3, r2
 8005ddc:	4602      	mov	r2, r0
 8005dde:	701a      	strb	r2, [r3, #0]
 8005de0:	e018      	b.n	8005e14 <OLED_DrawPoint+0xa4>
 8005de2:	79fa      	ldrb	r2, [r7, #7]
 8005de4:	7bbb      	ldrb	r3, [r7, #14]
 8005de6:	490e      	ldr	r1, [pc, #56]	; (8005e20 <OLED_DrawPoint+0xb0>)
 8005de8:	00d2      	lsls	r2, r2, #3
 8005dea:	440a      	add	r2, r1
 8005dec:	4413      	add	r3, r2
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	b25a      	sxtb	r2, r3
 8005df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005df6:	43db      	mvns	r3, r3
 8005df8:	b25b      	sxtb	r3, r3
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	b259      	sxtb	r1, r3
 8005dfe:	79fa      	ldrb	r2, [r7, #7]
 8005e00:	7bbb      	ldrb	r3, [r7, #14]
 8005e02:	b2c8      	uxtb	r0, r1
 8005e04:	4906      	ldr	r1, [pc, #24]	; (8005e20 <OLED_DrawPoint+0xb0>)
 8005e06:	00d2      	lsls	r2, r2, #3
 8005e08:	440a      	add	r2, r1
 8005e0a:	4413      	add	r3, r2
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	701a      	strb	r2, [r3, #0]
 8005e10:	e000      	b.n	8005e14 <OLED_DrawPoint+0xa4>
 8005e12:	bf00      	nop
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	20000464 	.word	0x20000464

08005e24 <OLED_ShowChar>:
 8005e24:	b590      	push	{r4, r7, lr}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	4608      	mov	r0, r1
 8005e2e:	4611      	mov	r1, r2
 8005e30:	461a      	mov	r2, r3
 8005e32:	4623      	mov	r3, r4
 8005e34:	71fb      	strb	r3, [r7, #7]
 8005e36:	4603      	mov	r3, r0
 8005e38:	71bb      	strb	r3, [r7, #6]
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	717b      	strb	r3, [r7, #5]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	713b      	strb	r3, [r7, #4]
 8005e42:	79bb      	ldrb	r3, [r7, #6]
 8005e44:	733b      	strb	r3, [r7, #12]
 8005e46:	797b      	ldrb	r3, [r7, #5]
 8005e48:	3b20      	subs	r3, #32
 8005e4a:	717b      	strb	r3, [r7, #5]
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	73bb      	strb	r3, [r7, #14]
 8005e50:	e04d      	b.n	8005eee <OLED_ShowChar+0xca>
 8005e52:	793b      	ldrb	r3, [r7, #4]
 8005e54:	2b0c      	cmp	r3, #12
 8005e56:	d10b      	bne.n	8005e70 <OLED_ShowChar+0x4c>
 8005e58:	797a      	ldrb	r2, [r7, #5]
 8005e5a:	7bb9      	ldrb	r1, [r7, #14]
 8005e5c:	4828      	ldr	r0, [pc, #160]	; (8005f00 <OLED_ShowChar+0xdc>)
 8005e5e:	4613      	mov	r3, r2
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	4413      	add	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4403      	add	r3, r0
 8005e68:	440b      	add	r3, r1
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	73fb      	strb	r3, [r7, #15]
 8005e6e:	e007      	b.n	8005e80 <OLED_ShowChar+0x5c>
 8005e70:	797a      	ldrb	r2, [r7, #5]
 8005e72:	7bbb      	ldrb	r3, [r7, #14]
 8005e74:	4923      	ldr	r1, [pc, #140]	; (8005f04 <OLED_ShowChar+0xe0>)
 8005e76:	0112      	lsls	r2, r2, #4
 8005e78:	440a      	add	r2, r1
 8005e7a:	4413      	add	r3, r2
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	73fb      	strb	r3, [r7, #15]
 8005e80:	2300      	movs	r3, #0
 8005e82:	737b      	strb	r3, [r7, #13]
 8005e84:	e02d      	b.n	8005ee2 <OLED_ShowChar+0xbe>
 8005e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	da07      	bge.n	8005e9e <OLED_ShowChar+0x7a>
 8005e8e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005e92:	79b9      	ldrb	r1, [r7, #6]
 8005e94:	79fb      	ldrb	r3, [r7, #7]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7ff ff6a 	bl	8005d70 <OLED_DrawPoint>
 8005e9c:	e00c      	b.n	8005eb8 <OLED_ShowChar+0x94>
 8005e9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	bf0c      	ite	eq
 8005ea6:	2301      	moveq	r3, #1
 8005ea8:	2300      	movne	r3, #0
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	461a      	mov	r2, r3
 8005eae:	79b9      	ldrb	r1, [r7, #6]
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7ff ff5c 	bl	8005d70 <OLED_DrawPoint>
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	73fb      	strb	r3, [r7, #15]
 8005ebe:	79bb      	ldrb	r3, [r7, #6]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	71bb      	strb	r3, [r7, #6]
 8005ec4:	79ba      	ldrb	r2, [r7, #6]
 8005ec6:	7b3b      	ldrb	r3, [r7, #12]
 8005ec8:	1ad2      	subs	r2, r2, r3
 8005eca:	793b      	ldrb	r3, [r7, #4]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d105      	bne.n	8005edc <OLED_ShowChar+0xb8>
 8005ed0:	7b3b      	ldrb	r3, [r7, #12]
 8005ed2:	71bb      	strb	r3, [r7, #6]
 8005ed4:	79fb      	ldrb	r3, [r7, #7]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	71fb      	strb	r3, [r7, #7]
 8005eda:	e005      	b.n	8005ee8 <OLED_ShowChar+0xc4>
 8005edc:	7b7b      	ldrb	r3, [r7, #13]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	737b      	strb	r3, [r7, #13]
 8005ee2:	7b7b      	ldrb	r3, [r7, #13]
 8005ee4:	2b07      	cmp	r3, #7
 8005ee6:	d9ce      	bls.n	8005e86 <OLED_ShowChar+0x62>
 8005ee8:	7bbb      	ldrb	r3, [r7, #14]
 8005eea:	3301      	adds	r3, #1
 8005eec:	73bb      	strb	r3, [r7, #14]
 8005eee:	7bba      	ldrb	r2, [r7, #14]
 8005ef0:	793b      	ldrb	r3, [r7, #4]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d3ad      	bcc.n	8005e52 <OLED_ShowChar+0x2e>
 8005ef6:	bf00      	nop
 8005ef8:	bf00      	nop
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd90      	pop	{r4, r7, pc}
 8005f00:	08014344 	.word	0x08014344
 8005f04:	080147b8 	.word	0x080147b8

08005f08 <OLED_ShowString>:
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af02      	add	r7, sp, #8
 8005f0e:	4603      	mov	r3, r0
 8005f10:	603a      	str	r2, [r7, #0]
 8005f12:	71fb      	strb	r3, [r7, #7]
 8005f14:	460b      	mov	r3, r1
 8005f16:	71bb      	strb	r3, [r7, #6]
 8005f18:	e01f      	b.n	8005f5a <OLED_ShowString+0x52>
 8005f1a:	79fb      	ldrb	r3, [r7, #7]
 8005f1c:	2b7a      	cmp	r3, #122	; 0x7a
 8005f1e:	d904      	bls.n	8005f2a <OLED_ShowString+0x22>
 8005f20:	2300      	movs	r3, #0
 8005f22:	71fb      	strb	r3, [r7, #7]
 8005f24:	79bb      	ldrb	r3, [r7, #6]
 8005f26:	3310      	adds	r3, #16
 8005f28:	71bb      	strb	r3, [r7, #6]
 8005f2a:	79bb      	ldrb	r3, [r7, #6]
 8005f2c:	2b3a      	cmp	r3, #58	; 0x3a
 8005f2e:	d905      	bls.n	8005f3c <OLED_ShowString+0x34>
 8005f30:	2300      	movs	r3, #0
 8005f32:	71fb      	strb	r3, [r7, #7]
 8005f34:	79fb      	ldrb	r3, [r7, #7]
 8005f36:	71bb      	strb	r3, [r7, #6]
 8005f38:	f7ff fef4 	bl	8005d24 <OLED_Clear>
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781a      	ldrb	r2, [r3, #0]
 8005f40:	79b9      	ldrb	r1, [r7, #6]
 8005f42:	79f8      	ldrb	r0, [r7, #7]
 8005f44:	2301      	movs	r3, #1
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	230c      	movs	r3, #12
 8005f4a:	f7ff ff6b 	bl	8005e24 <OLED_ShowChar>
 8005f4e:	79fb      	ldrb	r3, [r7, #7]
 8005f50:	3308      	adds	r3, #8
 8005f52:	71fb      	strb	r3, [r7, #7]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	3301      	adds	r3, #1
 8005f58:	603b      	str	r3, [r7, #0]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1db      	bne.n	8005f1a <OLED_ShowString+0x12>
 8005f62:	bf00      	nop
 8005f64:	bf00      	nop
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <OLED_Init>:
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	f003 fc7e 	bl	8009870 <HAL_PWR_EnableBkUpAccess>
 8005f74:	4b41      	ldr	r3, [pc, #260]	; (800607c <OLED_Init+0x110>)
 8005f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f78:	4a40      	ldr	r2, [pc, #256]	; (800607c <OLED_Init+0x110>)
 8005f7a:	f023 0301 	bic.w	r3, r3, #1
 8005f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f80:	4b3e      	ldr	r3, [pc, #248]	; (800607c <OLED_Init+0x110>)
 8005f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f84:	4a3d      	ldr	r2, [pc, #244]	; (800607c <OLED_Init+0x110>)
 8005f86:	f023 0304 	bic.w	r3, r3, #4
 8005f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f8c:	f003 fc84 	bl	8009898 <HAL_PWR_DisableBkUpAccess>
 8005f90:	2200      	movs	r2, #0
 8005f92:	2180      	movs	r1, #128	; 0x80
 8005f94:	483a      	ldr	r0, [pc, #232]	; (8006080 <OLED_Init+0x114>)
 8005f96:	f001 f8dd 	bl	8007154 <HAL_GPIO_WritePin>
 8005f9a:	2064      	movs	r0, #100	; 0x64
 8005f9c:	f000 fd68 	bl	8006a70 <HAL_Delay>
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	2180      	movs	r1, #128	; 0x80
 8005fa4:	4836      	ldr	r0, [pc, #216]	; (8006080 <OLED_Init+0x114>)
 8005fa6:	f001 f8d5 	bl	8007154 <HAL_GPIO_WritePin>
 8005faa:	2100      	movs	r1, #0
 8005fac:	20ae      	movs	r0, #174	; 0xae
 8005fae:	f7ff fe6f 	bl	8005c90 <OLED_WR_Byte>
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	20d5      	movs	r0, #213	; 0xd5
 8005fb6:	f7ff fe6b 	bl	8005c90 <OLED_WR_Byte>
 8005fba:	2100      	movs	r1, #0
 8005fbc:	2050      	movs	r0, #80	; 0x50
 8005fbe:	f7ff fe67 	bl	8005c90 <OLED_WR_Byte>
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	20a8      	movs	r0, #168	; 0xa8
 8005fc6:	f7ff fe63 	bl	8005c90 <OLED_WR_Byte>
 8005fca:	2100      	movs	r1, #0
 8005fcc:	203f      	movs	r0, #63	; 0x3f
 8005fce:	f7ff fe5f 	bl	8005c90 <OLED_WR_Byte>
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	20d3      	movs	r0, #211	; 0xd3
 8005fd6:	f7ff fe5b 	bl	8005c90 <OLED_WR_Byte>
 8005fda:	2100      	movs	r1, #0
 8005fdc:	2000      	movs	r0, #0
 8005fde:	f7ff fe57 	bl	8005c90 <OLED_WR_Byte>
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	2040      	movs	r0, #64	; 0x40
 8005fe6:	f7ff fe53 	bl	8005c90 <OLED_WR_Byte>
 8005fea:	2100      	movs	r1, #0
 8005fec:	208d      	movs	r0, #141	; 0x8d
 8005fee:	f7ff fe4f 	bl	8005c90 <OLED_WR_Byte>
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	2014      	movs	r0, #20
 8005ff6:	f7ff fe4b 	bl	8005c90 <OLED_WR_Byte>
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	2020      	movs	r0, #32
 8005ffe:	f7ff fe47 	bl	8005c90 <OLED_WR_Byte>
 8006002:	2100      	movs	r1, #0
 8006004:	2002      	movs	r0, #2
 8006006:	f7ff fe43 	bl	8005c90 <OLED_WR_Byte>
 800600a:	2100      	movs	r1, #0
 800600c:	20a1      	movs	r0, #161	; 0xa1
 800600e:	f7ff fe3f 	bl	8005c90 <OLED_WR_Byte>
 8006012:	2100      	movs	r1, #0
 8006014:	20c0      	movs	r0, #192	; 0xc0
 8006016:	f7ff fe3b 	bl	8005c90 <OLED_WR_Byte>
 800601a:	2100      	movs	r1, #0
 800601c:	20da      	movs	r0, #218	; 0xda
 800601e:	f7ff fe37 	bl	8005c90 <OLED_WR_Byte>
 8006022:	2100      	movs	r1, #0
 8006024:	2012      	movs	r0, #18
 8006026:	f7ff fe33 	bl	8005c90 <OLED_WR_Byte>
 800602a:	2100      	movs	r1, #0
 800602c:	2081      	movs	r0, #129	; 0x81
 800602e:	f7ff fe2f 	bl	8005c90 <OLED_WR_Byte>
 8006032:	2100      	movs	r1, #0
 8006034:	20ef      	movs	r0, #239	; 0xef
 8006036:	f7ff fe2b 	bl	8005c90 <OLED_WR_Byte>
 800603a:	2100      	movs	r1, #0
 800603c:	20d9      	movs	r0, #217	; 0xd9
 800603e:	f7ff fe27 	bl	8005c90 <OLED_WR_Byte>
 8006042:	2100      	movs	r1, #0
 8006044:	20f1      	movs	r0, #241	; 0xf1
 8006046:	f7ff fe23 	bl	8005c90 <OLED_WR_Byte>
 800604a:	2100      	movs	r1, #0
 800604c:	20db      	movs	r0, #219	; 0xdb
 800604e:	f7ff fe1f 	bl	8005c90 <OLED_WR_Byte>
 8006052:	2100      	movs	r1, #0
 8006054:	2030      	movs	r0, #48	; 0x30
 8006056:	f7ff fe1b 	bl	8005c90 <OLED_WR_Byte>
 800605a:	2100      	movs	r1, #0
 800605c:	20a4      	movs	r0, #164	; 0xa4
 800605e:	f7ff fe17 	bl	8005c90 <OLED_WR_Byte>
 8006062:	2100      	movs	r1, #0
 8006064:	20a6      	movs	r0, #166	; 0xa6
 8006066:	f7ff fe13 	bl	8005c90 <OLED_WR_Byte>
 800606a:	2100      	movs	r1, #0
 800606c:	20af      	movs	r0, #175	; 0xaf
 800606e:	f7ff fe0f 	bl	8005c90 <OLED_WR_Byte>
 8006072:	f7ff fe57 	bl	8005d24 <OLED_Clear>
 8006076:	bf00      	nop
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	40023800 	.word	0x40023800
 8006080:	40021000 	.word	0x40021000

08006084 <PIDController_Init>:
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	615a      	str	r2, [r3, #20]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f04f 0200 	mov.w	r2, #0
 8006098:	619a      	str	r2, [r3, #24]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f04f 0200 	mov.w	r2, #0
 80060a0:	61da      	str	r2, [r3, #28]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	621a      	str	r2, [r3, #32]
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <PIDController_Update>:
 80060b4:	b480      	push	{r7}
 80060b6:	b089      	sub	sp, #36	; 0x24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80060c0:	edc7 0a01 	vstr	s1, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
 80060c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80060ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80060ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060d2:	edc7 7a07 	vstr	s15, [r7, #28]
 80060d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80060da:	edd7 7a07 	vldr	s15, [r7, #28]
 80060de:	eeb4 7a67 	vcmp.f32	s14, s15
 80060e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060e6:	d702      	bvc.n	80060ee <PIDController_Update+0x3a>
 80060e8:	f04f 0300 	mov.w	r3, #0
 80060ec:	61fb      	str	r3, [r7, #28]
 80060ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80060f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80060f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060fa:	db1b      	blt.n	8006134 <PIDController_Update+0x80>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	ed93 7a00 	vldr	s14, [r3]
 8006102:	ed97 6a07 	vldr	s12, [r7, #28]
 8006106:	edd7 6a02 	vldr	s13, [r7, #8]
 800610a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800610e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006112:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006116:	ee37 7a87 	vadd.f32	s14, s15, s14
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	ee07 3a90 	vmov	s15, r3
 8006120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006128:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800612c:	ee17 3a90 	vmov	r3, s15
 8006130:	61bb      	str	r3, [r7, #24]
 8006132:	e01a      	b.n	800616a <PIDController_Update+0xb6>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	ed93 7a00 	vldr	s14, [r3]
 800613a:	ed97 6a07 	vldr	s12, [r7, #28]
 800613e:	edd7 6a01 	vldr	s13, [r7, #4]
 8006142:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8006146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800614a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800614e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	ee07 3a90 	vmov	s15, r3
 8006158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800615c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006160:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006164:	ee17 3a90 	vmov	r3, s15
 8006168:	61bb      	str	r3, [r7, #24]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	ee07 3a90 	vmov	s15, r3
 8006172:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	edd3 7a01 	vldr	s15, [r3, #4]
 800617c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8006180:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	edd3 7a04 	vldr	s15, [r3, #16]
 800618a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	ed93 6a06 	vldr	s12, [r3, #24]
 8006194:	edd7 7a07 	vldr	s15, [r7, #28]
 8006198:	ee76 7a27 	vadd.f32	s15, s12, s15
 800619c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	ee07 3a90 	vmov	s15, r3
 80061a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061b6:	ee17 2a90 	vmov	r2, s15
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	615a      	str	r2, [r3, #20]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	da05      	bge.n	80061d4 <PIDController_Update+0x120>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	68da      	ldr	r2, [r3, #12]
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	e001      	b.n	80061d8 <PIDController_Update+0x124>
 80061d4:	2300      	movs	r3, #0
 80061d6:	613b      	str	r3, [r7, #16]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	429a      	cmp	r2, r3
 80061e0:	dd05      	ble.n	80061ee <PIDController_Update+0x13a>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	689a      	ldr	r2, [r3, #8]
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	e001      	b.n	80061f2 <PIDController_Update+0x13e>
 80061ee:	2300      	movs	r3, #0
 80061f0:	617b      	str	r3, [r7, #20]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	da03      	bge.n	8006204 <PIDController_Update+0x150>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	615a      	str	r2, [r3, #20]
 8006202:	e007      	b.n	8006214 <PIDController_Update+0x160>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	429a      	cmp	r2, r3
 800620c:	dd02      	ble.n	8006214 <PIDController_Update+0x160>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	615a      	str	r2, [r3, #20]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	695a      	ldr	r2, [r3, #20]
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	441a      	add	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	621a      	str	r2, [r3, #32]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6a1a      	ldr	r2, [r3, #32]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	429a      	cmp	r2, r3
 800622a:	dd04      	ble.n	8006236 <PIDController_Update+0x182>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	68da      	ldr	r2, [r3, #12]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	621a      	str	r2, [r3, #32]
 8006234:	e009      	b.n	800624a <PIDController_Update+0x196>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6a1a      	ldr	r2, [r3, #32]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	429a      	cmp	r2, r3
 8006240:	da03      	bge.n	800624a <PIDController_Update+0x196>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	689a      	ldr	r2, [r3, #8]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	621a      	str	r2, [r3, #32]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	69fa      	ldr	r2, [r7, #28]
 800624e:	619a      	str	r2, [r3, #24]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	61da      	str	r2, [r3, #28]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	4618      	mov	r0, r3
 800625c:	3724      	adds	r7, #36	; 0x24
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
	...

08006268 <HAL_MspInit>:
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	2300      	movs	r3, #0
 8006270:	607b      	str	r3, [r7, #4]
 8006272:	4b12      	ldr	r3, [pc, #72]	; (80062bc <HAL_MspInit+0x54>)
 8006274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006276:	4a11      	ldr	r2, [pc, #68]	; (80062bc <HAL_MspInit+0x54>)
 8006278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800627c:	6453      	str	r3, [r2, #68]	; 0x44
 800627e:	4b0f      	ldr	r3, [pc, #60]	; (80062bc <HAL_MspInit+0x54>)
 8006280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006286:	607b      	str	r3, [r7, #4]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2300      	movs	r3, #0
 800628c:	603b      	str	r3, [r7, #0]
 800628e:	4b0b      	ldr	r3, [pc, #44]	; (80062bc <HAL_MspInit+0x54>)
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	4a0a      	ldr	r2, [pc, #40]	; (80062bc <HAL_MspInit+0x54>)
 8006294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006298:	6413      	str	r3, [r2, #64]	; 0x40
 800629a:	4b08      	ldr	r3, [pc, #32]	; (80062bc <HAL_MspInit+0x54>)
 800629c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062a2:	603b      	str	r3, [r7, #0]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2200      	movs	r2, #0
 80062a8:	210f      	movs	r1, #15
 80062aa:	f06f 0001 	mvn.w	r0, #1
 80062ae:	f000 fcde 	bl	8006c6e <HAL_NVIC_SetPriority>
 80062b2:	bf00      	nop
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	40023800 	.word	0x40023800

080062c0 <HAL_I2C_MspInit>:
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b08a      	sub	sp, #40	; 0x28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	f107 0314 	add.w	r3, r7, #20
 80062cc:	2200      	movs	r2, #0
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	605a      	str	r2, [r3, #4]
 80062d2:	609a      	str	r2, [r3, #8]
 80062d4:	60da      	str	r2, [r3, #12]
 80062d6:	611a      	str	r2, [r3, #16]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a1d      	ldr	r2, [pc, #116]	; (8006354 <HAL_I2C_MspInit+0x94>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d134      	bne.n	800634c <HAL_I2C_MspInit+0x8c>
 80062e2:	2300      	movs	r3, #0
 80062e4:	613b      	str	r3, [r7, #16]
 80062e6:	4b1c      	ldr	r3, [pc, #112]	; (8006358 <HAL_I2C_MspInit+0x98>)
 80062e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ea:	4a1b      	ldr	r2, [pc, #108]	; (8006358 <HAL_I2C_MspInit+0x98>)
 80062ec:	f043 0302 	orr.w	r3, r3, #2
 80062f0:	6313      	str	r3, [r2, #48]	; 0x30
 80062f2:	4b19      	ldr	r3, [pc, #100]	; (8006358 <HAL_I2C_MspInit+0x98>)
 80062f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	613b      	str	r3, [r7, #16]
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	2312      	movs	r3, #18
 8006306:	61bb      	str	r3, [r7, #24]
 8006308:	2300      	movs	r3, #0
 800630a:	61fb      	str	r3, [r7, #28]
 800630c:	2303      	movs	r3, #3
 800630e:	623b      	str	r3, [r7, #32]
 8006310:	2304      	movs	r3, #4
 8006312:	627b      	str	r3, [r7, #36]	; 0x24
 8006314:	f107 0314 	add.w	r3, r7, #20
 8006318:	4619      	mov	r1, r3
 800631a:	4810      	ldr	r0, [pc, #64]	; (800635c <HAL_I2C_MspInit+0x9c>)
 800631c:	f000 fd7e 	bl	8006e1c <HAL_GPIO_Init>
 8006320:	2300      	movs	r3, #0
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	4b0c      	ldr	r3, [pc, #48]	; (8006358 <HAL_I2C_MspInit+0x98>)
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	4a0b      	ldr	r2, [pc, #44]	; (8006358 <HAL_I2C_MspInit+0x98>)
 800632a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800632e:	6413      	str	r3, [r2, #64]	; 0x40
 8006330:	4b09      	ldr	r3, [pc, #36]	; (8006358 <HAL_I2C_MspInit+0x98>)
 8006332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006338:	60fb      	str	r3, [r7, #12]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	2105      	movs	r1, #5
 8006340:	201f      	movs	r0, #31
 8006342:	f000 fc94 	bl	8006c6e <HAL_NVIC_SetPriority>
 8006346:	201f      	movs	r0, #31
 8006348:	f000 fcad 	bl	8006ca6 <HAL_NVIC_EnableIRQ>
 800634c:	bf00      	nop
 800634e:	3728      	adds	r7, #40	; 0x28
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	40005400 	.word	0x40005400
 8006358:	40023800 	.word	0x40023800
 800635c:	40020400 	.word	0x40020400

08006360 <HAL_TIM_Base_MspInit>:
 8006360:	b580      	push	{r7, lr}
 8006362:	b08a      	sub	sp, #40	; 0x28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	f107 0314 	add.w	r3, r7, #20
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	605a      	str	r2, [r3, #4]
 8006372:	609a      	str	r2, [r3, #8]
 8006374:	60da      	str	r2, [r3, #12]
 8006376:	611a      	str	r2, [r3, #16]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a23      	ldr	r2, [pc, #140]	; (800640c <HAL_TIM_Base_MspInit+0xac>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d10e      	bne.n	80063a0 <HAL_TIM_Base_MspInit+0x40>
 8006382:	2300      	movs	r3, #0
 8006384:	613b      	str	r3, [r7, #16]
 8006386:	4b22      	ldr	r3, [pc, #136]	; (8006410 <HAL_TIM_Base_MspInit+0xb0>)
 8006388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800638a:	4a21      	ldr	r2, [pc, #132]	; (8006410 <HAL_TIM_Base_MspInit+0xb0>)
 800638c:	f043 0301 	orr.w	r3, r3, #1
 8006390:	6453      	str	r3, [r2, #68]	; 0x44
 8006392:	4b1f      	ldr	r3, [pc, #124]	; (8006410 <HAL_TIM_Base_MspInit+0xb0>)
 8006394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	613b      	str	r3, [r7, #16]
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	e031      	b.n	8006404 <HAL_TIM_Base_MspInit+0xa4>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a1b      	ldr	r2, [pc, #108]	; (8006414 <HAL_TIM_Base_MspInit+0xb4>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d12c      	bne.n	8006404 <HAL_TIM_Base_MspInit+0xa4>
 80063aa:	2300      	movs	r3, #0
 80063ac:	60fb      	str	r3, [r7, #12]
 80063ae:	4b18      	ldr	r3, [pc, #96]	; (8006410 <HAL_TIM_Base_MspInit+0xb0>)
 80063b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b2:	4a17      	ldr	r2, [pc, #92]	; (8006410 <HAL_TIM_Base_MspInit+0xb0>)
 80063b4:	f043 0302 	orr.w	r3, r3, #2
 80063b8:	6453      	str	r3, [r2, #68]	; 0x44
 80063ba:	4b15      	ldr	r3, [pc, #84]	; (8006410 <HAL_TIM_Base_MspInit+0xb0>)
 80063bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2300      	movs	r3, #0
 80063c8:	60bb      	str	r3, [r7, #8]
 80063ca:	4b11      	ldr	r3, [pc, #68]	; (8006410 <HAL_TIM_Base_MspInit+0xb0>)
 80063cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ce:	4a10      	ldr	r2, [pc, #64]	; (8006410 <HAL_TIM_Base_MspInit+0xb0>)
 80063d0:	f043 0304 	orr.w	r3, r3, #4
 80063d4:	6313      	str	r3, [r2, #48]	; 0x30
 80063d6:	4b0e      	ldr	r3, [pc, #56]	; (8006410 <HAL_TIM_Base_MspInit+0xb0>)
 80063d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063da:	f003 0304 	and.w	r3, r3, #4
 80063de:	60bb      	str	r3, [r7, #8]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	2302      	movs	r3, #2
 80063ea:	61bb      	str	r3, [r7, #24]
 80063ec:	2300      	movs	r3, #0
 80063ee:	61fb      	str	r3, [r7, #28]
 80063f0:	2300      	movs	r3, #0
 80063f2:	623b      	str	r3, [r7, #32]
 80063f4:	2303      	movs	r3, #3
 80063f6:	627b      	str	r3, [r7, #36]	; 0x24
 80063f8:	f107 0314 	add.w	r3, r7, #20
 80063fc:	4619      	mov	r1, r3
 80063fe:	4806      	ldr	r0, [pc, #24]	; (8006418 <HAL_TIM_Base_MspInit+0xb8>)
 8006400:	f000 fd0c 	bl	8006e1c <HAL_GPIO_Init>
 8006404:	bf00      	nop
 8006406:	3728      	adds	r7, #40	; 0x28
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	40010000 	.word	0x40010000
 8006410:	40023800 	.word	0x40023800
 8006414:	40010400 	.word	0x40010400
 8006418:	40020800 	.word	0x40020800

0800641c <HAL_TIM_Encoder_MspInit>:
 800641c:	b580      	push	{r7, lr}
 800641e:	b08c      	sub	sp, #48	; 0x30
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	f107 031c 	add.w	r3, r7, #28
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]
 800642c:	605a      	str	r2, [r3, #4]
 800642e:	609a      	str	r2, [r3, #8]
 8006430:	60da      	str	r2, [r3, #12]
 8006432:	611a      	str	r2, [r3, #16]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800643c:	d14b      	bne.n	80064d6 <HAL_TIM_Encoder_MspInit+0xba>
 800643e:	2300      	movs	r3, #0
 8006440:	61bb      	str	r3, [r7, #24]
 8006442:	4b3f      	ldr	r3, [pc, #252]	; (8006540 <HAL_TIM_Encoder_MspInit+0x124>)
 8006444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006446:	4a3e      	ldr	r2, [pc, #248]	; (8006540 <HAL_TIM_Encoder_MspInit+0x124>)
 8006448:	f043 0301 	orr.w	r3, r3, #1
 800644c:	6413      	str	r3, [r2, #64]	; 0x40
 800644e:	4b3c      	ldr	r3, [pc, #240]	; (8006540 <HAL_TIM_Encoder_MspInit+0x124>)
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	61bb      	str	r3, [r7, #24]
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	2300      	movs	r3, #0
 800645c:	617b      	str	r3, [r7, #20]
 800645e:	4b38      	ldr	r3, [pc, #224]	; (8006540 <HAL_TIM_Encoder_MspInit+0x124>)
 8006460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006462:	4a37      	ldr	r2, [pc, #220]	; (8006540 <HAL_TIM_Encoder_MspInit+0x124>)
 8006464:	f043 0301 	orr.w	r3, r3, #1
 8006468:	6313      	str	r3, [r2, #48]	; 0x30
 800646a:	4b35      	ldr	r3, [pc, #212]	; (8006540 <HAL_TIM_Encoder_MspInit+0x124>)
 800646c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	617b      	str	r3, [r7, #20]
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	2300      	movs	r3, #0
 8006478:	613b      	str	r3, [r7, #16]
 800647a:	4b31      	ldr	r3, [pc, #196]	; (8006540 <HAL_TIM_Encoder_MspInit+0x124>)
 800647c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647e:	4a30      	ldr	r2, [pc, #192]	; (8006540 <HAL_TIM_Encoder_MspInit+0x124>)
 8006480:	f043 0302 	orr.w	r3, r3, #2
 8006484:	6313      	str	r3, [r2, #48]	; 0x30
 8006486:	4b2e      	ldr	r3, [pc, #184]	; (8006540 <HAL_TIM_Encoder_MspInit+0x124>)
 8006488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	613b      	str	r3, [r7, #16]
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006496:	61fb      	str	r3, [r7, #28]
 8006498:	2302      	movs	r3, #2
 800649a:	623b      	str	r3, [r7, #32]
 800649c:	2300      	movs	r3, #0
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
 80064a0:	2300      	movs	r3, #0
 80064a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80064a4:	2301      	movs	r3, #1
 80064a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a8:	f107 031c 	add.w	r3, r7, #28
 80064ac:	4619      	mov	r1, r3
 80064ae:	4825      	ldr	r0, [pc, #148]	; (8006544 <HAL_TIM_Encoder_MspInit+0x128>)
 80064b0:	f000 fcb4 	bl	8006e1c <HAL_GPIO_Init>
 80064b4:	2308      	movs	r3, #8
 80064b6:	61fb      	str	r3, [r7, #28]
 80064b8:	2302      	movs	r3, #2
 80064ba:	623b      	str	r3, [r7, #32]
 80064bc:	2300      	movs	r3, #0
 80064be:	627b      	str	r3, [r7, #36]	; 0x24
 80064c0:	2300      	movs	r3, #0
 80064c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80064c4:	2301      	movs	r3, #1
 80064c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064c8:	f107 031c 	add.w	r3, r7, #28
 80064cc:	4619      	mov	r1, r3
 80064ce:	481e      	ldr	r0, [pc, #120]	; (8006548 <HAL_TIM_Encoder_MspInit+0x12c>)
 80064d0:	f000 fca4 	bl	8006e1c <HAL_GPIO_Init>
 80064d4:	e030      	b.n	8006538 <HAL_TIM_Encoder_MspInit+0x11c>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a1c      	ldr	r2, [pc, #112]	; (800654c <HAL_TIM_Encoder_MspInit+0x130>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d12b      	bne.n	8006538 <HAL_TIM_Encoder_MspInit+0x11c>
 80064e0:	2300      	movs	r3, #0
 80064e2:	60fb      	str	r3, [r7, #12]
 80064e4:	4b16      	ldr	r3, [pc, #88]	; (8006540 <HAL_TIM_Encoder_MspInit+0x124>)
 80064e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e8:	4a15      	ldr	r2, [pc, #84]	; (8006540 <HAL_TIM_Encoder_MspInit+0x124>)
 80064ea:	f043 0304 	orr.w	r3, r3, #4
 80064ee:	6413      	str	r3, [r2, #64]	; 0x40
 80064f0:	4b13      	ldr	r3, [pc, #76]	; (8006540 <HAL_TIM_Encoder_MspInit+0x124>)
 80064f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	60fb      	str	r3, [r7, #12]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2300      	movs	r3, #0
 80064fe:	60bb      	str	r3, [r7, #8]
 8006500:	4b0f      	ldr	r3, [pc, #60]	; (8006540 <HAL_TIM_Encoder_MspInit+0x124>)
 8006502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006504:	4a0e      	ldr	r2, [pc, #56]	; (8006540 <HAL_TIM_Encoder_MspInit+0x124>)
 8006506:	f043 0302 	orr.w	r3, r3, #2
 800650a:	6313      	str	r3, [r2, #48]	; 0x30
 800650c:	4b0c      	ldr	r3, [pc, #48]	; (8006540 <HAL_TIM_Encoder_MspInit+0x124>)
 800650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	60bb      	str	r3, [r7, #8]
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	23c0      	movs	r3, #192	; 0xc0
 800651a:	61fb      	str	r3, [r7, #28]
 800651c:	2302      	movs	r3, #2
 800651e:	623b      	str	r3, [r7, #32]
 8006520:	2300      	movs	r3, #0
 8006522:	627b      	str	r3, [r7, #36]	; 0x24
 8006524:	2300      	movs	r3, #0
 8006526:	62bb      	str	r3, [r7, #40]	; 0x28
 8006528:	2302      	movs	r3, #2
 800652a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800652c:	f107 031c 	add.w	r3, r7, #28
 8006530:	4619      	mov	r1, r3
 8006532:	4805      	ldr	r0, [pc, #20]	; (8006548 <HAL_TIM_Encoder_MspInit+0x12c>)
 8006534:	f000 fc72 	bl	8006e1c <HAL_GPIO_Init>
 8006538:	bf00      	nop
 800653a:	3730      	adds	r7, #48	; 0x30
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	40023800 	.word	0x40023800
 8006544:	40020000 	.word	0x40020000
 8006548:	40020400 	.word	0x40020400
 800654c:	40000800 	.word	0x40000800

08006550 <HAL_TIM_IC_MspInit>:
 8006550:	b580      	push	{r7, lr}
 8006552:	b08a      	sub	sp, #40	; 0x28
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	f107 0314 	add.w	r3, r7, #20
 800655c:	2200      	movs	r2, #0
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	605a      	str	r2, [r3, #4]
 8006562:	609a      	str	r2, [r3, #8]
 8006564:	60da      	str	r2, [r3, #12]
 8006566:	611a      	str	r2, [r3, #16]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a1d      	ldr	r2, [pc, #116]	; (80065e4 <HAL_TIM_IC_MspInit+0x94>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d133      	bne.n	80065da <HAL_TIM_IC_MspInit+0x8a>
 8006572:	2300      	movs	r3, #0
 8006574:	613b      	str	r3, [r7, #16]
 8006576:	4b1c      	ldr	r3, [pc, #112]	; (80065e8 <HAL_TIM_IC_MspInit+0x98>)
 8006578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657a:	4a1b      	ldr	r2, [pc, #108]	; (80065e8 <HAL_TIM_IC_MspInit+0x98>)
 800657c:	f043 0302 	orr.w	r3, r3, #2
 8006580:	6413      	str	r3, [r2, #64]	; 0x40
 8006582:	4b19      	ldr	r3, [pc, #100]	; (80065e8 <HAL_TIM_IC_MspInit+0x98>)
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	613b      	str	r3, [r7, #16]
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	2300      	movs	r3, #0
 8006590:	60fb      	str	r3, [r7, #12]
 8006592:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <HAL_TIM_IC_MspInit+0x98>)
 8006594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006596:	4a14      	ldr	r2, [pc, #80]	; (80065e8 <HAL_TIM_IC_MspInit+0x98>)
 8006598:	f043 0302 	orr.w	r3, r3, #2
 800659c:	6313      	str	r3, [r2, #48]	; 0x30
 800659e:	4b12      	ldr	r3, [pc, #72]	; (80065e8 <HAL_TIM_IC_MspInit+0x98>)
 80065a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2310      	movs	r3, #16
 80065ac:	617b      	str	r3, [r7, #20]
 80065ae:	2302      	movs	r3, #2
 80065b0:	61bb      	str	r3, [r7, #24]
 80065b2:	2300      	movs	r3, #0
 80065b4:	61fb      	str	r3, [r7, #28]
 80065b6:	2300      	movs	r3, #0
 80065b8:	623b      	str	r3, [r7, #32]
 80065ba:	2302      	movs	r3, #2
 80065bc:	627b      	str	r3, [r7, #36]	; 0x24
 80065be:	f107 0314 	add.w	r3, r7, #20
 80065c2:	4619      	mov	r1, r3
 80065c4:	4809      	ldr	r0, [pc, #36]	; (80065ec <HAL_TIM_IC_MspInit+0x9c>)
 80065c6:	f000 fc29 	bl	8006e1c <HAL_GPIO_Init>
 80065ca:	2200      	movs	r2, #0
 80065cc:	2105      	movs	r1, #5
 80065ce:	201d      	movs	r0, #29
 80065d0:	f000 fb4d 	bl	8006c6e <HAL_NVIC_SetPriority>
 80065d4:	201d      	movs	r0, #29
 80065d6:	f000 fb66 	bl	8006ca6 <HAL_NVIC_EnableIRQ>
 80065da:	bf00      	nop
 80065dc:	3728      	adds	r7, #40	; 0x28
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	40000400 	.word	0x40000400
 80065e8:	40023800 	.word	0x40023800
 80065ec:	40020400 	.word	0x40020400

080065f0 <HAL_TIM_MspPostInit>:
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b088      	sub	sp, #32
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	f107 030c 	add.w	r3, r7, #12
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	605a      	str	r2, [r3, #4]
 8006602:	609a      	str	r2, [r3, #8]
 8006604:	60da      	str	r2, [r3, #12]
 8006606:	611a      	str	r2, [r3, #16]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a12      	ldr	r2, [pc, #72]	; (8006658 <HAL_TIM_MspPostInit+0x68>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d11e      	bne.n	8006650 <HAL_TIM_MspPostInit+0x60>
 8006612:	2300      	movs	r3, #0
 8006614:	60bb      	str	r3, [r7, #8]
 8006616:	4b11      	ldr	r3, [pc, #68]	; (800665c <HAL_TIM_MspPostInit+0x6c>)
 8006618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661a:	4a10      	ldr	r2, [pc, #64]	; (800665c <HAL_TIM_MspPostInit+0x6c>)
 800661c:	f043 0310 	orr.w	r3, r3, #16
 8006620:	6313      	str	r3, [r2, #48]	; 0x30
 8006622:	4b0e      	ldr	r3, [pc, #56]	; (800665c <HAL_TIM_MspPostInit+0x6c>)
 8006624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006626:	f003 0310 	and.w	r3, r3, #16
 800662a:	60bb      	str	r3, [r7, #8]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006632:	60fb      	str	r3, [r7, #12]
 8006634:	2302      	movs	r3, #2
 8006636:	613b      	str	r3, [r7, #16]
 8006638:	2300      	movs	r3, #0
 800663a:	617b      	str	r3, [r7, #20]
 800663c:	2300      	movs	r3, #0
 800663e:	61bb      	str	r3, [r7, #24]
 8006640:	2301      	movs	r3, #1
 8006642:	61fb      	str	r3, [r7, #28]
 8006644:	f107 030c 	add.w	r3, r7, #12
 8006648:	4619      	mov	r1, r3
 800664a:	4805      	ldr	r0, [pc, #20]	; (8006660 <HAL_TIM_MspPostInit+0x70>)
 800664c:	f000 fbe6 	bl	8006e1c <HAL_GPIO_Init>
 8006650:	bf00      	nop
 8006652:	3720      	adds	r7, #32
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	40010000 	.word	0x40010000
 800665c:	40023800 	.word	0x40023800
 8006660:	40021000 	.word	0x40021000

08006664 <HAL_UART_MspInit>:
 8006664:	b580      	push	{r7, lr}
 8006666:	b08a      	sub	sp, #40	; 0x28
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	f107 0314 	add.w	r3, r7, #20
 8006670:	2200      	movs	r2, #0
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	605a      	str	r2, [r3, #4]
 8006676:	609a      	str	r2, [r3, #8]
 8006678:	60da      	str	r2, [r3, #12]
 800667a:	611a      	str	r2, [r3, #16]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a1d      	ldr	r2, [pc, #116]	; (80066f8 <HAL_UART_MspInit+0x94>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d134      	bne.n	80066f0 <HAL_UART_MspInit+0x8c>
 8006686:	2300      	movs	r3, #0
 8006688:	613b      	str	r3, [r7, #16]
 800668a:	4b1c      	ldr	r3, [pc, #112]	; (80066fc <HAL_UART_MspInit+0x98>)
 800668c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668e:	4a1b      	ldr	r2, [pc, #108]	; (80066fc <HAL_UART_MspInit+0x98>)
 8006690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006694:	6413      	str	r3, [r2, #64]	; 0x40
 8006696:	4b19      	ldr	r3, [pc, #100]	; (80066fc <HAL_UART_MspInit+0x98>)
 8006698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800669e:	613b      	str	r3, [r7, #16]
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	2300      	movs	r3, #0
 80066a4:	60fb      	str	r3, [r7, #12]
 80066a6:	4b15      	ldr	r3, [pc, #84]	; (80066fc <HAL_UART_MspInit+0x98>)
 80066a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066aa:	4a14      	ldr	r2, [pc, #80]	; (80066fc <HAL_UART_MspInit+0x98>)
 80066ac:	f043 0304 	orr.w	r3, r3, #4
 80066b0:	6313      	str	r3, [r2, #48]	; 0x30
 80066b2:	4b12      	ldr	r3, [pc, #72]	; (80066fc <HAL_UART_MspInit+0x98>)
 80066b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b6:	f003 0304 	and.w	r3, r3, #4
 80066ba:	60fb      	str	r3, [r7, #12]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80066c2:	617b      	str	r3, [r7, #20]
 80066c4:	2302      	movs	r3, #2
 80066c6:	61bb      	str	r3, [r7, #24]
 80066c8:	2300      	movs	r3, #0
 80066ca:	61fb      	str	r3, [r7, #28]
 80066cc:	2303      	movs	r3, #3
 80066ce:	623b      	str	r3, [r7, #32]
 80066d0:	2307      	movs	r3, #7
 80066d2:	627b      	str	r3, [r7, #36]	; 0x24
 80066d4:	f107 0314 	add.w	r3, r7, #20
 80066d8:	4619      	mov	r1, r3
 80066da:	4809      	ldr	r0, [pc, #36]	; (8006700 <HAL_UART_MspInit+0x9c>)
 80066dc:	f000 fb9e 	bl	8006e1c <HAL_GPIO_Init>
 80066e0:	2200      	movs	r2, #0
 80066e2:	2105      	movs	r1, #5
 80066e4:	2027      	movs	r0, #39	; 0x27
 80066e6:	f000 fac2 	bl	8006c6e <HAL_NVIC_SetPriority>
 80066ea:	2027      	movs	r0, #39	; 0x27
 80066ec:	f000 fadb 	bl	8006ca6 <HAL_NVIC_EnableIRQ>
 80066f0:	bf00      	nop
 80066f2:	3728      	adds	r7, #40	; 0x28
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	40004800 	.word	0x40004800
 80066fc:	40023800 	.word	0x40023800
 8006700:	40020800 	.word	0x40020800

08006704 <NMI_Handler>:
 8006704:	b480      	push	{r7}
 8006706:	af00      	add	r7, sp, #0
 8006708:	e7fe      	b.n	8006708 <NMI_Handler+0x4>

0800670a <HardFault_Handler>:
 800670a:	b480      	push	{r7}
 800670c:	af00      	add	r7, sp, #0
 800670e:	e7fe      	b.n	800670e <HardFault_Handler+0x4>

08006710 <MemManage_Handler>:
 8006710:	b480      	push	{r7}
 8006712:	af00      	add	r7, sp, #0
 8006714:	e7fe      	b.n	8006714 <MemManage_Handler+0x4>

08006716 <BusFault_Handler>:
 8006716:	b480      	push	{r7}
 8006718:	af00      	add	r7, sp, #0
 800671a:	e7fe      	b.n	800671a <BusFault_Handler+0x4>

0800671c <UsageFault_Handler>:
 800671c:	b480      	push	{r7}
 800671e:	af00      	add	r7, sp, #0
 8006720:	e7fe      	b.n	8006720 <UsageFault_Handler+0x4>

08006722 <DebugMon_Handler>:
 8006722:	b480      	push	{r7}
 8006724:	af00      	add	r7, sp, #0
 8006726:	bf00      	nop
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <SysTick_Handler>:
 8006730:	b580      	push	{r7, lr}
 8006732:	af00      	add	r7, sp, #0
 8006734:	f000 f97c 	bl	8006a30 <HAL_IncTick>
 8006738:	f008 f82e 	bl	800e798 <xTaskGetSchedulerState>
 800673c:	4603      	mov	r3, r0
 800673e:	2b01      	cmp	r3, #1
 8006740:	d001      	beq.n	8006746 <SysTick_Handler+0x16>
 8006742:	f008 fe19 	bl	800f378 <xPortSysTickHandler>
 8006746:	bf00      	nop
 8006748:	bd80      	pop	{r7, pc}
	...

0800674c <TIM3_IRQHandler>:
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
 8006750:	4802      	ldr	r0, [pc, #8]	; (800675c <TIM3_IRQHandler+0x10>)
 8006752:	f004 f929 	bl	800a9a8 <HAL_TIM_IRQHandler>
 8006756:	bf00      	nop
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	200002e8 	.word	0x200002e8

08006760 <I2C1_EV_IRQHandler>:
 8006760:	b580      	push	{r7, lr}
 8006762:	af00      	add	r7, sp, #0
 8006764:	4802      	ldr	r0, [pc, #8]	; (8006770 <I2C1_EV_IRQHandler+0x10>)
 8006766:	f001 f991 	bl	8007a8c <HAL_I2C_EV_IRQHandler>
 800676a:	bf00      	nop
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20000204 	.word	0x20000204

08006774 <USART3_IRQHandler>:
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
 8006778:	4802      	ldr	r0, [pc, #8]	; (8006784 <USART3_IRQHandler+0x10>)
 800677a:	f005 fadb 	bl	800bd34 <HAL_UART_IRQHandler>
 800677e:	bf00      	nop
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	200003c0 	.word	0x200003c0

08006788 <_getpid>:
 8006788:	b480      	push	{r7}
 800678a:	af00      	add	r7, sp, #0
 800678c:	2301      	movs	r3, #1
 800678e:	4618      	mov	r0, r3
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <_kill>:
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
 80067a2:	f009 f863 	bl	800f86c <__errno>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2216      	movs	r2, #22
 80067aa:	601a      	str	r2, [r3, #0]
 80067ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067b0:	4618      	mov	r0, r3
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <_exit>:
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f7ff ffe7 	bl	8006798 <_kill>
 80067ca:	e7fe      	b.n	80067ca <_exit+0x12>

080067cc <_read>:
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
 80067d8:	2300      	movs	r3, #0
 80067da:	617b      	str	r3, [r7, #20]
 80067dc:	e00a      	b.n	80067f4 <_read+0x28>
 80067de:	f3af 8000 	nop.w
 80067e2:	4601      	mov	r1, r0
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	60ba      	str	r2, [r7, #8]
 80067ea:	b2ca      	uxtb	r2, r1
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	3301      	adds	r3, #1
 80067f2:	617b      	str	r3, [r7, #20]
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	dbf0      	blt.n	80067de <_read+0x12>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4618      	mov	r0, r3
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <_write>:
 8006806:	b580      	push	{r7, lr}
 8006808:	b086      	sub	sp, #24
 800680a:	af00      	add	r7, sp, #0
 800680c:	60f8      	str	r0, [r7, #12]
 800680e:	60b9      	str	r1, [r7, #8]
 8006810:	607a      	str	r2, [r7, #4]
 8006812:	2300      	movs	r3, #0
 8006814:	617b      	str	r3, [r7, #20]
 8006816:	e009      	b.n	800682c <_write+0x26>
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	60ba      	str	r2, [r7, #8]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	4618      	mov	r0, r3
 8006822:	f3af 8000 	nop.w
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	3301      	adds	r3, #1
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	429a      	cmp	r2, r3
 8006832:	dbf1      	blt.n	8006818 <_write+0x12>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4618      	mov	r0, r3
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <_close>:
 800683e:	b480      	push	{r7}
 8006840:	b083      	sub	sp, #12
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800684a:	4618      	mov	r0, r3
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <_fstat>:
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	6039      	str	r1, [r7, #0]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006866:	605a      	str	r2, [r3, #4]
 8006868:	2300      	movs	r3, #0
 800686a:	4618      	mov	r0, r3
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <_isatty>:
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	2301      	movs	r3, #1
 8006880:	4618      	mov	r0, r3
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <_lseek>:
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
 8006898:	2300      	movs	r3, #0
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
	...

080068a8 <_sbrk>:
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	4a14      	ldr	r2, [pc, #80]	; (8006904 <_sbrk+0x5c>)
 80068b2:	4b15      	ldr	r3, [pc, #84]	; (8006908 <_sbrk+0x60>)
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	613b      	str	r3, [r7, #16]
 80068bc:	4b13      	ldr	r3, [pc, #76]	; (800690c <_sbrk+0x64>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d102      	bne.n	80068ca <_sbrk+0x22>
 80068c4:	4b11      	ldr	r3, [pc, #68]	; (800690c <_sbrk+0x64>)
 80068c6:	4a12      	ldr	r2, [pc, #72]	; (8006910 <_sbrk+0x68>)
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	4b10      	ldr	r3, [pc, #64]	; (800690c <_sbrk+0x64>)
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4413      	add	r3, r2
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d207      	bcs.n	80068e8 <_sbrk+0x40>
 80068d8:	f008 ffc8 	bl	800f86c <__errno>
 80068dc:	4603      	mov	r3, r0
 80068de:	220c      	movs	r2, #12
 80068e0:	601a      	str	r2, [r3, #0]
 80068e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068e6:	e009      	b.n	80068fc <_sbrk+0x54>
 80068e8:	4b08      	ldr	r3, [pc, #32]	; (800690c <_sbrk+0x64>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	60fb      	str	r3, [r7, #12]
 80068ee:	4b07      	ldr	r3, [pc, #28]	; (800690c <_sbrk+0x64>)
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4413      	add	r3, r2
 80068f6:	4a05      	ldr	r2, [pc, #20]	; (800690c <_sbrk+0x64>)
 80068f8:	6013      	str	r3, [r2, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4618      	mov	r0, r3
 80068fe:	3718      	adds	r7, #24
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	20020000 	.word	0x20020000
 8006908:	00000400 	.word	0x00000400
 800690c:	20000864 	.word	0x20000864
 8006910:	200063d0 	.word	0x200063d0

08006914 <SystemInit>:
 8006914:	b480      	push	{r7}
 8006916:	af00      	add	r7, sp, #0
 8006918:	4b06      	ldr	r3, [pc, #24]	; (8006934 <SystemInit+0x20>)
 800691a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800691e:	4a05      	ldr	r2, [pc, #20]	; (8006934 <SystemInit+0x20>)
 8006920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8006928:	bf00      	nop
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	e000ed00 	.word	0xe000ed00

08006938 <Reset_Handler>:
 8006938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006970 <LoopFillZerobss+0x12>
 800693c:	480d      	ldr	r0, [pc, #52]	; (8006974 <LoopFillZerobss+0x16>)
 800693e:	490e      	ldr	r1, [pc, #56]	; (8006978 <LoopFillZerobss+0x1a>)
 8006940:	4a0e      	ldr	r2, [pc, #56]	; (800697c <LoopFillZerobss+0x1e>)
 8006942:	2300      	movs	r3, #0
 8006944:	e002      	b.n	800694c <LoopCopyDataInit>

08006946 <CopyDataInit>:
 8006946:	58d4      	ldr	r4, [r2, r3]
 8006948:	50c4      	str	r4, [r0, r3]
 800694a:	3304      	adds	r3, #4

0800694c <LoopCopyDataInit>:
 800694c:	18c4      	adds	r4, r0, r3
 800694e:	428c      	cmp	r4, r1
 8006950:	d3f9      	bcc.n	8006946 <CopyDataInit>
 8006952:	4a0b      	ldr	r2, [pc, #44]	; (8006980 <LoopFillZerobss+0x22>)
 8006954:	4c0b      	ldr	r4, [pc, #44]	; (8006984 <LoopFillZerobss+0x26>)
 8006956:	2300      	movs	r3, #0
 8006958:	e001      	b.n	800695e <LoopFillZerobss>

0800695a <FillZerobss>:
 800695a:	6013      	str	r3, [r2, #0]
 800695c:	3204      	adds	r2, #4

0800695e <LoopFillZerobss>:
 800695e:	42a2      	cmp	r2, r4
 8006960:	d3fb      	bcc.n	800695a <FillZerobss>
 8006962:	f7ff ffd7 	bl	8006914 <SystemInit>
 8006966:	f008 ff87 	bl	800f878 <__libc_init_array>
 800696a:	f7fa fb45 	bl	8000ff8 <main>
 800696e:	4770      	bx	lr
 8006970:	20020000 	.word	0x20020000
 8006974:	20000000 	.word	0x20000000
 8006978:	200001e8 	.word	0x200001e8
 800697c:	08015274 	.word	0x08015274
 8006980:	200001e8 	.word	0x200001e8
 8006984:	200063cc 	.word	0x200063cc

08006988 <ADC_IRQHandler>:
 8006988:	e7fe      	b.n	8006988 <ADC_IRQHandler>
	...

0800698c <HAL_Init>:
 800698c:	b580      	push	{r7, lr}
 800698e:	af00      	add	r7, sp, #0
 8006990:	4b0e      	ldr	r3, [pc, #56]	; (80069cc <HAL_Init+0x40>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a0d      	ldr	r2, [pc, #52]	; (80069cc <HAL_Init+0x40>)
 8006996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800699a:	6013      	str	r3, [r2, #0]
 800699c:	4b0b      	ldr	r3, [pc, #44]	; (80069cc <HAL_Init+0x40>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a0a      	ldr	r2, [pc, #40]	; (80069cc <HAL_Init+0x40>)
 80069a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80069a6:	6013      	str	r3, [r2, #0]
 80069a8:	4b08      	ldr	r3, [pc, #32]	; (80069cc <HAL_Init+0x40>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a07      	ldr	r2, [pc, #28]	; (80069cc <HAL_Init+0x40>)
 80069ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	2003      	movs	r0, #3
 80069b6:	f000 f94f 	bl	8006c58 <HAL_NVIC_SetPriorityGrouping>
 80069ba:	200f      	movs	r0, #15
 80069bc:	f000 f808 	bl	80069d0 <HAL_InitTick>
 80069c0:	f7ff fc52 	bl	8006268 <HAL_MspInit>
 80069c4:	2300      	movs	r3, #0
 80069c6:	4618      	mov	r0, r3
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	40023c00 	.word	0x40023c00

080069d0 <HAL_InitTick>:
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	4b12      	ldr	r3, [pc, #72]	; (8006a24 <HAL_InitTick+0x54>)
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	4b12      	ldr	r3, [pc, #72]	; (8006a28 <HAL_InitTick+0x58>)
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	4619      	mov	r1, r3
 80069e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80069ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 f967 	bl	8006cc2 <HAL_SYSTICK_Config>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <HAL_InitTick+0x2e>
 80069fa:	2301      	movs	r3, #1
 80069fc:	e00e      	b.n	8006a1c <HAL_InitTick+0x4c>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b0f      	cmp	r3, #15
 8006a02:	d80a      	bhi.n	8006a1a <HAL_InitTick+0x4a>
 8006a04:	2200      	movs	r2, #0
 8006a06:	6879      	ldr	r1, [r7, #4]
 8006a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a0c:	f000 f92f 	bl	8006c6e <HAL_NVIC_SetPriority>
 8006a10:	4a06      	ldr	r2, [pc, #24]	; (8006a2c <HAL_InitTick+0x5c>)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6013      	str	r3, [r2, #0]
 8006a16:	2300      	movs	r3, #0
 8006a18:	e000      	b.n	8006a1c <HAL_InitTick+0x4c>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	20000004 	.word	0x20000004
 8006a28:	2000000c 	.word	0x2000000c
 8006a2c:	20000008 	.word	0x20000008

08006a30 <HAL_IncTick>:
 8006a30:	b480      	push	{r7}
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	4b06      	ldr	r3, [pc, #24]	; (8006a50 <HAL_IncTick+0x20>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	4b06      	ldr	r3, [pc, #24]	; (8006a54 <HAL_IncTick+0x24>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4413      	add	r3, r2
 8006a40:	4a04      	ldr	r2, [pc, #16]	; (8006a54 <HAL_IncTick+0x24>)
 8006a42:	6013      	str	r3, [r2, #0]
 8006a44:	bf00      	nop
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	2000000c 	.word	0x2000000c
 8006a54:	20000868 	.word	0x20000868

08006a58 <HAL_GetTick>:
 8006a58:	b480      	push	{r7}
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	4b03      	ldr	r3, [pc, #12]	; (8006a6c <HAL_GetTick+0x14>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4618      	mov	r0, r3
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	20000868 	.word	0x20000868

08006a70 <HAL_Delay>:
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	f7ff ffee 	bl	8006a58 <HAL_GetTick>
 8006a7c:	60b8      	str	r0, [r7, #8]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	60fb      	str	r3, [r7, #12]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a88:	d005      	beq.n	8006a96 <HAL_Delay+0x26>
 8006a8a:	4b0a      	ldr	r3, [pc, #40]	; (8006ab4 <HAL_Delay+0x44>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4413      	add	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]
 8006a96:	bf00      	nop
 8006a98:	f7ff ffde 	bl	8006a58 <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d8f7      	bhi.n	8006a98 <HAL_Delay+0x28>
 8006aa8:	bf00      	nop
 8006aaa:	bf00      	nop
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	2000000c 	.word	0x2000000c

08006ab8 <__NVIC_SetPriorityGrouping>:
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f003 0307 	and.w	r3, r3, #7
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	4b0c      	ldr	r3, [pc, #48]	; (8006afc <__NVIC_SetPriorityGrouping+0x44>)
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	60bb      	str	r3, [r7, #8]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	60bb      	str	r3, [r7, #8]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	021a      	lsls	r2, r3, #8
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ae8:	60bb      	str	r3, [r7, #8]
 8006aea:	4a04      	ldr	r2, [pc, #16]	; (8006afc <__NVIC_SetPriorityGrouping+0x44>)
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	60d3      	str	r3, [r2, #12]
 8006af0:	bf00      	nop
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	e000ed00 	.word	0xe000ed00

08006b00 <__NVIC_GetPriorityGrouping>:
 8006b00:	b480      	push	{r7}
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	4b04      	ldr	r3, [pc, #16]	; (8006b18 <__NVIC_GetPriorityGrouping+0x18>)
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	0a1b      	lsrs	r3, r3, #8
 8006b0a:	f003 0307 	and.w	r3, r3, #7
 8006b0e:	4618      	mov	r0, r3
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr
 8006b18:	e000ed00 	.word	0xe000ed00

08006b1c <__NVIC_EnableIRQ>:
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	4603      	mov	r3, r0
 8006b24:	71fb      	strb	r3, [r7, #7]
 8006b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	db0b      	blt.n	8006b46 <__NVIC_EnableIRQ+0x2a>
 8006b2e:	79fb      	ldrb	r3, [r7, #7]
 8006b30:	f003 021f 	and.w	r2, r3, #31
 8006b34:	4907      	ldr	r1, [pc, #28]	; (8006b54 <__NVIC_EnableIRQ+0x38>)
 8006b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b3a:	095b      	lsrs	r3, r3, #5
 8006b3c:	2001      	movs	r0, #1
 8006b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8006b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006b46:	bf00      	nop
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	e000e100 	.word	0xe000e100

08006b58 <__NVIC_SetPriority>:
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	4603      	mov	r3, r0
 8006b60:	6039      	str	r1, [r7, #0]
 8006b62:	71fb      	strb	r3, [r7, #7]
 8006b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	db0a      	blt.n	8006b82 <__NVIC_SetPriority+0x2a>
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	490c      	ldr	r1, [pc, #48]	; (8006ba4 <__NVIC_SetPriority+0x4c>)
 8006b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b76:	0112      	lsls	r2, r2, #4
 8006b78:	b2d2      	uxtb	r2, r2
 8006b7a:	440b      	add	r3, r1
 8006b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8006b80:	e00a      	b.n	8006b98 <__NVIC_SetPriority+0x40>
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	4908      	ldr	r1, [pc, #32]	; (8006ba8 <__NVIC_SetPriority+0x50>)
 8006b88:	79fb      	ldrb	r3, [r7, #7]
 8006b8a:	f003 030f 	and.w	r3, r3, #15
 8006b8e:	3b04      	subs	r3, #4
 8006b90:	0112      	lsls	r2, r2, #4
 8006b92:	b2d2      	uxtb	r2, r2
 8006b94:	440b      	add	r3, r1
 8006b96:	761a      	strb	r2, [r3, #24]
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	e000e100 	.word	0xe000e100
 8006ba8:	e000ed00 	.word	0xe000ed00

08006bac <NVIC_EncodePriority>:
 8006bac:	b480      	push	{r7}
 8006bae:	b089      	sub	sp, #36	; 0x24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f003 0307 	and.w	r3, r3, #7
 8006bbe:	61fb      	str	r3, [r7, #28]
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	f1c3 0307 	rsb	r3, r3, #7
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	bf28      	it	cs
 8006bca:	2304      	movcs	r3, #4
 8006bcc:	61bb      	str	r3, [r7, #24]
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	2b06      	cmp	r3, #6
 8006bd4:	d902      	bls.n	8006bdc <NVIC_EncodePriority+0x30>
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	3b03      	subs	r3, #3
 8006bda:	e000      	b.n	8006bde <NVIC_EncodePriority+0x32>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	617b      	str	r3, [r7, #20]
 8006be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bea:	43da      	mvns	r2, r3
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	401a      	ands	r2, r3
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	409a      	lsls	r2, r3
 8006bf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8006bfe:	43d9      	mvns	r1, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	400b      	ands	r3, r1
 8006c04:	4313      	orrs	r3, r2
 8006c06:	4618      	mov	r0, r3
 8006c08:	3724      	adds	r7, #36	; 0x24
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
	...

08006c14 <SysTick_Config>:
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c24:	d301      	bcc.n	8006c2a <SysTick_Config+0x16>
 8006c26:	2301      	movs	r3, #1
 8006c28:	e00f      	b.n	8006c4a <SysTick_Config+0x36>
 8006c2a:	4a0a      	ldr	r2, [pc, #40]	; (8006c54 <SysTick_Config+0x40>)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	6053      	str	r3, [r2, #4]
 8006c32:	210f      	movs	r1, #15
 8006c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c38:	f7ff ff8e 	bl	8006b58 <__NVIC_SetPriority>
 8006c3c:	4b05      	ldr	r3, [pc, #20]	; (8006c54 <SysTick_Config+0x40>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	609a      	str	r2, [r3, #8]
 8006c42:	4b04      	ldr	r3, [pc, #16]	; (8006c54 <SysTick_Config+0x40>)
 8006c44:	2207      	movs	r2, #7
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	2300      	movs	r3, #0
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	e000e010 	.word	0xe000e010

08006c58 <HAL_NVIC_SetPriorityGrouping>:
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f7ff ff29 	bl	8006ab8 <__NVIC_SetPriorityGrouping>
 8006c66:	bf00      	nop
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <HAL_NVIC_SetPriority>:
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b086      	sub	sp, #24
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	4603      	mov	r3, r0
 8006c76:	60b9      	str	r1, [r7, #8]
 8006c78:	607a      	str	r2, [r7, #4]
 8006c7a:	73fb      	strb	r3, [r7, #15]
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	617b      	str	r3, [r7, #20]
 8006c80:	f7ff ff3e 	bl	8006b00 <__NVIC_GetPriorityGrouping>
 8006c84:	6178      	str	r0, [r7, #20]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	68b9      	ldr	r1, [r7, #8]
 8006c8a:	6978      	ldr	r0, [r7, #20]
 8006c8c:	f7ff ff8e 	bl	8006bac <NVIC_EncodePriority>
 8006c90:	4602      	mov	r2, r0
 8006c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c96:	4611      	mov	r1, r2
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7ff ff5d 	bl	8006b58 <__NVIC_SetPriority>
 8006c9e:	bf00      	nop
 8006ca0:	3718      	adds	r7, #24
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <HAL_NVIC_EnableIRQ>:
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b082      	sub	sp, #8
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	4603      	mov	r3, r0
 8006cae:	71fb      	strb	r3, [r7, #7]
 8006cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7ff ff31 	bl	8006b1c <__NVIC_EnableIRQ>
 8006cba:	bf00      	nop
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <HAL_SYSTICK_Config>:
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b082      	sub	sp, #8
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7ff ffa2 	bl	8006c14 <SysTick_Config>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <HAL_DMA_Abort>:
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b084      	sub	sp, #16
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	f7ff feb6 	bl	8006a58 <HAL_GetTick>
 8006cec:	60b8      	str	r0, [r7, #8]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d008      	beq.n	8006d0c <HAL_DMA_Abort+0x32>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2280      	movs	r2, #128	; 0x80
 8006cfe:	655a      	str	r2, [r3, #84]	; 0x54
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e052      	b.n	8006db2 <HAL_DMA_Abort+0xd8>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f022 0216 	bic.w	r2, r2, #22
 8006d1a:	601a      	str	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	695a      	ldr	r2, [r3, #20]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d2a:	615a      	str	r2, [r3, #20]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d103      	bne.n	8006d3c <HAL_DMA_Abort+0x62>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d007      	beq.n	8006d4c <HAL_DMA_Abort+0x72>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 0208 	bic.w	r2, r2, #8
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0201 	bic.w	r2, r2, #1
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	e013      	b.n	8006d86 <HAL_DMA_Abort+0xac>
 8006d5e:	f7ff fe7b 	bl	8006a58 <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	2b05      	cmp	r3, #5
 8006d6a:	d90c      	bls.n	8006d86 <HAL_DMA_Abort+0xac>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	655a      	str	r2, [r3, #84]	; 0x54
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2203      	movs	r2, #3
 8006d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8006d82:	2303      	movs	r3, #3
 8006d84:	e015      	b.n	8006db2 <HAL_DMA_Abort+0xd8>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0301 	and.w	r3, r3, #1
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1e4      	bne.n	8006d5e <HAL_DMA_Abort+0x84>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d98:	223f      	movs	r2, #63	; 0x3f
 8006d9a:	409a      	lsls	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	609a      	str	r2, [r3, #8]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8006db0:	2300      	movs	r3, #0
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <HAL_DMA_Abort_IT>:
 8006dba:	b480      	push	{r7}
 8006dbc:	b083      	sub	sp, #12
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d004      	beq.n	8006dd8 <HAL_DMA_Abort_IT+0x1e>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2280      	movs	r2, #128	; 0x80
 8006dd2:	655a      	str	r2, [r3, #84]	; 0x54
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e00c      	b.n	8006df2 <HAL_DMA_Abort_IT+0x38>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2205      	movs	r2, #5
 8006ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 0201 	bic.w	r2, r2, #1
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	2300      	movs	r3, #0
 8006df2:	4618      	mov	r0, r3
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <HAL_DMA_GetState>:
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	4618      	mov	r0, r3
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
	...

08006e1c <HAL_GPIO_Init>:
 8006e1c:	b480      	push	{r7}
 8006e1e:	b089      	sub	sp, #36	; 0x24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
 8006e26:	2300      	movs	r3, #0
 8006e28:	617b      	str	r3, [r7, #20]
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	613b      	str	r3, [r7, #16]
 8006e2e:	2300      	movs	r3, #0
 8006e30:	61bb      	str	r3, [r7, #24]
 8006e32:	2300      	movs	r3, #0
 8006e34:	61fb      	str	r3, [r7, #28]
 8006e36:	e16b      	b.n	8007110 <HAL_GPIO_Init+0x2f4>
 8006e38:	2201      	movs	r2, #1
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e40:	617b      	str	r3, [r7, #20]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	4013      	ands	r3, r2
 8006e4a:	613b      	str	r3, [r7, #16]
 8006e4c:	693a      	ldr	r2, [r7, #16]
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	f040 815a 	bne.w	800710a <HAL_GPIO_Init+0x2ee>
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f003 0303 	and.w	r3, r3, #3
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d005      	beq.n	8006e6e <HAL_GPIO_Init+0x52>
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d130      	bne.n	8006ed0 <HAL_GPIO_Init+0xb4>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	61bb      	str	r3, [r7, #24]
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	005b      	lsls	r3, r3, #1
 8006e78:	2203      	movs	r2, #3
 8006e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7e:	43db      	mvns	r3, r3
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	4013      	ands	r3, r2
 8006e84:	61bb      	str	r3, [r7, #24]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	68da      	ldr	r2, [r3, #12]
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	005b      	lsls	r3, r3, #1
 8006e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e92:	69ba      	ldr	r2, [r7, #24]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	61bb      	str	r3, [r7, #24]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	609a      	str	r2, [r3, #8]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	61bb      	str	r3, [r7, #24]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8006eac:	43db      	mvns	r3, r3
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	61bb      	str	r3, [r7, #24]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	091b      	lsrs	r3, r3, #4
 8006eba:	f003 0201 	and.w	r2, r3, #1
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec4:	69ba      	ldr	r2, [r7, #24]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	61bb      	str	r3, [r7, #24]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	69ba      	ldr	r2, [r7, #24]
 8006ece:	605a      	str	r2, [r3, #4]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f003 0303 	and.w	r3, r3, #3
 8006ed8:	2b03      	cmp	r3, #3
 8006eda:	d017      	beq.n	8006f0c <HAL_GPIO_Init+0xf0>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	61bb      	str	r3, [r7, #24]
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	005b      	lsls	r3, r3, #1
 8006ee6:	2203      	movs	r2, #3
 8006ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8006eec:	43db      	mvns	r3, r3
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	61bb      	str	r3, [r7, #24]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	005b      	lsls	r3, r3, #1
 8006efc:	fa02 f303 	lsl.w	r3, r2, r3
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	61bb      	str	r3, [r7, #24]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	60da      	str	r2, [r3, #12]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f003 0303 	and.w	r3, r3, #3
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d123      	bne.n	8006f60 <HAL_GPIO_Init+0x144>
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	08da      	lsrs	r2, r3, #3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	3208      	adds	r2, #8
 8006f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f24:	61bb      	str	r3, [r7, #24]
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	f003 0307 	and.w	r3, r3, #7
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	220f      	movs	r2, #15
 8006f30:	fa02 f303 	lsl.w	r3, r2, r3
 8006f34:	43db      	mvns	r3, r3
 8006f36:	69ba      	ldr	r2, [r7, #24]
 8006f38:	4013      	ands	r3, r2
 8006f3a:	61bb      	str	r3, [r7, #24]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	691a      	ldr	r2, [r3, #16]
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	f003 0307 	and.w	r3, r3, #7
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	61bb      	str	r3, [r7, #24]
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	08da      	lsrs	r2, r3, #3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	3208      	adds	r2, #8
 8006f5a:	69b9      	ldr	r1, [r7, #24]
 8006f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	61bb      	str	r3, [r7, #24]
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	005b      	lsls	r3, r3, #1
 8006f6a:	2203      	movs	r2, #3
 8006f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f70:	43db      	mvns	r3, r3
 8006f72:	69ba      	ldr	r2, [r7, #24]
 8006f74:	4013      	ands	r3, r2
 8006f76:	61bb      	str	r3, [r7, #24]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f003 0203 	and.w	r2, r3, #3
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	005b      	lsls	r3, r3, #1
 8006f84:	fa02 f303 	lsl.w	r3, r2, r3
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	61bb      	str	r3, [r7, #24]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	601a      	str	r2, [r3, #0]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f000 80b4 	beq.w	800710a <HAL_GPIO_Init+0x2ee>
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	60fb      	str	r3, [r7, #12]
 8006fa6:	4b60      	ldr	r3, [pc, #384]	; (8007128 <HAL_GPIO_Init+0x30c>)
 8006fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006faa:	4a5f      	ldr	r2, [pc, #380]	; (8007128 <HAL_GPIO_Init+0x30c>)
 8006fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8006fb2:	4b5d      	ldr	r3, [pc, #372]	; (8007128 <HAL_GPIO_Init+0x30c>)
 8006fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fba:	60fb      	str	r3, [r7, #12]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4a5b      	ldr	r2, [pc, #364]	; (800712c <HAL_GPIO_Init+0x310>)
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	089b      	lsrs	r3, r3, #2
 8006fc4:	3302      	adds	r3, #2
 8006fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fca:	61bb      	str	r3, [r7, #24]
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	f003 0303 	and.w	r3, r3, #3
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	220f      	movs	r2, #15
 8006fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fda:	43db      	mvns	r3, r3
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	4013      	ands	r3, r2
 8006fe0:	61bb      	str	r3, [r7, #24]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a52      	ldr	r2, [pc, #328]	; (8007130 <HAL_GPIO_Init+0x314>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d02b      	beq.n	8007042 <HAL_GPIO_Init+0x226>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a51      	ldr	r2, [pc, #324]	; (8007134 <HAL_GPIO_Init+0x318>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d025      	beq.n	800703e <HAL_GPIO_Init+0x222>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a50      	ldr	r2, [pc, #320]	; (8007138 <HAL_GPIO_Init+0x31c>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d01f      	beq.n	800703a <HAL_GPIO_Init+0x21e>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a4f      	ldr	r2, [pc, #316]	; (800713c <HAL_GPIO_Init+0x320>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d019      	beq.n	8007036 <HAL_GPIO_Init+0x21a>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a4e      	ldr	r2, [pc, #312]	; (8007140 <HAL_GPIO_Init+0x324>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d013      	beq.n	8007032 <HAL_GPIO_Init+0x216>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a4d      	ldr	r2, [pc, #308]	; (8007144 <HAL_GPIO_Init+0x328>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d00d      	beq.n	800702e <HAL_GPIO_Init+0x212>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a4c      	ldr	r2, [pc, #304]	; (8007148 <HAL_GPIO_Init+0x32c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d007      	beq.n	800702a <HAL_GPIO_Init+0x20e>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a4b      	ldr	r2, [pc, #300]	; (800714c <HAL_GPIO_Init+0x330>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d101      	bne.n	8007026 <HAL_GPIO_Init+0x20a>
 8007022:	2307      	movs	r3, #7
 8007024:	e00e      	b.n	8007044 <HAL_GPIO_Init+0x228>
 8007026:	2308      	movs	r3, #8
 8007028:	e00c      	b.n	8007044 <HAL_GPIO_Init+0x228>
 800702a:	2306      	movs	r3, #6
 800702c:	e00a      	b.n	8007044 <HAL_GPIO_Init+0x228>
 800702e:	2305      	movs	r3, #5
 8007030:	e008      	b.n	8007044 <HAL_GPIO_Init+0x228>
 8007032:	2304      	movs	r3, #4
 8007034:	e006      	b.n	8007044 <HAL_GPIO_Init+0x228>
 8007036:	2303      	movs	r3, #3
 8007038:	e004      	b.n	8007044 <HAL_GPIO_Init+0x228>
 800703a:	2302      	movs	r3, #2
 800703c:	e002      	b.n	8007044 <HAL_GPIO_Init+0x228>
 800703e:	2301      	movs	r3, #1
 8007040:	e000      	b.n	8007044 <HAL_GPIO_Init+0x228>
 8007042:	2300      	movs	r3, #0
 8007044:	69fa      	ldr	r2, [r7, #28]
 8007046:	f002 0203 	and.w	r2, r2, #3
 800704a:	0092      	lsls	r2, r2, #2
 800704c:	4093      	lsls	r3, r2
 800704e:	69ba      	ldr	r2, [r7, #24]
 8007050:	4313      	orrs	r3, r2
 8007052:	61bb      	str	r3, [r7, #24]
 8007054:	4935      	ldr	r1, [pc, #212]	; (800712c <HAL_GPIO_Init+0x310>)
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	089b      	lsrs	r3, r3, #2
 800705a:	3302      	adds	r3, #2
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007062:	4b3b      	ldr	r3, [pc, #236]	; (8007150 <HAL_GPIO_Init+0x334>)
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	61bb      	str	r3, [r7, #24]
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	43db      	mvns	r3, r3
 800706c:	69ba      	ldr	r2, [r7, #24]
 800706e:	4013      	ands	r3, r2
 8007070:	61bb      	str	r3, [r7, #24]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <HAL_GPIO_Init+0x26a>
 800707e:	69ba      	ldr	r2, [r7, #24]
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	4313      	orrs	r3, r2
 8007084:	61bb      	str	r3, [r7, #24]
 8007086:	4a32      	ldr	r2, [pc, #200]	; (8007150 <HAL_GPIO_Init+0x334>)
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	6093      	str	r3, [r2, #8]
 800708c:	4b30      	ldr	r3, [pc, #192]	; (8007150 <HAL_GPIO_Init+0x334>)
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	61bb      	str	r3, [r7, #24]
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	43db      	mvns	r3, r3
 8007096:	69ba      	ldr	r2, [r7, #24]
 8007098:	4013      	ands	r3, r2
 800709a:	61bb      	str	r3, [r7, #24]
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d003      	beq.n	80070b0 <HAL_GPIO_Init+0x294>
 80070a8:	69ba      	ldr	r2, [r7, #24]
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	61bb      	str	r3, [r7, #24]
 80070b0:	4a27      	ldr	r2, [pc, #156]	; (8007150 <HAL_GPIO_Init+0x334>)
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	60d3      	str	r3, [r2, #12]
 80070b6:	4b26      	ldr	r3, [pc, #152]	; (8007150 <HAL_GPIO_Init+0x334>)
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	61bb      	str	r3, [r7, #24]
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	43db      	mvns	r3, r3
 80070c0:	69ba      	ldr	r2, [r7, #24]
 80070c2:	4013      	ands	r3, r2
 80070c4:	61bb      	str	r3, [r7, #24]
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d003      	beq.n	80070da <HAL_GPIO_Init+0x2be>
 80070d2:	69ba      	ldr	r2, [r7, #24]
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	61bb      	str	r3, [r7, #24]
 80070da:	4a1d      	ldr	r2, [pc, #116]	; (8007150 <HAL_GPIO_Init+0x334>)
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	6053      	str	r3, [r2, #4]
 80070e0:	4b1b      	ldr	r3, [pc, #108]	; (8007150 <HAL_GPIO_Init+0x334>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	61bb      	str	r3, [r7, #24]
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	43db      	mvns	r3, r3
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	4013      	ands	r3, r2
 80070ee:	61bb      	str	r3, [r7, #24]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d003      	beq.n	8007104 <HAL_GPIO_Init+0x2e8>
 80070fc:	69ba      	ldr	r2, [r7, #24]
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	4313      	orrs	r3, r2
 8007102:	61bb      	str	r3, [r7, #24]
 8007104:	4a12      	ldr	r2, [pc, #72]	; (8007150 <HAL_GPIO_Init+0x334>)
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	6013      	str	r3, [r2, #0]
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	3301      	adds	r3, #1
 800710e:	61fb      	str	r3, [r7, #28]
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	2b0f      	cmp	r3, #15
 8007114:	f67f ae90 	bls.w	8006e38 <HAL_GPIO_Init+0x1c>
 8007118:	bf00      	nop
 800711a:	bf00      	nop
 800711c:	3724      	adds	r7, #36	; 0x24
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	40023800 	.word	0x40023800
 800712c:	40013800 	.word	0x40013800
 8007130:	40020000 	.word	0x40020000
 8007134:	40020400 	.word	0x40020400
 8007138:	40020800 	.word	0x40020800
 800713c:	40020c00 	.word	0x40020c00
 8007140:	40021000 	.word	0x40021000
 8007144:	40021400 	.word	0x40021400
 8007148:	40021800 	.word	0x40021800
 800714c:	40021c00 	.word	0x40021c00
 8007150:	40013c00 	.word	0x40013c00

08007154 <HAL_GPIO_WritePin>:
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	807b      	strh	r3, [r7, #2]
 8007160:	4613      	mov	r3, r2
 8007162:	707b      	strb	r3, [r7, #1]
 8007164:	787b      	ldrb	r3, [r7, #1]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <HAL_GPIO_WritePin+0x1e>
 800716a:	887a      	ldrh	r2, [r7, #2]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	619a      	str	r2, [r3, #24]
 8007170:	e003      	b.n	800717a <HAL_GPIO_WritePin+0x26>
 8007172:	887b      	ldrh	r3, [r7, #2]
 8007174:	041a      	lsls	r2, r3, #16
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	619a      	str	r2, [r3, #24]
 800717a:	bf00      	nop
 800717c:	370c      	adds	r7, #12
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <HAL_GPIO_TogglePin>:
 8007186:	b480      	push	{r7}
 8007188:	b085      	sub	sp, #20
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	460b      	mov	r3, r1
 8007190:	807b      	strh	r3, [r7, #2]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	887a      	ldrh	r2, [r7, #2]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	4013      	ands	r3, r2
 800719e:	041a      	lsls	r2, r3, #16
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	43d9      	mvns	r1, r3
 80071a4:	887b      	ldrh	r3, [r7, #2]
 80071a6:	400b      	ands	r3, r1
 80071a8:	431a      	orrs	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	619a      	str	r2, [r3, #24]
 80071ae:	bf00      	nop
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
	...

080071bc <HAL_I2C_Init>:
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <HAL_I2C_Init+0x12>
 80071ca:	2301      	movs	r3, #1
 80071cc:	e12b      	b.n	8007426 <HAL_I2C_Init+0x26a>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d106      	bne.n	80071e8 <HAL_I2C_Init+0x2c>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7ff f86c 	bl	80062c0 <HAL_I2C_MspInit>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2224      	movs	r2, #36	; 0x24
 80071ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f022 0201 	bic.w	r2, r2, #1
 80071fe:	601a      	str	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	f002 ff7e 	bl	800a120 <HAL_RCC_GetPCLK1Freq>
 8007224:	60f8      	str	r0, [r7, #12]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	4a81      	ldr	r2, [pc, #516]	; (8007430 <HAL_I2C_Init+0x274>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d807      	bhi.n	8007240 <HAL_I2C_Init+0x84>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	4a80      	ldr	r2, [pc, #512]	; (8007434 <HAL_I2C_Init+0x278>)
 8007234:	4293      	cmp	r3, r2
 8007236:	bf94      	ite	ls
 8007238:	2301      	movls	r3, #1
 800723a:	2300      	movhi	r3, #0
 800723c:	b2db      	uxtb	r3, r3
 800723e:	e006      	b.n	800724e <HAL_I2C_Init+0x92>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	4a7d      	ldr	r2, [pc, #500]	; (8007438 <HAL_I2C_Init+0x27c>)
 8007244:	4293      	cmp	r3, r2
 8007246:	bf94      	ite	ls
 8007248:	2301      	movls	r3, #1
 800724a:	2300      	movhi	r3, #0
 800724c:	b2db      	uxtb	r3, r3
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <HAL_I2C_Init+0x9a>
 8007252:	2301      	movs	r3, #1
 8007254:	e0e7      	b.n	8007426 <HAL_I2C_Init+0x26a>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	4a78      	ldr	r2, [pc, #480]	; (800743c <HAL_I2C_Init+0x280>)
 800725a:	fba2 2303 	umull	r2, r3, r2, r3
 800725e:	0c9b      	lsrs	r3, r3, #18
 8007260:	60bb      	str	r3, [r7, #8]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68ba      	ldr	r2, [r7, #8]
 8007272:	430a      	orrs	r2, r1
 8007274:	605a      	str	r2, [r3, #4]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	4a6a      	ldr	r2, [pc, #424]	; (8007430 <HAL_I2C_Init+0x274>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d802      	bhi.n	8007290 <HAL_I2C_Init+0xd4>
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	3301      	adds	r3, #1
 800728e:	e009      	b.n	80072a4 <HAL_I2C_Init+0xe8>
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007296:	fb02 f303 	mul.w	r3, r2, r3
 800729a:	4a69      	ldr	r2, [pc, #420]	; (8007440 <HAL_I2C_Init+0x284>)
 800729c:	fba2 2303 	umull	r2, r3, r2, r3
 80072a0:	099b      	lsrs	r3, r3, #6
 80072a2:	3301      	adds	r3, #1
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	6812      	ldr	r2, [r2, #0]
 80072a8:	430b      	orrs	r3, r1
 80072aa:	6213      	str	r3, [r2, #32]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80072b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	495c      	ldr	r1, [pc, #368]	; (8007430 <HAL_I2C_Init+0x274>)
 80072c0:	428b      	cmp	r3, r1
 80072c2:	d819      	bhi.n	80072f8 <HAL_I2C_Init+0x13c>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	1e59      	subs	r1, r3, #1
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	005b      	lsls	r3, r3, #1
 80072ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80072d2:	1c59      	adds	r1, r3, #1
 80072d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80072d8:	400b      	ands	r3, r1
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00a      	beq.n	80072f4 <HAL_I2C_Init+0x138>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	1e59      	subs	r1, r3, #1
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80072ec:	3301      	adds	r3, #1
 80072ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072f2:	e051      	b.n	8007398 <HAL_I2C_Init+0x1dc>
 80072f4:	2304      	movs	r3, #4
 80072f6:	e04f      	b.n	8007398 <HAL_I2C_Init+0x1dc>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d111      	bne.n	8007324 <HAL_I2C_Init+0x168>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	1e58      	subs	r0, r3, #1
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6859      	ldr	r1, [r3, #4]
 8007308:	460b      	mov	r3, r1
 800730a:	005b      	lsls	r3, r3, #1
 800730c:	440b      	add	r3, r1
 800730e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007312:	3301      	adds	r3, #1
 8007314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007318:	2b00      	cmp	r3, #0
 800731a:	bf0c      	ite	eq
 800731c:	2301      	moveq	r3, #1
 800731e:	2300      	movne	r3, #0
 8007320:	b2db      	uxtb	r3, r3
 8007322:	e012      	b.n	800734a <HAL_I2C_Init+0x18e>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	1e58      	subs	r0, r3, #1
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6859      	ldr	r1, [r3, #4]
 800732c:	460b      	mov	r3, r1
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	440b      	add	r3, r1
 8007332:	0099      	lsls	r1, r3, #2
 8007334:	440b      	add	r3, r1
 8007336:	fbb0 f3f3 	udiv	r3, r0, r3
 800733a:	3301      	adds	r3, #1
 800733c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007340:	2b00      	cmp	r3, #0
 8007342:	bf0c      	ite	eq
 8007344:	2301      	moveq	r3, #1
 8007346:	2300      	movne	r3, #0
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b00      	cmp	r3, #0
 800734c:	d001      	beq.n	8007352 <HAL_I2C_Init+0x196>
 800734e:	2301      	movs	r3, #1
 8007350:	e022      	b.n	8007398 <HAL_I2C_Init+0x1dc>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10e      	bne.n	8007378 <HAL_I2C_Init+0x1bc>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	1e58      	subs	r0, r3, #1
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6859      	ldr	r1, [r3, #4]
 8007362:	460b      	mov	r3, r1
 8007364:	005b      	lsls	r3, r3, #1
 8007366:	440b      	add	r3, r1
 8007368:	fbb0 f3f3 	udiv	r3, r0, r3
 800736c:	3301      	adds	r3, #1
 800736e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007376:	e00f      	b.n	8007398 <HAL_I2C_Init+0x1dc>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	1e58      	subs	r0, r3, #1
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6859      	ldr	r1, [r3, #4]
 8007380:	460b      	mov	r3, r1
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	440b      	add	r3, r1
 8007386:	0099      	lsls	r1, r3, #2
 8007388:	440b      	add	r3, r1
 800738a:	fbb0 f3f3 	udiv	r3, r0, r3
 800738e:	3301      	adds	r3, #1
 8007390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007398:	6879      	ldr	r1, [r7, #4]
 800739a:	6809      	ldr	r1, [r1, #0]
 800739c:	4313      	orrs	r3, r2
 800739e:	61cb      	str	r3, [r1, #28]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	69da      	ldr	r2, [r3, #28]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	431a      	orrs	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	430a      	orrs	r2, r1
 80073ba:	601a      	str	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80073c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	6911      	ldr	r1, [r2, #16]
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	68d2      	ldr	r2, [r2, #12]
 80073d2:	4311      	orrs	r1, r2
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	6812      	ldr	r2, [r2, #0]
 80073d8:	430b      	orrs	r3, r1
 80073da:	6093      	str	r3, [r2, #8]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	695a      	ldr	r2, [r3, #20]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	431a      	orrs	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	430a      	orrs	r2, r1
 80073f6:	60da      	str	r2, [r3, #12]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f042 0201 	orr.w	r2, r2, #1
 8007406:	601a      	str	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	641a      	str	r2, [r3, #64]	; 0x40
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2220      	movs	r2, #32
 8007412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	631a      	str	r2, [r3, #48]	; 0x30
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007424:	2300      	movs	r3, #0
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	000186a0 	.word	0x000186a0
 8007434:	001e847f 	.word	0x001e847f
 8007438:	003d08ff 	.word	0x003d08ff
 800743c:	431bde83 	.word	0x431bde83
 8007440:	10624dd3 	.word	0x10624dd3

08007444 <HAL_I2C_Master_Transmit>:
 8007444:	b580      	push	{r7, lr}
 8007446:	b088      	sub	sp, #32
 8007448:	af02      	add	r7, sp, #8
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	607a      	str	r2, [r7, #4]
 800744e:	461a      	mov	r2, r3
 8007450:	460b      	mov	r3, r1
 8007452:	817b      	strh	r3, [r7, #10]
 8007454:	4613      	mov	r3, r2
 8007456:	813b      	strh	r3, [r7, #8]
 8007458:	f7ff fafe 	bl	8006a58 <HAL_GetTick>
 800745c:	6178      	str	r0, [r7, #20]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b20      	cmp	r3, #32
 8007468:	f040 80e0 	bne.w	800762c <HAL_I2C_Master_Transmit+0x1e8>
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	2319      	movs	r3, #25
 8007472:	2201      	movs	r2, #1
 8007474:	4970      	ldr	r1, [pc, #448]	; (8007638 <HAL_I2C_Master_Transmit+0x1f4>)
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f001 ffd0 	bl	800941c <I2C_WaitOnFlagUntilTimeout>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d001      	beq.n	8007486 <HAL_I2C_Master_Transmit+0x42>
 8007482:	2302      	movs	r3, #2
 8007484:	e0d3      	b.n	800762e <HAL_I2C_Master_Transmit+0x1ea>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800748c:	2b01      	cmp	r3, #1
 800748e:	d101      	bne.n	8007494 <HAL_I2C_Master_Transmit+0x50>
 8007490:	2302      	movs	r3, #2
 8007492:	e0cc      	b.n	800762e <HAL_I2C_Master_Transmit+0x1ea>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d007      	beq.n	80074ba <HAL_I2C_Master_Transmit+0x76>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f042 0201 	orr.w	r2, r2, #1
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074c8:	601a      	str	r2, [r3, #0]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2221      	movs	r2, #33	; 0x21
 80074ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2210      	movs	r2, #16
 80074d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	641a      	str	r2, [r3, #64]	; 0x40
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	625a      	str	r2, [r3, #36]	; 0x24
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	893a      	ldrh	r2, [r7, #8]
 80074ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	851a      	strh	r2, [r3, #40]	; 0x28
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	4a50      	ldr	r2, [pc, #320]	; (800763c <HAL_I2C_Master_Transmit+0x1f8>)
 80074fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80074fc:	8979      	ldrh	r1, [r7, #10]
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	6a3a      	ldr	r2, [r7, #32]
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f001 fd92 	bl	800902c <I2C_MasterRequestWrite>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <HAL_I2C_Master_Transmit+0xce>
 800750e:	2301      	movs	r3, #1
 8007510:	e08d      	b.n	800762e <HAL_I2C_Master_Transmit+0x1ea>
 8007512:	2300      	movs	r3, #0
 8007514:	613b      	str	r3, [r7, #16]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	613b      	str	r3, [r7, #16]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	613b      	str	r3, [r7, #16]
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	e066      	b.n	80075f8 <HAL_I2C_Master_Transmit+0x1b4>
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	6a39      	ldr	r1, [r7, #32]
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f002 f84a 	bl	80095c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00d      	beq.n	8007556 <HAL_I2C_Master_Transmit+0x112>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753e:	2b04      	cmp	r3, #4
 8007540:	d107      	bne.n	8007552 <HAL_I2C_Master_Transmit+0x10e>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007550:	601a      	str	r2, [r3, #0]
 8007552:	2301      	movs	r3, #1
 8007554:	e06b      	b.n	800762e <HAL_I2C_Master_Transmit+0x1ea>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	781a      	ldrb	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	611a      	str	r2, [r3, #16]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	1c5a      	adds	r2, r3, #1
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	625a      	str	r2, [r3, #36]	; 0x24
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007570:	b29b      	uxth	r3, r3
 8007572:	3b01      	subs	r3, #1
 8007574:	b29a      	uxth	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	855a      	strh	r2, [r3, #42]	; 0x2a
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800757e:	3b01      	subs	r3, #1
 8007580:	b29a      	uxth	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	851a      	strh	r2, [r3, #40]	; 0x28
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	f003 0304 	and.w	r3, r3, #4
 8007590:	2b04      	cmp	r3, #4
 8007592:	d11b      	bne.n	80075cc <HAL_I2C_Master_Transmit+0x188>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007598:	2b00      	cmp	r3, #0
 800759a:	d017      	beq.n	80075cc <HAL_I2C_Master_Transmit+0x188>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a0:	781a      	ldrb	r2, [r3, #0]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	611a      	str	r2, [r3, #16]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ac:	1c5a      	adds	r2, r3, #1
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	625a      	str	r2, [r3, #36]	; 0x24
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	3b01      	subs	r3, #1
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075c4:	3b01      	subs	r3, #1
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	851a      	strh	r2, [r3, #40]	; 0x28
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	6a39      	ldr	r1, [r7, #32]
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f002 f83a 	bl	800964a <I2C_WaitOnBTFFlagUntilTimeout>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00d      	beq.n	80075f8 <HAL_I2C_Master_Transmit+0x1b4>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e0:	2b04      	cmp	r3, #4
 80075e2:	d107      	bne.n	80075f4 <HAL_I2C_Master_Transmit+0x1b0>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	2301      	movs	r3, #1
 80075f6:	e01a      	b.n	800762e <HAL_I2C_Master_Transmit+0x1ea>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d194      	bne.n	800752a <HAL_I2C_Master_Transmit+0xe6>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800760e:	601a      	str	r2, [r3, #0]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2220      	movs	r2, #32
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007628:	2300      	movs	r3, #0
 800762a:	e000      	b.n	800762e <HAL_I2C_Master_Transmit+0x1ea>
 800762c:	2302      	movs	r3, #2
 800762e:	4618      	mov	r0, r3
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	00100002 	.word	0x00100002
 800763c:	ffff0000 	.word	0xffff0000

08007640 <HAL_I2C_Master_Receive>:
 8007640:	b580      	push	{r7, lr}
 8007642:	b08c      	sub	sp, #48	; 0x30
 8007644:	af02      	add	r7, sp, #8
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	607a      	str	r2, [r7, #4]
 800764a:	461a      	mov	r2, r3
 800764c:	460b      	mov	r3, r1
 800764e:	817b      	strh	r3, [r7, #10]
 8007650:	4613      	mov	r3, r2
 8007652:	813b      	strh	r3, [r7, #8]
 8007654:	f7ff fa00 	bl	8006a58 <HAL_GetTick>
 8007658:	6278      	str	r0, [r7, #36]	; 0x24
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b20      	cmp	r3, #32
 8007664:	f040 820b 	bne.w	8007a7e <HAL_I2C_Master_Receive+0x43e>
 8007668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	2319      	movs	r3, #25
 800766e:	2201      	movs	r2, #1
 8007670:	497c      	ldr	r1, [pc, #496]	; (8007864 <HAL_I2C_Master_Receive+0x224>)
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f001 fed2 	bl	800941c <I2C_WaitOnFlagUntilTimeout>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <HAL_I2C_Master_Receive+0x42>
 800767e:	2302      	movs	r3, #2
 8007680:	e1fe      	b.n	8007a80 <HAL_I2C_Master_Receive+0x440>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007688:	2b01      	cmp	r3, #1
 800768a:	d101      	bne.n	8007690 <HAL_I2C_Master_Receive+0x50>
 800768c:	2302      	movs	r3, #2
 800768e:	e1f7      	b.n	8007a80 <HAL_I2C_Master_Receive+0x440>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d007      	beq.n	80076b6 <HAL_I2C_Master_Receive+0x76>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f042 0201 	orr.w	r2, r2, #1
 80076b4:	601a      	str	r2, [r3, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076c4:	601a      	str	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2222      	movs	r2, #34	; 0x22
 80076ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2210      	movs	r2, #16
 80076d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	641a      	str	r2, [r3, #64]	; 0x40
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	625a      	str	r2, [r3, #36]	; 0x24
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	893a      	ldrh	r2, [r7, #8]
 80076e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	851a      	strh	r2, [r3, #40]	; 0x28
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	4a5c      	ldr	r2, [pc, #368]	; (8007868 <HAL_I2C_Master_Receive+0x228>)
 80076f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80076f8:	8979      	ldrh	r1, [r7, #10]
 80076fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f001 fd16 	bl	8009130 <I2C_MasterRequestRead>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <HAL_I2C_Master_Receive+0xce>
 800770a:	2301      	movs	r3, #1
 800770c:	e1b8      	b.n	8007a80 <HAL_I2C_Master_Receive+0x440>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007712:	2b00      	cmp	r3, #0
 8007714:	d113      	bne.n	800773e <HAL_I2C_Master_Receive+0xfe>
 8007716:	2300      	movs	r3, #0
 8007718:	623b      	str	r3, [r7, #32]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	623b      	str	r3, [r7, #32]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	623b      	str	r3, [r7, #32]
 800772a:	6a3b      	ldr	r3, [r7, #32]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800773a:	601a      	str	r2, [r3, #0]
 800773c:	e18c      	b.n	8007a58 <HAL_I2C_Master_Receive+0x418>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007742:	2b01      	cmp	r3, #1
 8007744:	d11b      	bne.n	800777e <HAL_I2C_Master_Receive+0x13e>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007754:	601a      	str	r2, [r3, #0]
 8007756:	2300      	movs	r3, #0
 8007758:	61fb      	str	r3, [r7, #28]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	695b      	ldr	r3, [r3, #20]
 8007760:	61fb      	str	r3, [r7, #28]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	61fb      	str	r3, [r7, #28]
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	e16c      	b.n	8007a58 <HAL_I2C_Master_Receive+0x418>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007782:	2b02      	cmp	r3, #2
 8007784:	d11b      	bne.n	80077be <HAL_I2C_Master_Receive+0x17e>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077a4:	601a      	str	r2, [r3, #0]
 80077a6:	2300      	movs	r3, #0
 80077a8:	61bb      	str	r3, [r7, #24]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	61bb      	str	r3, [r7, #24]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	61bb      	str	r3, [r7, #24]
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	e14c      	b.n	8007a58 <HAL_I2C_Master_Receive+0x418>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077cc:	601a      	str	r2, [r3, #0]
 80077ce:	2300      	movs	r3, #0
 80077d0:	617b      	str	r3, [r7, #20]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	617b      	str	r3, [r7, #20]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	617b      	str	r3, [r7, #20]
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	e138      	b.n	8007a58 <HAL_I2C_Master_Receive+0x418>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	f200 80f1 	bhi.w	80079d2 <HAL_I2C_Master_Receive+0x392>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d123      	bne.n	8007840 <HAL_I2C_Master_Receive+0x200>
 80077f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f001 ff97 	bl	8009730 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d001      	beq.n	800780c <HAL_I2C_Master_Receive+0x1cc>
 8007808:	2301      	movs	r3, #1
 800780a:	e139      	b.n	8007a80 <HAL_I2C_Master_Receive+0x440>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	691a      	ldr	r2, [r3, #16]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007816:	b2d2      	uxtb	r2, r2
 8007818:	701a      	strb	r2, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781e:	1c5a      	adds	r2, r3, #1
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	625a      	str	r2, [r3, #36]	; 0x24
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007828:	3b01      	subs	r3, #1
 800782a:	b29a      	uxth	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007834:	b29b      	uxth	r3, r3
 8007836:	3b01      	subs	r3, #1
 8007838:	b29a      	uxth	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800783e:	e10b      	b.n	8007a58 <HAL_I2C_Master_Receive+0x418>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007844:	2b02      	cmp	r3, #2
 8007846:	d14e      	bne.n	80078e6 <HAL_I2C_Master_Receive+0x2a6>
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784e:	2200      	movs	r2, #0
 8007850:	4906      	ldr	r1, [pc, #24]	; (800786c <HAL_I2C_Master_Receive+0x22c>)
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f001 fde2 	bl	800941c <I2C_WaitOnFlagUntilTimeout>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d008      	beq.n	8007870 <HAL_I2C_Master_Receive+0x230>
 800785e:	2301      	movs	r3, #1
 8007860:	e10e      	b.n	8007a80 <HAL_I2C_Master_Receive+0x440>
 8007862:	bf00      	nop
 8007864:	00100002 	.word	0x00100002
 8007868:	ffff0000 	.word	0xffff0000
 800786c:	00010004 	.word	0x00010004
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800787e:	601a      	str	r2, [r3, #0]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	691a      	ldr	r2, [r3, #16]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788a:	b2d2      	uxtb	r2, r2
 800788c:	701a      	strb	r2, [r3, #0]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007892:	1c5a      	adds	r2, r3, #1
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	625a      	str	r2, [r3, #36]	; 0x24
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800789c:	3b01      	subs	r3, #1
 800789e:	b29a      	uxth	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	851a      	strh	r2, [r3, #40]	; 0x28
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	3b01      	subs	r3, #1
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	691a      	ldr	r2, [r3, #16]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078bc:	b2d2      	uxtb	r2, r2
 80078be:	701a      	strb	r2, [r3, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c4:	1c5a      	adds	r2, r3, #1
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	625a      	str	r2, [r3, #36]	; 0x24
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ce:	3b01      	subs	r3, #1
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	851a      	strh	r2, [r3, #40]	; 0x28
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078da:	b29b      	uxth	r3, r3
 80078dc:	3b01      	subs	r3, #1
 80078de:	b29a      	uxth	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80078e4:	e0b8      	b.n	8007a58 <HAL_I2C_Master_Receive+0x418>
 80078e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e8:	9300      	str	r3, [sp, #0]
 80078ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ec:	2200      	movs	r2, #0
 80078ee:	4966      	ldr	r1, [pc, #408]	; (8007a88 <HAL_I2C_Master_Receive+0x448>)
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f001 fd93 	bl	800941c <I2C_WaitOnFlagUntilTimeout>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d001      	beq.n	8007900 <HAL_I2C_Master_Receive+0x2c0>
 80078fc:	2301      	movs	r3, #1
 80078fe:	e0bf      	b.n	8007a80 <HAL_I2C_Master_Receive+0x440>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800790e:	601a      	str	r2, [r3, #0]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	691a      	ldr	r2, [r3, #16]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791a:	b2d2      	uxtb	r2, r2
 800791c:	701a      	strb	r2, [r3, #0]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007922:	1c5a      	adds	r2, r3, #1
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	625a      	str	r2, [r3, #36]	; 0x24
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800792c:	3b01      	subs	r3, #1
 800792e:	b29a      	uxth	r2, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	851a      	strh	r2, [r3, #40]	; 0x28
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007938:	b29b      	uxth	r3, r3
 800793a:	3b01      	subs	r3, #1
 800793c:	b29a      	uxth	r2, r3
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007948:	2200      	movs	r2, #0
 800794a:	494f      	ldr	r1, [pc, #316]	; (8007a88 <HAL_I2C_Master_Receive+0x448>)
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f001 fd65 	bl	800941c <I2C_WaitOnFlagUntilTimeout>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d001      	beq.n	800795c <HAL_I2C_Master_Receive+0x31c>
 8007958:	2301      	movs	r3, #1
 800795a:	e091      	b.n	8007a80 <HAL_I2C_Master_Receive+0x440>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800796a:	601a      	str	r2, [r3, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	691a      	ldr	r2, [r3, #16]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007976:	b2d2      	uxtb	r2, r2
 8007978:	701a      	strb	r2, [r3, #0]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797e:	1c5a      	adds	r2, r3, #1
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	625a      	str	r2, [r3, #36]	; 0x24
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007988:	3b01      	subs	r3, #1
 800798a:	b29a      	uxth	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007994:	b29b      	uxth	r3, r3
 8007996:	3b01      	subs	r3, #1
 8007998:	b29a      	uxth	r2, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	691a      	ldr	r2, [r3, #16]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a8:	b2d2      	uxtb	r2, r2
 80079aa:	701a      	strb	r2, [r3, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b0:	1c5a      	adds	r2, r3, #1
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	625a      	str	r2, [r3, #36]	; 0x24
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ba:	3b01      	subs	r3, #1
 80079bc:	b29a      	uxth	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	851a      	strh	r2, [r3, #40]	; 0x28
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	3b01      	subs	r3, #1
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80079d0:	e042      	b.n	8007a58 <HAL_I2C_Master_Receive+0x418>
 80079d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f001 feaa 	bl	8009730 <I2C_WaitOnRXNEFlagUntilTimeout>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <HAL_I2C_Master_Receive+0x3a6>
 80079e2:	2301      	movs	r3, #1
 80079e4:	e04c      	b.n	8007a80 <HAL_I2C_Master_Receive+0x440>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	691a      	ldr	r2, [r3, #16]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f0:	b2d2      	uxtb	r2, r2
 80079f2:	701a      	strb	r2, [r3, #0]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f8:	1c5a      	adds	r2, r3, #1
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	625a      	str	r2, [r3, #36]	; 0x24
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a02:	3b01      	subs	r3, #1
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	851a      	strh	r2, [r3, #40]	; 0x28
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	3b01      	subs	r3, #1
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	f003 0304 	and.w	r3, r3, #4
 8007a22:	2b04      	cmp	r3, #4
 8007a24:	d118      	bne.n	8007a58 <HAL_I2C_Master_Receive+0x418>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	691a      	ldr	r2, [r3, #16]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a30:	b2d2      	uxtb	r2, r2
 8007a32:	701a      	strb	r2, [r3, #0]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a38:	1c5a      	adds	r2, r3, #1
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	625a      	str	r2, [r3, #36]	; 0x24
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a42:	3b01      	subs	r3, #1
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	851a      	strh	r2, [r3, #40]	; 0x28
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	3b01      	subs	r3, #1
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f47f aec2 	bne.w	80077e6 <HAL_I2C_Master_Receive+0x1a6>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2220      	movs	r2, #32
 8007a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	e000      	b.n	8007a80 <HAL_I2C_Master_Receive+0x440>
 8007a7e:	2302      	movs	r3, #2
 8007a80:	4618      	mov	r0, r3
 8007a82:	3728      	adds	r7, #40	; 0x28
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	00010004 	.word	0x00010004

08007a8c <HAL_I2C_EV_IRQHandler>:
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b088      	sub	sp, #32
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	2300      	movs	r3, #0
 8007a96:	61bb      	str	r3, [r7, #24]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	617b      	str	r3, [r7, #20]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa4:	613b      	str	r3, [r7, #16]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007aac:	73fb      	strb	r3, [r7, #15]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ab4:	73bb      	strb	r3, [r7, #14]
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
 8007ab8:	2b10      	cmp	r3, #16
 8007aba:	d003      	beq.n	8007ac4 <HAL_I2C_EV_IRQHandler+0x38>
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
 8007abe:	2b40      	cmp	r3, #64	; 0x40
 8007ac0:	f040 80c1 	bne.w	8007c46 <HAL_I2C_EV_IRQHandler+0x1ba>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	61bb      	str	r3, [r7, #24]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	61fb      	str	r3, [r7, #28]
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	f003 0301 	and.w	r3, r3, #1
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10d      	bne.n	8007afa <HAL_I2C_EV_IRQHandler+0x6e>
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007ae4:	d003      	beq.n	8007aee <HAL_I2C_EV_IRQHandler+0x62>
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007aec:	d101      	bne.n	8007af2 <HAL_I2C_EV_IRQHandler+0x66>
 8007aee:	2301      	movs	r3, #1
 8007af0:	e000      	b.n	8007af4 <HAL_I2C_EV_IRQHandler+0x68>
 8007af2:	2300      	movs	r3, #0
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	f000 8132 	beq.w	8007d5e <HAL_I2C_EV_IRQHandler+0x2d2>
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	f003 0301 	and.w	r3, r3, #1
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00c      	beq.n	8007b1e <HAL_I2C_EV_IRQHandler+0x92>
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	0a5b      	lsrs	r3, r3, #9
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d006      	beq.n	8007b1e <HAL_I2C_EV_IRQHandler+0x92>
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f001 fe92 	bl	800983a <I2C_ConvertOtherXferOptions>
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fcdc 	bl	80084d4 <I2C_Master_SB>
 8007b1c:	e092      	b.n	8007c44 <HAL_I2C_EV_IRQHandler+0x1b8>
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	08db      	lsrs	r3, r3, #3
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d009      	beq.n	8007b3e <HAL_I2C_EV_IRQHandler+0xb2>
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	0a5b      	lsrs	r3, r3, #9
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <HAL_I2C_EV_IRQHandler+0xb2>
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fd52 	bl	80085e0 <I2C_Master_ADD10>
 8007b3c:	e082      	b.n	8007c44 <HAL_I2C_EV_IRQHandler+0x1b8>
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	085b      	lsrs	r3, r3, #1
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d009      	beq.n	8007b5e <HAL_I2C_EV_IRQHandler+0xd2>
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	0a5b      	lsrs	r3, r3, #9
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d003      	beq.n	8007b5e <HAL_I2C_EV_IRQHandler+0xd2>
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fd6c 	bl	8008634 <I2C_Master_ADDR>
 8007b5c:	e072      	b.n	8007c44 <HAL_I2C_EV_IRQHandler+0x1b8>
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	089b      	lsrs	r3, r3, #2
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d03b      	beq.n	8007be2 <HAL_I2C_EV_IRQHandler+0x156>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b78:	f000 80f3 	beq.w	8007d62 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	09db      	lsrs	r3, r3, #7
 8007b80:	f003 0301 	and.w	r3, r3, #1
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00f      	beq.n	8007ba8 <HAL_I2C_EV_IRQHandler+0x11c>
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	0a9b      	lsrs	r3, r3, #10
 8007b8c:	f003 0301 	and.w	r3, r3, #1
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d009      	beq.n	8007ba8 <HAL_I2C_EV_IRQHandler+0x11c>
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	089b      	lsrs	r3, r3, #2
 8007b98:	f003 0301 	and.w	r3, r3, #1
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d103      	bne.n	8007ba8 <HAL_I2C_EV_IRQHandler+0x11c>
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f94c 	bl	8007e3e <I2C_MasterTransmit_TXE>
 8007ba6:	e04d      	b.n	8007c44 <HAL_I2C_EV_IRQHandler+0x1b8>
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	089b      	lsrs	r3, r3, #2
 8007bac:	f003 0301 	and.w	r3, r3, #1
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f000 80d6 	beq.w	8007d62 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	0a5b      	lsrs	r3, r3, #9
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f000 80cf 	beq.w	8007d62 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007bc4:	7bbb      	ldrb	r3, [r7, #14]
 8007bc6:	2b21      	cmp	r3, #33	; 0x21
 8007bc8:	d103      	bne.n	8007bd2 <HAL_I2C_EV_IRQHandler+0x146>
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f9d3 	bl	8007f76 <I2C_MasterTransmit_BTF>
 8007bd0:	e0c7      	b.n	8007d62 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
 8007bd4:	2b40      	cmp	r3, #64	; 0x40
 8007bd6:	f040 80c4 	bne.w	8007d62 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fa41 	bl	8008062 <I2C_MemoryTransmit_TXE_BTF>
 8007be0:	e0bf      	b.n	8007d62 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bf0:	f000 80b7 	beq.w	8007d62 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	099b      	lsrs	r3, r3, #6
 8007bf8:	f003 0301 	and.w	r3, r3, #1
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00f      	beq.n	8007c20 <HAL_I2C_EV_IRQHandler+0x194>
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	0a9b      	lsrs	r3, r3, #10
 8007c04:	f003 0301 	and.w	r3, r3, #1
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d009      	beq.n	8007c20 <HAL_I2C_EV_IRQHandler+0x194>
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	089b      	lsrs	r3, r3, #2
 8007c10:	f003 0301 	and.w	r3, r3, #1
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d103      	bne.n	8007c20 <HAL_I2C_EV_IRQHandler+0x194>
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fab6 	bl	800818a <I2C_MasterReceive_RXNE>
 8007c1e:	e011      	b.n	8007c44 <HAL_I2C_EV_IRQHandler+0x1b8>
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	089b      	lsrs	r3, r3, #2
 8007c24:	f003 0301 	and.w	r3, r3, #1
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 809a 	beq.w	8007d62 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	0a5b      	lsrs	r3, r3, #9
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 8093 	beq.w	8007d62 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 fb5f 	bl	8008300 <I2C_MasterReceive_BTF>
 8007c42:	e08e      	b.n	8007d62 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007c44:	e08d      	b.n	8007d62 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d004      	beq.n	8007c58 <HAL_I2C_EV_IRQHandler+0x1cc>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	61fb      	str	r3, [r7, #28]
 8007c56:	e007      	b.n	8007c68 <HAL_I2C_EV_IRQHandler+0x1dc>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	61bb      	str	r3, [r7, #24]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	61fb      	str	r3, [r7, #28]
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	085b      	lsrs	r3, r3, #1
 8007c6c:	f003 0301 	and.w	r3, r3, #1
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d012      	beq.n	8007c9a <HAL_I2C_EV_IRQHandler+0x20e>
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	0a5b      	lsrs	r3, r3, #9
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00c      	beq.n	8007c9a <HAL_I2C_EV_IRQHandler+0x20e>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d003      	beq.n	8007c90 <HAL_I2C_EV_IRQHandler+0x204>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	61bb      	str	r3, [r7, #24]
 8007c90:	69b9      	ldr	r1, [r7, #24]
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 ff1d 	bl	8008ad2 <I2C_Slave_ADDR>
 8007c98:	e066      	b.n	8007d68 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	091b      	lsrs	r3, r3, #4
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d009      	beq.n	8007cba <HAL_I2C_EV_IRQHandler+0x22e>
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	0a5b      	lsrs	r3, r3, #9
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d003      	beq.n	8007cba <HAL_I2C_EV_IRQHandler+0x22e>
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 ff58 	bl	8008b68 <I2C_Slave_STOPF>
 8007cb8:	e056      	b.n	8007d68 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007cba:	7bbb      	ldrb	r3, [r7, #14]
 8007cbc:	2b21      	cmp	r3, #33	; 0x21
 8007cbe:	d002      	beq.n	8007cc6 <HAL_I2C_EV_IRQHandler+0x23a>
 8007cc0:	7bbb      	ldrb	r3, [r7, #14]
 8007cc2:	2b29      	cmp	r3, #41	; 0x29
 8007cc4:	d125      	bne.n	8007d12 <HAL_I2C_EV_IRQHandler+0x286>
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	09db      	lsrs	r3, r3, #7
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00f      	beq.n	8007cf2 <HAL_I2C_EV_IRQHandler+0x266>
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	0a9b      	lsrs	r3, r3, #10
 8007cd6:	f003 0301 	and.w	r3, r3, #1
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d009      	beq.n	8007cf2 <HAL_I2C_EV_IRQHandler+0x266>
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	089b      	lsrs	r3, r3, #2
 8007ce2:	f003 0301 	and.w	r3, r3, #1
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d103      	bne.n	8007cf2 <HAL_I2C_EV_IRQHandler+0x266>
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fe33 	bl	8008956 <I2C_SlaveTransmit_TXE>
 8007cf0:	e039      	b.n	8007d66 <HAL_I2C_EV_IRQHandler+0x2da>
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	089b      	lsrs	r3, r3, #2
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d033      	beq.n	8007d66 <HAL_I2C_EV_IRQHandler+0x2da>
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	0a5b      	lsrs	r3, r3, #9
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d02d      	beq.n	8007d66 <HAL_I2C_EV_IRQHandler+0x2da>
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fe60 	bl	80089d0 <I2C_SlaveTransmit_BTF>
 8007d10:	e029      	b.n	8007d66 <HAL_I2C_EV_IRQHandler+0x2da>
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	099b      	lsrs	r3, r3, #6
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00f      	beq.n	8007d3e <HAL_I2C_EV_IRQHandler+0x2b2>
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	0a9b      	lsrs	r3, r3, #10
 8007d22:	f003 0301 	and.w	r3, r3, #1
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d009      	beq.n	8007d3e <HAL_I2C_EV_IRQHandler+0x2b2>
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	089b      	lsrs	r3, r3, #2
 8007d2e:	f003 0301 	and.w	r3, r3, #1
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d103      	bne.n	8007d3e <HAL_I2C_EV_IRQHandler+0x2b2>
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fe6b 	bl	8008a12 <I2C_SlaveReceive_RXNE>
 8007d3c:	e014      	b.n	8007d68 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	089b      	lsrs	r3, r3, #2
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00e      	beq.n	8007d68 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	0a5b      	lsrs	r3, r3, #9
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d008      	beq.n	8007d68 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fe99 	bl	8008a8e <I2C_SlaveReceive_BTF>
 8007d5c:	e004      	b.n	8007d68 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007d5e:	bf00      	nop
 8007d60:	e002      	b.n	8007d68 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007d62:	bf00      	nop
 8007d64:	e000      	b.n	8007d68 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007d66:	bf00      	nop
 8007d68:	3720      	adds	r7, #32
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <HAL_I2C_MasterTxCpltCallback>:
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	bf00      	nop
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <HAL_I2C_MasterRxCpltCallback>:
 8007d82:	b480      	push	{r7}
 8007d84:	b083      	sub	sp, #12
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	bf00      	nop
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <HAL_I2C_SlaveTxCpltCallback>:
 8007d96:	b480      	push	{r7}
 8007d98:	b083      	sub	sp, #12
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	bf00      	nop
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <HAL_I2C_SlaveRxCpltCallback>:
 8007daa:	b480      	push	{r7}
 8007dac:	b083      	sub	sp, #12
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	bf00      	nop
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <HAL_I2C_AddrCallback>:
 8007dbe:	b480      	push	{r7}
 8007dc0:	b083      	sub	sp, #12
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	70fb      	strb	r3, [r7, #3]
 8007dca:	4613      	mov	r3, r2
 8007dcc:	803b      	strh	r3, [r7, #0]
 8007dce:	bf00      	nop
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <HAL_I2C_ListenCpltCallback>:
 8007dda:	b480      	push	{r7}
 8007ddc:	b083      	sub	sp, #12
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
 8007de2:	bf00      	nop
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <HAL_I2C_MemTxCpltCallback>:
 8007dee:	b480      	push	{r7}
 8007df0:	b083      	sub	sp, #12
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	bf00      	nop
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <HAL_I2C_MemRxCpltCallback>:
 8007e02:	b480      	push	{r7}
 8007e04:	b083      	sub	sp, #12
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	bf00      	nop
 8007e0c:	370c      	adds	r7, #12
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <HAL_I2C_ErrorCallback>:
 8007e16:	b480      	push	{r7}
 8007e18:	b083      	sub	sp, #12
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	bf00      	nop
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <HAL_I2C_AbortCpltCallback>:
 8007e2a:	b480      	push	{r7}
 8007e2c:	b083      	sub	sp, #12
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	bf00      	nop
 8007e34:	370c      	adds	r7, #12
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr

08007e3e <I2C_MasterTransmit_TXE>:
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b084      	sub	sp, #16
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e4c:	73fb      	strb	r3, [r7, #15]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e54:	73bb      	strb	r3, [r7, #14]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5a:	60bb      	str	r3, [r7, #8]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d150      	bne.n	8007f06 <I2C_MasterTransmit_TXE+0xc8>
 8007e64:	7bfb      	ldrb	r3, [r7, #15]
 8007e66:	2b21      	cmp	r3, #33	; 0x21
 8007e68:	d14d      	bne.n	8007f06 <I2C_MasterTransmit_TXE+0xc8>
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	2b08      	cmp	r3, #8
 8007e6e:	d01d      	beq.n	8007eac <I2C_MasterTransmit_TXE+0x6e>
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2b20      	cmp	r3, #32
 8007e74:	d01a      	beq.n	8007eac <I2C_MasterTransmit_TXE+0x6e>
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007e7c:	d016      	beq.n	8007eac <I2C_MasterTransmit_TXE+0x6e>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e8c:	605a      	str	r2, [r3, #4]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2211      	movs	r2, #17
 8007e92:	631a      	str	r2, [r3, #48]	; 0x30
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7ff ff62 	bl	8007d6e <HAL_I2C_MasterTxCpltCallback>
 8007eaa:	e060      	b.n	8007f6e <I2C_MasterTransmit_TXE+0x130>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	685a      	ldr	r2, [r3, #4]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007eba:	605a      	str	r2, [r3, #4]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007eca:	601a      	str	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	631a      	str	r2, [r3, #48]	; 0x30
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2220      	movs	r2, #32
 8007ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	2b40      	cmp	r3, #64	; 0x40
 8007ee4:	d107      	bne.n	8007ef6 <I2C_MasterTransmit_TXE+0xb8>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f7ff ff7d 	bl	8007dee <HAL_I2C_MemTxCpltCallback>
 8007ef4:	e03b      	b.n	8007f6e <I2C_MasterTransmit_TXE+0x130>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7ff ff35 	bl	8007d6e <HAL_I2C_MasterTxCpltCallback>
 8007f04:	e033      	b.n	8007f6e <I2C_MasterTransmit_TXE+0x130>
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
 8007f08:	2b21      	cmp	r3, #33	; 0x21
 8007f0a:	d005      	beq.n	8007f18 <I2C_MasterTransmit_TXE+0xda>
 8007f0c:	7bbb      	ldrb	r3, [r7, #14]
 8007f0e:	2b40      	cmp	r3, #64	; 0x40
 8007f10:	d12d      	bne.n	8007f6e <I2C_MasterTransmit_TXE+0x130>
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
 8007f14:	2b22      	cmp	r3, #34	; 0x22
 8007f16:	d12a      	bne.n	8007f6e <I2C_MasterTransmit_TXE+0x130>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d108      	bne.n	8007f34 <I2C_MasterTransmit_TXE+0xf6>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	685a      	ldr	r2, [r3, #4]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f30:	605a      	str	r2, [r3, #4]
 8007f32:	e01c      	b.n	8007f6e <I2C_MasterTransmit_TXE+0x130>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b40      	cmp	r3, #64	; 0x40
 8007f3e:	d103      	bne.n	8007f48 <I2C_MasterTransmit_TXE+0x10a>
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f88e 	bl	8008062 <I2C_MemoryTransmit_TXE_BTF>
 8007f46:	e012      	b.n	8007f6e <I2C_MasterTransmit_TXE+0x130>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4c:	781a      	ldrb	r2, [r3, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	611a      	str	r2, [r3, #16]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f58:	1c5a      	adds	r2, r3, #1
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	625a      	str	r2, [r3, #36]	; 0x24
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	3b01      	subs	r3, #1
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f6c:	e7ff      	b.n	8007f6e <I2C_MasterTransmit_TXE+0x130>
 8007f6e:	bf00      	nop
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <I2C_MasterTransmit_BTF>:
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b084      	sub	sp, #16
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f82:	60fb      	str	r3, [r7, #12]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b21      	cmp	r3, #33	; 0x21
 8007f8e:	d164      	bne.n	800805a <I2C_MasterTransmit_BTF+0xe4>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d012      	beq.n	8007fc0 <I2C_MasterTransmit_BTF+0x4a>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9e:	781a      	ldrb	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	611a      	str	r2, [r3, #16]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007faa:	1c5a      	adds	r2, r3, #1
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	625a      	str	r2, [r3, #36]	; 0x24
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007fbe:	e04c      	b.n	800805a <I2C_MasterTransmit_BTF+0xe4>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2b08      	cmp	r3, #8
 8007fc4:	d01d      	beq.n	8008002 <I2C_MasterTransmit_BTF+0x8c>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2b20      	cmp	r3, #32
 8007fca:	d01a      	beq.n	8008002 <I2C_MasterTransmit_BTF+0x8c>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007fd2:	d016      	beq.n	8008002 <I2C_MasterTransmit_BTF+0x8c>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	685a      	ldr	r2, [r3, #4]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007fe2:	605a      	str	r2, [r3, #4]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2211      	movs	r2, #17
 8007fe8:	631a      	str	r2, [r3, #48]	; 0x30
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2220      	movs	r2, #32
 8007ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f7ff feb7 	bl	8007d6e <HAL_I2C_MasterTxCpltCallback>
 8008000:	e02b      	b.n	800805a <I2C_MasterTransmit_BTF+0xe4>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	685a      	ldr	r2, [r3, #4]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008010:	605a      	str	r2, [r3, #4]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008020:	601a      	str	r2, [r3, #0]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	631a      	str	r2, [r3, #48]	; 0x30
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2220      	movs	r2, #32
 800802c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b40      	cmp	r3, #64	; 0x40
 800803a:	d107      	bne.n	800804c <I2C_MasterTransmit_BTF+0xd6>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f7ff fed2 	bl	8007dee <HAL_I2C_MemTxCpltCallback>
 800804a:	e006      	b.n	800805a <I2C_MasterTransmit_BTF+0xe4>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7ff fe8a 	bl	8007d6e <HAL_I2C_MasterTxCpltCallback>
 800805a:	bf00      	nop
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <I2C_MemoryTransmit_TXE_BTF>:
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008070:	73fb      	strb	r3, [r7, #15]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008076:	2b00      	cmp	r3, #0
 8008078:	d11d      	bne.n	80080b6 <I2C_MemoryTransmit_TXE_BTF+0x54>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800807e:	2b01      	cmp	r3, #1
 8008080:	d10b      	bne.n	800809a <I2C_MemoryTransmit_TXE_BTF+0x38>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008086:	b2da      	uxtb	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	611a      	str	r2, [r3, #16]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008092:	1c9a      	adds	r2, r3, #2
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	651a      	str	r2, [r3, #80]	; 0x50
 8008098:	e073      	b.n	8008182 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800809e:	b29b      	uxth	r3, r3
 80080a0:	121b      	asrs	r3, r3, #8
 80080a2:	b2da      	uxtb	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	611a      	str	r2, [r3, #16]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ae:	1c5a      	adds	r2, r3, #1
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	651a      	str	r2, [r3, #80]	; 0x50
 80080b4:	e065      	b.n	8008182 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d10b      	bne.n	80080d6 <I2C_MemoryTransmit_TXE_BTF+0x74>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	611a      	str	r2, [r3, #16]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ce:	1c5a      	adds	r2, r3, #1
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	651a      	str	r2, [r3, #80]	; 0x50
 80080d4:	e055      	b.n	8008182 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d151      	bne.n	8008182 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80080de:	7bfb      	ldrb	r3, [r7, #15]
 80080e0:	2b22      	cmp	r3, #34	; 0x22
 80080e2:	d10d      	bne.n	8008100 <I2C_MemoryTransmit_TXE_BTF+0x9e>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080f2:	601a      	str	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080f8:	1c5a      	adds	r2, r3, #1
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	651a      	str	r2, [r3, #80]	; 0x50
 80080fe:	e040      	b.n	8008182 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008104:	b29b      	uxth	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	d015      	beq.n	8008136 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800810a:	7bfb      	ldrb	r3, [r7, #15]
 800810c:	2b21      	cmp	r3, #33	; 0x21
 800810e:	d112      	bne.n	8008136 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008114:	781a      	ldrb	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	611a      	str	r2, [r3, #16]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	1c5a      	adds	r2, r3, #1
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	625a      	str	r2, [r3, #36]	; 0x24
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800812a:	b29b      	uxth	r3, r3
 800812c:	3b01      	subs	r3, #1
 800812e:	b29a      	uxth	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008134:	e025      	b.n	8008182 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800813a:	b29b      	uxth	r3, r3
 800813c:	2b00      	cmp	r3, #0
 800813e:	d120      	bne.n	8008182 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8008140:	7bfb      	ldrb	r3, [r7, #15]
 8008142:	2b21      	cmp	r3, #33	; 0x21
 8008144:	d11d      	bne.n	8008182 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	685a      	ldr	r2, [r3, #4]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008154:	605a      	str	r2, [r3, #4]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008164:	601a      	str	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	631a      	str	r2, [r3, #48]	; 0x30
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2220      	movs	r2, #32
 8008170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f7ff fe36 	bl	8007dee <HAL_I2C_MemTxCpltCallback>
 8008182:	bf00      	nop
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <I2C_MasterReceive_RXNE>:
 800818a:	b580      	push	{r7, lr}
 800818c:	b084      	sub	sp, #16
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b22      	cmp	r3, #34	; 0x22
 800819c:	f040 80ac 	bne.w	80082f8 <I2C_MasterReceive_RXNE+0x16e>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	60fb      	str	r3, [r7, #12]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2b03      	cmp	r3, #3
 80081ac:	d921      	bls.n	80081f2 <I2C_MasterReceive_RXNE+0x68>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	691a      	ldr	r2, [r3, #16]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b8:	b2d2      	uxtb	r2, r2
 80081ba:	701a      	strb	r2, [r3, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c0:	1c5a      	adds	r2, r3, #1
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	625a      	str	r2, [r3, #36]	; 0x24
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	3b01      	subs	r3, #1
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d8:	b29b      	uxth	r3, r3
 80081da:	2b03      	cmp	r3, #3
 80081dc:	f040 808c 	bne.w	80082f8 <I2C_MasterReceive_RXNE+0x16e>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685a      	ldr	r2, [r3, #4]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081ee:	605a      	str	r2, [r3, #4]
 80081f0:	e082      	b.n	80082f8 <I2C_MasterReceive_RXNE+0x16e>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d075      	beq.n	80082e6 <I2C_MasterReceive_RXNE+0x15c>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d002      	beq.n	8008206 <I2C_MasterReceive_RXNE+0x7c>
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d16f      	bne.n	80082e6 <I2C_MasterReceive_RXNE+0x15c>
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f001 fa60 	bl	80096cc <I2C_WaitOnSTOPRequestThroughIT>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d142      	bne.n	8008298 <I2C_MasterReceive_RXNE+0x10e>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	685a      	ldr	r2, [r3, #4]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008230:	605a      	str	r2, [r3, #4]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	691a      	ldr	r2, [r3, #16]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823c:	b2d2      	uxtb	r2, r2
 800823e:	701a      	strb	r2, [r3, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008244:	1c5a      	adds	r2, r3, #1
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	625a      	str	r2, [r3, #36]	; 0x24
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800824e:	b29b      	uxth	r3, r3
 8008250:	3b01      	subs	r3, #1
 8008252:	b29a      	uxth	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2220      	movs	r2, #32
 800825c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008266:	b2db      	uxtb	r3, r3
 8008268:	2b40      	cmp	r3, #64	; 0x40
 800826a:	d10a      	bne.n	8008282 <I2C_MasterReceive_RXNE+0xf8>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	631a      	str	r2, [r3, #48]	; 0x30
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7ff fdc1 	bl	8007e02 <HAL_I2C_MemRxCpltCallback>
 8008280:	e03a      	b.n	80082f8 <I2C_MasterReceive_RXNE+0x16e>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2212      	movs	r2, #18
 800828e:	631a      	str	r2, [r3, #48]	; 0x30
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f7ff fd76 	bl	8007d82 <HAL_I2C_MasterRxCpltCallback>
 8008296:	e02f      	b.n	80082f8 <I2C_MasterReceive_RXNE+0x16e>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80082a6:	605a      	str	r2, [r3, #4]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	691a      	ldr	r2, [r3, #16]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b2:	b2d2      	uxtb	r2, r2
 80082b4:	701a      	strb	r2, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	625a      	str	r2, [r3, #36]	; 0x24
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	3b01      	subs	r3, #1
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2220      	movs	r2, #32
 80082d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f7ff fd99 	bl	8007e16 <HAL_I2C_ErrorCallback>
 80082e4:	e008      	b.n	80082f8 <I2C_MasterReceive_RXNE+0x16e>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	685a      	ldr	r2, [r3, #4]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082f4:	605a      	str	r2, [r3, #4]
 80082f6:	e7ff      	b.n	80082f8 <I2C_MasterReceive_RXNE+0x16e>
 80082f8:	bf00      	nop
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <I2C_MasterReceive_BTF>:
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830c:	60fb      	str	r3, [r7, #12]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008312:	b29b      	uxth	r3, r3
 8008314:	2b04      	cmp	r3, #4
 8008316:	d11b      	bne.n	8008350 <I2C_MasterReceive_BTF+0x50>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008326:	605a      	str	r2, [r3, #4]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	691a      	ldr	r2, [r3, #16]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008332:	b2d2      	uxtb	r2, r2
 8008334:	701a      	strb	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833a:	1c5a      	adds	r2, r3, #1
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	625a      	str	r2, [r3, #36]	; 0x24
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008344:	b29b      	uxth	r3, r3
 8008346:	3b01      	subs	r3, #1
 8008348:	b29a      	uxth	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800834e:	e0bd      	b.n	80084cc <I2C_MasterReceive_BTF+0x1cc>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008354:	b29b      	uxth	r3, r3
 8008356:	2b03      	cmp	r3, #3
 8008358:	d129      	bne.n	80083ae <I2C_MasterReceive_BTF+0xae>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	685a      	ldr	r2, [r3, #4]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008368:	605a      	str	r2, [r3, #4]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2b04      	cmp	r3, #4
 800836e:	d00a      	beq.n	8008386 <I2C_MasterReceive_BTF+0x86>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2b02      	cmp	r3, #2
 8008374:	d007      	beq.n	8008386 <I2C_MasterReceive_BTF+0x86>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	691a      	ldr	r2, [r3, #16]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008390:	b2d2      	uxtb	r2, r2
 8008392:	701a      	strb	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008398:	1c5a      	adds	r2, r3, #1
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	625a      	str	r2, [r3, #36]	; 0x24
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	3b01      	subs	r3, #1
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80083ac:	e08e      	b.n	80084cc <I2C_MasterReceive_BTF+0x1cc>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d176      	bne.n	80084a6 <I2C_MasterReceive_BTF+0x1a6>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d002      	beq.n	80083c4 <I2C_MasterReceive_BTF+0xc4>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2b10      	cmp	r3, #16
 80083c2:	d108      	bne.n	80083d6 <I2C_MasterReceive_BTF+0xd6>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	e019      	b.n	800840a <I2C_MasterReceive_BTF+0x10a>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2b04      	cmp	r3, #4
 80083da:	d002      	beq.n	80083e2 <I2C_MasterReceive_BTF+0xe2>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d108      	bne.n	80083f4 <I2C_MasterReceive_BTF+0xf4>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80083f0:	601a      	str	r2, [r3, #0]
 80083f2:	e00a      	b.n	800840a <I2C_MasterReceive_BTF+0x10a>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2b10      	cmp	r3, #16
 80083f8:	d007      	beq.n	800840a <I2C_MasterReceive_BTF+0x10a>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008408:	601a      	str	r2, [r3, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	691a      	ldr	r2, [r3, #16]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008414:	b2d2      	uxtb	r2, r2
 8008416:	701a      	strb	r2, [r3, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841c:	1c5a      	adds	r2, r3, #1
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	625a      	str	r2, [r3, #36]	; 0x24
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008426:	b29b      	uxth	r3, r3
 8008428:	3b01      	subs	r3, #1
 800842a:	b29a      	uxth	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	691a      	ldr	r2, [r3, #16]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843a:	b2d2      	uxtb	r2, r2
 800843c:	701a      	strb	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008442:	1c5a      	adds	r2, r3, #1
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	625a      	str	r2, [r3, #36]	; 0x24
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800844c:	b29b      	uxth	r3, r3
 800844e:	3b01      	subs	r3, #1
 8008450:	b29a      	uxth	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008464:	605a      	str	r2, [r3, #4]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2220      	movs	r2, #32
 800846a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b40      	cmp	r3, #64	; 0x40
 8008478:	d10a      	bne.n	8008490 <I2C_MasterReceive_BTF+0x190>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	631a      	str	r2, [r3, #48]	; 0x30
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f7ff fcba 	bl	8007e02 <HAL_I2C_MemRxCpltCallback>
 800848e:	e01d      	b.n	80084cc <I2C_MasterReceive_BTF+0x1cc>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2212      	movs	r2, #18
 800849c:	631a      	str	r2, [r3, #48]	; 0x30
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7ff fc6f 	bl	8007d82 <HAL_I2C_MasterRxCpltCallback>
 80084a4:	e012      	b.n	80084cc <I2C_MasterReceive_BTF+0x1cc>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	691a      	ldr	r2, [r3, #16]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b0:	b2d2      	uxtb	r2, r2
 80084b2:	701a      	strb	r2, [r3, #0]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b8:	1c5a      	adds	r2, r3, #1
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	625a      	str	r2, [r3, #36]	; 0x24
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	3b01      	subs	r3, #1
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80084cc:	bf00      	nop
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <I2C_Master_SB>:
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	2b40      	cmp	r3, #64	; 0x40
 80084e6:	d117      	bne.n	8008518 <I2C_Master_SB+0x44>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d109      	bne.n	8008504 <I2C_Master_SB+0x30>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	461a      	mov	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008500:	611a      	str	r2, [r3, #16]
 8008502:	e067      	b.n	80085d4 <I2C_Master_SB+0x100>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008508:	b2db      	uxtb	r3, r3
 800850a:	f043 0301 	orr.w	r3, r3, #1
 800850e:	b2da      	uxtb	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	611a      	str	r2, [r3, #16]
 8008516:	e05d      	b.n	80085d4 <I2C_Master_SB+0x100>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008520:	d133      	bne.n	800858a <I2C_Master_SB+0xb6>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2b21      	cmp	r3, #33	; 0x21
 800852c:	d109      	bne.n	8008542 <I2C_Master_SB+0x6e>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008532:	b2db      	uxtb	r3, r3
 8008534:	461a      	mov	r2, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800853e:	611a      	str	r2, [r3, #16]
 8008540:	e008      	b.n	8008554 <I2C_Master_SB+0x80>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008546:	b2db      	uxtb	r3, r3
 8008548:	f043 0301 	orr.w	r3, r3, #1
 800854c:	b2da      	uxtb	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	611a      	str	r2, [r3, #16]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008558:	2b00      	cmp	r3, #0
 800855a:	d004      	beq.n	8008566 <I2C_Master_SB+0x92>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008562:	2b00      	cmp	r3, #0
 8008564:	d108      	bne.n	8008578 <I2C_Master_SB+0xa4>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800856a:	2b00      	cmp	r3, #0
 800856c:	d032      	beq.n	80085d4 <I2C_Master_SB+0x100>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008574:	2b00      	cmp	r3, #0
 8008576:	d02d      	beq.n	80085d4 <I2C_Master_SB+0x100>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	685a      	ldr	r2, [r3, #4]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008586:	605a      	str	r2, [r3, #4]
 8008588:	e024      	b.n	80085d4 <I2C_Master_SB+0x100>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800858e:	2b00      	cmp	r3, #0
 8008590:	d10e      	bne.n	80085b0 <I2C_Master_SB+0xdc>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008596:	b29b      	uxth	r3, r3
 8008598:	11db      	asrs	r3, r3, #7
 800859a:	b2db      	uxtb	r3, r3
 800859c:	f003 0306 	and.w	r3, r3, #6
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	f063 030f 	orn	r3, r3, #15
 80085a6:	b2da      	uxtb	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	611a      	str	r2, [r3, #16]
 80085ae:	e011      	b.n	80085d4 <I2C_Master_SB+0x100>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d10d      	bne.n	80085d4 <I2C_Master_SB+0x100>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085bc:	b29b      	uxth	r3, r3
 80085be:	11db      	asrs	r3, r3, #7
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	f003 0306 	and.w	r3, r3, #6
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	f063 030e 	orn	r3, r3, #14
 80085cc:	b2da      	uxtb	r2, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	611a      	str	r2, [r3, #16]
 80085d4:	bf00      	nop
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <I2C_Master_ADD10>:
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ec:	b2da      	uxtb	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	611a      	str	r2, [r3, #16]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d004      	beq.n	8008606 <I2C_Master_ADD10+0x26>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008602:	2b00      	cmp	r3, #0
 8008604:	d108      	bne.n	8008618 <I2C_Master_ADD10+0x38>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00c      	beq.n	8008628 <I2C_Master_ADD10+0x48>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008614:	2b00      	cmp	r3, #0
 8008616:	d007      	beq.n	8008628 <I2C_Master_ADD10+0x48>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	685a      	ldr	r2, [r3, #4]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008626:	605a      	str	r2, [r3, #4]
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <I2C_Master_ADDR>:
 8008634:	b480      	push	{r7}
 8008636:	b091      	sub	sp, #68	; 0x44
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008642:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864a:	63bb      	str	r3, [r7, #56]	; 0x38
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008650:	637b      	str	r3, [r7, #52]	; 0x34
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b22      	cmp	r3, #34	; 0x22
 800865c:	f040 8169 	bne.w	8008932 <I2C_Master_ADDR+0x2fe>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10f      	bne.n	8008688 <I2C_Master_ADDR+0x54>
 8008668:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800866c:	2b40      	cmp	r3, #64	; 0x40
 800866e:	d10b      	bne.n	8008688 <I2C_Master_ADDR+0x54>
 8008670:	2300      	movs	r3, #0
 8008672:	633b      	str	r3, [r7, #48]	; 0x30
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	695b      	ldr	r3, [r3, #20]
 800867a:	633b      	str	r3, [r7, #48]	; 0x30
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	633b      	str	r3, [r7, #48]	; 0x30
 8008684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008686:	e160      	b.n	800894a <I2C_Master_ADDR+0x316>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800868c:	2b00      	cmp	r3, #0
 800868e:	d11d      	bne.n	80086cc <I2C_Master_ADDR+0x98>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008698:	d118      	bne.n	80086cc <I2C_Master_ADDR+0x98>
 800869a:	2300      	movs	r3, #0
 800869c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	695b      	ldr	r3, [r3, #20]
 80086a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086be:	601a      	str	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c4:	1c5a      	adds	r2, r3, #1
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	651a      	str	r2, [r3, #80]	; 0x50
 80086ca:	e13e      	b.n	800894a <I2C_Master_ADDR+0x316>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d113      	bne.n	80086fe <I2C_Master_ADDR+0xca>
 80086d6:	2300      	movs	r3, #0
 80086d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	695b      	ldr	r3, [r3, #20]
 80086e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	699b      	ldr	r3, [r3, #24]
 80086e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80086ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086fa:	601a      	str	r2, [r3, #0]
 80086fc:	e115      	b.n	800892a <I2C_Master_ADDR+0x2f6>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008702:	b29b      	uxth	r3, r3
 8008704:	2b01      	cmp	r3, #1
 8008706:	f040 808a 	bne.w	800881e <I2C_Master_ADDR+0x1ea>
 800870a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008710:	d137      	bne.n	8008782 <I2C_Master_ADDR+0x14e>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008720:	601a      	str	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800872c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008730:	d113      	bne.n	800875a <I2C_Master_ADDR+0x126>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008740:	601a      	str	r2, [r3, #0]
 8008742:	2300      	movs	r3, #0
 8008744:	627b      	str	r3, [r7, #36]	; 0x24
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	695b      	ldr	r3, [r3, #20]
 800874c:	627b      	str	r3, [r7, #36]	; 0x24
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	699b      	ldr	r3, [r3, #24]
 8008754:	627b      	str	r3, [r7, #36]	; 0x24
 8008756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008758:	e0e7      	b.n	800892a <I2C_Master_ADDR+0x2f6>
 800875a:	2300      	movs	r3, #0
 800875c:	623b      	str	r3, [r7, #32]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	695b      	ldr	r3, [r3, #20]
 8008764:	623b      	str	r3, [r7, #32]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	623b      	str	r3, [r7, #32]
 800876e:	6a3b      	ldr	r3, [r7, #32]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800877e:	601a      	str	r2, [r3, #0]
 8008780:	e0d3      	b.n	800892a <I2C_Master_ADDR+0x2f6>
 8008782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008784:	2b08      	cmp	r3, #8
 8008786:	d02e      	beq.n	80087e6 <I2C_Master_ADDR+0x1b2>
 8008788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878a:	2b20      	cmp	r3, #32
 800878c:	d02b      	beq.n	80087e6 <I2C_Master_ADDR+0x1b2>
 800878e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008790:	2b12      	cmp	r3, #18
 8008792:	d102      	bne.n	800879a <I2C_Master_ADDR+0x166>
 8008794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008796:	2b01      	cmp	r3, #1
 8008798:	d125      	bne.n	80087e6 <I2C_Master_ADDR+0x1b2>
 800879a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879c:	2b04      	cmp	r3, #4
 800879e:	d00e      	beq.n	80087be <I2C_Master_ADDR+0x18a>
 80087a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d00b      	beq.n	80087be <I2C_Master_ADDR+0x18a>
 80087a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a8:	2b10      	cmp	r3, #16
 80087aa:	d008      	beq.n	80087be <I2C_Master_ADDR+0x18a>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087ba:	601a      	str	r2, [r3, #0]
 80087bc:	e007      	b.n	80087ce <I2C_Master_ADDR+0x19a>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80087cc:	601a      	str	r2, [r3, #0]
 80087ce:	2300      	movs	r3, #0
 80087d0:	61fb      	str	r3, [r7, #28]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	695b      	ldr	r3, [r3, #20]
 80087d8:	61fb      	str	r3, [r7, #28]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	699b      	ldr	r3, [r3, #24]
 80087e0:	61fb      	str	r3, [r7, #28]
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	e0a1      	b.n	800892a <I2C_Master_ADDR+0x2f6>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087f4:	601a      	str	r2, [r3, #0]
 80087f6:	2300      	movs	r3, #0
 80087f8:	61bb      	str	r3, [r7, #24]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	695b      	ldr	r3, [r3, #20]
 8008800:	61bb      	str	r3, [r7, #24]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	61bb      	str	r3, [r7, #24]
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800881a:	601a      	str	r2, [r3, #0]
 800881c:	e085      	b.n	800892a <I2C_Master_ADDR+0x2f6>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008822:	b29b      	uxth	r3, r3
 8008824:	2b02      	cmp	r3, #2
 8008826:	d14d      	bne.n	80088c4 <I2C_Master_ADDR+0x290>
 8008828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882a:	2b04      	cmp	r3, #4
 800882c:	d016      	beq.n	800885c <I2C_Master_ADDR+0x228>
 800882e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008830:	2b02      	cmp	r3, #2
 8008832:	d013      	beq.n	800885c <I2C_Master_ADDR+0x228>
 8008834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008836:	2b10      	cmp	r3, #16
 8008838:	d010      	beq.n	800885c <I2C_Master_ADDR+0x228>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008848:	601a      	str	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008858:	601a      	str	r2, [r3, #0]
 800885a:	e007      	b.n	800886c <I2C_Master_ADDR+0x238>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800886a:	601a      	str	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800887a:	d117      	bne.n	80088ac <I2C_Master_ADDR+0x278>
 800887c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008882:	d00b      	beq.n	800889c <I2C_Master_ADDR+0x268>
 8008884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008886:	2b01      	cmp	r3, #1
 8008888:	d008      	beq.n	800889c <I2C_Master_ADDR+0x268>
 800888a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888c:	2b08      	cmp	r3, #8
 800888e:	d005      	beq.n	800889c <I2C_Master_ADDR+0x268>
 8008890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008892:	2b10      	cmp	r3, #16
 8008894:	d002      	beq.n	800889c <I2C_Master_ADDR+0x268>
 8008896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008898:	2b20      	cmp	r3, #32
 800889a:	d107      	bne.n	80088ac <I2C_Master_ADDR+0x278>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	685a      	ldr	r2, [r3, #4]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80088aa:	605a      	str	r2, [r3, #4]
 80088ac:	2300      	movs	r3, #0
 80088ae:	617b      	str	r3, [r7, #20]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	695b      	ldr	r3, [r3, #20]
 80088b6:	617b      	str	r3, [r7, #20]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	617b      	str	r3, [r7, #20]
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	e032      	b.n	800892a <I2C_Master_ADDR+0x2f6>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80088d2:	601a      	str	r2, [r3, #0]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088e2:	d117      	bne.n	8008914 <I2C_Master_ADDR+0x2e0>
 80088e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80088ea:	d00b      	beq.n	8008904 <I2C_Master_ADDR+0x2d0>
 80088ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d008      	beq.n	8008904 <I2C_Master_ADDR+0x2d0>
 80088f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f4:	2b08      	cmp	r3, #8
 80088f6:	d005      	beq.n	8008904 <I2C_Master_ADDR+0x2d0>
 80088f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fa:	2b10      	cmp	r3, #16
 80088fc:	d002      	beq.n	8008904 <I2C_Master_ADDR+0x2d0>
 80088fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008900:	2b20      	cmp	r3, #32
 8008902:	d107      	bne.n	8008914 <I2C_Master_ADDR+0x2e0>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	685a      	ldr	r2, [r3, #4]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008912:	605a      	str	r2, [r3, #4]
 8008914:	2300      	movs	r3, #0
 8008916:	613b      	str	r3, [r7, #16]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	613b      	str	r3, [r7, #16]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	613b      	str	r3, [r7, #16]
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	651a      	str	r2, [r3, #80]	; 0x50
 8008930:	e00b      	b.n	800894a <I2C_Master_ADDR+0x316>
 8008932:	2300      	movs	r3, #0
 8008934:	60fb      	str	r3, [r7, #12]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	695b      	ldr	r3, [r3, #20]
 800893c:	60fb      	str	r3, [r7, #12]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	699b      	ldr	r3, [r3, #24]
 8008944:	60fb      	str	r3, [r7, #12]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	e7ff      	b.n	800894a <I2C_Master_ADDR+0x316>
 800894a:	bf00      	nop
 800894c:	3744      	adds	r7, #68	; 0x44
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr

08008956 <I2C_SlaveTransmit_TXE>:
 8008956:	b580      	push	{r7, lr}
 8008958:	b084      	sub	sp, #16
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008964:	73fb      	strb	r3, [r7, #15]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800896a:	b29b      	uxth	r3, r3
 800896c:	2b00      	cmp	r3, #0
 800896e:	d02b      	beq.n	80089c8 <I2C_SlaveTransmit_TXE+0x72>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008974:	781a      	ldrb	r2, [r3, #0]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	611a      	str	r2, [r3, #16]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008980:	1c5a      	adds	r2, r3, #1
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	625a      	str	r2, [r3, #36]	; 0x24
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800898a:	b29b      	uxth	r3, r3
 800898c:	3b01      	subs	r3, #1
 800898e:	b29a      	uxth	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008998:	b29b      	uxth	r3, r3
 800899a:	2b00      	cmp	r3, #0
 800899c:	d114      	bne.n	80089c8 <I2C_SlaveTransmit_TXE+0x72>
 800899e:	7bfb      	ldrb	r3, [r7, #15]
 80089a0:	2b29      	cmp	r3, #41	; 0x29
 80089a2:	d111      	bne.n	80089c8 <I2C_SlaveTransmit_TXE+0x72>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	685a      	ldr	r2, [r3, #4]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089b2:	605a      	str	r2, [r3, #4]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2221      	movs	r2, #33	; 0x21
 80089b8:	631a      	str	r2, [r3, #48]	; 0x30
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2228      	movs	r2, #40	; 0x28
 80089be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f7ff f9e7 	bl	8007d96 <HAL_I2C_SlaveTxCpltCallback>
 80089c8:	bf00      	nop
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <I2C_SlaveTransmit_BTF>:
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089dc:	b29b      	uxth	r3, r3
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d011      	beq.n	8008a06 <I2C_SlaveTransmit_BTF+0x36>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e6:	781a      	ldrb	r2, [r3, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	611a      	str	r2, [r3, #16]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f2:	1c5a      	adds	r2, r3, #1
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	625a      	str	r2, [r3, #36]	; 0x24
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	3b01      	subs	r3, #1
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008a06:	bf00      	nop
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <I2C_SlaveReceive_RXNE>:
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b084      	sub	sp, #16
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a20:	73fb      	strb	r3, [r7, #15]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d02c      	beq.n	8008a86 <I2C_SlaveReceive_RXNE+0x74>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	691a      	ldr	r2, [r3, #16]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a36:	b2d2      	uxtb	r2, r2
 8008a38:	701a      	strb	r2, [r3, #0]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3e:	1c5a      	adds	r2, r3, #1
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	625a      	str	r2, [r3, #36]	; 0x24
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d114      	bne.n	8008a86 <I2C_SlaveReceive_RXNE+0x74>
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
 8008a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8008a60:	d111      	bne.n	8008a86 <I2C_SlaveReceive_RXNE+0x74>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	685a      	ldr	r2, [r3, #4]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a70:	605a      	str	r2, [r3, #4]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2222      	movs	r2, #34	; 0x22
 8008a76:	631a      	str	r2, [r3, #48]	; 0x30
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2228      	movs	r2, #40	; 0x28
 8008a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f7ff f992 	bl	8007daa <HAL_I2C_SlaveRxCpltCallback>
 8008a86:	bf00      	nop
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <I2C_SlaveReceive_BTF>:
 8008a8e:	b480      	push	{r7}
 8008a90:	b083      	sub	sp, #12
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d012      	beq.n	8008ac6 <I2C_SlaveReceive_BTF+0x38>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	691a      	ldr	r2, [r3, #16]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aaa:	b2d2      	uxtb	r2, r2
 8008aac:	701a      	strb	r2, [r3, #0]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab2:	1c5a      	adds	r2, r3, #1
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	625a      	str	r2, [r3, #36]	; 0x24
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008ac6:	bf00      	nop
 8008ac8:	370c      	adds	r7, #12
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr

08008ad2 <I2C_Slave_ADDR>:
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b084      	sub	sp, #16
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	6039      	str	r1, [r7, #0]
 8008adc:	2300      	movs	r3, #0
 8008ade:	73fb      	strb	r3, [r7, #15]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008aec:	2b28      	cmp	r3, #40	; 0x28
 8008aee:	d127      	bne.n	8008b40 <I2C_Slave_ADDR+0x6e>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008afe:	605a      	str	r2, [r3, #4]
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	089b      	lsrs	r3, r3, #2
 8008b04:	f003 0301 	and.w	r3, r3, #1
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d101      	bne.n	8008b10 <I2C_Slave_ADDR+0x3e>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	73fb      	strb	r3, [r7, #15]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	09db      	lsrs	r3, r3, #7
 8008b14:	f003 0301 	and.w	r3, r3, #1
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d103      	bne.n	8008b24 <I2C_Slave_ADDR+0x52>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	81bb      	strh	r3, [r7, #12]
 8008b22:	e002      	b.n	8008b2a <I2C_Slave_ADDR+0x58>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	699b      	ldr	r3, [r3, #24]
 8008b28:	81bb      	strh	r3, [r7, #12]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008b32:	89ba      	ldrh	r2, [r7, #12]
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
 8008b36:	4619      	mov	r1, r3
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f7ff f940 	bl	8007dbe <HAL_I2C_AddrCallback>
 8008b3e:	e00e      	b.n	8008b5e <I2C_Slave_ADDR+0x8c>
 8008b40:	2300      	movs	r3, #0
 8008b42:	60bb      	str	r3, [r7, #8]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	695b      	ldr	r3, [r3, #20]
 8008b4a:	60bb      	str	r3, [r7, #8]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	60bb      	str	r3, [r7, #8]
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008b5e:	bf00      	nop
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
	...

08008b68 <I2C_Slave_STOPF>:
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b76:	73fb      	strb	r3, [r7, #15]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	685a      	ldr	r2, [r3, #4]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008b86:	605a      	str	r2, [r3, #4]
 8008b88:	2300      	movs	r3, #0
 8008b8a:	60bb      	str	r3, [r7, #8]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	695b      	ldr	r3, [r3, #20]
 8008b92:	60bb      	str	r3, [r7, #8]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f042 0201 	orr.w	r2, r2, #1
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bb4:	601a      	str	r2, [r3, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bc4:	d172      	bne.n	8008cac <I2C_Slave_STOPF+0x144>
 8008bc6:	7bfb      	ldrb	r3, [r7, #15]
 8008bc8:	2b22      	cmp	r3, #34	; 0x22
 8008bca:	d002      	beq.n	8008bd2 <I2C_Slave_STOPF+0x6a>
 8008bcc:	7bfb      	ldrb	r3, [r7, #15]
 8008bce:	2b2a      	cmp	r3, #42	; 0x2a
 8008bd0:	d135      	bne.n	8008c3e <I2C_Slave_STOPF+0xd6>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d005      	beq.n	8008bf6 <I2C_Slave_STOPF+0x8e>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bee:	f043 0204 	orr.w	r2, r3, #4
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	641a      	str	r2, [r3, #64]	; 0x40
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	685a      	ldr	r2, [r3, #4]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c04:	605a      	str	r2, [r3, #4]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fe f8f7 	bl	8006dfe <HAL_DMA_GetState>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d049      	beq.n	8008caa <I2C_Slave_STOPF+0x142>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1a:	4a69      	ldr	r2, [pc, #420]	; (8008dc0 <I2C_Slave_STOPF+0x258>)
 8008c1c:	651a      	str	r2, [r3, #80]	; 0x50
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fe f8c9 	bl	8006dba <HAL_DMA_Abort_IT>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d03d      	beq.n	8008caa <I2C_Slave_STOPF+0x142>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c38:	4610      	mov	r0, r2
 8008c3a:	4798      	blx	r3
 8008c3c:	e035      	b.n	8008caa <I2C_Slave_STOPF+0x142>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d005      	beq.n	8008c62 <I2C_Slave_STOPF+0xfa>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5a:	f043 0204 	orr.w	r2, r3, #4
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	641a      	str	r2, [r3, #64]	; 0x40
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c70:	605a      	str	r2, [r3, #4]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7fe f8c1 	bl	8006dfe <HAL_DMA_GetState>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d014      	beq.n	8008cac <I2C_Slave_STOPF+0x144>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c86:	4a4e      	ldr	r2, [pc, #312]	; (8008dc0 <I2C_Slave_STOPF+0x258>)
 8008c88:	651a      	str	r2, [r3, #80]	; 0x50
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7fe f893 	bl	8006dba <HAL_DMA_Abort_IT>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d008      	beq.n	8008cac <I2C_Slave_STOPF+0x144>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008ca4:	4610      	mov	r0, r2
 8008ca6:	4798      	blx	r3
 8008ca8:	e000      	b.n	8008cac <I2C_Slave_STOPF+0x144>
 8008caa:	bf00      	nop
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d03e      	beq.n	8008d34 <I2C_Slave_STOPF+0x1cc>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	695b      	ldr	r3, [r3, #20]
 8008cbc:	f003 0304 	and.w	r3, r3, #4
 8008cc0:	2b04      	cmp	r3, #4
 8008cc2:	d112      	bne.n	8008cea <I2C_Slave_STOPF+0x182>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	691a      	ldr	r2, [r3, #16]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cce:	b2d2      	uxtb	r2, r2
 8008cd0:	701a      	strb	r2, [r3, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd6:	1c5a      	adds	r2, r3, #1
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	625a      	str	r2, [r3, #36]	; 0x24
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	695b      	ldr	r3, [r3, #20]
 8008cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cf4:	2b40      	cmp	r3, #64	; 0x40
 8008cf6:	d112      	bne.n	8008d1e <I2C_Slave_STOPF+0x1b6>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	691a      	ldr	r2, [r3, #16]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d02:	b2d2      	uxtb	r2, r2
 8008d04:	701a      	strb	r2, [r3, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0a:	1c5a      	adds	r2, r3, #1
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	625a      	str	r2, [r3, #36]	; 0x24
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	3b01      	subs	r3, #1
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d005      	beq.n	8008d34 <I2C_Slave_STOPF+0x1cc>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d2c:	f043 0204 	orr.w	r2, r3, #4
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	641a      	str	r2, [r3, #64]	; 0x40
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d003      	beq.n	8008d44 <I2C_Slave_STOPF+0x1dc>
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f843 	bl	8008dc8 <I2C_ITError>
 8008d42:	e039      	b.n	8008db8 <I2C_Slave_STOPF+0x250>
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
 8008d46:	2b2a      	cmp	r3, #42	; 0x2a
 8008d48:	d109      	bne.n	8008d5e <I2C_Slave_STOPF+0x1f6>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	631a      	str	r2, [r3, #48]	; 0x30
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2228      	movs	r2, #40	; 0x28
 8008d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7ff f826 	bl	8007daa <HAL_I2C_SlaveRxCpltCallback>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	2b28      	cmp	r3, #40	; 0x28
 8008d68:	d111      	bne.n	8008d8e <I2C_Slave_STOPF+0x226>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a15      	ldr	r2, [pc, #84]	; (8008dc4 <I2C_Slave_STOPF+0x25c>)
 8008d6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	631a      	str	r2, [r3, #48]	; 0x30
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2220      	movs	r2, #32
 8008d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f7ff f827 	bl	8007dda <HAL_I2C_ListenCpltCallback>
 8008d8c:	e014      	b.n	8008db8 <I2C_Slave_STOPF+0x250>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d92:	2b22      	cmp	r3, #34	; 0x22
 8008d94:	d002      	beq.n	8008d9c <I2C_Slave_STOPF+0x234>
 8008d96:	7bfb      	ldrb	r3, [r7, #15]
 8008d98:	2b22      	cmp	r3, #34	; 0x22
 8008d9a:	d10d      	bne.n	8008db8 <I2C_Slave_STOPF+0x250>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	631a      	str	r2, [r3, #48]	; 0x30
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2220      	movs	r2, #32
 8008da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7fe fff9 	bl	8007daa <HAL_I2C_SlaveRxCpltCallback>
 8008db8:	bf00      	nop
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	080092cd 	.word	0x080092cd
 8008dc4:	ffff0000 	.word	0xffff0000

08008dc8 <I2C_ITError>:
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dd6:	73fb      	strb	r3, [r7, #15]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008dde:	73bb      	strb	r3, [r7, #14]
 8008de0:	7bbb      	ldrb	r3, [r7, #14]
 8008de2:	2b10      	cmp	r3, #16
 8008de4:	d002      	beq.n	8008dec <I2C_ITError+0x24>
 8008de6:	7bbb      	ldrb	r3, [r7, #14]
 8008de8:	2b40      	cmp	r3, #64	; 0x40
 8008dea:	d10a      	bne.n	8008e02 <I2C_ITError+0x3a>
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
 8008dee:	2b22      	cmp	r3, #34	; 0x22
 8008df0:	d107      	bne.n	8008e02 <I2C_ITError+0x3a>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e00:	601a      	str	r2, [r3, #0]
 8008e02:	7bfb      	ldrb	r3, [r7, #15]
 8008e04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008e08:	2b28      	cmp	r3, #40	; 0x28
 8008e0a:	d107      	bne.n	8008e1c <I2C_ITError+0x54>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	631a      	str	r2, [r3, #48]	; 0x30
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2228      	movs	r2, #40	; 0x28
 8008e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008e1a:	e015      	b.n	8008e48 <I2C_ITError+0x80>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e2a:	d00a      	beq.n	8008e42 <I2C_ITError+0x7a>
 8008e2c:	7bfb      	ldrb	r3, [r7, #15]
 8008e2e:	2b60      	cmp	r3, #96	; 0x60
 8008e30:	d007      	beq.n	8008e42 <I2C_ITError+0x7a>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2220      	movs	r2, #32
 8008e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	631a      	str	r2, [r3, #48]	; 0x30
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e56:	d162      	bne.n	8008f1e <I2C_ITError+0x156>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	685a      	ldr	r2, [r3, #4]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e66:	605a      	str	r2, [r3, #4]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d020      	beq.n	8008eb8 <I2C_ITError+0xf0>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e7a:	4a6a      	ldr	r2, [pc, #424]	; (8009024 <I2C_ITError+0x25c>)
 8008e7c:	651a      	str	r2, [r3, #80]	; 0x50
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fd ff99 	bl	8006dba <HAL_DMA_Abort_IT>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f000 8089 	beq.w	8008fa2 <I2C_ITError+0x1da>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f022 0201 	bic.w	r2, r2, #1
 8008e9e:	601a      	str	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2220      	movs	r2, #32
 8008ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008eb2:	4610      	mov	r0, r2
 8008eb4:	4798      	blx	r3
 8008eb6:	e074      	b.n	8008fa2 <I2C_ITError+0x1da>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ebc:	4a59      	ldr	r2, [pc, #356]	; (8009024 <I2C_ITError+0x25c>)
 8008ebe:	651a      	str	r2, [r3, #80]	; 0x50
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7fd ff78 	bl	8006dba <HAL_DMA_Abort_IT>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d068      	beq.n	8008fa2 <I2C_ITError+0x1da>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	695b      	ldr	r3, [r3, #20]
 8008ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eda:	2b40      	cmp	r3, #64	; 0x40
 8008edc:	d10b      	bne.n	8008ef6 <I2C_ITError+0x12e>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	691a      	ldr	r2, [r3, #16]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee8:	b2d2      	uxtb	r2, r2
 8008eea:	701a      	strb	r2, [r3, #0]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef0:	1c5a      	adds	r2, r3, #1
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	625a      	str	r2, [r3, #36]	; 0x24
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f022 0201 	bic.w	r2, r2, #1
 8008f04:	601a      	str	r2, [r3, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2220      	movs	r2, #32
 8008f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008f18:	4610      	mov	r0, r2
 8008f1a:	4798      	blx	r3
 8008f1c:	e041      	b.n	8008fa2 <I2C_ITError+0x1da>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	2b60      	cmp	r3, #96	; 0x60
 8008f28:	d125      	bne.n	8008f76 <I2C_ITError+0x1ae>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2220      	movs	r2, #32
 8008f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	641a      	str	r2, [r3, #64]	; 0x40
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	695b      	ldr	r3, [r3, #20]
 8008f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f42:	2b40      	cmp	r3, #64	; 0x40
 8008f44:	d10b      	bne.n	8008f5e <I2C_ITError+0x196>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	691a      	ldr	r2, [r3, #16]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f50:	b2d2      	uxtb	r2, r2
 8008f52:	701a      	strb	r2, [r3, #0]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f58:	1c5a      	adds	r2, r3, #1
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	625a      	str	r2, [r3, #36]	; 0x24
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f022 0201 	bic.w	r2, r2, #1
 8008f6c:	601a      	str	r2, [r3, #0]
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f7fe ff5b 	bl	8007e2a <HAL_I2C_AbortCpltCallback>
 8008f74:	e015      	b.n	8008fa2 <I2C_ITError+0x1da>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	695b      	ldr	r3, [r3, #20]
 8008f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f80:	2b40      	cmp	r3, #64	; 0x40
 8008f82:	d10b      	bne.n	8008f9c <I2C_ITError+0x1d4>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	691a      	ldr	r2, [r3, #16]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8e:	b2d2      	uxtb	r2, r2
 8008f90:	701a      	strb	r2, [r3, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f96:	1c5a      	adds	r2, r3, #1
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	625a      	str	r2, [r3, #36]	; 0x24
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f7fe ff3a 	bl	8007e16 <HAL_I2C_ErrorCallback>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa6:	60bb      	str	r3, [r7, #8]
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	f003 0301 	and.w	r3, r3, #1
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d10e      	bne.n	8008fd0 <I2C_ITError+0x208>
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	f003 0302 	and.w	r3, r3, #2
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d109      	bne.n	8008fd0 <I2C_ITError+0x208>
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	f003 0304 	and.w	r3, r3, #4
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d104      	bne.n	8008fd0 <I2C_ITError+0x208>
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	f003 0308 	and.w	r3, r3, #8
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d007      	beq.n	8008fe0 <I2C_ITError+0x218>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	685a      	ldr	r2, [r3, #4]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008fde:	605a      	str	r2, [r3, #4]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fe6:	73fb      	strb	r3, [r7, #15]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fec:	f003 0304 	and.w	r3, r3, #4
 8008ff0:	2b04      	cmp	r3, #4
 8008ff2:	d113      	bne.n	800901c <I2C_ITError+0x254>
 8008ff4:	7bfb      	ldrb	r3, [r7, #15]
 8008ff6:	2b28      	cmp	r3, #40	; 0x28
 8008ff8:	d110      	bne.n	800901c <I2C_ITError+0x254>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a0a      	ldr	r2, [pc, #40]	; (8009028 <I2C_ITError+0x260>)
 8008ffe:	62da      	str	r2, [r3, #44]	; 0x2c
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	631a      	str	r2, [r3, #48]	; 0x30
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2220      	movs	r2, #32
 800900a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7fe fedf 	bl	8007dda <HAL_I2C_ListenCpltCallback>
 800901c:	bf00      	nop
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	080092cd 	.word	0x080092cd
 8009028:	ffff0000 	.word	0xffff0000

0800902c <I2C_MasterRequestWrite>:
 800902c:	b580      	push	{r7, lr}
 800902e:	b088      	sub	sp, #32
 8009030:	af02      	add	r7, sp, #8
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	607a      	str	r2, [r7, #4]
 8009036:	603b      	str	r3, [r7, #0]
 8009038:	460b      	mov	r3, r1
 800903a:	817b      	strh	r3, [r7, #10]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009040:	617b      	str	r3, [r7, #20]
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	2b08      	cmp	r3, #8
 8009046:	d006      	beq.n	8009056 <I2C_MasterRequestWrite+0x2a>
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d003      	beq.n	8009056 <I2C_MasterRequestWrite+0x2a>
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009054:	d108      	bne.n	8009068 <I2C_MasterRequestWrite+0x3c>
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009064:	601a      	str	r2, [r3, #0]
 8009066:	e00b      	b.n	8009080 <I2C_MasterRequestWrite+0x54>
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800906c:	2b12      	cmp	r3, #18
 800906e:	d107      	bne.n	8009080 <I2C_MasterRequestWrite+0x54>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800907e:	601a      	str	r2, [r3, #0]
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	9300      	str	r3, [sp, #0]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f000 f9c5 	bl	800941c <I2C_WaitOnFlagUntilTimeout>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d00d      	beq.n	80090b4 <I2C_MasterRequestWrite+0x88>
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090a6:	d103      	bne.n	80090b0 <I2C_MasterRequestWrite+0x84>
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090ae:	641a      	str	r2, [r3, #64]	; 0x40
 80090b0:	2303      	movs	r3, #3
 80090b2:	e035      	b.n	8009120 <I2C_MasterRequestWrite+0xf4>
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	691b      	ldr	r3, [r3, #16]
 80090b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090bc:	d108      	bne.n	80090d0 <I2C_MasterRequestWrite+0xa4>
 80090be:	897b      	ldrh	r3, [r7, #10]
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	461a      	mov	r2, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80090cc:	611a      	str	r2, [r3, #16]
 80090ce:	e01b      	b.n	8009108 <I2C_MasterRequestWrite+0xdc>
 80090d0:	897b      	ldrh	r3, [r7, #10]
 80090d2:	11db      	asrs	r3, r3, #7
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	f003 0306 	and.w	r3, r3, #6
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	f063 030f 	orn	r3, r3, #15
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	611a      	str	r2, [r3, #16]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	490e      	ldr	r1, [pc, #56]	; (8009128 <I2C_MasterRequestWrite+0xfc>)
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	f000 f9eb 	bl	80094ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d001      	beq.n	80090fe <I2C_MasterRequestWrite+0xd2>
 80090fa:	2301      	movs	r3, #1
 80090fc:	e010      	b.n	8009120 <I2C_MasterRequestWrite+0xf4>
 80090fe:	897b      	ldrh	r3, [r7, #10]
 8009100:	b2da      	uxtb	r2, r3
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	611a      	str	r2, [r3, #16]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	4907      	ldr	r1, [pc, #28]	; (800912c <I2C_MasterRequestWrite+0x100>)
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	f000 f9db 	bl	80094ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d001      	beq.n	800911e <I2C_MasterRequestWrite+0xf2>
 800911a:	2301      	movs	r3, #1
 800911c:	e000      	b.n	8009120 <I2C_MasterRequestWrite+0xf4>
 800911e:	2300      	movs	r3, #0
 8009120:	4618      	mov	r0, r3
 8009122:	3718      	adds	r7, #24
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	00010008 	.word	0x00010008
 800912c:	00010002 	.word	0x00010002

08009130 <I2C_MasterRequestRead>:
 8009130:	b580      	push	{r7, lr}
 8009132:	b088      	sub	sp, #32
 8009134:	af02      	add	r7, sp, #8
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	607a      	str	r2, [r7, #4]
 800913a:	603b      	str	r3, [r7, #0]
 800913c:	460b      	mov	r3, r1
 800913e:	817b      	strh	r3, [r7, #10]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009144:	617b      	str	r3, [r7, #20]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009154:	601a      	str	r2, [r3, #0]
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	2b08      	cmp	r3, #8
 800915a:	d006      	beq.n	800916a <I2C_MasterRequestRead+0x3a>
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d003      	beq.n	800916a <I2C_MasterRequestRead+0x3a>
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009168:	d108      	bne.n	800917c <I2C_MasterRequestRead+0x4c>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009178:	601a      	str	r2, [r3, #0]
 800917a:	e00b      	b.n	8009194 <I2C_MasterRequestRead+0x64>
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009180:	2b11      	cmp	r3, #17
 8009182:	d107      	bne.n	8009194 <I2C_MasterRequestRead+0x64>
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009192:	601a      	str	r2, [r3, #0]
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f000 f93b 	bl	800941c <I2C_WaitOnFlagUntilTimeout>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00d      	beq.n	80091c8 <I2C_MasterRequestRead+0x98>
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091ba:	d103      	bne.n	80091c4 <I2C_MasterRequestRead+0x94>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091c2:	641a      	str	r2, [r3, #64]	; 0x40
 80091c4:	2303      	movs	r3, #3
 80091c6:	e079      	b.n	80092bc <I2C_MasterRequestRead+0x18c>
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	691b      	ldr	r3, [r3, #16]
 80091cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091d0:	d108      	bne.n	80091e4 <I2C_MasterRequestRead+0xb4>
 80091d2:	897b      	ldrh	r3, [r7, #10]
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	f043 0301 	orr.w	r3, r3, #1
 80091da:	b2da      	uxtb	r2, r3
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	611a      	str	r2, [r3, #16]
 80091e2:	e05f      	b.n	80092a4 <I2C_MasterRequestRead+0x174>
 80091e4:	897b      	ldrh	r3, [r7, #10]
 80091e6:	11db      	asrs	r3, r3, #7
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	f003 0306 	and.w	r3, r3, #6
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	f063 030f 	orn	r3, r3, #15
 80091f4:	b2da      	uxtb	r2, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	611a      	str	r2, [r3, #16]
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	4930      	ldr	r1, [pc, #192]	; (80092c4 <I2C_MasterRequestRead+0x194>)
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f000 f961 	bl	80094ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <I2C_MasterRequestRead+0xe2>
 800920e:	2301      	movs	r3, #1
 8009210:	e054      	b.n	80092bc <I2C_MasterRequestRead+0x18c>
 8009212:	897b      	ldrh	r3, [r7, #10]
 8009214:	b2da      	uxtb	r2, r3
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	611a      	str	r2, [r3, #16]
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	4929      	ldr	r1, [pc, #164]	; (80092c8 <I2C_MasterRequestRead+0x198>)
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f000 f951 	bl	80094ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d001      	beq.n	8009232 <I2C_MasterRequestRead+0x102>
 800922e:	2301      	movs	r3, #1
 8009230:	e044      	b.n	80092bc <I2C_MasterRequestRead+0x18c>
 8009232:	2300      	movs	r3, #0
 8009234:	613b      	str	r3, [r7, #16]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	695b      	ldr	r3, [r3, #20]
 800923c:	613b      	str	r3, [r7, #16]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	613b      	str	r3, [r7, #16]
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009256:	601a      	str	r2, [r3, #0]
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	9300      	str	r3, [sp, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009264:	68f8      	ldr	r0, [r7, #12]
 8009266:	f000 f8d9 	bl	800941c <I2C_WaitOnFlagUntilTimeout>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d00d      	beq.n	800928c <I2C_MasterRequestRead+0x15c>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800927a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800927e:	d103      	bne.n	8009288 <I2C_MasterRequestRead+0x158>
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009286:	641a      	str	r2, [r3, #64]	; 0x40
 8009288:	2303      	movs	r3, #3
 800928a:	e017      	b.n	80092bc <I2C_MasterRequestRead+0x18c>
 800928c:	897b      	ldrh	r3, [r7, #10]
 800928e:	11db      	asrs	r3, r3, #7
 8009290:	b2db      	uxtb	r3, r3
 8009292:	f003 0306 	and.w	r3, r3, #6
 8009296:	b2db      	uxtb	r3, r3
 8009298:	f063 030e 	orn	r3, r3, #14
 800929c:	b2da      	uxtb	r2, r3
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	611a      	str	r2, [r3, #16]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	4907      	ldr	r1, [pc, #28]	; (80092c8 <I2C_MasterRequestRead+0x198>)
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f000 f90d 	bl	80094ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <I2C_MasterRequestRead+0x18a>
 80092b6:	2301      	movs	r3, #1
 80092b8:	e000      	b.n	80092bc <I2C_MasterRequestRead+0x18c>
 80092ba:	2300      	movs	r3, #0
 80092bc:	4618      	mov	r0, r3
 80092be:	3718      	adds	r7, #24
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	00010008 	.word	0x00010008
 80092c8:	00010002 	.word	0x00010002

080092cc <I2C_DMAAbort>:
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b086      	sub	sp, #24
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	2300      	movs	r3, #0
 80092d6:	60fb      	str	r3, [r7, #12]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092dc:	617b      	str	r3, [r7, #20]
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092e4:	74fb      	strb	r3, [r7, #19]
 80092e6:	4b4b      	ldr	r3, [pc, #300]	; (8009414 <I2C_DMAAbort+0x148>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	08db      	lsrs	r3, r3, #3
 80092ec:	4a4a      	ldr	r2, [pc, #296]	; (8009418 <I2C_DMAAbort+0x14c>)
 80092ee:	fba2 2303 	umull	r2, r3, r2, r3
 80092f2:	0a1a      	lsrs	r2, r3, #8
 80092f4:	4613      	mov	r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	4413      	add	r3, r2
 80092fa:	00da      	lsls	r2, r3, #3
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	60fb      	str	r3, [r7, #12]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d106      	bne.n	8009314 <I2C_DMAAbort+0x48>
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800930a:	f043 0220 	orr.w	r2, r3, #32
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	641a      	str	r2, [r3, #64]	; 0x40
 8009312:	e00a      	b.n	800932a <I2C_DMAAbort+0x5e>
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	3b01      	subs	r3, #1
 8009318:	60fb      	str	r3, [r7, #12]
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009328:	d0ea      	beq.n	8009300 <I2C_DMAAbort+0x34>
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800932e:	2b00      	cmp	r3, #0
 8009330:	d003      	beq.n	800933a <I2C_DMAAbort+0x6e>
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009336:	2200      	movs	r2, #0
 8009338:	63da      	str	r2, [r3, #60]	; 0x3c
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800933e:	2b00      	cmp	r3, #0
 8009340:	d003      	beq.n	800934a <I2C_DMAAbort+0x7e>
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009346:	2200      	movs	r2, #0
 8009348:	63da      	str	r2, [r3, #60]	; 0x3c
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	2200      	movs	r2, #0
 800935e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009364:	2b00      	cmp	r3, #0
 8009366:	d003      	beq.n	8009370 <I2C_DMAAbort+0xa4>
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800936c:	2200      	movs	r2, #0
 800936e:	651a      	str	r2, [r3, #80]	; 0x50
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009374:	2b00      	cmp	r3, #0
 8009376:	d003      	beq.n	8009380 <I2C_DMAAbort+0xb4>
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800937c:	2200      	movs	r2, #0
 800937e:	651a      	str	r2, [r3, #80]	; 0x50
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f022 0201 	bic.w	r2, r2, #1
 800938e:	601a      	str	r2, [r3, #0]
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009396:	b2db      	uxtb	r3, r3
 8009398:	2b60      	cmp	r3, #96	; 0x60
 800939a:	d10e      	bne.n	80093ba <I2C_DMAAbort+0xee>
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	2220      	movs	r2, #32
 80093a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	2200      	movs	r2, #0
 80093b0:	641a      	str	r2, [r3, #64]	; 0x40
 80093b2:	6978      	ldr	r0, [r7, #20]
 80093b4:	f7fe fd39 	bl	8007e2a <HAL_I2C_AbortCpltCallback>
 80093b8:	e027      	b.n	800940a <I2C_DMAAbort+0x13e>
 80093ba:	7cfb      	ldrb	r3, [r7, #19]
 80093bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80093c0:	2b28      	cmp	r3, #40	; 0x28
 80093c2:	d117      	bne.n	80093f4 <I2C_DMAAbort+0x128>
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f042 0201 	orr.w	r2, r2, #1
 80093d2:	601a      	str	r2, [r3, #0]
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80093e2:	601a      	str	r2, [r3, #0]
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	2200      	movs	r2, #0
 80093e8:	631a      	str	r2, [r3, #48]	; 0x30
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	2228      	movs	r2, #40	; 0x28
 80093ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80093f2:	e007      	b.n	8009404 <I2C_DMAAbort+0x138>
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	2220      	movs	r2, #32
 80093f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	2200      	movs	r2, #0
 8009400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009404:	6978      	ldr	r0, [r7, #20]
 8009406:	f7fe fd06 	bl	8007e16 <HAL_I2C_ErrorCallback>
 800940a:	bf00      	nop
 800940c:	3718      	adds	r7, #24
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	20000004 	.word	0x20000004
 8009418:	14f8b589 	.word	0x14f8b589

0800941c <I2C_WaitOnFlagUntilTimeout>:
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	603b      	str	r3, [r7, #0]
 8009428:	4613      	mov	r3, r2
 800942a:	71fb      	strb	r3, [r7, #7]
 800942c:	e025      	b.n	800947a <I2C_WaitOnFlagUntilTimeout+0x5e>
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009434:	d021      	beq.n	800947a <I2C_WaitOnFlagUntilTimeout+0x5e>
 8009436:	f7fd fb0f 	bl	8006a58 <HAL_GetTick>
 800943a:	4602      	mov	r2, r0
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	1ad3      	subs	r3, r2, r3
 8009440:	683a      	ldr	r2, [r7, #0]
 8009442:	429a      	cmp	r2, r3
 8009444:	d302      	bcc.n	800944c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d116      	bne.n	800947a <I2C_WaitOnFlagUntilTimeout+0x5e>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2200      	movs	r2, #0
 8009450:	631a      	str	r2, [r3, #48]	; 0x30
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2220      	movs	r2, #32
 8009456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009466:	f043 0220 	orr.w	r2, r3, #32
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	641a      	str	r2, [r3, #64]	; 0x40
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009476:	2301      	movs	r3, #1
 8009478:	e023      	b.n	80094c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	0c1b      	lsrs	r3, r3, #16
 800947e:	b2db      	uxtb	r3, r3
 8009480:	2b01      	cmp	r3, #1
 8009482:	d10d      	bne.n	80094a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	43da      	mvns	r2, r3
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	4013      	ands	r3, r2
 8009490:	b29b      	uxth	r3, r3
 8009492:	2b00      	cmp	r3, #0
 8009494:	bf0c      	ite	eq
 8009496:	2301      	moveq	r3, #1
 8009498:	2300      	movne	r3, #0
 800949a:	b2db      	uxtb	r3, r3
 800949c:	461a      	mov	r2, r3
 800949e:	e00c      	b.n	80094ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	43da      	mvns	r2, r3
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	4013      	ands	r3, r2
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	bf0c      	ite	eq
 80094b2:	2301      	moveq	r3, #1
 80094b4:	2300      	movne	r3, #0
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	461a      	mov	r2, r3
 80094ba:	79fb      	ldrb	r3, [r7, #7]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d0b6      	beq.n	800942e <I2C_WaitOnFlagUntilTimeout+0x12>
 80094c0:	2300      	movs	r3, #0
 80094c2:	4618      	mov	r0, r3
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b084      	sub	sp, #16
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	60f8      	str	r0, [r7, #12]
 80094d2:	60b9      	str	r1, [r7, #8]
 80094d4:	607a      	str	r2, [r7, #4]
 80094d6:	603b      	str	r3, [r7, #0]
 80094d8:	e051      	b.n	800957e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	695b      	ldr	r3, [r3, #20]
 80094e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094e8:	d123      	bne.n	8009532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094f8:	601a      	str	r2, [r3, #0]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009502:	615a      	str	r2, [r3, #20]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2200      	movs	r2, #0
 8009508:	631a      	str	r2, [r3, #48]	; 0x30
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2220      	movs	r2, #32
 800950e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800951e:	f043 0204 	orr.w	r2, r3, #4
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	641a      	str	r2, [r3, #64]	; 0x40
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800952e:	2301      	movs	r3, #1
 8009530:	e046      	b.n	80095c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009538:	d021      	beq.n	800957e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 800953a:	f7fd fa8d 	bl	8006a58 <HAL_GetTick>
 800953e:	4602      	mov	r2, r0
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	429a      	cmp	r2, r3
 8009548:	d302      	bcc.n	8009550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d116      	bne.n	800957e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2200      	movs	r2, #0
 8009554:	631a      	str	r2, [r3, #48]	; 0x30
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2220      	movs	r2, #32
 800955a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956a:	f043 0220 	orr.w	r2, r3, #32
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	641a      	str	r2, [r3, #64]	; 0x40
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2200      	movs	r2, #0
 8009576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800957a:	2301      	movs	r3, #1
 800957c:	e020      	b.n	80095c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	0c1b      	lsrs	r3, r3, #16
 8009582:	b2db      	uxtb	r3, r3
 8009584:	2b01      	cmp	r3, #1
 8009586:	d10c      	bne.n	80095a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	43da      	mvns	r2, r3
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	4013      	ands	r3, r2
 8009594:	b29b      	uxth	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	bf14      	ite	ne
 800959a:	2301      	movne	r3, #1
 800959c:	2300      	moveq	r3, #0
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	e00b      	b.n	80095ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	43da      	mvns	r2, r3
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	4013      	ands	r3, r2
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	bf14      	ite	ne
 80095b4:	2301      	movne	r3, #1
 80095b6:	2300      	moveq	r3, #0
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d18d      	bne.n	80094da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80095be:	2300      	movs	r3, #0
 80095c0:	4618      	mov	r0, r3
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <I2C_WaitOnTXEFlagUntilTimeout>:
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
 80095d4:	e02d      	b.n	8009632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	f000 f900 	bl	80097dc <I2C_IsAcknowledgeFailed>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d001      	beq.n	80095e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 80095e2:	2301      	movs	r3, #1
 80095e4:	e02d      	b.n	8009642 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095ec:	d021      	beq.n	8009632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 80095ee:	f7fd fa33 	bl	8006a58 <HAL_GetTick>
 80095f2:	4602      	mov	r2, r0
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	1ad3      	subs	r3, r2, r3
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d302      	bcc.n	8009604 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d116      	bne.n	8009632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	631a      	str	r2, [r3, #48]	; 0x30
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2220      	movs	r2, #32
 800960e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2200      	movs	r2, #0
 8009616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961e:	f043 0220 	orr.w	r2, r3, #32
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	641a      	str	r2, [r3, #64]	; 0x40
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800962e:	2301      	movs	r3, #1
 8009630:	e007      	b.n	8009642 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	695b      	ldr	r3, [r3, #20]
 8009638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800963c:	2b80      	cmp	r3, #128	; 0x80
 800963e:	d1ca      	bne.n	80095d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8009640:	2300      	movs	r3, #0
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <I2C_WaitOnBTFFlagUntilTimeout>:
 800964a:	b580      	push	{r7, lr}
 800964c:	b084      	sub	sp, #16
 800964e:	af00      	add	r7, sp, #0
 8009650:	60f8      	str	r0, [r7, #12]
 8009652:	60b9      	str	r1, [r7, #8]
 8009654:	607a      	str	r2, [r7, #4]
 8009656:	e02d      	b.n	80096b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8009658:	68f8      	ldr	r0, [r7, #12]
 800965a:	f000 f8bf 	bl	80097dc <I2C_IsAcknowledgeFailed>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d001      	beq.n	8009668 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8009664:	2301      	movs	r3, #1
 8009666:	e02d      	b.n	80096c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800966e:	d021      	beq.n	80096b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8009670:	f7fd f9f2 	bl	8006a58 <HAL_GetTick>
 8009674:	4602      	mov	r2, r0
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	1ad3      	subs	r3, r2, r3
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	429a      	cmp	r2, r3
 800967e:	d302      	bcc.n	8009686 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d116      	bne.n	80096b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	631a      	str	r2, [r3, #48]	; 0x30
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2220      	movs	r2, #32
 8009690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2200      	movs	r2, #0
 8009698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a0:	f043 0220 	orr.w	r2, r3, #32
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	641a      	str	r2, [r3, #64]	; 0x40
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80096b0:	2301      	movs	r3, #1
 80096b2:	e007      	b.n	80096c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	695b      	ldr	r3, [r3, #20]
 80096ba:	f003 0304 	and.w	r3, r3, #4
 80096be:	2b04      	cmp	r3, #4
 80096c0:	d1ca      	bne.n	8009658 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 80096c2:	2300      	movs	r3, #0
 80096c4:	4618      	mov	r0, r3
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <I2C_WaitOnSTOPRequestThroughIT>:
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	2300      	movs	r3, #0
 80096d6:	60fb      	str	r3, [r7, #12]
 80096d8:	4b13      	ldr	r3, [pc, #76]	; (8009728 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	08db      	lsrs	r3, r3, #3
 80096de:	4a13      	ldr	r2, [pc, #76]	; (800972c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80096e0:	fba2 2303 	umull	r2, r3, r2, r3
 80096e4:	0a1a      	lsrs	r2, r3, #8
 80096e6:	4613      	mov	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	4413      	add	r3, r2
 80096ec:	60fb      	str	r3, [r7, #12]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	3b01      	subs	r3, #1
 80096f2:	60fb      	str	r3, [r7, #12]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d107      	bne.n	800970a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fe:	f043 0220 	orr.w	r2, r3, #32
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	641a      	str	r2, [r3, #64]	; 0x40
 8009706:	2301      	movs	r3, #1
 8009708:	e008      	b.n	800971c <I2C_WaitOnSTOPRequestThroughIT+0x50>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009718:	d0e9      	beq.n	80096ee <I2C_WaitOnSTOPRequestThroughIT+0x22>
 800971a:	2300      	movs	r3, #0
 800971c:	4618      	mov	r0, r3
 800971e:	3714      	adds	r7, #20
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr
 8009728:	20000004 	.word	0x20000004
 800972c:	14f8b589 	.word	0x14f8b589

08009730 <I2C_WaitOnRXNEFlagUntilTimeout>:
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	607a      	str	r2, [r7, #4]
 800973c:	e042      	b.n	80097c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	695b      	ldr	r3, [r3, #20]
 8009744:	f003 0310 	and.w	r3, r3, #16
 8009748:	2b10      	cmp	r3, #16
 800974a:	d119      	bne.n	8009780 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f06f 0210 	mvn.w	r2, #16
 8009754:	615a      	str	r2, [r3, #20]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2200      	movs	r2, #0
 800975a:	631a      	str	r2, [r3, #48]	; 0x30
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2220      	movs	r2, #32
 8009760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2200      	movs	r2, #0
 8009768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	641a      	str	r2, [r3, #64]	; 0x40
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800977c:	2301      	movs	r3, #1
 800977e:	e029      	b.n	80097d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8009780:	f7fd f96a 	bl	8006a58 <HAL_GetTick>
 8009784:	4602      	mov	r2, r0
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	429a      	cmp	r2, r3
 800978e:	d302      	bcc.n	8009796 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d116      	bne.n	80097c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2200      	movs	r2, #0
 800979a:	631a      	str	r2, [r3, #48]	; 0x30
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2220      	movs	r2, #32
 80097a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b0:	f043 0220 	orr.w	r2, r3, #32
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	641a      	str	r2, [r3, #64]	; 0x40
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80097c0:	2301      	movs	r3, #1
 80097c2:	e007      	b.n	80097d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	695b      	ldr	r3, [r3, #20]
 80097ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ce:	2b40      	cmp	r3, #64	; 0x40
 80097d0:	d1b5      	bne.n	800973e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
 80097d2:	2300      	movs	r3, #0
 80097d4:	4618      	mov	r0, r3
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <I2C_IsAcknowledgeFailed>:
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	695b      	ldr	r3, [r3, #20]
 80097ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097f2:	d11b      	bne.n	800982c <I2C_IsAcknowledgeFailed+0x50>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80097fc:	615a      	str	r2, [r3, #20]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	631a      	str	r2, [r3, #48]	; 0x30
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2220      	movs	r2, #32
 8009808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009818:	f043 0204 	orr.w	r2, r3, #4
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	641a      	str	r2, [r3, #64]	; 0x40
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009828:	2301      	movs	r3, #1
 800982a:	e000      	b.n	800982e <I2C_IsAcknowledgeFailed+0x52>
 800982c:	2300      	movs	r3, #0
 800982e:	4618      	mov	r0, r3
 8009830:	370c      	adds	r7, #12
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr

0800983a <I2C_ConvertOtherXferOptions>:
 800983a:	b480      	push	{r7}
 800983c:	b083      	sub	sp, #12
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009846:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800984a:	d103      	bne.n	8009854 <I2C_ConvertOtherXferOptions+0x1a>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	62da      	str	r2, [r3, #44]	; 0x2c
 8009852:	e007      	b.n	8009864 <I2C_ConvertOtherXferOptions+0x2a>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009858:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800985c:	d102      	bne.n	8009864 <I2C_ConvertOtherXferOptions+0x2a>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2208      	movs	r2, #8
 8009862:	62da      	str	r2, [r3, #44]	; 0x2c
 8009864:	bf00      	nop
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <HAL_PWR_EnableBkUpAccess>:
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	4b06      	ldr	r3, [pc, #24]	; (8009890 <HAL_PWR_EnableBkUpAccess+0x20>)
 8009878:	2201      	movs	r2, #1
 800987a:	601a      	str	r2, [r3, #0]
 800987c:	4b05      	ldr	r3, [pc, #20]	; (8009894 <HAL_PWR_EnableBkUpAccess+0x24>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	607b      	str	r3, [r7, #4]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr
 8009890:	420e0020 	.word	0x420e0020
 8009894:	40007000 	.word	0x40007000

08009898 <HAL_PWR_DisableBkUpAccess>:
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	4b06      	ldr	r3, [pc, #24]	; (80098b8 <HAL_PWR_DisableBkUpAccess+0x20>)
 80098a0:	2200      	movs	r2, #0
 80098a2:	601a      	str	r2, [r3, #0]
 80098a4:	4b05      	ldr	r3, [pc, #20]	; (80098bc <HAL_PWR_DisableBkUpAccess+0x24>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	607b      	str	r3, [r7, #4]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	420e0020 	.word	0x420e0020
 80098bc:	40007000 	.word	0x40007000

080098c0 <HAL_RCC_OscConfig>:
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b086      	sub	sp, #24
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d101      	bne.n	80098d2 <HAL_RCC_OscConfig+0x12>
 80098ce:	2301      	movs	r3, #1
 80098d0:	e267      	b.n	8009da2 <HAL_RCC_OscConfig+0x4e2>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f003 0301 	and.w	r3, r3, #1
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d075      	beq.n	80099ca <HAL_RCC_OscConfig+0x10a>
 80098de:	4b88      	ldr	r3, [pc, #544]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	f003 030c 	and.w	r3, r3, #12
 80098e6:	2b04      	cmp	r3, #4
 80098e8:	d00c      	beq.n	8009904 <HAL_RCC_OscConfig+0x44>
 80098ea:	4b85      	ldr	r3, [pc, #532]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	f003 030c 	and.w	r3, r3, #12
 80098f2:	2b08      	cmp	r3, #8
 80098f4:	d112      	bne.n	800991c <HAL_RCC_OscConfig+0x5c>
 80098f6:	4b82      	ldr	r3, [pc, #520]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009902:	d10b      	bne.n	800991c <HAL_RCC_OscConfig+0x5c>
 8009904:	4b7e      	ldr	r3, [pc, #504]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800990c:	2b00      	cmp	r3, #0
 800990e:	d05b      	beq.n	80099c8 <HAL_RCC_OscConfig+0x108>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d157      	bne.n	80099c8 <HAL_RCC_OscConfig+0x108>
 8009918:	2301      	movs	r3, #1
 800991a:	e242      	b.n	8009da2 <HAL_RCC_OscConfig+0x4e2>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009924:	d106      	bne.n	8009934 <HAL_RCC_OscConfig+0x74>
 8009926:	4b76      	ldr	r3, [pc, #472]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a75      	ldr	r2, [pc, #468]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 800992c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009930:	6013      	str	r3, [r2, #0]
 8009932:	e01d      	b.n	8009970 <HAL_RCC_OscConfig+0xb0>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800993c:	d10c      	bne.n	8009958 <HAL_RCC_OscConfig+0x98>
 800993e:	4b70      	ldr	r3, [pc, #448]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a6f      	ldr	r2, [pc, #444]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 8009944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009948:	6013      	str	r3, [r2, #0]
 800994a:	4b6d      	ldr	r3, [pc, #436]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a6c      	ldr	r2, [pc, #432]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 8009950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009954:	6013      	str	r3, [r2, #0]
 8009956:	e00b      	b.n	8009970 <HAL_RCC_OscConfig+0xb0>
 8009958:	4b69      	ldr	r3, [pc, #420]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a68      	ldr	r2, [pc, #416]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 800995e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009962:	6013      	str	r3, [r2, #0]
 8009964:	4b66      	ldr	r3, [pc, #408]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a65      	ldr	r2, [pc, #404]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 800996a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800996e:	6013      	str	r3, [r2, #0]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d013      	beq.n	80099a0 <HAL_RCC_OscConfig+0xe0>
 8009978:	f7fd f86e 	bl	8006a58 <HAL_GetTick>
 800997c:	6138      	str	r0, [r7, #16]
 800997e:	e008      	b.n	8009992 <HAL_RCC_OscConfig+0xd2>
 8009980:	f7fd f86a 	bl	8006a58 <HAL_GetTick>
 8009984:	4602      	mov	r2, r0
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	1ad3      	subs	r3, r2, r3
 800998a:	2b64      	cmp	r3, #100	; 0x64
 800998c:	d901      	bls.n	8009992 <HAL_RCC_OscConfig+0xd2>
 800998e:	2303      	movs	r3, #3
 8009990:	e207      	b.n	8009da2 <HAL_RCC_OscConfig+0x4e2>
 8009992:	4b5b      	ldr	r3, [pc, #364]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800999a:	2b00      	cmp	r3, #0
 800999c:	d0f0      	beq.n	8009980 <HAL_RCC_OscConfig+0xc0>
 800999e:	e014      	b.n	80099ca <HAL_RCC_OscConfig+0x10a>
 80099a0:	f7fd f85a 	bl	8006a58 <HAL_GetTick>
 80099a4:	6138      	str	r0, [r7, #16]
 80099a6:	e008      	b.n	80099ba <HAL_RCC_OscConfig+0xfa>
 80099a8:	f7fd f856 	bl	8006a58 <HAL_GetTick>
 80099ac:	4602      	mov	r2, r0
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	1ad3      	subs	r3, r2, r3
 80099b2:	2b64      	cmp	r3, #100	; 0x64
 80099b4:	d901      	bls.n	80099ba <HAL_RCC_OscConfig+0xfa>
 80099b6:	2303      	movs	r3, #3
 80099b8:	e1f3      	b.n	8009da2 <HAL_RCC_OscConfig+0x4e2>
 80099ba:	4b51      	ldr	r3, [pc, #324]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d1f0      	bne.n	80099a8 <HAL_RCC_OscConfig+0xe8>
 80099c6:	e000      	b.n	80099ca <HAL_RCC_OscConfig+0x10a>
 80099c8:	bf00      	nop
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f003 0302 	and.w	r3, r3, #2
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d063      	beq.n	8009a9e <HAL_RCC_OscConfig+0x1de>
 80099d6:	4b4a      	ldr	r3, [pc, #296]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	f003 030c 	and.w	r3, r3, #12
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d00b      	beq.n	80099fa <HAL_RCC_OscConfig+0x13a>
 80099e2:	4b47      	ldr	r3, [pc, #284]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	f003 030c 	and.w	r3, r3, #12
 80099ea:	2b08      	cmp	r3, #8
 80099ec:	d11c      	bne.n	8009a28 <HAL_RCC_OscConfig+0x168>
 80099ee:	4b44      	ldr	r3, [pc, #272]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d116      	bne.n	8009a28 <HAL_RCC_OscConfig+0x168>
 80099fa:	4b41      	ldr	r3, [pc, #260]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f003 0302 	and.w	r3, r3, #2
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d005      	beq.n	8009a12 <HAL_RCC_OscConfig+0x152>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	68db      	ldr	r3, [r3, #12]
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d001      	beq.n	8009a12 <HAL_RCC_OscConfig+0x152>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e1c7      	b.n	8009da2 <HAL_RCC_OscConfig+0x4e2>
 8009a12:	4b3b      	ldr	r3, [pc, #236]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	00db      	lsls	r3, r3, #3
 8009a20:	4937      	ldr	r1, [pc, #220]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 8009a22:	4313      	orrs	r3, r2
 8009a24:	600b      	str	r3, [r1, #0]
 8009a26:	e03a      	b.n	8009a9e <HAL_RCC_OscConfig+0x1de>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d020      	beq.n	8009a72 <HAL_RCC_OscConfig+0x1b2>
 8009a30:	4b34      	ldr	r3, [pc, #208]	; (8009b04 <HAL_RCC_OscConfig+0x244>)
 8009a32:	2201      	movs	r2, #1
 8009a34:	601a      	str	r2, [r3, #0]
 8009a36:	f7fd f80f 	bl	8006a58 <HAL_GetTick>
 8009a3a:	6138      	str	r0, [r7, #16]
 8009a3c:	e008      	b.n	8009a50 <HAL_RCC_OscConfig+0x190>
 8009a3e:	f7fd f80b 	bl	8006a58 <HAL_GetTick>
 8009a42:	4602      	mov	r2, r0
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	1ad3      	subs	r3, r2, r3
 8009a48:	2b02      	cmp	r3, #2
 8009a4a:	d901      	bls.n	8009a50 <HAL_RCC_OscConfig+0x190>
 8009a4c:	2303      	movs	r3, #3
 8009a4e:	e1a8      	b.n	8009da2 <HAL_RCC_OscConfig+0x4e2>
 8009a50:	4b2b      	ldr	r3, [pc, #172]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f003 0302 	and.w	r3, r3, #2
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d0f0      	beq.n	8009a3e <HAL_RCC_OscConfig+0x17e>
 8009a5c:	4b28      	ldr	r3, [pc, #160]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	00db      	lsls	r3, r3, #3
 8009a6a:	4925      	ldr	r1, [pc, #148]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	600b      	str	r3, [r1, #0]
 8009a70:	e015      	b.n	8009a9e <HAL_RCC_OscConfig+0x1de>
 8009a72:	4b24      	ldr	r3, [pc, #144]	; (8009b04 <HAL_RCC_OscConfig+0x244>)
 8009a74:	2200      	movs	r2, #0
 8009a76:	601a      	str	r2, [r3, #0]
 8009a78:	f7fc ffee 	bl	8006a58 <HAL_GetTick>
 8009a7c:	6138      	str	r0, [r7, #16]
 8009a7e:	e008      	b.n	8009a92 <HAL_RCC_OscConfig+0x1d2>
 8009a80:	f7fc ffea 	bl	8006a58 <HAL_GetTick>
 8009a84:	4602      	mov	r2, r0
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	1ad3      	subs	r3, r2, r3
 8009a8a:	2b02      	cmp	r3, #2
 8009a8c:	d901      	bls.n	8009a92 <HAL_RCC_OscConfig+0x1d2>
 8009a8e:	2303      	movs	r3, #3
 8009a90:	e187      	b.n	8009da2 <HAL_RCC_OscConfig+0x4e2>
 8009a92:	4b1b      	ldr	r3, [pc, #108]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f003 0302 	and.w	r3, r3, #2
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1f0      	bne.n	8009a80 <HAL_RCC_OscConfig+0x1c0>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f003 0308 	and.w	r3, r3, #8
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d036      	beq.n	8009b18 <HAL_RCC_OscConfig+0x258>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	695b      	ldr	r3, [r3, #20]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d016      	beq.n	8009ae0 <HAL_RCC_OscConfig+0x220>
 8009ab2:	4b15      	ldr	r3, [pc, #84]	; (8009b08 <HAL_RCC_OscConfig+0x248>)
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	601a      	str	r2, [r3, #0]
 8009ab8:	f7fc ffce 	bl	8006a58 <HAL_GetTick>
 8009abc:	6138      	str	r0, [r7, #16]
 8009abe:	e008      	b.n	8009ad2 <HAL_RCC_OscConfig+0x212>
 8009ac0:	f7fc ffca 	bl	8006a58 <HAL_GetTick>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d901      	bls.n	8009ad2 <HAL_RCC_OscConfig+0x212>
 8009ace:	2303      	movs	r3, #3
 8009ad0:	e167      	b.n	8009da2 <HAL_RCC_OscConfig+0x4e2>
 8009ad2:	4b0b      	ldr	r3, [pc, #44]	; (8009b00 <HAL_RCC_OscConfig+0x240>)
 8009ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ad6:	f003 0302 	and.w	r3, r3, #2
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d0f0      	beq.n	8009ac0 <HAL_RCC_OscConfig+0x200>
 8009ade:	e01b      	b.n	8009b18 <HAL_RCC_OscConfig+0x258>
 8009ae0:	4b09      	ldr	r3, [pc, #36]	; (8009b08 <HAL_RCC_OscConfig+0x248>)
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	601a      	str	r2, [r3, #0]
 8009ae6:	f7fc ffb7 	bl	8006a58 <HAL_GetTick>
 8009aea:	6138      	str	r0, [r7, #16]
 8009aec:	e00e      	b.n	8009b0c <HAL_RCC_OscConfig+0x24c>
 8009aee:	f7fc ffb3 	bl	8006a58 <HAL_GetTick>
 8009af2:	4602      	mov	r2, r0
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	1ad3      	subs	r3, r2, r3
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	d907      	bls.n	8009b0c <HAL_RCC_OscConfig+0x24c>
 8009afc:	2303      	movs	r3, #3
 8009afe:	e150      	b.n	8009da2 <HAL_RCC_OscConfig+0x4e2>
 8009b00:	40023800 	.word	0x40023800
 8009b04:	42470000 	.word	0x42470000
 8009b08:	42470e80 	.word	0x42470e80
 8009b0c:	4b88      	ldr	r3, [pc, #544]	; (8009d30 <HAL_RCC_OscConfig+0x470>)
 8009b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b10:	f003 0302 	and.w	r3, r3, #2
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1ea      	bne.n	8009aee <HAL_RCC_OscConfig+0x22e>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 0304 	and.w	r3, r3, #4
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	f000 8097 	beq.w	8009c54 <HAL_RCC_OscConfig+0x394>
 8009b26:	2300      	movs	r3, #0
 8009b28:	75fb      	strb	r3, [r7, #23]
 8009b2a:	4b81      	ldr	r3, [pc, #516]	; (8009d30 <HAL_RCC_OscConfig+0x470>)
 8009b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d10f      	bne.n	8009b56 <HAL_RCC_OscConfig+0x296>
 8009b36:	2300      	movs	r3, #0
 8009b38:	60bb      	str	r3, [r7, #8]
 8009b3a:	4b7d      	ldr	r3, [pc, #500]	; (8009d30 <HAL_RCC_OscConfig+0x470>)
 8009b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3e:	4a7c      	ldr	r2, [pc, #496]	; (8009d30 <HAL_RCC_OscConfig+0x470>)
 8009b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b44:	6413      	str	r3, [r2, #64]	; 0x40
 8009b46:	4b7a      	ldr	r3, [pc, #488]	; (8009d30 <HAL_RCC_OscConfig+0x470>)
 8009b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b4e:	60bb      	str	r3, [r7, #8]
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	2301      	movs	r3, #1
 8009b54:	75fb      	strb	r3, [r7, #23]
 8009b56:	4b77      	ldr	r3, [pc, #476]	; (8009d34 <HAL_RCC_OscConfig+0x474>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d118      	bne.n	8009b94 <HAL_RCC_OscConfig+0x2d4>
 8009b62:	4b74      	ldr	r3, [pc, #464]	; (8009d34 <HAL_RCC_OscConfig+0x474>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a73      	ldr	r2, [pc, #460]	; (8009d34 <HAL_RCC_OscConfig+0x474>)
 8009b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b6c:	6013      	str	r3, [r2, #0]
 8009b6e:	f7fc ff73 	bl	8006a58 <HAL_GetTick>
 8009b72:	6138      	str	r0, [r7, #16]
 8009b74:	e008      	b.n	8009b88 <HAL_RCC_OscConfig+0x2c8>
 8009b76:	f7fc ff6f 	bl	8006a58 <HAL_GetTick>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	1ad3      	subs	r3, r2, r3
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	d901      	bls.n	8009b88 <HAL_RCC_OscConfig+0x2c8>
 8009b84:	2303      	movs	r3, #3
 8009b86:	e10c      	b.n	8009da2 <HAL_RCC_OscConfig+0x4e2>
 8009b88:	4b6a      	ldr	r3, [pc, #424]	; (8009d34 <HAL_RCC_OscConfig+0x474>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d0f0      	beq.n	8009b76 <HAL_RCC_OscConfig+0x2b6>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d106      	bne.n	8009baa <HAL_RCC_OscConfig+0x2ea>
 8009b9c:	4b64      	ldr	r3, [pc, #400]	; (8009d30 <HAL_RCC_OscConfig+0x470>)
 8009b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ba0:	4a63      	ldr	r2, [pc, #396]	; (8009d30 <HAL_RCC_OscConfig+0x470>)
 8009ba2:	f043 0301 	orr.w	r3, r3, #1
 8009ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8009ba8:	e01c      	b.n	8009be4 <HAL_RCC_OscConfig+0x324>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	2b05      	cmp	r3, #5
 8009bb0:	d10c      	bne.n	8009bcc <HAL_RCC_OscConfig+0x30c>
 8009bb2:	4b5f      	ldr	r3, [pc, #380]	; (8009d30 <HAL_RCC_OscConfig+0x470>)
 8009bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bb6:	4a5e      	ldr	r2, [pc, #376]	; (8009d30 <HAL_RCC_OscConfig+0x470>)
 8009bb8:	f043 0304 	orr.w	r3, r3, #4
 8009bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8009bbe:	4b5c      	ldr	r3, [pc, #368]	; (8009d30 <HAL_RCC_OscConfig+0x470>)
 8009bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bc2:	4a5b      	ldr	r2, [pc, #364]	; (8009d30 <HAL_RCC_OscConfig+0x470>)
 8009bc4:	f043 0301 	orr.w	r3, r3, #1
 8009bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8009bca:	e00b      	b.n	8009be4 <HAL_RCC_OscConfig+0x324>
 8009bcc:	4b58      	ldr	r3, [pc, #352]	; (8009d30 <HAL_RCC_OscConfig+0x470>)
 8009bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bd0:	4a57      	ldr	r2, [pc, #348]	; (8009d30 <HAL_RCC_OscConfig+0x470>)
 8009bd2:	f023 0301 	bic.w	r3, r3, #1
 8009bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8009bd8:	4b55      	ldr	r3, [pc, #340]	; (8009d30 <HAL_RCC_OscConfig+0x470>)
 8009bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bdc:	4a54      	ldr	r2, [pc, #336]	; (8009d30 <HAL_RCC_OscConfig+0x470>)
 8009bde:	f023 0304 	bic.w	r3, r3, #4
 8009be2:	6713      	str	r3, [r2, #112]	; 0x70
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d015      	beq.n	8009c18 <HAL_RCC_OscConfig+0x358>
 8009bec:	f7fc ff34 	bl	8006a58 <HAL_GetTick>
 8009bf0:	6138      	str	r0, [r7, #16]
 8009bf2:	e00a      	b.n	8009c0a <HAL_RCC_OscConfig+0x34a>
 8009bf4:	f7fc ff30 	bl	8006a58 <HAL_GetTick>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	1ad3      	subs	r3, r2, r3
 8009bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d901      	bls.n	8009c0a <HAL_RCC_OscConfig+0x34a>
 8009c06:	2303      	movs	r3, #3
 8009c08:	e0cb      	b.n	8009da2 <HAL_RCC_OscConfig+0x4e2>
 8009c0a:	4b49      	ldr	r3, [pc, #292]	; (8009d30 <HAL_RCC_OscConfig+0x470>)
 8009c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c0e:	f003 0302 	and.w	r3, r3, #2
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d0ee      	beq.n	8009bf4 <HAL_RCC_OscConfig+0x334>
 8009c16:	e014      	b.n	8009c42 <HAL_RCC_OscConfig+0x382>
 8009c18:	f7fc ff1e 	bl	8006a58 <HAL_GetTick>
 8009c1c:	6138      	str	r0, [r7, #16]
 8009c1e:	e00a      	b.n	8009c36 <HAL_RCC_OscConfig+0x376>
 8009c20:	f7fc ff1a 	bl	8006a58 <HAL_GetTick>
 8009c24:	4602      	mov	r2, r0
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	1ad3      	subs	r3, r2, r3
 8009c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d901      	bls.n	8009c36 <HAL_RCC_OscConfig+0x376>
 8009c32:	2303      	movs	r3, #3
 8009c34:	e0b5      	b.n	8009da2 <HAL_RCC_OscConfig+0x4e2>
 8009c36:	4b3e      	ldr	r3, [pc, #248]	; (8009d30 <HAL_RCC_OscConfig+0x470>)
 8009c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c3a:	f003 0302 	and.w	r3, r3, #2
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d1ee      	bne.n	8009c20 <HAL_RCC_OscConfig+0x360>
 8009c42:	7dfb      	ldrb	r3, [r7, #23]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d105      	bne.n	8009c54 <HAL_RCC_OscConfig+0x394>
 8009c48:	4b39      	ldr	r3, [pc, #228]	; (8009d30 <HAL_RCC_OscConfig+0x470>)
 8009c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c4c:	4a38      	ldr	r2, [pc, #224]	; (8009d30 <HAL_RCC_OscConfig+0x470>)
 8009c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c52:	6413      	str	r3, [r2, #64]	; 0x40
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f000 80a1 	beq.w	8009da0 <HAL_RCC_OscConfig+0x4e0>
 8009c5e:	4b34      	ldr	r3, [pc, #208]	; (8009d30 <HAL_RCC_OscConfig+0x470>)
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	f003 030c 	and.w	r3, r3, #12
 8009c66:	2b08      	cmp	r3, #8
 8009c68:	d05c      	beq.n	8009d24 <HAL_RCC_OscConfig+0x464>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	699b      	ldr	r3, [r3, #24]
 8009c6e:	2b02      	cmp	r3, #2
 8009c70:	d141      	bne.n	8009cf6 <HAL_RCC_OscConfig+0x436>
 8009c72:	4b31      	ldr	r3, [pc, #196]	; (8009d38 <HAL_RCC_OscConfig+0x478>)
 8009c74:	2200      	movs	r2, #0
 8009c76:	601a      	str	r2, [r3, #0]
 8009c78:	f7fc feee 	bl	8006a58 <HAL_GetTick>
 8009c7c:	6138      	str	r0, [r7, #16]
 8009c7e:	e008      	b.n	8009c92 <HAL_RCC_OscConfig+0x3d2>
 8009c80:	f7fc feea 	bl	8006a58 <HAL_GetTick>
 8009c84:	4602      	mov	r2, r0
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	1ad3      	subs	r3, r2, r3
 8009c8a:	2b02      	cmp	r3, #2
 8009c8c:	d901      	bls.n	8009c92 <HAL_RCC_OscConfig+0x3d2>
 8009c8e:	2303      	movs	r3, #3
 8009c90:	e087      	b.n	8009da2 <HAL_RCC_OscConfig+0x4e2>
 8009c92:	4b27      	ldr	r3, [pc, #156]	; (8009d30 <HAL_RCC_OscConfig+0x470>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d1f0      	bne.n	8009c80 <HAL_RCC_OscConfig+0x3c0>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	69da      	ldr	r2, [r3, #28]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a1b      	ldr	r3, [r3, #32]
 8009ca6:	431a      	orrs	r2, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cac:	019b      	lsls	r3, r3, #6
 8009cae:	431a      	orrs	r2, r3
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb4:	085b      	lsrs	r3, r3, #1
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	041b      	lsls	r3, r3, #16
 8009cba:	431a      	orrs	r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc0:	061b      	lsls	r3, r3, #24
 8009cc2:	491b      	ldr	r1, [pc, #108]	; (8009d30 <HAL_RCC_OscConfig+0x470>)
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	604b      	str	r3, [r1, #4]
 8009cc8:	4b1b      	ldr	r3, [pc, #108]	; (8009d38 <HAL_RCC_OscConfig+0x478>)
 8009cca:	2201      	movs	r2, #1
 8009ccc:	601a      	str	r2, [r3, #0]
 8009cce:	f7fc fec3 	bl	8006a58 <HAL_GetTick>
 8009cd2:	6138      	str	r0, [r7, #16]
 8009cd4:	e008      	b.n	8009ce8 <HAL_RCC_OscConfig+0x428>
 8009cd6:	f7fc febf 	bl	8006a58 <HAL_GetTick>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	1ad3      	subs	r3, r2, r3
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d901      	bls.n	8009ce8 <HAL_RCC_OscConfig+0x428>
 8009ce4:	2303      	movs	r3, #3
 8009ce6:	e05c      	b.n	8009da2 <HAL_RCC_OscConfig+0x4e2>
 8009ce8:	4b11      	ldr	r3, [pc, #68]	; (8009d30 <HAL_RCC_OscConfig+0x470>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d0f0      	beq.n	8009cd6 <HAL_RCC_OscConfig+0x416>
 8009cf4:	e054      	b.n	8009da0 <HAL_RCC_OscConfig+0x4e0>
 8009cf6:	4b10      	ldr	r3, [pc, #64]	; (8009d38 <HAL_RCC_OscConfig+0x478>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	601a      	str	r2, [r3, #0]
 8009cfc:	f7fc feac 	bl	8006a58 <HAL_GetTick>
 8009d00:	6138      	str	r0, [r7, #16]
 8009d02:	e008      	b.n	8009d16 <HAL_RCC_OscConfig+0x456>
 8009d04:	f7fc fea8 	bl	8006a58 <HAL_GetTick>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	1ad3      	subs	r3, r2, r3
 8009d0e:	2b02      	cmp	r3, #2
 8009d10:	d901      	bls.n	8009d16 <HAL_RCC_OscConfig+0x456>
 8009d12:	2303      	movs	r3, #3
 8009d14:	e045      	b.n	8009da2 <HAL_RCC_OscConfig+0x4e2>
 8009d16:	4b06      	ldr	r3, [pc, #24]	; (8009d30 <HAL_RCC_OscConfig+0x470>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d1f0      	bne.n	8009d04 <HAL_RCC_OscConfig+0x444>
 8009d22:	e03d      	b.n	8009da0 <HAL_RCC_OscConfig+0x4e0>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	699b      	ldr	r3, [r3, #24]
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d107      	bne.n	8009d3c <HAL_RCC_OscConfig+0x47c>
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e038      	b.n	8009da2 <HAL_RCC_OscConfig+0x4e2>
 8009d30:	40023800 	.word	0x40023800
 8009d34:	40007000 	.word	0x40007000
 8009d38:	42470060 	.word	0x42470060
 8009d3c:	4b1b      	ldr	r3, [pc, #108]	; (8009dac <HAL_RCC_OscConfig+0x4ec>)
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	60fb      	str	r3, [r7, #12]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	699b      	ldr	r3, [r3, #24]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d028      	beq.n	8009d9c <HAL_RCC_OscConfig+0x4dc>
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	69db      	ldr	r3, [r3, #28]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d121      	bne.n	8009d9c <HAL_RCC_OscConfig+0x4dc>
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6a1b      	ldr	r3, [r3, #32]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d11a      	bne.n	8009d9c <HAL_RCC_OscConfig+0x4dc>
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009d6c:	4013      	ands	r3, r2
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009d72:	0192      	lsls	r2, r2, #6
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d111      	bne.n	8009d9c <HAL_RCC_OscConfig+0x4dc>
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d82:	085b      	lsrs	r3, r3, #1
 8009d84:	3b01      	subs	r3, #1
 8009d86:	041b      	lsls	r3, r3, #16
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d107      	bne.n	8009d9c <HAL_RCC_OscConfig+0x4dc>
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d96:	061b      	lsls	r3, r3, #24
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d001      	beq.n	8009da0 <HAL_RCC_OscConfig+0x4e0>
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e000      	b.n	8009da2 <HAL_RCC_OscConfig+0x4e2>
 8009da0:	2300      	movs	r3, #0
 8009da2:	4618      	mov	r0, r3
 8009da4:	3718      	adds	r7, #24
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	40023800 	.word	0x40023800

08009db0 <HAL_RCC_ClockConfig>:
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d101      	bne.n	8009dc4 <HAL_RCC_ClockConfig+0x14>
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e0cc      	b.n	8009f5e <HAL_RCC_ClockConfig+0x1ae>
 8009dc4:	4b68      	ldr	r3, [pc, #416]	; (8009f68 <HAL_RCC_ClockConfig+0x1b8>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f003 0307 	and.w	r3, r3, #7
 8009dcc:	683a      	ldr	r2, [r7, #0]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d90c      	bls.n	8009dec <HAL_RCC_ClockConfig+0x3c>
 8009dd2:	4b65      	ldr	r3, [pc, #404]	; (8009f68 <HAL_RCC_ClockConfig+0x1b8>)
 8009dd4:	683a      	ldr	r2, [r7, #0]
 8009dd6:	b2d2      	uxtb	r2, r2
 8009dd8:	701a      	strb	r2, [r3, #0]
 8009dda:	4b63      	ldr	r3, [pc, #396]	; (8009f68 <HAL_RCC_ClockConfig+0x1b8>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 0307 	and.w	r3, r3, #7
 8009de2:	683a      	ldr	r2, [r7, #0]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d001      	beq.n	8009dec <HAL_RCC_ClockConfig+0x3c>
 8009de8:	2301      	movs	r3, #1
 8009dea:	e0b8      	b.n	8009f5e <HAL_RCC_ClockConfig+0x1ae>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f003 0302 	and.w	r3, r3, #2
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d020      	beq.n	8009e3a <HAL_RCC_ClockConfig+0x8a>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f003 0304 	and.w	r3, r3, #4
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d005      	beq.n	8009e10 <HAL_RCC_ClockConfig+0x60>
 8009e04:	4b59      	ldr	r3, [pc, #356]	; (8009f6c <HAL_RCC_ClockConfig+0x1bc>)
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	4a58      	ldr	r2, [pc, #352]	; (8009f6c <HAL_RCC_ClockConfig+0x1bc>)
 8009e0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009e0e:	6093      	str	r3, [r2, #8]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f003 0308 	and.w	r3, r3, #8
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d005      	beq.n	8009e28 <HAL_RCC_ClockConfig+0x78>
 8009e1c:	4b53      	ldr	r3, [pc, #332]	; (8009f6c <HAL_RCC_ClockConfig+0x1bc>)
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	4a52      	ldr	r2, [pc, #328]	; (8009f6c <HAL_RCC_ClockConfig+0x1bc>)
 8009e22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009e26:	6093      	str	r3, [r2, #8]
 8009e28:	4b50      	ldr	r3, [pc, #320]	; (8009f6c <HAL_RCC_ClockConfig+0x1bc>)
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	494d      	ldr	r1, [pc, #308]	; (8009f6c <HAL_RCC_ClockConfig+0x1bc>)
 8009e36:	4313      	orrs	r3, r2
 8009e38:	608b      	str	r3, [r1, #8]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f003 0301 	and.w	r3, r3, #1
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d044      	beq.n	8009ed0 <HAL_RCC_ClockConfig+0x120>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d107      	bne.n	8009e5e <HAL_RCC_ClockConfig+0xae>
 8009e4e:	4b47      	ldr	r3, [pc, #284]	; (8009f6c <HAL_RCC_ClockConfig+0x1bc>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d119      	bne.n	8009e8e <HAL_RCC_ClockConfig+0xde>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e07f      	b.n	8009f5e <HAL_RCC_ClockConfig+0x1ae>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	d003      	beq.n	8009e6e <HAL_RCC_ClockConfig+0xbe>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	2b03      	cmp	r3, #3
 8009e6c:	d107      	bne.n	8009e7e <HAL_RCC_ClockConfig+0xce>
 8009e6e:	4b3f      	ldr	r3, [pc, #252]	; (8009f6c <HAL_RCC_ClockConfig+0x1bc>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d109      	bne.n	8009e8e <HAL_RCC_ClockConfig+0xde>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e06f      	b.n	8009f5e <HAL_RCC_ClockConfig+0x1ae>
 8009e7e:	4b3b      	ldr	r3, [pc, #236]	; (8009f6c <HAL_RCC_ClockConfig+0x1bc>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f003 0302 	and.w	r3, r3, #2
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d101      	bne.n	8009e8e <HAL_RCC_ClockConfig+0xde>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e067      	b.n	8009f5e <HAL_RCC_ClockConfig+0x1ae>
 8009e8e:	4b37      	ldr	r3, [pc, #220]	; (8009f6c <HAL_RCC_ClockConfig+0x1bc>)
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	f023 0203 	bic.w	r2, r3, #3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	4934      	ldr	r1, [pc, #208]	; (8009f6c <HAL_RCC_ClockConfig+0x1bc>)
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	608b      	str	r3, [r1, #8]
 8009ea0:	f7fc fdda 	bl	8006a58 <HAL_GetTick>
 8009ea4:	60f8      	str	r0, [r7, #12]
 8009ea6:	e00a      	b.n	8009ebe <HAL_RCC_ClockConfig+0x10e>
 8009ea8:	f7fc fdd6 	bl	8006a58 <HAL_GetTick>
 8009eac:	4602      	mov	r2, r0
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	1ad3      	subs	r3, r2, r3
 8009eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d901      	bls.n	8009ebe <HAL_RCC_ClockConfig+0x10e>
 8009eba:	2303      	movs	r3, #3
 8009ebc:	e04f      	b.n	8009f5e <HAL_RCC_ClockConfig+0x1ae>
 8009ebe:	4b2b      	ldr	r3, [pc, #172]	; (8009f6c <HAL_RCC_ClockConfig+0x1bc>)
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	f003 020c 	and.w	r2, r3, #12
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d1eb      	bne.n	8009ea8 <HAL_RCC_ClockConfig+0xf8>
 8009ed0:	4b25      	ldr	r3, [pc, #148]	; (8009f68 <HAL_RCC_ClockConfig+0x1b8>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f003 0307 	and.w	r3, r3, #7
 8009ed8:	683a      	ldr	r2, [r7, #0]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d20c      	bcs.n	8009ef8 <HAL_RCC_ClockConfig+0x148>
 8009ede:	4b22      	ldr	r3, [pc, #136]	; (8009f68 <HAL_RCC_ClockConfig+0x1b8>)
 8009ee0:	683a      	ldr	r2, [r7, #0]
 8009ee2:	b2d2      	uxtb	r2, r2
 8009ee4:	701a      	strb	r2, [r3, #0]
 8009ee6:	4b20      	ldr	r3, [pc, #128]	; (8009f68 <HAL_RCC_ClockConfig+0x1b8>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f003 0307 	and.w	r3, r3, #7
 8009eee:	683a      	ldr	r2, [r7, #0]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d001      	beq.n	8009ef8 <HAL_RCC_ClockConfig+0x148>
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e032      	b.n	8009f5e <HAL_RCC_ClockConfig+0x1ae>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f003 0304 	and.w	r3, r3, #4
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d008      	beq.n	8009f16 <HAL_RCC_ClockConfig+0x166>
 8009f04:	4b19      	ldr	r3, [pc, #100]	; (8009f6c <HAL_RCC_ClockConfig+0x1bc>)
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	4916      	ldr	r1, [pc, #88]	; (8009f6c <HAL_RCC_ClockConfig+0x1bc>)
 8009f12:	4313      	orrs	r3, r2
 8009f14:	608b      	str	r3, [r1, #8]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f003 0308 	and.w	r3, r3, #8
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d009      	beq.n	8009f36 <HAL_RCC_ClockConfig+0x186>
 8009f22:	4b12      	ldr	r3, [pc, #72]	; (8009f6c <HAL_RCC_ClockConfig+0x1bc>)
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	691b      	ldr	r3, [r3, #16]
 8009f2e:	00db      	lsls	r3, r3, #3
 8009f30:	490e      	ldr	r1, [pc, #56]	; (8009f6c <HAL_RCC_ClockConfig+0x1bc>)
 8009f32:	4313      	orrs	r3, r2
 8009f34:	608b      	str	r3, [r1, #8]
 8009f36:	f000 f821 	bl	8009f7c <HAL_RCC_GetSysClockFreq>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	4b0b      	ldr	r3, [pc, #44]	; (8009f6c <HAL_RCC_ClockConfig+0x1bc>)
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	091b      	lsrs	r3, r3, #4
 8009f42:	f003 030f 	and.w	r3, r3, #15
 8009f46:	490a      	ldr	r1, [pc, #40]	; (8009f70 <HAL_RCC_ClockConfig+0x1c0>)
 8009f48:	5ccb      	ldrb	r3, [r1, r3]
 8009f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f4e:	4a09      	ldr	r2, [pc, #36]	; (8009f74 <HAL_RCC_ClockConfig+0x1c4>)
 8009f50:	6013      	str	r3, [r2, #0]
 8009f52:	4b09      	ldr	r3, [pc, #36]	; (8009f78 <HAL_RCC_ClockConfig+0x1c8>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fc fd3a 	bl	80069d0 <HAL_InitTick>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	40023c00 	.word	0x40023c00
 8009f6c:	40023800 	.word	0x40023800
 8009f70:	08014da8 	.word	0x08014da8
 8009f74:	20000004 	.word	0x20000004
 8009f78:	20000008 	.word	0x20000008

08009f7c <HAL_RCC_GetSysClockFreq>:
 8009f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f80:	b090      	sub	sp, #64	; 0x40
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	2300      	movs	r3, #0
 8009f86:	637b      	str	r3, [r7, #52]	; 0x34
 8009f88:	2300      	movs	r3, #0
 8009f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	633b      	str	r3, [r7, #48]	; 0x30
 8009f90:	2300      	movs	r3, #0
 8009f92:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f94:	4b59      	ldr	r3, [pc, #356]	; (800a0fc <HAL_RCC_GetSysClockFreq+0x180>)
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	f003 030c 	and.w	r3, r3, #12
 8009f9c:	2b08      	cmp	r3, #8
 8009f9e:	d00d      	beq.n	8009fbc <HAL_RCC_GetSysClockFreq+0x40>
 8009fa0:	2b08      	cmp	r3, #8
 8009fa2:	f200 80a1 	bhi.w	800a0e8 <HAL_RCC_GetSysClockFreq+0x16c>
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d002      	beq.n	8009fb0 <HAL_RCC_GetSysClockFreq+0x34>
 8009faa:	2b04      	cmp	r3, #4
 8009fac:	d003      	beq.n	8009fb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8009fae:	e09b      	b.n	800a0e8 <HAL_RCC_GetSysClockFreq+0x16c>
 8009fb0:	4b53      	ldr	r3, [pc, #332]	; (800a100 <HAL_RCC_GetSysClockFreq+0x184>)
 8009fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009fb4:	e09b      	b.n	800a0ee <HAL_RCC_GetSysClockFreq+0x172>
 8009fb6:	4b53      	ldr	r3, [pc, #332]	; (800a104 <HAL_RCC_GetSysClockFreq+0x188>)
 8009fb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8009fba:	e098      	b.n	800a0ee <HAL_RCC_GetSysClockFreq+0x172>
 8009fbc:	4b4f      	ldr	r3, [pc, #316]	; (800a0fc <HAL_RCC_GetSysClockFreq+0x180>)
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8009fc6:	4b4d      	ldr	r3, [pc, #308]	; (800a0fc <HAL_RCC_GetSysClockFreq+0x180>)
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d028      	beq.n	800a024 <HAL_RCC_GetSysClockFreq+0xa8>
 8009fd2:	4b4a      	ldr	r3, [pc, #296]	; (800a0fc <HAL_RCC_GetSysClockFreq+0x180>)
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	099b      	lsrs	r3, r3, #6
 8009fd8:	2200      	movs	r2, #0
 8009fda:	623b      	str	r3, [r7, #32]
 8009fdc:	627a      	str	r2, [r7, #36]	; 0x24
 8009fde:	6a3b      	ldr	r3, [r7, #32]
 8009fe0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	4b47      	ldr	r3, [pc, #284]	; (800a104 <HAL_RCC_GetSysClockFreq+0x188>)
 8009fe8:	fb03 f201 	mul.w	r2, r3, r1
 8009fec:	2300      	movs	r3, #0
 8009fee:	fb00 f303 	mul.w	r3, r0, r3
 8009ff2:	4413      	add	r3, r2
 8009ff4:	4a43      	ldr	r2, [pc, #268]	; (800a104 <HAL_RCC_GetSysClockFreq+0x188>)
 8009ff6:	fba0 1202 	umull	r1, r2, r0, r2
 8009ffa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ffc:	460a      	mov	r2, r1
 8009ffe:	62ba      	str	r2, [r7, #40]	; 0x28
 800a000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a002:	4413      	add	r3, r2
 800a004:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a008:	2200      	movs	r2, #0
 800a00a:	61bb      	str	r3, [r7, #24]
 800a00c:	61fa      	str	r2, [r7, #28]
 800a00e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a012:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a016:	f7f6 fe37 	bl	8000c88 <__aeabi_uldivmod>
 800a01a:	4602      	mov	r2, r0
 800a01c:	460b      	mov	r3, r1
 800a01e:	4613      	mov	r3, r2
 800a020:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a022:	e053      	b.n	800a0cc <HAL_RCC_GetSysClockFreq+0x150>
 800a024:	4b35      	ldr	r3, [pc, #212]	; (800a0fc <HAL_RCC_GetSysClockFreq+0x180>)
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	099b      	lsrs	r3, r3, #6
 800a02a:	2200      	movs	r2, #0
 800a02c:	613b      	str	r3, [r7, #16]
 800a02e:	617a      	str	r2, [r7, #20]
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a036:	f04f 0b00 	mov.w	fp, #0
 800a03a:	4652      	mov	r2, sl
 800a03c:	465b      	mov	r3, fp
 800a03e:	f04f 0000 	mov.w	r0, #0
 800a042:	f04f 0100 	mov.w	r1, #0
 800a046:	0159      	lsls	r1, r3, #5
 800a048:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a04c:	0150      	lsls	r0, r2, #5
 800a04e:	4602      	mov	r2, r0
 800a050:	460b      	mov	r3, r1
 800a052:	ebb2 080a 	subs.w	r8, r2, sl
 800a056:	eb63 090b 	sbc.w	r9, r3, fp
 800a05a:	f04f 0200 	mov.w	r2, #0
 800a05e:	f04f 0300 	mov.w	r3, #0
 800a062:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a066:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a06a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a06e:	ebb2 0408 	subs.w	r4, r2, r8
 800a072:	eb63 0509 	sbc.w	r5, r3, r9
 800a076:	f04f 0200 	mov.w	r2, #0
 800a07a:	f04f 0300 	mov.w	r3, #0
 800a07e:	00eb      	lsls	r3, r5, #3
 800a080:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a084:	00e2      	lsls	r2, r4, #3
 800a086:	4614      	mov	r4, r2
 800a088:	461d      	mov	r5, r3
 800a08a:	eb14 030a 	adds.w	r3, r4, sl
 800a08e:	603b      	str	r3, [r7, #0]
 800a090:	eb45 030b 	adc.w	r3, r5, fp
 800a094:	607b      	str	r3, [r7, #4]
 800a096:	f04f 0200 	mov.w	r2, #0
 800a09a:	f04f 0300 	mov.w	r3, #0
 800a09e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a0a2:	4629      	mov	r1, r5
 800a0a4:	028b      	lsls	r3, r1, #10
 800a0a6:	4621      	mov	r1, r4
 800a0a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a0ac:	4621      	mov	r1, r4
 800a0ae:	028a      	lsls	r2, r1, #10
 800a0b0:	4610      	mov	r0, r2
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	60bb      	str	r3, [r7, #8]
 800a0ba:	60fa      	str	r2, [r7, #12]
 800a0bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a0c0:	f7f6 fde2 	bl	8000c88 <__aeabi_uldivmod>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0cc:	4b0b      	ldr	r3, [pc, #44]	; (800a0fc <HAL_RCC_GetSysClockFreq+0x180>)
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	0c1b      	lsrs	r3, r3, #16
 800a0d2:	f003 0303 	and.w	r3, r3, #3
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	005b      	lsls	r3, r3, #1
 800a0da:	633b      	str	r3, [r7, #48]	; 0x30
 800a0dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0e4:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0e6:	e002      	b.n	800a0ee <HAL_RCC_GetSysClockFreq+0x172>
 800a0e8:	4b05      	ldr	r3, [pc, #20]	; (800a100 <HAL_RCC_GetSysClockFreq+0x184>)
 800a0ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0ec:	bf00      	nop
 800a0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3740      	adds	r7, #64	; 0x40
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0fa:	bf00      	nop
 800a0fc:	40023800 	.word	0x40023800
 800a100:	00f42400 	.word	0x00f42400
 800a104:	017d7840 	.word	0x017d7840

0800a108 <HAL_RCC_GetHCLKFreq>:
 800a108:	b480      	push	{r7}
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	4b03      	ldr	r3, [pc, #12]	; (800a11c <HAL_RCC_GetHCLKFreq+0x14>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4618      	mov	r0, r3
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	20000004 	.word	0x20000004

0800a120 <HAL_RCC_GetPCLK1Freq>:
 800a120:	b580      	push	{r7, lr}
 800a122:	af00      	add	r7, sp, #0
 800a124:	f7ff fff0 	bl	800a108 <HAL_RCC_GetHCLKFreq>
 800a128:	4602      	mov	r2, r0
 800a12a:	4b05      	ldr	r3, [pc, #20]	; (800a140 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	0a9b      	lsrs	r3, r3, #10
 800a130:	f003 0307 	and.w	r3, r3, #7
 800a134:	4903      	ldr	r1, [pc, #12]	; (800a144 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a136:	5ccb      	ldrb	r3, [r1, r3]
 800a138:	fa22 f303 	lsr.w	r3, r2, r3
 800a13c:	4618      	mov	r0, r3
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	40023800 	.word	0x40023800
 800a144:	08014db8 	.word	0x08014db8

0800a148 <HAL_RCC_GetPCLK2Freq>:
 800a148:	b580      	push	{r7, lr}
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	f7ff ffdc 	bl	800a108 <HAL_RCC_GetHCLKFreq>
 800a150:	4602      	mov	r2, r0
 800a152:	4b05      	ldr	r3, [pc, #20]	; (800a168 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	0b5b      	lsrs	r3, r3, #13
 800a158:	f003 0307 	and.w	r3, r3, #7
 800a15c:	4903      	ldr	r1, [pc, #12]	; (800a16c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a15e:	5ccb      	ldrb	r3, [r1, r3]
 800a160:	fa22 f303 	lsr.w	r3, r2, r3
 800a164:	4618      	mov	r0, r3
 800a166:	bd80      	pop	{r7, pc}
 800a168:	40023800 	.word	0x40023800
 800a16c:	08014db8 	.word	0x08014db8

0800a170 <HAL_TIM_Base_Init>:
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d101      	bne.n	800a182 <HAL_TIM_Base_Init+0x12>
 800a17e:	2301      	movs	r3, #1
 800a180:	e041      	b.n	800a206 <HAL_TIM_Base_Init+0x96>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d106      	bne.n	800a19c <HAL_TIM_Base_Init+0x2c>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7fc f8e2 	bl	8006360 <HAL_TIM_Base_MspInit>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2202      	movs	r2, #2
 800a1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	3304      	adds	r3, #4
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	4610      	mov	r0, r2
 800a1b0:	f000 ff94 	bl	800b0dc <TIM_Base_SetConfig>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a204:	2300      	movs	r3, #0
 800a206:	4618      	mov	r0, r3
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <HAL_TIM_PWM_Init>:
 800a20e:	b580      	push	{r7, lr}
 800a210:	b082      	sub	sp, #8
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d101      	bne.n	800a220 <HAL_TIM_PWM_Init+0x12>
 800a21c:	2301      	movs	r3, #1
 800a21e:	e041      	b.n	800a2a4 <HAL_TIM_PWM_Init+0x96>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a226:	b2db      	uxtb	r3, r3
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d106      	bne.n	800a23a <HAL_TIM_PWM_Init+0x2c>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 f839 	bl	800a2ac <HAL_TIM_PWM_MspInit>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2202      	movs	r2, #2
 800a23e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	3304      	adds	r3, #4
 800a24a:	4619      	mov	r1, r3
 800a24c:	4610      	mov	r0, r2
 800a24e:	f000 ff45 	bl	800b0dc <TIM_Base_SetConfig>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2201      	movs	r2, #1
 800a256:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2201      	movs	r2, #1
 800a25e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2201      	movs	r2, #1
 800a266:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2201      	movs	r2, #1
 800a26e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2201      	movs	r2, #1
 800a276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2201      	movs	r2, #1
 800a27e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2201      	movs	r2, #1
 800a286:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2201      	movs	r2, #1
 800a28e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2201      	movs	r2, #1
 800a296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2201      	movs	r2, #1
 800a29e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3708      	adds	r7, #8
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <HAL_TIM_PWM_MspInit>:
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	bf00      	nop
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <HAL_TIM_PWM_Start>:
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d109      	bne.n	800a2e4 <HAL_TIM_PWM_Start+0x24>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	bf14      	ite	ne
 800a2dc:	2301      	movne	r3, #1
 800a2de:	2300      	moveq	r3, #0
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	e022      	b.n	800a32a <HAL_TIM_PWM_Start+0x6a>
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	2b04      	cmp	r3, #4
 800a2e8:	d109      	bne.n	800a2fe <HAL_TIM_PWM_Start+0x3e>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	bf14      	ite	ne
 800a2f6:	2301      	movne	r3, #1
 800a2f8:	2300      	moveq	r3, #0
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	e015      	b.n	800a32a <HAL_TIM_PWM_Start+0x6a>
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	2b08      	cmp	r3, #8
 800a302:	d109      	bne.n	800a318 <HAL_TIM_PWM_Start+0x58>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	bf14      	ite	ne
 800a310:	2301      	movne	r3, #1
 800a312:	2300      	moveq	r3, #0
 800a314:	b2db      	uxtb	r3, r3
 800a316:	e008      	b.n	800a32a <HAL_TIM_PWM_Start+0x6a>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	2b01      	cmp	r3, #1
 800a322:	bf14      	ite	ne
 800a324:	2301      	movne	r3, #1
 800a326:	2300      	moveq	r3, #0
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d001      	beq.n	800a332 <HAL_TIM_PWM_Start+0x72>
 800a32e:	2301      	movs	r3, #1
 800a330:	e07c      	b.n	800a42c <HAL_TIM_PWM_Start+0x16c>
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d104      	bne.n	800a342 <HAL_TIM_PWM_Start+0x82>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2202      	movs	r2, #2
 800a33c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a340:	e013      	b.n	800a36a <HAL_TIM_PWM_Start+0xaa>
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	2b04      	cmp	r3, #4
 800a346:	d104      	bne.n	800a352 <HAL_TIM_PWM_Start+0x92>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2202      	movs	r2, #2
 800a34c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a350:	e00b      	b.n	800a36a <HAL_TIM_PWM_Start+0xaa>
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	2b08      	cmp	r3, #8
 800a356:	d104      	bne.n	800a362 <HAL_TIM_PWM_Start+0xa2>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2202      	movs	r2, #2
 800a35c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a360:	e003      	b.n	800a36a <HAL_TIM_PWM_Start+0xaa>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2202      	movs	r2, #2
 800a366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	2201      	movs	r2, #1
 800a370:	6839      	ldr	r1, [r7, #0]
 800a372:	4618      	mov	r0, r3
 800a374:	f001 fac6 	bl	800b904 <TIM_CCxChannelCmd>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a2d      	ldr	r2, [pc, #180]	; (800a434 <HAL_TIM_PWM_Start+0x174>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d004      	beq.n	800a38c <HAL_TIM_PWM_Start+0xcc>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a2c      	ldr	r2, [pc, #176]	; (800a438 <HAL_TIM_PWM_Start+0x178>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d101      	bne.n	800a390 <HAL_TIM_PWM_Start+0xd0>
 800a38c:	2301      	movs	r3, #1
 800a38e:	e000      	b.n	800a392 <HAL_TIM_PWM_Start+0xd2>
 800a390:	2300      	movs	r3, #0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d007      	beq.n	800a3a6 <HAL_TIM_PWM_Start+0xe6>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a3a4:	645a      	str	r2, [r3, #68]	; 0x44
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a22      	ldr	r2, [pc, #136]	; (800a434 <HAL_TIM_PWM_Start+0x174>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d022      	beq.n	800a3f6 <HAL_TIM_PWM_Start+0x136>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3b8:	d01d      	beq.n	800a3f6 <HAL_TIM_PWM_Start+0x136>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a1f      	ldr	r2, [pc, #124]	; (800a43c <HAL_TIM_PWM_Start+0x17c>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d018      	beq.n	800a3f6 <HAL_TIM_PWM_Start+0x136>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a1d      	ldr	r2, [pc, #116]	; (800a440 <HAL_TIM_PWM_Start+0x180>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d013      	beq.n	800a3f6 <HAL_TIM_PWM_Start+0x136>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a1c      	ldr	r2, [pc, #112]	; (800a444 <HAL_TIM_PWM_Start+0x184>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d00e      	beq.n	800a3f6 <HAL_TIM_PWM_Start+0x136>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a16      	ldr	r2, [pc, #88]	; (800a438 <HAL_TIM_PWM_Start+0x178>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d009      	beq.n	800a3f6 <HAL_TIM_PWM_Start+0x136>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a18      	ldr	r2, [pc, #96]	; (800a448 <HAL_TIM_PWM_Start+0x188>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d004      	beq.n	800a3f6 <HAL_TIM_PWM_Start+0x136>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a16      	ldr	r2, [pc, #88]	; (800a44c <HAL_TIM_PWM_Start+0x18c>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d111      	bne.n	800a41a <HAL_TIM_PWM_Start+0x15a>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	f003 0307 	and.w	r3, r3, #7
 800a400:	60fb      	str	r3, [r7, #12]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2b06      	cmp	r3, #6
 800a406:	d010      	beq.n	800a42a <HAL_TIM_PWM_Start+0x16a>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f042 0201 	orr.w	r2, r2, #1
 800a416:	601a      	str	r2, [r3, #0]
 800a418:	e007      	b.n	800a42a <HAL_TIM_PWM_Start+0x16a>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f042 0201 	orr.w	r2, r2, #1
 800a428:	601a      	str	r2, [r3, #0]
 800a42a:	2300      	movs	r3, #0
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	40010000 	.word	0x40010000
 800a438:	40010400 	.word	0x40010400
 800a43c:	40000400 	.word	0x40000400
 800a440:	40000800 	.word	0x40000800
 800a444:	40000c00 	.word	0x40000c00
 800a448:	40014000 	.word	0x40014000
 800a44c:	40001800 	.word	0x40001800

0800a450 <HAL_TIM_IC_Init>:
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d101      	bne.n	800a462 <HAL_TIM_IC_Init+0x12>
 800a45e:	2301      	movs	r3, #1
 800a460:	e041      	b.n	800a4e6 <HAL_TIM_IC_Init+0x96>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d106      	bne.n	800a47c <HAL_TIM_IC_Init+0x2c>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f7fc f86a 	bl	8006550 <HAL_TIM_IC_MspInit>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2202      	movs	r2, #2
 800a480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	3304      	adds	r3, #4
 800a48c:	4619      	mov	r1, r3
 800a48e:	4610      	mov	r0, r2
 800a490:	f000 fe24 	bl	800b0dc <TIM_Base_SetConfig>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3708      	adds	r7, #8
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
	...

0800a4f0 <HAL_TIM_IC_Start_IT>:
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	73fb      	strb	r3, [r7, #15]
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d104      	bne.n	800a50e <HAL_TIM_IC_Start_IT+0x1e>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	e013      	b.n	800a536 <HAL_TIM_IC_Start_IT+0x46>
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	2b04      	cmp	r3, #4
 800a512:	d104      	bne.n	800a51e <HAL_TIM_IC_Start_IT+0x2e>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	e00b      	b.n	800a536 <HAL_TIM_IC_Start_IT+0x46>
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	2b08      	cmp	r3, #8
 800a522:	d104      	bne.n	800a52e <HAL_TIM_IC_Start_IT+0x3e>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	e003      	b.n	800a536 <HAL_TIM_IC_Start_IT+0x46>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a534:	b2db      	uxtb	r3, r3
 800a536:	73bb      	strb	r3, [r7, #14]
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d104      	bne.n	800a548 <HAL_TIM_IC_Start_IT+0x58>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a544:	b2db      	uxtb	r3, r3
 800a546:	e013      	b.n	800a570 <HAL_TIM_IC_Start_IT+0x80>
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	2b04      	cmp	r3, #4
 800a54c:	d104      	bne.n	800a558 <HAL_TIM_IC_Start_IT+0x68>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a554:	b2db      	uxtb	r3, r3
 800a556:	e00b      	b.n	800a570 <HAL_TIM_IC_Start_IT+0x80>
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	2b08      	cmp	r3, #8
 800a55c:	d104      	bne.n	800a568 <HAL_TIM_IC_Start_IT+0x78>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a564:	b2db      	uxtb	r3, r3
 800a566:	e003      	b.n	800a570 <HAL_TIM_IC_Start_IT+0x80>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	737b      	strb	r3, [r7, #13]
 800a572:	7bbb      	ldrb	r3, [r7, #14]
 800a574:	2b01      	cmp	r3, #1
 800a576:	d102      	bne.n	800a57e <HAL_TIM_IC_Start_IT+0x8e>
 800a578:	7b7b      	ldrb	r3, [r7, #13]
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d001      	beq.n	800a582 <HAL_TIM_IC_Start_IT+0x92>
 800a57e:	2301      	movs	r3, #1
 800a580:	e0cc      	b.n	800a71c <HAL_TIM_IC_Start_IT+0x22c>
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d104      	bne.n	800a592 <HAL_TIM_IC_Start_IT+0xa2>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2202      	movs	r2, #2
 800a58c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a590:	e013      	b.n	800a5ba <HAL_TIM_IC_Start_IT+0xca>
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	2b04      	cmp	r3, #4
 800a596:	d104      	bne.n	800a5a2 <HAL_TIM_IC_Start_IT+0xb2>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2202      	movs	r2, #2
 800a59c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5a0:	e00b      	b.n	800a5ba <HAL_TIM_IC_Start_IT+0xca>
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	2b08      	cmp	r3, #8
 800a5a6:	d104      	bne.n	800a5b2 <HAL_TIM_IC_Start_IT+0xc2>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2202      	movs	r2, #2
 800a5ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5b0:	e003      	b.n	800a5ba <HAL_TIM_IC_Start_IT+0xca>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2202      	movs	r2, #2
 800a5b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d104      	bne.n	800a5ca <HAL_TIM_IC_Start_IT+0xda>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2202      	movs	r2, #2
 800a5c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5c8:	e013      	b.n	800a5f2 <HAL_TIM_IC_Start_IT+0x102>
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	2b04      	cmp	r3, #4
 800a5ce:	d104      	bne.n	800a5da <HAL_TIM_IC_Start_IT+0xea>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2202      	movs	r2, #2
 800a5d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a5d8:	e00b      	b.n	800a5f2 <HAL_TIM_IC_Start_IT+0x102>
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	2b08      	cmp	r3, #8
 800a5de:	d104      	bne.n	800a5ea <HAL_TIM_IC_Start_IT+0xfa>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2202      	movs	r2, #2
 800a5e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5e8:	e003      	b.n	800a5f2 <HAL_TIM_IC_Start_IT+0x102>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2202      	movs	r2, #2
 800a5ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	2b0c      	cmp	r3, #12
 800a5f6:	d841      	bhi.n	800a67c <HAL_TIM_IC_Start_IT+0x18c>
 800a5f8:	a201      	add	r2, pc, #4	; (adr r2, 800a600 <HAL_TIM_IC_Start_IT+0x110>)
 800a5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5fe:	bf00      	nop
 800a600:	0800a635 	.word	0x0800a635
 800a604:	0800a67d 	.word	0x0800a67d
 800a608:	0800a67d 	.word	0x0800a67d
 800a60c:	0800a67d 	.word	0x0800a67d
 800a610:	0800a647 	.word	0x0800a647
 800a614:	0800a67d 	.word	0x0800a67d
 800a618:	0800a67d 	.word	0x0800a67d
 800a61c:	0800a67d 	.word	0x0800a67d
 800a620:	0800a659 	.word	0x0800a659
 800a624:	0800a67d 	.word	0x0800a67d
 800a628:	0800a67d 	.word	0x0800a67d
 800a62c:	0800a67d 	.word	0x0800a67d
 800a630:	0800a66b 	.word	0x0800a66b
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68da      	ldr	r2, [r3, #12]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f042 0202 	orr.w	r2, r2, #2
 800a642:	60da      	str	r2, [r3, #12]
 800a644:	e01d      	b.n	800a682 <HAL_TIM_IC_Start_IT+0x192>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	68da      	ldr	r2, [r3, #12]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f042 0204 	orr.w	r2, r2, #4
 800a654:	60da      	str	r2, [r3, #12]
 800a656:	e014      	b.n	800a682 <HAL_TIM_IC_Start_IT+0x192>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	68da      	ldr	r2, [r3, #12]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f042 0208 	orr.w	r2, r2, #8
 800a666:	60da      	str	r2, [r3, #12]
 800a668:	e00b      	b.n	800a682 <HAL_TIM_IC_Start_IT+0x192>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	68da      	ldr	r2, [r3, #12]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f042 0210 	orr.w	r2, r2, #16
 800a678:	60da      	str	r2, [r3, #12]
 800a67a:	e002      	b.n	800a682 <HAL_TIM_IC_Start_IT+0x192>
 800a67c:	2301      	movs	r3, #1
 800a67e:	73fb      	strb	r3, [r7, #15]
 800a680:	bf00      	nop
 800a682:	7bfb      	ldrb	r3, [r7, #15]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d148      	bne.n	800a71a <HAL_TIM_IC_Start_IT+0x22a>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2201      	movs	r2, #1
 800a68e:	6839      	ldr	r1, [r7, #0]
 800a690:	4618      	mov	r0, r3
 800a692:	f001 f937 	bl	800b904 <TIM_CCxChannelCmd>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4a22      	ldr	r2, [pc, #136]	; (800a724 <HAL_TIM_IC_Start_IT+0x234>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d022      	beq.n	800a6e6 <HAL_TIM_IC_Start_IT+0x1f6>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6a8:	d01d      	beq.n	800a6e6 <HAL_TIM_IC_Start_IT+0x1f6>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a1e      	ldr	r2, [pc, #120]	; (800a728 <HAL_TIM_IC_Start_IT+0x238>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d018      	beq.n	800a6e6 <HAL_TIM_IC_Start_IT+0x1f6>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a1c      	ldr	r2, [pc, #112]	; (800a72c <HAL_TIM_IC_Start_IT+0x23c>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d013      	beq.n	800a6e6 <HAL_TIM_IC_Start_IT+0x1f6>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a1b      	ldr	r2, [pc, #108]	; (800a730 <HAL_TIM_IC_Start_IT+0x240>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d00e      	beq.n	800a6e6 <HAL_TIM_IC_Start_IT+0x1f6>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a19      	ldr	r2, [pc, #100]	; (800a734 <HAL_TIM_IC_Start_IT+0x244>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d009      	beq.n	800a6e6 <HAL_TIM_IC_Start_IT+0x1f6>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a18      	ldr	r2, [pc, #96]	; (800a738 <HAL_TIM_IC_Start_IT+0x248>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d004      	beq.n	800a6e6 <HAL_TIM_IC_Start_IT+0x1f6>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a16      	ldr	r2, [pc, #88]	; (800a73c <HAL_TIM_IC_Start_IT+0x24c>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d111      	bne.n	800a70a <HAL_TIM_IC_Start_IT+0x21a>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	689b      	ldr	r3, [r3, #8]
 800a6ec:	f003 0307 	and.w	r3, r3, #7
 800a6f0:	60bb      	str	r3, [r7, #8]
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	2b06      	cmp	r3, #6
 800a6f6:	d010      	beq.n	800a71a <HAL_TIM_IC_Start_IT+0x22a>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f042 0201 	orr.w	r2, r2, #1
 800a706:	601a      	str	r2, [r3, #0]
 800a708:	e007      	b.n	800a71a <HAL_TIM_IC_Start_IT+0x22a>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f042 0201 	orr.w	r2, r2, #1
 800a718:	601a      	str	r2, [r3, #0]
 800a71a:	7bfb      	ldrb	r3, [r7, #15]
 800a71c:	4618      	mov	r0, r3
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}
 800a724:	40010000 	.word	0x40010000
 800a728:	40000400 	.word	0x40000400
 800a72c:	40000800 	.word	0x40000800
 800a730:	40000c00 	.word	0x40000c00
 800a734:	40010400 	.word	0x40010400
 800a738:	40014000 	.word	0x40014000
 800a73c:	40001800 	.word	0x40001800

0800a740 <HAL_TIM_Encoder_Init>:
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d101      	bne.n	800a754 <HAL_TIM_Encoder_Init+0x14>
 800a750:	2301      	movs	r3, #1
 800a752:	e097      	b.n	800a884 <HAL_TIM_Encoder_Init+0x144>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d106      	bne.n	800a76e <HAL_TIM_Encoder_Init+0x2e>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f7fb fe57 	bl	800641c <HAL_TIM_Encoder_MspInit>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2202      	movs	r2, #2
 800a772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	6812      	ldr	r2, [r2, #0]
 800a780:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a784:	f023 0307 	bic.w	r3, r3, #7
 800a788:	6093      	str	r3, [r2, #8]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	3304      	adds	r3, #4
 800a792:	4619      	mov	r1, r3
 800a794:	4610      	mov	r0, r2
 800a796:	f000 fca1 	bl	800b0dc <TIM_Base_SetConfig>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	617b      	str	r3, [r7, #20]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	699b      	ldr	r3, [r3, #24]
 800a7a8:	613b      	str	r3, [r7, #16]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	6a1b      	ldr	r3, [r3, #32]
 800a7b0:	60fb      	str	r3, [r7, #12]
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	697a      	ldr	r2, [r7, #20]
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	617b      	str	r3, [r7, #20]
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7c2:	f023 0303 	bic.w	r3, r3, #3
 800a7c6:	613b      	str	r3, [r7, #16]
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	689a      	ldr	r2, [r3, #8]
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	699b      	ldr	r3, [r3, #24]
 800a7d0:	021b      	lsls	r3, r3, #8
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	693a      	ldr	r2, [r7, #16]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	613b      	str	r3, [r7, #16]
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a7e0:	f023 030c 	bic.w	r3, r3, #12
 800a7e4:	613b      	str	r3, [r7, #16]
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a7ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a7f0:	613b      	str	r3, [r7, #16]
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	68da      	ldr	r2, [r3, #12]
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	69db      	ldr	r3, [r3, #28]
 800a7fa:	021b      	lsls	r3, r3, #8
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	693a      	ldr	r2, [r7, #16]
 800a800:	4313      	orrs	r3, r2
 800a802:	613b      	str	r3, [r7, #16]
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	011a      	lsls	r2, r3, #4
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	6a1b      	ldr	r3, [r3, #32]
 800a80e:	031b      	lsls	r3, r3, #12
 800a810:	4313      	orrs	r3, r2
 800a812:	693a      	ldr	r2, [r7, #16]
 800a814:	4313      	orrs	r3, r2
 800a816:	613b      	str	r3, [r7, #16]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a81e:	60fb      	str	r3, [r7, #12]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a826:	60fb      	str	r3, [r7, #12]
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	685a      	ldr	r2, [r3, #4]
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	695b      	ldr	r3, [r3, #20]
 800a830:	011b      	lsls	r3, r3, #4
 800a832:	4313      	orrs	r3, r2
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	4313      	orrs	r3, r2
 800a838:	60fb      	str	r3, [r7, #12]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	697a      	ldr	r2, [r7, #20]
 800a840:	609a      	str	r2, [r3, #8]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	693a      	ldr	r2, [r7, #16]
 800a848:	619a      	str	r2, [r3, #24]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	68fa      	ldr	r2, [r7, #12]
 800a850:	621a      	str	r2, [r3, #32]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2201      	movs	r2, #1
 800a856:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2201      	movs	r2, #1
 800a85e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2201      	movs	r2, #1
 800a866:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2201      	movs	r2, #1
 800a876:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a882:	2300      	movs	r3, #0
 800a884:	4618      	mov	r0, r3
 800a886:	3718      	adds	r7, #24
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <HAL_TIM_Encoder_Start>:
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a89c:	73fb      	strb	r3, [r7, #15]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a8a4:	73bb      	strb	r3, [r7, #14]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a8ac:	737b      	strb	r3, [r7, #13]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a8b4:	733b      	strb	r3, [r7, #12]
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d110      	bne.n	800a8de <HAL_TIM_Encoder_Start+0x52>
 800a8bc:	7bfb      	ldrb	r3, [r7, #15]
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d102      	bne.n	800a8c8 <HAL_TIM_Encoder_Start+0x3c>
 800a8c2:	7b7b      	ldrb	r3, [r7, #13]
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d001      	beq.n	800a8cc <HAL_TIM_Encoder_Start+0x40>
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e069      	b.n	800a9a0 <HAL_TIM_Encoder_Start+0x114>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2202      	movs	r2, #2
 800a8d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2202      	movs	r2, #2
 800a8d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a8dc:	e031      	b.n	800a942 <HAL_TIM_Encoder_Start+0xb6>
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	2b04      	cmp	r3, #4
 800a8e2:	d110      	bne.n	800a906 <HAL_TIM_Encoder_Start+0x7a>
 800a8e4:	7bbb      	ldrb	r3, [r7, #14]
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d102      	bne.n	800a8f0 <HAL_TIM_Encoder_Start+0x64>
 800a8ea:	7b3b      	ldrb	r3, [r7, #12]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d001      	beq.n	800a8f4 <HAL_TIM_Encoder_Start+0x68>
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e055      	b.n	800a9a0 <HAL_TIM_Encoder_Start+0x114>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2202      	movs	r2, #2
 800a8f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2202      	movs	r2, #2
 800a900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a904:	e01d      	b.n	800a942 <HAL_TIM_Encoder_Start+0xb6>
 800a906:	7bfb      	ldrb	r3, [r7, #15]
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d108      	bne.n	800a91e <HAL_TIM_Encoder_Start+0x92>
 800a90c:	7bbb      	ldrb	r3, [r7, #14]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d105      	bne.n	800a91e <HAL_TIM_Encoder_Start+0x92>
 800a912:	7b7b      	ldrb	r3, [r7, #13]
 800a914:	2b01      	cmp	r3, #1
 800a916:	d102      	bne.n	800a91e <HAL_TIM_Encoder_Start+0x92>
 800a918:	7b3b      	ldrb	r3, [r7, #12]
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d001      	beq.n	800a922 <HAL_TIM_Encoder_Start+0x96>
 800a91e:	2301      	movs	r3, #1
 800a920:	e03e      	b.n	800a9a0 <HAL_TIM_Encoder_Start+0x114>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2202      	movs	r2, #2
 800a926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2202      	movs	r2, #2
 800a92e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2202      	movs	r2, #2
 800a936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2202      	movs	r2, #2
 800a93e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d003      	beq.n	800a950 <HAL_TIM_Encoder_Start+0xc4>
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	2b04      	cmp	r3, #4
 800a94c:	d008      	beq.n	800a960 <HAL_TIM_Encoder_Start+0xd4>
 800a94e:	e00f      	b.n	800a970 <HAL_TIM_Encoder_Start+0xe4>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	2201      	movs	r2, #1
 800a956:	2100      	movs	r1, #0
 800a958:	4618      	mov	r0, r3
 800a95a:	f000 ffd3 	bl	800b904 <TIM_CCxChannelCmd>
 800a95e:	e016      	b.n	800a98e <HAL_TIM_Encoder_Start+0x102>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2201      	movs	r2, #1
 800a966:	2104      	movs	r1, #4
 800a968:	4618      	mov	r0, r3
 800a96a:	f000 ffcb 	bl	800b904 <TIM_CCxChannelCmd>
 800a96e:	e00e      	b.n	800a98e <HAL_TIM_Encoder_Start+0x102>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2201      	movs	r2, #1
 800a976:	2100      	movs	r1, #0
 800a978:	4618      	mov	r0, r3
 800a97a:	f000 ffc3 	bl	800b904 <TIM_CCxChannelCmd>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2201      	movs	r2, #1
 800a984:	2104      	movs	r1, #4
 800a986:	4618      	mov	r0, r3
 800a988:	f000 ffbc 	bl	800b904 <TIM_CCxChannelCmd>
 800a98c:	bf00      	nop
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f042 0201 	orr.w	r2, r2, #1
 800a99c:	601a      	str	r2, [r3, #0]
 800a99e:	2300      	movs	r3, #0
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3710      	adds	r7, #16
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <HAL_TIM_IRQHandler>:
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	f003 0302 	and.w	r3, r3, #2
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	d122      	bne.n	800aa04 <HAL_TIM_IRQHandler+0x5c>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	f003 0302 	and.w	r3, r3, #2
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	d11b      	bne.n	800aa04 <HAL_TIM_IRQHandler+0x5c>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f06f 0202 	mvn.w	r2, #2
 800a9d4:	611a      	str	r2, [r3, #16]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	771a      	strb	r2, [r3, #28]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	699b      	ldr	r3, [r3, #24]
 800a9e2:	f003 0303 	and.w	r3, r3, #3
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d003      	beq.n	800a9f2 <HAL_TIM_IRQHandler+0x4a>
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f7f6 ff7c 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 800a9f0:	e005      	b.n	800a9fe <HAL_TIM_IRQHandler+0x56>
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 fb54 	bl	800b0a0 <HAL_TIM_OC_DelayElapsedCallback>
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 fb5b 	bl	800b0b4 <HAL_TIM_PWM_PulseFinishedCallback>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	771a      	strb	r2, [r3, #28]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	691b      	ldr	r3, [r3, #16]
 800aa0a:	f003 0304 	and.w	r3, r3, #4
 800aa0e:	2b04      	cmp	r3, #4
 800aa10:	d122      	bne.n	800aa58 <HAL_TIM_IRQHandler+0xb0>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	f003 0304 	and.w	r3, r3, #4
 800aa1c:	2b04      	cmp	r3, #4
 800aa1e:	d11b      	bne.n	800aa58 <HAL_TIM_IRQHandler+0xb0>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f06f 0204 	mvn.w	r2, #4
 800aa28:	611a      	str	r2, [r3, #16]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2202      	movs	r2, #2
 800aa2e:	771a      	strb	r2, [r3, #28]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	699b      	ldr	r3, [r3, #24]
 800aa36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d003      	beq.n	800aa46 <HAL_TIM_IRQHandler+0x9e>
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f7f6 ff52 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 800aa44:	e005      	b.n	800aa52 <HAL_TIM_IRQHandler+0xaa>
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 fb2a 	bl	800b0a0 <HAL_TIM_OC_DelayElapsedCallback>
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 fb31 	bl	800b0b4 <HAL_TIM_PWM_PulseFinishedCallback>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2200      	movs	r2, #0
 800aa56:	771a      	strb	r2, [r3, #28]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	691b      	ldr	r3, [r3, #16]
 800aa5e:	f003 0308 	and.w	r3, r3, #8
 800aa62:	2b08      	cmp	r3, #8
 800aa64:	d122      	bne.n	800aaac <HAL_TIM_IRQHandler+0x104>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	f003 0308 	and.w	r3, r3, #8
 800aa70:	2b08      	cmp	r3, #8
 800aa72:	d11b      	bne.n	800aaac <HAL_TIM_IRQHandler+0x104>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f06f 0208 	mvn.w	r2, #8
 800aa7c:	611a      	str	r2, [r3, #16]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2204      	movs	r2, #4
 800aa82:	771a      	strb	r2, [r3, #28]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	69db      	ldr	r3, [r3, #28]
 800aa8a:	f003 0303 	and.w	r3, r3, #3
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d003      	beq.n	800aa9a <HAL_TIM_IRQHandler+0xf2>
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f7f6 ff28 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 800aa98:	e005      	b.n	800aaa6 <HAL_TIM_IRQHandler+0xfe>
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 fb00 	bl	800b0a0 <HAL_TIM_OC_DelayElapsedCallback>
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f000 fb07 	bl	800b0b4 <HAL_TIM_PWM_PulseFinishedCallback>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	771a      	strb	r2, [r3, #28]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	691b      	ldr	r3, [r3, #16]
 800aab2:	f003 0310 	and.w	r3, r3, #16
 800aab6:	2b10      	cmp	r3, #16
 800aab8:	d122      	bne.n	800ab00 <HAL_TIM_IRQHandler+0x158>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	f003 0310 	and.w	r3, r3, #16
 800aac4:	2b10      	cmp	r3, #16
 800aac6:	d11b      	bne.n	800ab00 <HAL_TIM_IRQHandler+0x158>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f06f 0210 	mvn.w	r2, #16
 800aad0:	611a      	str	r2, [r3, #16]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2208      	movs	r2, #8
 800aad6:	771a      	strb	r2, [r3, #28]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	69db      	ldr	r3, [r3, #28]
 800aade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d003      	beq.n	800aaee <HAL_TIM_IRQHandler+0x146>
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f7f6 fefe 	bl	80018e8 <HAL_TIM_IC_CaptureCallback>
 800aaec:	e005      	b.n	800aafa <HAL_TIM_IRQHandler+0x152>
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 fad6 	bl	800b0a0 <HAL_TIM_OC_DelayElapsedCallback>
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 fadd 	bl	800b0b4 <HAL_TIM_PWM_PulseFinishedCallback>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	771a      	strb	r2, [r3, #28]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	691b      	ldr	r3, [r3, #16]
 800ab06:	f003 0301 	and.w	r3, r3, #1
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d10e      	bne.n	800ab2c <HAL_TIM_IRQHandler+0x184>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	f003 0301 	and.w	r3, r3, #1
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d107      	bne.n	800ab2c <HAL_TIM_IRQHandler+0x184>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f06f 0201 	mvn.w	r2, #1
 800ab24:	611a      	str	r2, [r3, #16]
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 fab0 	bl	800b08c <HAL_TIM_PeriodElapsedCallback>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	691b      	ldr	r3, [r3, #16]
 800ab32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab36:	2b80      	cmp	r3, #128	; 0x80
 800ab38:	d10e      	bne.n	800ab58 <HAL_TIM_IRQHandler+0x1b0>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab44:	2b80      	cmp	r3, #128	; 0x80
 800ab46:	d107      	bne.n	800ab58 <HAL_TIM_IRQHandler+0x1b0>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ab50:	611a      	str	r2, [r3, #16]
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 ffd4 	bl	800bb00 <HAL_TIMEx_BreakCallback>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	691b      	ldr	r3, [r3, #16]
 800ab5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab62:	2b40      	cmp	r3, #64	; 0x40
 800ab64:	d10e      	bne.n	800ab84 <HAL_TIM_IRQHandler+0x1dc>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab70:	2b40      	cmp	r3, #64	; 0x40
 800ab72:	d107      	bne.n	800ab84 <HAL_TIM_IRQHandler+0x1dc>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab7c:	611a      	str	r2, [r3, #16]
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 faa2 	bl	800b0c8 <HAL_TIM_TriggerCallback>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	f003 0320 	and.w	r3, r3, #32
 800ab8e:	2b20      	cmp	r3, #32
 800ab90:	d10e      	bne.n	800abb0 <HAL_TIM_IRQHandler+0x208>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	f003 0320 	and.w	r3, r3, #32
 800ab9c:	2b20      	cmp	r3, #32
 800ab9e:	d107      	bne.n	800abb0 <HAL_TIM_IRQHandler+0x208>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f06f 0220 	mvn.w	r2, #32
 800aba8:	611a      	str	r2, [r3, #16]
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 ff9e 	bl	800baec <HAL_TIMEx_CommutCallback>
 800abb0:	bf00      	nop
 800abb2:	3708      	adds	r7, #8
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <HAL_TIM_IC_ConfigChannel>:
 800abb8:	b580      	push	{r7, lr}
 800abba:	b086      	sub	sp, #24
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	607a      	str	r2, [r7, #4]
 800abc4:	2300      	movs	r3, #0
 800abc6:	75fb      	strb	r3, [r7, #23]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d101      	bne.n	800abd6 <HAL_TIM_IC_ConfigChannel+0x1e>
 800abd2:	2302      	movs	r3, #2
 800abd4:	e088      	b.n	800ace8 <HAL_TIM_IC_ConfigChannel+0x130>
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2201      	movs	r2, #1
 800abda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d11b      	bne.n	800ac1c <HAL_TIM_IC_ConfigChannel+0x64>
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	6818      	ldr	r0, [r3, #0]
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	6819      	ldr	r1, [r3, #0]
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	685a      	ldr	r2, [r3, #4]
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	f000 fcc2 	bl	800b57c <TIM_TI1_SetConfig>
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	699a      	ldr	r2, [r3, #24]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f022 020c 	bic.w	r2, r2, #12
 800ac06:	619a      	str	r2, [r3, #24]
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	6999      	ldr	r1, [r3, #24]
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	689a      	ldr	r2, [r3, #8]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	430a      	orrs	r2, r1
 800ac18:	619a      	str	r2, [r3, #24]
 800ac1a:	e060      	b.n	800acde <HAL_TIM_IC_ConfigChannel+0x126>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2b04      	cmp	r3, #4
 800ac20:	d11c      	bne.n	800ac5c <HAL_TIM_IC_ConfigChannel+0xa4>
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6818      	ldr	r0, [r3, #0]
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	6819      	ldr	r1, [r3, #0]
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	685a      	ldr	r2, [r3, #4]
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	f000 fd46 	bl	800b6c2 <TIM_TI2_SetConfig>
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	699a      	ldr	r2, [r3, #24]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ac44:	619a      	str	r2, [r3, #24]
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	6999      	ldr	r1, [r3, #24]
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	021a      	lsls	r2, r3, #8
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	430a      	orrs	r2, r1
 800ac58:	619a      	str	r2, [r3, #24]
 800ac5a:	e040      	b.n	800acde <HAL_TIM_IC_ConfigChannel+0x126>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2b08      	cmp	r3, #8
 800ac60:	d11b      	bne.n	800ac9a <HAL_TIM_IC_ConfigChannel+0xe2>
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	6818      	ldr	r0, [r3, #0]
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	6819      	ldr	r1, [r3, #0]
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	685a      	ldr	r2, [r3, #4]
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	f000 fd93 	bl	800b79c <TIM_TI3_SetConfig>
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	69da      	ldr	r2, [r3, #28]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f022 020c 	bic.w	r2, r2, #12
 800ac84:	61da      	str	r2, [r3, #28]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	69d9      	ldr	r1, [r3, #28]
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	689a      	ldr	r2, [r3, #8]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	430a      	orrs	r2, r1
 800ac96:	61da      	str	r2, [r3, #28]
 800ac98:	e021      	b.n	800acde <HAL_TIM_IC_ConfigChannel+0x126>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2b0c      	cmp	r3, #12
 800ac9e:	d11c      	bne.n	800acda <HAL_TIM_IC_ConfigChannel+0x122>
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	6818      	ldr	r0, [r3, #0]
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	6819      	ldr	r1, [r3, #0]
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	685a      	ldr	r2, [r3, #4]
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	68db      	ldr	r3, [r3, #12]
 800acb0:	f000 fdb0 	bl	800b814 <TIM_TI4_SetConfig>
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	69da      	ldr	r2, [r3, #28]
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800acc2:	61da      	str	r2, [r3, #28]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	69d9      	ldr	r1, [r3, #28]
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	021a      	lsls	r2, r3, #8
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	430a      	orrs	r2, r1
 800acd6:	61da      	str	r2, [r3, #28]
 800acd8:	e001      	b.n	800acde <HAL_TIM_IC_ConfigChannel+0x126>
 800acda:	2301      	movs	r3, #1
 800acdc:	75fb      	strb	r3, [r7, #23]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ace6:	7dfb      	ldrb	r3, [r7, #23]
 800ace8:	4618      	mov	r0, r3
 800acea:	3718      	adds	r7, #24
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <HAL_TIM_PWM_ConfigChannel>:
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b086      	sub	sp, #24
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	607a      	str	r2, [r7, #4]
 800acfc:	2300      	movs	r3, #0
 800acfe:	75fb      	strb	r3, [r7, #23]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d101      	bne.n	800ad0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ad0a:	2302      	movs	r3, #2
 800ad0c:	e0ae      	b.n	800ae6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2201      	movs	r2, #1
 800ad12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2b0c      	cmp	r3, #12
 800ad1a:	f200 809f 	bhi.w	800ae5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ad1e:	a201      	add	r2, pc, #4	; (adr r2, 800ad24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ad20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad24:	0800ad59 	.word	0x0800ad59
 800ad28:	0800ae5d 	.word	0x0800ae5d
 800ad2c:	0800ae5d 	.word	0x0800ae5d
 800ad30:	0800ae5d 	.word	0x0800ae5d
 800ad34:	0800ad99 	.word	0x0800ad99
 800ad38:	0800ae5d 	.word	0x0800ae5d
 800ad3c:	0800ae5d 	.word	0x0800ae5d
 800ad40:	0800ae5d 	.word	0x0800ae5d
 800ad44:	0800addb 	.word	0x0800addb
 800ad48:	0800ae5d 	.word	0x0800ae5d
 800ad4c:	0800ae5d 	.word	0x0800ae5d
 800ad50:	0800ae5d 	.word	0x0800ae5d
 800ad54:	0800ae1b 	.word	0x0800ae1b
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	68b9      	ldr	r1, [r7, #8]
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f000 fa5c 	bl	800b21c <TIM_OC1_SetConfig>
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	699a      	ldr	r2, [r3, #24]
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f042 0208 	orr.w	r2, r2, #8
 800ad72:	619a      	str	r2, [r3, #24]
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	699a      	ldr	r2, [r3, #24]
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f022 0204 	bic.w	r2, r2, #4
 800ad82:	619a      	str	r2, [r3, #24]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	6999      	ldr	r1, [r3, #24]
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	691a      	ldr	r2, [r3, #16]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	430a      	orrs	r2, r1
 800ad94:	619a      	str	r2, [r3, #24]
 800ad96:	e064      	b.n	800ae62 <HAL_TIM_PWM_ConfigChannel+0x172>
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	68b9      	ldr	r1, [r7, #8]
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f000 faac 	bl	800b2fc <TIM_OC2_SetConfig>
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	699a      	ldr	r2, [r3, #24]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800adb2:	619a      	str	r2, [r3, #24]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	699a      	ldr	r2, [r3, #24]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800adc2:	619a      	str	r2, [r3, #24]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	6999      	ldr	r1, [r3, #24]
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	691b      	ldr	r3, [r3, #16]
 800adce:	021a      	lsls	r2, r3, #8
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	430a      	orrs	r2, r1
 800add6:	619a      	str	r2, [r3, #24]
 800add8:	e043      	b.n	800ae62 <HAL_TIM_PWM_ConfigChannel+0x172>
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	68b9      	ldr	r1, [r7, #8]
 800ade0:	4618      	mov	r0, r3
 800ade2:	f000 fb01 	bl	800b3e8 <TIM_OC3_SetConfig>
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	69da      	ldr	r2, [r3, #28]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f042 0208 	orr.w	r2, r2, #8
 800adf4:	61da      	str	r2, [r3, #28]
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	69da      	ldr	r2, [r3, #28]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f022 0204 	bic.w	r2, r2, #4
 800ae04:	61da      	str	r2, [r3, #28]
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	69d9      	ldr	r1, [r3, #28]
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	691a      	ldr	r2, [r3, #16]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	430a      	orrs	r2, r1
 800ae16:	61da      	str	r2, [r3, #28]
 800ae18:	e023      	b.n	800ae62 <HAL_TIM_PWM_ConfigChannel+0x172>
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	68b9      	ldr	r1, [r7, #8]
 800ae20:	4618      	mov	r0, r3
 800ae22:	f000 fb55 	bl	800b4d0 <TIM_OC4_SetConfig>
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	69da      	ldr	r2, [r3, #28]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae34:	61da      	str	r2, [r3, #28]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	69da      	ldr	r2, [r3, #28]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae44:	61da      	str	r2, [r3, #28]
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	69d9      	ldr	r1, [r3, #28]
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	691b      	ldr	r3, [r3, #16]
 800ae50:	021a      	lsls	r2, r3, #8
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	430a      	orrs	r2, r1
 800ae58:	61da      	str	r2, [r3, #28]
 800ae5a:	e002      	b.n	800ae62 <HAL_TIM_PWM_ConfigChannel+0x172>
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	75fb      	strb	r3, [r7, #23]
 800ae60:	bf00      	nop
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2200      	movs	r2, #0
 800ae66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ae6a:	7dfb      	ldrb	r3, [r7, #23]
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3718      	adds	r7, #24
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <HAL_TIM_ConfigClockSource>:
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
 800ae7e:	2300      	movs	r3, #0
 800ae80:	73fb      	strb	r3, [r7, #15]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	d101      	bne.n	800ae90 <HAL_TIM_ConfigClockSource+0x1c>
 800ae8c:	2302      	movs	r3, #2
 800ae8e:	e0b4      	b.n	800affa <HAL_TIM_ConfigClockSource+0x186>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2201      	movs	r2, #1
 800ae94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2202      	movs	r2, #2
 800ae9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	689b      	ldr	r3, [r3, #8]
 800aea6:	60bb      	str	r3, [r7, #8]
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800aeae:	60bb      	str	r3, [r7, #8]
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aeb6:	60bb      	str	r3, [r7, #8]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	68ba      	ldr	r2, [r7, #8]
 800aebe:	609a      	str	r2, [r3, #8]
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aec8:	d03e      	beq.n	800af48 <HAL_TIM_ConfigClockSource+0xd4>
 800aeca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aece:	f200 8087 	bhi.w	800afe0 <HAL_TIM_ConfigClockSource+0x16c>
 800aed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aed6:	f000 8086 	beq.w	800afe6 <HAL_TIM_ConfigClockSource+0x172>
 800aeda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aede:	d87f      	bhi.n	800afe0 <HAL_TIM_ConfigClockSource+0x16c>
 800aee0:	2b70      	cmp	r3, #112	; 0x70
 800aee2:	d01a      	beq.n	800af1a <HAL_TIM_ConfigClockSource+0xa6>
 800aee4:	2b70      	cmp	r3, #112	; 0x70
 800aee6:	d87b      	bhi.n	800afe0 <HAL_TIM_ConfigClockSource+0x16c>
 800aee8:	2b60      	cmp	r3, #96	; 0x60
 800aeea:	d050      	beq.n	800af8e <HAL_TIM_ConfigClockSource+0x11a>
 800aeec:	2b60      	cmp	r3, #96	; 0x60
 800aeee:	d877      	bhi.n	800afe0 <HAL_TIM_ConfigClockSource+0x16c>
 800aef0:	2b50      	cmp	r3, #80	; 0x50
 800aef2:	d03c      	beq.n	800af6e <HAL_TIM_ConfigClockSource+0xfa>
 800aef4:	2b50      	cmp	r3, #80	; 0x50
 800aef6:	d873      	bhi.n	800afe0 <HAL_TIM_ConfigClockSource+0x16c>
 800aef8:	2b40      	cmp	r3, #64	; 0x40
 800aefa:	d058      	beq.n	800afae <HAL_TIM_ConfigClockSource+0x13a>
 800aefc:	2b40      	cmp	r3, #64	; 0x40
 800aefe:	d86f      	bhi.n	800afe0 <HAL_TIM_ConfigClockSource+0x16c>
 800af00:	2b30      	cmp	r3, #48	; 0x30
 800af02:	d064      	beq.n	800afce <HAL_TIM_ConfigClockSource+0x15a>
 800af04:	2b30      	cmp	r3, #48	; 0x30
 800af06:	d86b      	bhi.n	800afe0 <HAL_TIM_ConfigClockSource+0x16c>
 800af08:	2b20      	cmp	r3, #32
 800af0a:	d060      	beq.n	800afce <HAL_TIM_ConfigClockSource+0x15a>
 800af0c:	2b20      	cmp	r3, #32
 800af0e:	d867      	bhi.n	800afe0 <HAL_TIM_ConfigClockSource+0x16c>
 800af10:	2b00      	cmp	r3, #0
 800af12:	d05c      	beq.n	800afce <HAL_TIM_ConfigClockSource+0x15a>
 800af14:	2b10      	cmp	r3, #16
 800af16:	d05a      	beq.n	800afce <HAL_TIM_ConfigClockSource+0x15a>
 800af18:	e062      	b.n	800afe0 <HAL_TIM_ConfigClockSource+0x16c>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6818      	ldr	r0, [r3, #0]
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	6899      	ldr	r1, [r3, #8]
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	685a      	ldr	r2, [r3, #4]
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	68db      	ldr	r3, [r3, #12]
 800af2a:	f000 fccb 	bl	800b8c4 <TIM_ETR_SetConfig>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	60bb      	str	r3, [r7, #8]
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800af3c:	60bb      	str	r3, [r7, #8]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	68ba      	ldr	r2, [r7, #8]
 800af44:	609a      	str	r2, [r3, #8]
 800af46:	e04f      	b.n	800afe8 <HAL_TIM_ConfigClockSource+0x174>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6818      	ldr	r0, [r3, #0]
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	6899      	ldr	r1, [r3, #8]
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	685a      	ldr	r2, [r3, #4]
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	f000 fcb4 	bl	800b8c4 <TIM_ETR_SetConfig>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	689a      	ldr	r2, [r3, #8]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800af6a:	609a      	str	r2, [r3, #8]
 800af6c:	e03c      	b.n	800afe8 <HAL_TIM_ConfigClockSource+0x174>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6818      	ldr	r0, [r3, #0]
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	6859      	ldr	r1, [r3, #4]
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	461a      	mov	r2, r3
 800af7c:	f000 fb72 	bl	800b664 <TIM_TI1_ConfigInputStage>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	2150      	movs	r1, #80	; 0x50
 800af86:	4618      	mov	r0, r3
 800af88:	f000 fc81 	bl	800b88e <TIM_ITRx_SetConfig>
 800af8c:	e02c      	b.n	800afe8 <HAL_TIM_ConfigClockSource+0x174>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6818      	ldr	r0, [r3, #0]
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	6859      	ldr	r1, [r3, #4]
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	461a      	mov	r2, r3
 800af9c:	f000 fbce 	bl	800b73c <TIM_TI2_ConfigInputStage>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2160      	movs	r1, #96	; 0x60
 800afa6:	4618      	mov	r0, r3
 800afa8:	f000 fc71 	bl	800b88e <TIM_ITRx_SetConfig>
 800afac:	e01c      	b.n	800afe8 <HAL_TIM_ConfigClockSource+0x174>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6818      	ldr	r0, [r3, #0]
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	6859      	ldr	r1, [r3, #4]
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	68db      	ldr	r3, [r3, #12]
 800afba:	461a      	mov	r2, r3
 800afbc:	f000 fb52 	bl	800b664 <TIM_TI1_ConfigInputStage>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2140      	movs	r1, #64	; 0x40
 800afc6:	4618      	mov	r0, r3
 800afc8:	f000 fc61 	bl	800b88e <TIM_ITRx_SetConfig>
 800afcc:	e00c      	b.n	800afe8 <HAL_TIM_ConfigClockSource+0x174>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4619      	mov	r1, r3
 800afd8:	4610      	mov	r0, r2
 800afda:	f000 fc58 	bl	800b88e <TIM_ITRx_SetConfig>
 800afde:	e003      	b.n	800afe8 <HAL_TIM_ConfigClockSource+0x174>
 800afe0:	2301      	movs	r3, #1
 800afe2:	73fb      	strb	r3, [r7, #15]
 800afe4:	e000      	b.n	800afe8 <HAL_TIM_ConfigClockSource+0x174>
 800afe6:	bf00      	nop
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800aff8:	7bfb      	ldrb	r3, [r7, #15]
 800affa:	4618      	mov	r0, r3
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
	...

0800b004 <HAL_TIM_ReadCapturedValue>:
 800b004:	b480      	push	{r7}
 800b006:	b085      	sub	sp, #20
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
 800b00e:	2300      	movs	r3, #0
 800b010:	60fb      	str	r3, [r7, #12]
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	2b0c      	cmp	r3, #12
 800b016:	d831      	bhi.n	800b07c <HAL_TIM_ReadCapturedValue+0x78>
 800b018:	a201      	add	r2, pc, #4	; (adr r2, 800b020 <HAL_TIM_ReadCapturedValue+0x1c>)
 800b01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b01e:	bf00      	nop
 800b020:	0800b055 	.word	0x0800b055
 800b024:	0800b07d 	.word	0x0800b07d
 800b028:	0800b07d 	.word	0x0800b07d
 800b02c:	0800b07d 	.word	0x0800b07d
 800b030:	0800b05f 	.word	0x0800b05f
 800b034:	0800b07d 	.word	0x0800b07d
 800b038:	0800b07d 	.word	0x0800b07d
 800b03c:	0800b07d 	.word	0x0800b07d
 800b040:	0800b069 	.word	0x0800b069
 800b044:	0800b07d 	.word	0x0800b07d
 800b048:	0800b07d 	.word	0x0800b07d
 800b04c:	0800b07d 	.word	0x0800b07d
 800b050:	0800b073 	.word	0x0800b073
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b05a:	60fb      	str	r3, [r7, #12]
 800b05c:	e00f      	b.n	800b07e <HAL_TIM_ReadCapturedValue+0x7a>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b064:	60fb      	str	r3, [r7, #12]
 800b066:	e00a      	b.n	800b07e <HAL_TIM_ReadCapturedValue+0x7a>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b06e:	60fb      	str	r3, [r7, #12]
 800b070:	e005      	b.n	800b07e <HAL_TIM_ReadCapturedValue+0x7a>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b078:	60fb      	str	r3, [r7, #12]
 800b07a:	e000      	b.n	800b07e <HAL_TIM_ReadCapturedValue+0x7a>
 800b07c:	bf00      	nop
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	4618      	mov	r0, r3
 800b082:	3714      	adds	r7, #20
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr

0800b08c <HAL_TIM_PeriodElapsedCallback>:
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	bf00      	nop
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <HAL_TIM_OC_DelayElapsedCallback>:
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	bf00      	nop
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <HAL_TIM_PWM_PulseFinishedCallback>:
 800b0b4:	b480      	push	{r7}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	bf00      	nop
 800b0be:	370c      	adds	r7, #12
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr

0800b0c8 <HAL_TIM_TriggerCallback>:
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	bf00      	nop
 800b0d2:	370c      	adds	r7, #12
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr

0800b0dc <TIM_Base_SetConfig>:
 800b0dc:	b480      	push	{r7}
 800b0de:	b085      	sub	sp, #20
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	60fb      	str	r3, [r7, #12]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	4a40      	ldr	r2, [pc, #256]	; (800b1f0 <TIM_Base_SetConfig+0x114>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d013      	beq.n	800b11c <TIM_Base_SetConfig+0x40>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0fa:	d00f      	beq.n	800b11c <TIM_Base_SetConfig+0x40>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	4a3d      	ldr	r2, [pc, #244]	; (800b1f4 <TIM_Base_SetConfig+0x118>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d00b      	beq.n	800b11c <TIM_Base_SetConfig+0x40>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	4a3c      	ldr	r2, [pc, #240]	; (800b1f8 <TIM_Base_SetConfig+0x11c>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d007      	beq.n	800b11c <TIM_Base_SetConfig+0x40>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	4a3b      	ldr	r2, [pc, #236]	; (800b1fc <TIM_Base_SetConfig+0x120>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d003      	beq.n	800b11c <TIM_Base_SetConfig+0x40>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	4a3a      	ldr	r2, [pc, #232]	; (800b200 <TIM_Base_SetConfig+0x124>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d108      	bne.n	800b12e <TIM_Base_SetConfig+0x52>
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b122:	60fb      	str	r3, [r7, #12]
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	68fa      	ldr	r2, [r7, #12]
 800b12a:	4313      	orrs	r3, r2
 800b12c:	60fb      	str	r3, [r7, #12]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	4a2f      	ldr	r2, [pc, #188]	; (800b1f0 <TIM_Base_SetConfig+0x114>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d02b      	beq.n	800b18e <TIM_Base_SetConfig+0xb2>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b13c:	d027      	beq.n	800b18e <TIM_Base_SetConfig+0xb2>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	4a2c      	ldr	r2, [pc, #176]	; (800b1f4 <TIM_Base_SetConfig+0x118>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d023      	beq.n	800b18e <TIM_Base_SetConfig+0xb2>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	4a2b      	ldr	r2, [pc, #172]	; (800b1f8 <TIM_Base_SetConfig+0x11c>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d01f      	beq.n	800b18e <TIM_Base_SetConfig+0xb2>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	4a2a      	ldr	r2, [pc, #168]	; (800b1fc <TIM_Base_SetConfig+0x120>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d01b      	beq.n	800b18e <TIM_Base_SetConfig+0xb2>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4a29      	ldr	r2, [pc, #164]	; (800b200 <TIM_Base_SetConfig+0x124>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d017      	beq.n	800b18e <TIM_Base_SetConfig+0xb2>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	4a28      	ldr	r2, [pc, #160]	; (800b204 <TIM_Base_SetConfig+0x128>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d013      	beq.n	800b18e <TIM_Base_SetConfig+0xb2>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4a27      	ldr	r2, [pc, #156]	; (800b208 <TIM_Base_SetConfig+0x12c>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d00f      	beq.n	800b18e <TIM_Base_SetConfig+0xb2>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	4a26      	ldr	r2, [pc, #152]	; (800b20c <TIM_Base_SetConfig+0x130>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d00b      	beq.n	800b18e <TIM_Base_SetConfig+0xb2>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	4a25      	ldr	r2, [pc, #148]	; (800b210 <TIM_Base_SetConfig+0x134>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d007      	beq.n	800b18e <TIM_Base_SetConfig+0xb2>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4a24      	ldr	r2, [pc, #144]	; (800b214 <TIM_Base_SetConfig+0x138>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d003      	beq.n	800b18e <TIM_Base_SetConfig+0xb2>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4a23      	ldr	r2, [pc, #140]	; (800b218 <TIM_Base_SetConfig+0x13c>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d108      	bne.n	800b1a0 <TIM_Base_SetConfig+0xc4>
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b194:	60fb      	str	r3, [r7, #12]
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	68db      	ldr	r3, [r3, #12]
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	4313      	orrs	r3, r2
 800b19e:	60fb      	str	r3, [r7, #12]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	695b      	ldr	r3, [r3, #20]
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	60fb      	str	r3, [r7, #12]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	68fa      	ldr	r2, [r7, #12]
 800b1b2:	601a      	str	r2, [r3, #0]
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	689a      	ldr	r2, [r3, #8]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	62da      	str	r2, [r3, #44]	; 0x2c
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	681a      	ldr	r2, [r3, #0]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	629a      	str	r2, [r3, #40]	; 0x28
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4a0a      	ldr	r2, [pc, #40]	; (800b1f0 <TIM_Base_SetConfig+0x114>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d003      	beq.n	800b1d4 <TIM_Base_SetConfig+0xf8>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	4a0c      	ldr	r2, [pc, #48]	; (800b200 <TIM_Base_SetConfig+0x124>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d103      	bne.n	800b1dc <TIM_Base_SetConfig+0x100>
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	691a      	ldr	r2, [r3, #16]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	631a      	str	r2, [r3, #48]	; 0x30
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	615a      	str	r2, [r3, #20]
 800b1e2:	bf00      	nop
 800b1e4:	3714      	adds	r7, #20
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr
 800b1ee:	bf00      	nop
 800b1f0:	40010000 	.word	0x40010000
 800b1f4:	40000400 	.word	0x40000400
 800b1f8:	40000800 	.word	0x40000800
 800b1fc:	40000c00 	.word	0x40000c00
 800b200:	40010400 	.word	0x40010400
 800b204:	40014000 	.word	0x40014000
 800b208:	40014400 	.word	0x40014400
 800b20c:	40014800 	.word	0x40014800
 800b210:	40001800 	.word	0x40001800
 800b214:	40001c00 	.word	0x40001c00
 800b218:	40002000 	.word	0x40002000

0800b21c <TIM_OC1_SetConfig>:
 800b21c:	b480      	push	{r7}
 800b21e:	b087      	sub	sp, #28
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6a1b      	ldr	r3, [r3, #32]
 800b22a:	f023 0201 	bic.w	r2, r3, #1
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	621a      	str	r2, [r3, #32]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6a1b      	ldr	r3, [r3, #32]
 800b236:	617b      	str	r3, [r7, #20]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	613b      	str	r3, [r7, #16]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	699b      	ldr	r3, [r3, #24]
 800b242:	60fb      	str	r3, [r7, #12]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b24a:	60fb      	str	r3, [r7, #12]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f023 0303 	bic.w	r3, r3, #3
 800b252:	60fb      	str	r3, [r7, #12]
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	4313      	orrs	r3, r2
 800b25c:	60fb      	str	r3, [r7, #12]
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	f023 0302 	bic.w	r3, r3, #2
 800b264:	617b      	str	r3, [r7, #20]
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	689b      	ldr	r3, [r3, #8]
 800b26a:	697a      	ldr	r2, [r7, #20]
 800b26c:	4313      	orrs	r3, r2
 800b26e:	617b      	str	r3, [r7, #20]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	4a20      	ldr	r2, [pc, #128]	; (800b2f4 <TIM_OC1_SetConfig+0xd8>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d003      	beq.n	800b280 <TIM_OC1_SetConfig+0x64>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4a1f      	ldr	r2, [pc, #124]	; (800b2f8 <TIM_OC1_SetConfig+0xdc>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d10c      	bne.n	800b29a <TIM_OC1_SetConfig+0x7e>
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	f023 0308 	bic.w	r3, r3, #8
 800b286:	617b      	str	r3, [r7, #20]
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	68db      	ldr	r3, [r3, #12]
 800b28c:	697a      	ldr	r2, [r7, #20]
 800b28e:	4313      	orrs	r3, r2
 800b290:	617b      	str	r3, [r7, #20]
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	f023 0304 	bic.w	r3, r3, #4
 800b298:	617b      	str	r3, [r7, #20]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	4a15      	ldr	r2, [pc, #84]	; (800b2f4 <TIM_OC1_SetConfig+0xd8>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d003      	beq.n	800b2aa <TIM_OC1_SetConfig+0x8e>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	4a14      	ldr	r2, [pc, #80]	; (800b2f8 <TIM_OC1_SetConfig+0xdc>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d111      	bne.n	800b2ce <TIM_OC1_SetConfig+0xb2>
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2b0:	613b      	str	r3, [r7, #16]
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b2b8:	613b      	str	r3, [r7, #16]
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	695b      	ldr	r3, [r3, #20]
 800b2be:	693a      	ldr	r2, [r7, #16]
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	613b      	str	r3, [r7, #16]
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	699b      	ldr	r3, [r3, #24]
 800b2c8:	693a      	ldr	r2, [r7, #16]
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	613b      	str	r3, [r7, #16]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	693a      	ldr	r2, [r7, #16]
 800b2d2:	605a      	str	r2, [r3, #4]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	68fa      	ldr	r2, [r7, #12]
 800b2d8:	619a      	str	r2, [r3, #24]
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	685a      	ldr	r2, [r3, #4]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	635a      	str	r2, [r3, #52]	; 0x34
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	697a      	ldr	r2, [r7, #20]
 800b2e6:	621a      	str	r2, [r3, #32]
 800b2e8:	bf00      	nop
 800b2ea:	371c      	adds	r7, #28
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr
 800b2f4:	40010000 	.word	0x40010000
 800b2f8:	40010400 	.word	0x40010400

0800b2fc <TIM_OC2_SetConfig>:
 800b2fc:	b480      	push	{r7}
 800b2fe:	b087      	sub	sp, #28
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6a1b      	ldr	r3, [r3, #32]
 800b30a:	f023 0210 	bic.w	r2, r3, #16
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	621a      	str	r2, [r3, #32]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6a1b      	ldr	r3, [r3, #32]
 800b316:	617b      	str	r3, [r7, #20]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	613b      	str	r3, [r7, #16]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	699b      	ldr	r3, [r3, #24]
 800b322:	60fb      	str	r3, [r7, #12]
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b32a:	60fb      	str	r3, [r7, #12]
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b332:	60fb      	str	r3, [r7, #12]
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	021b      	lsls	r3, r3, #8
 800b33a:	68fa      	ldr	r2, [r7, #12]
 800b33c:	4313      	orrs	r3, r2
 800b33e:	60fb      	str	r3, [r7, #12]
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	f023 0320 	bic.w	r3, r3, #32
 800b346:	617b      	str	r3, [r7, #20]
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	011b      	lsls	r3, r3, #4
 800b34e:	697a      	ldr	r2, [r7, #20]
 800b350:	4313      	orrs	r3, r2
 800b352:	617b      	str	r3, [r7, #20]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4a22      	ldr	r2, [pc, #136]	; (800b3e0 <TIM_OC2_SetConfig+0xe4>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d003      	beq.n	800b364 <TIM_OC2_SetConfig+0x68>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	4a21      	ldr	r2, [pc, #132]	; (800b3e4 <TIM_OC2_SetConfig+0xe8>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d10d      	bne.n	800b380 <TIM_OC2_SetConfig+0x84>
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b36a:	617b      	str	r3, [r7, #20]
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	011b      	lsls	r3, r3, #4
 800b372:	697a      	ldr	r2, [r7, #20]
 800b374:	4313      	orrs	r3, r2
 800b376:	617b      	str	r3, [r7, #20]
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b37e:	617b      	str	r3, [r7, #20]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	4a17      	ldr	r2, [pc, #92]	; (800b3e0 <TIM_OC2_SetConfig+0xe4>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d003      	beq.n	800b390 <TIM_OC2_SetConfig+0x94>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	4a16      	ldr	r2, [pc, #88]	; (800b3e4 <TIM_OC2_SetConfig+0xe8>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d113      	bne.n	800b3b8 <TIM_OC2_SetConfig+0xbc>
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b396:	613b      	str	r3, [r7, #16]
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b39e:	613b      	str	r3, [r7, #16]
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	695b      	ldr	r3, [r3, #20]
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	693a      	ldr	r2, [r7, #16]
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	613b      	str	r3, [r7, #16]
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	699b      	ldr	r3, [r3, #24]
 800b3b0:	009b      	lsls	r3, r3, #2
 800b3b2:	693a      	ldr	r2, [r7, #16]
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	613b      	str	r3, [r7, #16]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	693a      	ldr	r2, [r7, #16]
 800b3bc:	605a      	str	r2, [r3, #4]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	68fa      	ldr	r2, [r7, #12]
 800b3c2:	619a      	str	r2, [r3, #24]
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	685a      	ldr	r2, [r3, #4]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	639a      	str	r2, [r3, #56]	; 0x38
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	697a      	ldr	r2, [r7, #20]
 800b3d0:	621a      	str	r2, [r3, #32]
 800b3d2:	bf00      	nop
 800b3d4:	371c      	adds	r7, #28
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr
 800b3de:	bf00      	nop
 800b3e0:	40010000 	.word	0x40010000
 800b3e4:	40010400 	.word	0x40010400

0800b3e8 <TIM_OC3_SetConfig>:
 800b3e8:	b480      	push	{r7}
 800b3ea:	b087      	sub	sp, #28
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6a1b      	ldr	r3, [r3, #32]
 800b3f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	621a      	str	r2, [r3, #32]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6a1b      	ldr	r3, [r3, #32]
 800b402:	617b      	str	r3, [r7, #20]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	613b      	str	r3, [r7, #16]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	69db      	ldr	r3, [r3, #28]
 800b40e:	60fb      	str	r3, [r7, #12]
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b416:	60fb      	str	r3, [r7, #12]
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f023 0303 	bic.w	r3, r3, #3
 800b41e:	60fb      	str	r3, [r7, #12]
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	4313      	orrs	r3, r2
 800b428:	60fb      	str	r3, [r7, #12]
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b430:	617b      	str	r3, [r7, #20]
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	021b      	lsls	r3, r3, #8
 800b438:	697a      	ldr	r2, [r7, #20]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	617b      	str	r3, [r7, #20]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	4a21      	ldr	r2, [pc, #132]	; (800b4c8 <TIM_OC3_SetConfig+0xe0>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d003      	beq.n	800b44e <TIM_OC3_SetConfig+0x66>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	4a20      	ldr	r2, [pc, #128]	; (800b4cc <TIM_OC3_SetConfig+0xe4>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d10d      	bne.n	800b46a <TIM_OC3_SetConfig+0x82>
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b454:	617b      	str	r3, [r7, #20]
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	68db      	ldr	r3, [r3, #12]
 800b45a:	021b      	lsls	r3, r3, #8
 800b45c:	697a      	ldr	r2, [r7, #20]
 800b45e:	4313      	orrs	r3, r2
 800b460:	617b      	str	r3, [r7, #20]
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b468:	617b      	str	r3, [r7, #20]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	4a16      	ldr	r2, [pc, #88]	; (800b4c8 <TIM_OC3_SetConfig+0xe0>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d003      	beq.n	800b47a <TIM_OC3_SetConfig+0x92>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	4a15      	ldr	r2, [pc, #84]	; (800b4cc <TIM_OC3_SetConfig+0xe4>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d113      	bne.n	800b4a2 <TIM_OC3_SetConfig+0xba>
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b480:	613b      	str	r3, [r7, #16]
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b488:	613b      	str	r3, [r7, #16]
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	695b      	ldr	r3, [r3, #20]
 800b48e:	011b      	lsls	r3, r3, #4
 800b490:	693a      	ldr	r2, [r7, #16]
 800b492:	4313      	orrs	r3, r2
 800b494:	613b      	str	r3, [r7, #16]
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	699b      	ldr	r3, [r3, #24]
 800b49a:	011b      	lsls	r3, r3, #4
 800b49c:	693a      	ldr	r2, [r7, #16]
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	613b      	str	r3, [r7, #16]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	693a      	ldr	r2, [r7, #16]
 800b4a6:	605a      	str	r2, [r3, #4]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	68fa      	ldr	r2, [r7, #12]
 800b4ac:	61da      	str	r2, [r3, #28]
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	685a      	ldr	r2, [r3, #4]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	63da      	str	r2, [r3, #60]	; 0x3c
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	697a      	ldr	r2, [r7, #20]
 800b4ba:	621a      	str	r2, [r3, #32]
 800b4bc:	bf00      	nop
 800b4be:	371c      	adds	r7, #28
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr
 800b4c8:	40010000 	.word	0x40010000
 800b4cc:	40010400 	.word	0x40010400

0800b4d0 <TIM_OC4_SetConfig>:
 800b4d0:	b480      	push	{r7}
 800b4d2:	b087      	sub	sp, #28
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6a1b      	ldr	r3, [r3, #32]
 800b4de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	621a      	str	r2, [r3, #32]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6a1b      	ldr	r3, [r3, #32]
 800b4ea:	613b      	str	r3, [r7, #16]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	617b      	str	r3, [r7, #20]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	69db      	ldr	r3, [r3, #28]
 800b4f6:	60fb      	str	r3, [r7, #12]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4fe:	60fb      	str	r3, [r7, #12]
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b506:	60fb      	str	r3, [r7, #12]
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	021b      	lsls	r3, r3, #8
 800b50e:	68fa      	ldr	r2, [r7, #12]
 800b510:	4313      	orrs	r3, r2
 800b512:	60fb      	str	r3, [r7, #12]
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b51a:	613b      	str	r3, [r7, #16]
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	689b      	ldr	r3, [r3, #8]
 800b520:	031b      	lsls	r3, r3, #12
 800b522:	693a      	ldr	r2, [r7, #16]
 800b524:	4313      	orrs	r3, r2
 800b526:	613b      	str	r3, [r7, #16]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	4a12      	ldr	r2, [pc, #72]	; (800b574 <TIM_OC4_SetConfig+0xa4>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d003      	beq.n	800b538 <TIM_OC4_SetConfig+0x68>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	4a11      	ldr	r2, [pc, #68]	; (800b578 <TIM_OC4_SetConfig+0xa8>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d109      	bne.n	800b54c <TIM_OC4_SetConfig+0x7c>
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b53e:	617b      	str	r3, [r7, #20]
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	695b      	ldr	r3, [r3, #20]
 800b544:	019b      	lsls	r3, r3, #6
 800b546:	697a      	ldr	r2, [r7, #20]
 800b548:	4313      	orrs	r3, r2
 800b54a:	617b      	str	r3, [r7, #20]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	697a      	ldr	r2, [r7, #20]
 800b550:	605a      	str	r2, [r3, #4]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	61da      	str	r2, [r3, #28]
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	685a      	ldr	r2, [r3, #4]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	641a      	str	r2, [r3, #64]	; 0x40
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	693a      	ldr	r2, [r7, #16]
 800b564:	621a      	str	r2, [r3, #32]
 800b566:	bf00      	nop
 800b568:	371c      	adds	r7, #28
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr
 800b572:	bf00      	nop
 800b574:	40010000 	.word	0x40010000
 800b578:	40010400 	.word	0x40010400

0800b57c <TIM_TI1_SetConfig>:
 800b57c:	b480      	push	{r7}
 800b57e:	b087      	sub	sp, #28
 800b580:	af00      	add	r7, sp, #0
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	607a      	str	r2, [r7, #4]
 800b588:	603b      	str	r3, [r7, #0]
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	6a1b      	ldr	r3, [r3, #32]
 800b58e:	f023 0201 	bic.w	r2, r3, #1
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	621a      	str	r2, [r3, #32]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	699b      	ldr	r3, [r3, #24]
 800b59a:	617b      	str	r3, [r7, #20]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	6a1b      	ldr	r3, [r3, #32]
 800b5a0:	613b      	str	r3, [r7, #16]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	4a28      	ldr	r2, [pc, #160]	; (800b648 <TIM_TI1_SetConfig+0xcc>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d01b      	beq.n	800b5e2 <TIM_TI1_SetConfig+0x66>
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5b0:	d017      	beq.n	800b5e2 <TIM_TI1_SetConfig+0x66>
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	4a25      	ldr	r2, [pc, #148]	; (800b64c <TIM_TI1_SetConfig+0xd0>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d013      	beq.n	800b5e2 <TIM_TI1_SetConfig+0x66>
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	4a24      	ldr	r2, [pc, #144]	; (800b650 <TIM_TI1_SetConfig+0xd4>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d00f      	beq.n	800b5e2 <TIM_TI1_SetConfig+0x66>
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	4a23      	ldr	r2, [pc, #140]	; (800b654 <TIM_TI1_SetConfig+0xd8>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d00b      	beq.n	800b5e2 <TIM_TI1_SetConfig+0x66>
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	4a22      	ldr	r2, [pc, #136]	; (800b658 <TIM_TI1_SetConfig+0xdc>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d007      	beq.n	800b5e2 <TIM_TI1_SetConfig+0x66>
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	4a21      	ldr	r2, [pc, #132]	; (800b65c <TIM_TI1_SetConfig+0xe0>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d003      	beq.n	800b5e2 <TIM_TI1_SetConfig+0x66>
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	4a20      	ldr	r2, [pc, #128]	; (800b660 <TIM_TI1_SetConfig+0xe4>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d101      	bne.n	800b5e6 <TIM_TI1_SetConfig+0x6a>
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e000      	b.n	800b5e8 <TIM_TI1_SetConfig+0x6c>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d008      	beq.n	800b5fe <TIM_TI1_SetConfig+0x82>
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	f023 0303 	bic.w	r3, r3, #3
 800b5f2:	617b      	str	r3, [r7, #20]
 800b5f4:	697a      	ldr	r2, [r7, #20]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	617b      	str	r3, [r7, #20]
 800b5fc:	e003      	b.n	800b606 <TIM_TI1_SetConfig+0x8a>
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	f043 0301 	orr.w	r3, r3, #1
 800b604:	617b      	str	r3, [r7, #20]
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b60c:	617b      	str	r3, [r7, #20]
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	011b      	lsls	r3, r3, #4
 800b612:	b2db      	uxtb	r3, r3
 800b614:	697a      	ldr	r2, [r7, #20]
 800b616:	4313      	orrs	r3, r2
 800b618:	617b      	str	r3, [r7, #20]
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	f023 030a 	bic.w	r3, r3, #10
 800b620:	613b      	str	r3, [r7, #16]
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	f003 030a 	and.w	r3, r3, #10
 800b628:	693a      	ldr	r2, [r7, #16]
 800b62a:	4313      	orrs	r3, r2
 800b62c:	613b      	str	r3, [r7, #16]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	697a      	ldr	r2, [r7, #20]
 800b632:	619a      	str	r2, [r3, #24]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	693a      	ldr	r2, [r7, #16]
 800b638:	621a      	str	r2, [r3, #32]
 800b63a:	bf00      	nop
 800b63c:	371c      	adds	r7, #28
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
 800b646:	bf00      	nop
 800b648:	40010000 	.word	0x40010000
 800b64c:	40000400 	.word	0x40000400
 800b650:	40000800 	.word	0x40000800
 800b654:	40000c00 	.word	0x40000c00
 800b658:	40010400 	.word	0x40010400
 800b65c:	40014000 	.word	0x40014000
 800b660:	40001800 	.word	0x40001800

0800b664 <TIM_TI1_ConfigInputStage>:
 800b664:	b480      	push	{r7}
 800b666:	b087      	sub	sp, #28
 800b668:	af00      	add	r7, sp, #0
 800b66a:	60f8      	str	r0, [r7, #12]
 800b66c:	60b9      	str	r1, [r7, #8]
 800b66e:	607a      	str	r2, [r7, #4]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	6a1b      	ldr	r3, [r3, #32]
 800b674:	617b      	str	r3, [r7, #20]
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	6a1b      	ldr	r3, [r3, #32]
 800b67a:	f023 0201 	bic.w	r2, r3, #1
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	621a      	str	r2, [r3, #32]
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	699b      	ldr	r3, [r3, #24]
 800b686:	613b      	str	r3, [r7, #16]
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b68e:	613b      	str	r3, [r7, #16]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	011b      	lsls	r3, r3, #4
 800b694:	693a      	ldr	r2, [r7, #16]
 800b696:	4313      	orrs	r3, r2
 800b698:	613b      	str	r3, [r7, #16]
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	f023 030a 	bic.w	r3, r3, #10
 800b6a0:	617b      	str	r3, [r7, #20]
 800b6a2:	697a      	ldr	r2, [r7, #20]
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	617b      	str	r3, [r7, #20]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	693a      	ldr	r2, [r7, #16]
 800b6ae:	619a      	str	r2, [r3, #24]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	697a      	ldr	r2, [r7, #20]
 800b6b4:	621a      	str	r2, [r3, #32]
 800b6b6:	bf00      	nop
 800b6b8:	371c      	adds	r7, #28
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr

0800b6c2 <TIM_TI2_SetConfig>:
 800b6c2:	b480      	push	{r7}
 800b6c4:	b087      	sub	sp, #28
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	60f8      	str	r0, [r7, #12]
 800b6ca:	60b9      	str	r1, [r7, #8]
 800b6cc:	607a      	str	r2, [r7, #4]
 800b6ce:	603b      	str	r3, [r7, #0]
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	6a1b      	ldr	r3, [r3, #32]
 800b6d4:	f023 0210 	bic.w	r2, r3, #16
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	621a      	str	r2, [r3, #32]
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	699b      	ldr	r3, [r3, #24]
 800b6e0:	617b      	str	r3, [r7, #20]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	6a1b      	ldr	r3, [r3, #32]
 800b6e6:	613b      	str	r3, [r7, #16]
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6ee:	617b      	str	r3, [r7, #20]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	021b      	lsls	r3, r3, #8
 800b6f4:	697a      	ldr	r2, [r7, #20]
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	617b      	str	r3, [r7, #20]
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b700:	617b      	str	r3, [r7, #20]
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	031b      	lsls	r3, r3, #12
 800b706:	b29b      	uxth	r3, r3
 800b708:	697a      	ldr	r2, [r7, #20]
 800b70a:	4313      	orrs	r3, r2
 800b70c:	617b      	str	r3, [r7, #20]
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b714:	613b      	str	r3, [r7, #16]
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	011b      	lsls	r3, r3, #4
 800b71a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b71e:	693a      	ldr	r2, [r7, #16]
 800b720:	4313      	orrs	r3, r2
 800b722:	613b      	str	r3, [r7, #16]
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	697a      	ldr	r2, [r7, #20]
 800b728:	619a      	str	r2, [r3, #24]
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	693a      	ldr	r2, [r7, #16]
 800b72e:	621a      	str	r2, [r3, #32]
 800b730:	bf00      	nop
 800b732:	371c      	adds	r7, #28
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <TIM_TI2_ConfigInputStage>:
 800b73c:	b480      	push	{r7}
 800b73e:	b087      	sub	sp, #28
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	607a      	str	r2, [r7, #4]
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6a1b      	ldr	r3, [r3, #32]
 800b74c:	f023 0210 	bic.w	r2, r3, #16
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	621a      	str	r2, [r3, #32]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	699b      	ldr	r3, [r3, #24]
 800b758:	617b      	str	r3, [r7, #20]
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	6a1b      	ldr	r3, [r3, #32]
 800b75e:	613b      	str	r3, [r7, #16]
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b766:	617b      	str	r3, [r7, #20]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	031b      	lsls	r3, r3, #12
 800b76c:	697a      	ldr	r2, [r7, #20]
 800b76e:	4313      	orrs	r3, r2
 800b770:	617b      	str	r3, [r7, #20]
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b778:	613b      	str	r3, [r7, #16]
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	011b      	lsls	r3, r3, #4
 800b77e:	693a      	ldr	r2, [r7, #16]
 800b780:	4313      	orrs	r3, r2
 800b782:	613b      	str	r3, [r7, #16]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	697a      	ldr	r2, [r7, #20]
 800b788:	619a      	str	r2, [r3, #24]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	693a      	ldr	r2, [r7, #16]
 800b78e:	621a      	str	r2, [r3, #32]
 800b790:	bf00      	nop
 800b792:	371c      	adds	r7, #28
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <TIM_TI3_SetConfig>:
 800b79c:	b480      	push	{r7}
 800b79e:	b087      	sub	sp, #28
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	607a      	str	r2, [r7, #4]
 800b7a8:	603b      	str	r3, [r7, #0]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	6a1b      	ldr	r3, [r3, #32]
 800b7ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	621a      	str	r2, [r3, #32]
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	69db      	ldr	r3, [r3, #28]
 800b7ba:	617b      	str	r3, [r7, #20]
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6a1b      	ldr	r3, [r3, #32]
 800b7c0:	613b      	str	r3, [r7, #16]
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	f023 0303 	bic.w	r3, r3, #3
 800b7c8:	617b      	str	r3, [r7, #20]
 800b7ca:	697a      	ldr	r2, [r7, #20]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	617b      	str	r3, [r7, #20]
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b7d8:	617b      	str	r3, [r7, #20]
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	011b      	lsls	r3, r3, #4
 800b7de:	b2db      	uxtb	r3, r3
 800b7e0:	697a      	ldr	r2, [r7, #20]
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	617b      	str	r3, [r7, #20]
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800b7ec:	613b      	str	r3, [r7, #16]
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	021b      	lsls	r3, r3, #8
 800b7f2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800b7f6:	693a      	ldr	r2, [r7, #16]
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	613b      	str	r3, [r7, #16]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	697a      	ldr	r2, [r7, #20]
 800b800:	61da      	str	r2, [r3, #28]
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	693a      	ldr	r2, [r7, #16]
 800b806:	621a      	str	r2, [r3, #32]
 800b808:	bf00      	nop
 800b80a:	371c      	adds	r7, #28
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr

0800b814 <TIM_TI4_SetConfig>:
 800b814:	b480      	push	{r7}
 800b816:	b087      	sub	sp, #28
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	607a      	str	r2, [r7, #4]
 800b820:	603b      	str	r3, [r7, #0]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	6a1b      	ldr	r3, [r3, #32]
 800b826:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	621a      	str	r2, [r3, #32]
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	69db      	ldr	r3, [r3, #28]
 800b832:	617b      	str	r3, [r7, #20]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6a1b      	ldr	r3, [r3, #32]
 800b838:	613b      	str	r3, [r7, #16]
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b840:	617b      	str	r3, [r7, #20]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	021b      	lsls	r3, r3, #8
 800b846:	697a      	ldr	r2, [r7, #20]
 800b848:	4313      	orrs	r3, r2
 800b84a:	617b      	str	r3, [r7, #20]
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b852:	617b      	str	r3, [r7, #20]
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	031b      	lsls	r3, r3, #12
 800b858:	b29b      	uxth	r3, r3
 800b85a:	697a      	ldr	r2, [r7, #20]
 800b85c:	4313      	orrs	r3, r2
 800b85e:	617b      	str	r3, [r7, #20]
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800b866:	613b      	str	r3, [r7, #16]
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	031b      	lsls	r3, r3, #12
 800b86c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800b870:	693a      	ldr	r2, [r7, #16]
 800b872:	4313      	orrs	r3, r2
 800b874:	613b      	str	r3, [r7, #16]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	697a      	ldr	r2, [r7, #20]
 800b87a:	61da      	str	r2, [r3, #28]
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	693a      	ldr	r2, [r7, #16]
 800b880:	621a      	str	r2, [r3, #32]
 800b882:	bf00      	nop
 800b884:	371c      	adds	r7, #28
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr

0800b88e <TIM_ITRx_SetConfig>:
 800b88e:	b480      	push	{r7}
 800b890:	b085      	sub	sp, #20
 800b892:	af00      	add	r7, sp, #0
 800b894:	6078      	str	r0, [r7, #4]
 800b896:	6039      	str	r1, [r7, #0]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	689b      	ldr	r3, [r3, #8]
 800b89c:	60fb      	str	r3, [r7, #12]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8a4:	60fb      	str	r3, [r7, #12]
 800b8a6:	683a      	ldr	r2, [r7, #0]
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	f043 0307 	orr.w	r3, r3, #7
 800b8b0:	60fb      	str	r3, [r7, #12]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	68fa      	ldr	r2, [r7, #12]
 800b8b6:	609a      	str	r2, [r3, #8]
 800b8b8:	bf00      	nop
 800b8ba:	3714      	adds	r7, #20
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr

0800b8c4 <TIM_ETR_SetConfig>:
 800b8c4:	b480      	push	{r7}
 800b8c6:	b087      	sub	sp, #28
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	60f8      	str	r0, [r7, #12]
 800b8cc:	60b9      	str	r1, [r7, #8]
 800b8ce:	607a      	str	r2, [r7, #4]
 800b8d0:	603b      	str	r3, [r7, #0]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	689b      	ldr	r3, [r3, #8]
 800b8d6:	617b      	str	r3, [r7, #20]
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b8de:	617b      	str	r3, [r7, #20]
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	021a      	lsls	r2, r3, #8
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	431a      	orrs	r2, r3
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	697a      	ldr	r2, [r7, #20]
 800b8ee:	4313      	orrs	r3, r2
 800b8f0:	617b      	str	r3, [r7, #20]
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	697a      	ldr	r2, [r7, #20]
 800b8f6:	609a      	str	r2, [r3, #8]
 800b8f8:	bf00      	nop
 800b8fa:	371c      	adds	r7, #28
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <TIM_CCxChannelCmd>:
 800b904:	b480      	push	{r7}
 800b906:	b087      	sub	sp, #28
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	607a      	str	r2, [r7, #4]
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	f003 031f 	and.w	r3, r3, #31
 800b916:	2201      	movs	r2, #1
 800b918:	fa02 f303 	lsl.w	r3, r2, r3
 800b91c:	617b      	str	r3, [r7, #20]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	6a1a      	ldr	r2, [r3, #32]
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	43db      	mvns	r3, r3
 800b926:	401a      	ands	r2, r3
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	621a      	str	r2, [r3, #32]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	6a1a      	ldr	r2, [r3, #32]
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	f003 031f 	and.w	r3, r3, #31
 800b936:	6879      	ldr	r1, [r7, #4]
 800b938:	fa01 f303 	lsl.w	r3, r1, r3
 800b93c:	431a      	orrs	r2, r3
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	621a      	str	r2, [r3, #32]
 800b942:	bf00      	nop
 800b944:	371c      	adds	r7, #28
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr
	...

0800b950 <HAL_TIMEx_MasterConfigSynchronization>:
 800b950:	b480      	push	{r7}
 800b952:	b085      	sub	sp, #20
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b960:	2b01      	cmp	r3, #1
 800b962:	d101      	bne.n	800b968 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b964:	2302      	movs	r3, #2
 800b966:	e05a      	b.n	800ba1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2201      	movs	r2, #1
 800b96c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2202      	movs	r2, #2
 800b974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	60fb      	str	r3, [r7, #12]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	689b      	ldr	r3, [r3, #8]
 800b986:	60bb      	str	r3, [r7, #8]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b98e:	60fb      	str	r3, [r7, #12]
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	68fa      	ldr	r2, [r7, #12]
 800b996:	4313      	orrs	r3, r2
 800b998:	60fb      	str	r3, [r7, #12]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	68fa      	ldr	r2, [r7, #12]
 800b9a0:	605a      	str	r2, [r3, #4]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4a21      	ldr	r2, [pc, #132]	; (800ba2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d022      	beq.n	800b9f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9b4:	d01d      	beq.n	800b9f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a1d      	ldr	r2, [pc, #116]	; (800ba30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d018      	beq.n	800b9f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a1b      	ldr	r2, [pc, #108]	; (800ba34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d013      	beq.n	800b9f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4a1a      	ldr	r2, [pc, #104]	; (800ba38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d00e      	beq.n	800b9f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a18      	ldr	r2, [pc, #96]	; (800ba3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d009      	beq.n	800b9f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	4a17      	ldr	r2, [pc, #92]	; (800ba40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d004      	beq.n	800b9f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a15      	ldr	r2, [pc, #84]	; (800ba44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d10c      	bne.n	800ba0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9f8:	60bb      	str	r3, [r7, #8]
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	68ba      	ldr	r2, [r7, #8]
 800ba00:	4313      	orrs	r3, r2
 800ba02:	60bb      	str	r3, [r7, #8]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	68ba      	ldr	r2, [r7, #8]
 800ba0a:	609a      	str	r2, [r3, #8]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2200      	movs	r2, #0
 800ba18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3714      	adds	r7, #20
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	40010000 	.word	0x40010000
 800ba30:	40000400 	.word	0x40000400
 800ba34:	40000800 	.word	0x40000800
 800ba38:	40000c00 	.word	0x40000c00
 800ba3c:	40010400 	.word	0x40010400
 800ba40:	40014000 	.word	0x40014000
 800ba44:	40001800 	.word	0x40001800

0800ba48 <HAL_TIMEx_ConfigBreakDeadTime>:
 800ba48:	b480      	push	{r7}
 800ba4a:	b085      	sub	sp, #20
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
 800ba52:	2300      	movs	r3, #0
 800ba54:	60fb      	str	r3, [r7, #12]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d101      	bne.n	800ba64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ba60:	2302      	movs	r3, #2
 800ba62:	e03d      	b.n	800bae0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2201      	movs	r2, #1
 800ba68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	68db      	ldr	r3, [r3, #12]
 800ba76:	4313      	orrs	r3, r2
 800ba78:	60fb      	str	r3, [r7, #12]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	689b      	ldr	r3, [r3, #8]
 800ba84:	4313      	orrs	r3, r2
 800ba86:	60fb      	str	r3, [r7, #12]
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	4313      	orrs	r3, r2
 800ba94:	60fb      	str	r3, [r7, #12]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4313      	orrs	r3, r2
 800baa2:	60fb      	str	r3, [r7, #12]
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	691b      	ldr	r3, [r3, #16]
 800baae:	4313      	orrs	r3, r2
 800bab0:	60fb      	str	r3, [r7, #12]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	695b      	ldr	r3, [r3, #20]
 800babc:	4313      	orrs	r3, r2
 800babe:	60fb      	str	r3, [r7, #12]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	69db      	ldr	r3, [r3, #28]
 800baca:	4313      	orrs	r3, r2
 800bacc:	60fb      	str	r3, [r7, #12]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	68fa      	ldr	r2, [r7, #12]
 800bad4:	645a      	str	r2, [r3, #68]	; 0x44
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bade:	2300      	movs	r3, #0
 800bae0:	4618      	mov	r0, r3
 800bae2:	3714      	adds	r7, #20
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <HAL_TIMEx_CommutCallback>:
 800baec:	b480      	push	{r7}
 800baee:	b083      	sub	sp, #12
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	bf00      	nop
 800baf6:	370c      	adds	r7, #12
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr

0800bb00 <HAL_TIMEx_BreakCallback>:
 800bb00:	b480      	push	{r7}
 800bb02:	b083      	sub	sp, #12
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	bf00      	nop
 800bb0a:	370c      	adds	r7, #12
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <HAL_UART_Init>:
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d101      	bne.n	800bb26 <HAL_UART_Init+0x12>
 800bb22:	2301      	movs	r3, #1
 800bb24:	e03f      	b.n	800bba6 <HAL_UART_Init+0x92>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d106      	bne.n	800bb40 <HAL_UART_Init+0x2c>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f7fa fd92 	bl	8006664 <HAL_UART_MspInit>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2224      	movs	r2, #36	; 0x24
 800bb44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	68da      	ldr	r2, [r3, #12]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bb56:	60da      	str	r2, [r3, #12]
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f000 fddf 	bl	800c71c <UART_SetConfig>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	691a      	ldr	r2, [r3, #16]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bb6c:	611a      	str	r2, [r3, #16]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	695a      	ldr	r2, [r3, #20]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bb7c:	615a      	str	r2, [r3, #20]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	68da      	ldr	r2, [r3, #12]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bb8c:	60da      	str	r2, [r3, #12]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2200      	movs	r2, #0
 800bb92:	641a      	str	r2, [r3, #64]	; 0x40
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2220      	movs	r2, #32
 800bb98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2220      	movs	r2, #32
 800bba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bba4:	2300      	movs	r3, #0
 800bba6:	4618      	mov	r0, r3
 800bba8:	3708      	adds	r7, #8
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}

0800bbae <HAL_UART_Transmit>:
 800bbae:	b580      	push	{r7, lr}
 800bbb0:	b08a      	sub	sp, #40	; 0x28
 800bbb2:	af02      	add	r7, sp, #8
 800bbb4:	60f8      	str	r0, [r7, #12]
 800bbb6:	60b9      	str	r1, [r7, #8]
 800bbb8:	603b      	str	r3, [r7, #0]
 800bbba:	4613      	mov	r3, r2
 800bbbc:	80fb      	strh	r3, [r7, #6]
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	617b      	str	r3, [r7, #20]
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbc8:	b2db      	uxtb	r3, r3
 800bbca:	2b20      	cmp	r3, #32
 800bbcc:	d17c      	bne.n	800bcc8 <HAL_UART_Transmit+0x11a>
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d002      	beq.n	800bbda <HAL_UART_Transmit+0x2c>
 800bbd4:	88fb      	ldrh	r3, [r7, #6]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d101      	bne.n	800bbde <HAL_UART_Transmit+0x30>
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e075      	b.n	800bcca <HAL_UART_Transmit+0x11c>
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d101      	bne.n	800bbec <HAL_UART_Transmit+0x3e>
 800bbe8:	2302      	movs	r3, #2
 800bbea:	e06e      	b.n	800bcca <HAL_UART_Transmit+0x11c>
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	641a      	str	r2, [r3, #64]	; 0x40
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2221      	movs	r2, #33	; 0x21
 800bbfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800bc02:	f7fa ff29 	bl	8006a58 <HAL_GetTick>
 800bc06:	6178      	str	r0, [r7, #20]
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	88fa      	ldrh	r2, [r7, #6]
 800bc0c:	849a      	strh	r2, [r3, #36]	; 0x24
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	88fa      	ldrh	r2, [r7, #6]
 800bc12:	84da      	strh	r2, [r3, #38]	; 0x26
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	689b      	ldr	r3, [r3, #8]
 800bc18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc1c:	d108      	bne.n	800bc30 <HAL_UART_Transmit+0x82>
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	691b      	ldr	r3, [r3, #16]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d104      	bne.n	800bc30 <HAL_UART_Transmit+0x82>
 800bc26:	2300      	movs	r3, #0
 800bc28:	61fb      	str	r3, [r7, #28]
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	61bb      	str	r3, [r7, #24]
 800bc2e:	e003      	b.n	800bc38 <HAL_UART_Transmit+0x8a>
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	61fb      	str	r3, [r7, #28]
 800bc34:	2300      	movs	r3, #0
 800bc36:	61bb      	str	r3, [r7, #24]
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bc40:	e02a      	b.n	800bc98 <HAL_UART_Transmit+0xea>
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	9300      	str	r3, [sp, #0]
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	2180      	movs	r1, #128	; 0x80
 800bc4c:	68f8      	ldr	r0, [r7, #12]
 800bc4e:	f000 fb1f 	bl	800c290 <UART_WaitOnFlagUntilTimeout>
 800bc52:	4603      	mov	r3, r0
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d001      	beq.n	800bc5c <HAL_UART_Transmit+0xae>
 800bc58:	2303      	movs	r3, #3
 800bc5a:	e036      	b.n	800bcca <HAL_UART_Transmit+0x11c>
 800bc5c:	69fb      	ldr	r3, [r7, #28]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d10b      	bne.n	800bc7a <HAL_UART_Transmit+0xcc>
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	881b      	ldrh	r3, [r3, #0]
 800bc66:	461a      	mov	r2, r3
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bc70:	605a      	str	r2, [r3, #4]
 800bc72:	69bb      	ldr	r3, [r7, #24]
 800bc74:	3302      	adds	r3, #2
 800bc76:	61bb      	str	r3, [r7, #24]
 800bc78:	e007      	b.n	800bc8a <HAL_UART_Transmit+0xdc>
 800bc7a:	69fb      	ldr	r3, [r7, #28]
 800bc7c:	781a      	ldrb	r2, [r3, #0]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	605a      	str	r2, [r3, #4]
 800bc84:	69fb      	ldr	r3, [r7, #28]
 800bc86:	3301      	adds	r3, #1
 800bc88:	61fb      	str	r3, [r7, #28]
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	3b01      	subs	r3, #1
 800bc92:	b29a      	uxth	r2, r3
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	84da      	strh	r2, [r3, #38]	; 0x26
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d1cf      	bne.n	800bc42 <HAL_UART_Transmit+0x94>
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	9300      	str	r3, [sp, #0]
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	2140      	movs	r1, #64	; 0x40
 800bcac:	68f8      	ldr	r0, [r7, #12]
 800bcae:	f000 faef 	bl	800c290 <UART_WaitOnFlagUntilTimeout>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d001      	beq.n	800bcbc <HAL_UART_Transmit+0x10e>
 800bcb8:	2303      	movs	r3, #3
 800bcba:	e006      	b.n	800bcca <HAL_UART_Transmit+0x11c>
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2220      	movs	r2, #32
 800bcc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	e000      	b.n	800bcca <HAL_UART_Transmit+0x11c>
 800bcc8:	2302      	movs	r3, #2
 800bcca:	4618      	mov	r0, r3
 800bccc:	3720      	adds	r7, #32
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <HAL_UART_Receive_IT>:
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b084      	sub	sp, #16
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	60f8      	str	r0, [r7, #12]
 800bcda:	60b9      	str	r1, [r7, #8]
 800bcdc:	4613      	mov	r3, r2
 800bcde:	80fb      	strh	r3, [r7, #6]
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	2b20      	cmp	r3, #32
 800bcea:	d11d      	bne.n	800bd28 <HAL_UART_Receive_IT+0x56>
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d002      	beq.n	800bcf8 <HAL_UART_Receive_IT+0x26>
 800bcf2:	88fb      	ldrh	r3, [r7, #6]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d101      	bne.n	800bcfc <HAL_UART_Receive_IT+0x2a>
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	e016      	b.n	800bd2a <HAL_UART_Receive_IT+0x58>
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	d101      	bne.n	800bd0a <HAL_UART_Receive_IT+0x38>
 800bd06:	2302      	movs	r3, #2
 800bd08:	e00f      	b.n	800bd2a <HAL_UART_Receive_IT+0x58>
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2200      	movs	r2, #0
 800bd16:	631a      	str	r2, [r3, #48]	; 0x30
 800bd18:	88fb      	ldrh	r3, [r7, #6]
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	68b9      	ldr	r1, [r7, #8]
 800bd1e:	68f8      	ldr	r0, [r7, #12]
 800bd20:	f000 fb24 	bl	800c36c <UART_Start_Receive_IT>
 800bd24:	4603      	mov	r3, r0
 800bd26:	e000      	b.n	800bd2a <HAL_UART_Receive_IT+0x58>
 800bd28:	2302      	movs	r3, #2
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
	...

0800bd34 <HAL_UART_IRQHandler>:
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b0ba      	sub	sp, #232	; 0xe8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	68db      	ldr	r3, [r3, #12]
 800bd4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	695b      	ldr	r3, [r3, #20]
 800bd56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bd60:	2300      	movs	r3, #0
 800bd62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bd66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd6a:	f003 030f 	and.w	r3, r3, #15
 800bd6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bd72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d10f      	bne.n	800bd9a <HAL_UART_IRQHandler+0x66>
 800bd7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd7e:	f003 0320 	and.w	r3, r3, #32
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d009      	beq.n	800bd9a <HAL_UART_IRQHandler+0x66>
 800bd86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd8a:	f003 0320 	and.w	r3, r3, #32
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d003      	beq.n	800bd9a <HAL_UART_IRQHandler+0x66>
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f000 fc07 	bl	800c5a6 <UART_Receive_IT>
 800bd98:	e256      	b.n	800c248 <HAL_UART_IRQHandler+0x514>
 800bd9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	f000 80de 	beq.w	800bf60 <HAL_UART_IRQHandler+0x22c>
 800bda4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bda8:	f003 0301 	and.w	r3, r3, #1
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d106      	bne.n	800bdbe <HAL_UART_IRQHandler+0x8a>
 800bdb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdb4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	f000 80d1 	beq.w	800bf60 <HAL_UART_IRQHandler+0x22c>
 800bdbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdc2:	f003 0301 	and.w	r3, r3, #1
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d00b      	beq.n	800bde2 <HAL_UART_IRQHandler+0xae>
 800bdca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d005      	beq.n	800bde2 <HAL_UART_IRQHandler+0xae>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdda:	f043 0201 	orr.w	r2, r3, #1
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	641a      	str	r2, [r3, #64]	; 0x40
 800bde2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bde6:	f003 0304 	and.w	r3, r3, #4
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00b      	beq.n	800be06 <HAL_UART_IRQHandler+0xd2>
 800bdee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bdf2:	f003 0301 	and.w	r3, r3, #1
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d005      	beq.n	800be06 <HAL_UART_IRQHandler+0xd2>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdfe:	f043 0202 	orr.w	r2, r3, #2
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	641a      	str	r2, [r3, #64]	; 0x40
 800be06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be0a:	f003 0302 	and.w	r3, r3, #2
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d00b      	beq.n	800be2a <HAL_UART_IRQHandler+0xf6>
 800be12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be16:	f003 0301 	and.w	r3, r3, #1
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d005      	beq.n	800be2a <HAL_UART_IRQHandler+0xf6>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be22:	f043 0204 	orr.w	r2, r3, #4
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	641a      	str	r2, [r3, #64]	; 0x40
 800be2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be2e:	f003 0308 	and.w	r3, r3, #8
 800be32:	2b00      	cmp	r3, #0
 800be34:	d011      	beq.n	800be5a <HAL_UART_IRQHandler+0x126>
 800be36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be3a:	f003 0320 	and.w	r3, r3, #32
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d105      	bne.n	800be4e <HAL_UART_IRQHandler+0x11a>
 800be42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be46:	f003 0301 	and.w	r3, r3, #1
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d005      	beq.n	800be5a <HAL_UART_IRQHandler+0x126>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be52:	f043 0208 	orr.w	r2, r3, #8
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	641a      	str	r2, [r3, #64]	; 0x40
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be5e:	2b00      	cmp	r3, #0
 800be60:	f000 81ed 	beq.w	800c23e <HAL_UART_IRQHandler+0x50a>
 800be64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be68:	f003 0320 	and.w	r3, r3, #32
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d008      	beq.n	800be82 <HAL_UART_IRQHandler+0x14e>
 800be70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be74:	f003 0320 	and.w	r3, r3, #32
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d002      	beq.n	800be82 <HAL_UART_IRQHandler+0x14e>
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 fb92 	bl	800c5a6 <UART_Receive_IT>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	695b      	ldr	r3, [r3, #20]
 800be88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be8c:	2b40      	cmp	r3, #64	; 0x40
 800be8e:	bf0c      	ite	eq
 800be90:	2301      	moveq	r3, #1
 800be92:	2300      	movne	r3, #0
 800be94:	b2db      	uxtb	r3, r3
 800be96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be9e:	f003 0308 	and.w	r3, r3, #8
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d103      	bne.n	800beae <HAL_UART_IRQHandler+0x17a>
 800bea6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d04f      	beq.n	800bf4e <HAL_UART_IRQHandler+0x21a>
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 fa9a 	bl	800c3e8 <UART_EndRxTransfer>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	695b      	ldr	r3, [r3, #20]
 800beba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bebe:	2b40      	cmp	r3, #64	; 0x40
 800bec0:	d141      	bne.n	800bf46 <HAL_UART_IRQHandler+0x212>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	3314      	adds	r3, #20
 800bec8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800becc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bed0:	e853 3f00 	ldrex	r3, [r3]
 800bed4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bed8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bedc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bee0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	3314      	adds	r3, #20
 800beea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800beee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bef2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bef6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800befa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800befe:	e841 2300 	strex	r3, r2, [r1]
 800bf02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bf06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d1d9      	bne.n	800bec2 <HAL_UART_IRQHandler+0x18e>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d013      	beq.n	800bf3e <HAL_UART_IRQHandler+0x20a>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf1a:	4a7d      	ldr	r2, [pc, #500]	; (800c110 <HAL_UART_IRQHandler+0x3dc>)
 800bf1c:	651a      	str	r2, [r3, #80]	; 0x50
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7fa ff49 	bl	8006dba <HAL_DMA_Abort_IT>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d016      	beq.n	800bf5c <HAL_UART_IRQHandler+0x228>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bf38:	4610      	mov	r0, r2
 800bf3a:	4798      	blx	r3
 800bf3c:	e00e      	b.n	800bf5c <HAL_UART_IRQHandler+0x228>
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 f990 	bl	800c264 <HAL_UART_ErrorCallback>
 800bf44:	e00a      	b.n	800bf5c <HAL_UART_IRQHandler+0x228>
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 f98c 	bl	800c264 <HAL_UART_ErrorCallback>
 800bf4c:	e006      	b.n	800bf5c <HAL_UART_IRQHandler+0x228>
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 f988 	bl	800c264 <HAL_UART_ErrorCallback>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2200      	movs	r2, #0
 800bf58:	641a      	str	r2, [r3, #64]	; 0x40
 800bf5a:	e170      	b.n	800c23e <HAL_UART_IRQHandler+0x50a>
 800bf5c:	bf00      	nop
 800bf5e:	e16e      	b.n	800c23e <HAL_UART_IRQHandler+0x50a>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	f040 814a 	bne.w	800c1fe <HAL_UART_IRQHandler+0x4ca>
 800bf6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf6e:	f003 0310 	and.w	r3, r3, #16
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	f000 8143 	beq.w	800c1fe <HAL_UART_IRQHandler+0x4ca>
 800bf78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf7c:	f003 0310 	and.w	r3, r3, #16
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f000 813c 	beq.w	800c1fe <HAL_UART_IRQHandler+0x4ca>
 800bf86:	2300      	movs	r3, #0
 800bf88:	60bb      	str	r3, [r7, #8]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	60bb      	str	r3, [r7, #8]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	60bb      	str	r3, [r7, #8]
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	695b      	ldr	r3, [r3, #20]
 800bfa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfa6:	2b40      	cmp	r3, #64	; 0x40
 800bfa8:	f040 80b4 	bne.w	800c114 <HAL_UART_IRQHandler+0x3e0>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800bfb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	f000 8140 	beq.w	800c242 <HAL_UART_IRQHandler+0x50e>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bfc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	f080 8139 	bcs.w	800c242 <HAL_UART_IRQHandler+0x50e>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bfd6:	85da      	strh	r2, [r3, #46]	; 0x2e
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfdc:	69db      	ldr	r3, [r3, #28]
 800bfde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfe2:	f000 8088 	beq.w	800c0f6 <HAL_UART_IRQHandler+0x3c2>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	330c      	adds	r3, #12
 800bfec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bff0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bff4:	e853 3f00 	ldrex	r3, [r3]
 800bff8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bffc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c004:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	330c      	adds	r3, #12
 800c00e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c012:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c016:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c01a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c01e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c022:	e841 2300 	strex	r3, r2, [r1]
 800c026:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c02a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d1d9      	bne.n	800bfe6 <HAL_UART_IRQHandler+0x2b2>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	3314      	adds	r3, #20
 800c038:	677b      	str	r3, [r7, #116]	; 0x74
 800c03a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c03c:	e853 3f00 	ldrex	r3, [r3]
 800c040:	673b      	str	r3, [r7, #112]	; 0x70
 800c042:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c044:	f023 0301 	bic.w	r3, r3, #1
 800c048:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	3314      	adds	r3, #20
 800c052:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c056:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c05a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c05c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c05e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c062:	e841 2300 	strex	r3, r2, [r1]
 800c066:	67bb      	str	r3, [r7, #120]	; 0x78
 800c068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d1e1      	bne.n	800c032 <HAL_UART_IRQHandler+0x2fe>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	3314      	adds	r3, #20
 800c074:	663b      	str	r3, [r7, #96]	; 0x60
 800c076:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c078:	e853 3f00 	ldrex	r3, [r3]
 800c07c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c07e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c084:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	3314      	adds	r3, #20
 800c08e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c092:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c094:	66bb      	str	r3, [r7, #104]	; 0x68
 800c096:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c098:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c09a:	e841 2300 	strex	r3, r2, [r1]
 800c09e:	667b      	str	r3, [r7, #100]	; 0x64
 800c0a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d1e3      	bne.n	800c06e <HAL_UART_IRQHandler+0x33a>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2220      	movs	r2, #32
 800c0aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	631a      	str	r2, [r3, #48]	; 0x30
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	330c      	adds	r3, #12
 800c0ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c0bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0be:	e853 3f00 	ldrex	r3, [r3]
 800c0c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0c6:	f023 0310 	bic.w	r3, r3, #16
 800c0ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	330c      	adds	r3, #12
 800c0d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c0d8:	65ba      	str	r2, [r7, #88]	; 0x58
 800c0da:	657b      	str	r3, [r7, #84]	; 0x54
 800c0dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c0de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c0e0:	e841 2300 	strex	r3, r2, [r1]
 800c0e4:	653b      	str	r3, [r7, #80]	; 0x50
 800c0e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d1e3      	bne.n	800c0b4 <HAL_UART_IRQHandler+0x380>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7fa fdf2 	bl	8006cda <HAL_DMA_Abort>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c0fe:	b29b      	uxth	r3, r3
 800c100:	1ad3      	subs	r3, r2, r3
 800c102:	b29b      	uxth	r3, r3
 800c104:	4619      	mov	r1, r3
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 f8b6 	bl	800c278 <HAL_UARTEx_RxEventCallback>
 800c10c:	e099      	b.n	800c242 <HAL_UART_IRQHandler+0x50e>
 800c10e:	bf00      	nop
 800c110:	0800c4af 	.word	0x0800c4af
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	1ad3      	subs	r3, r2, r3
 800c120:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c128:	b29b      	uxth	r3, r3
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	f000 808b 	beq.w	800c246 <HAL_UART_IRQHandler+0x512>
 800c130:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c134:	2b00      	cmp	r3, #0
 800c136:	f000 8086 	beq.w	800c246 <HAL_UART_IRQHandler+0x512>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	330c      	adds	r3, #12
 800c140:	63bb      	str	r3, [r7, #56]	; 0x38
 800c142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c144:	e853 3f00 	ldrex	r3, [r3]
 800c148:	637b      	str	r3, [r7, #52]	; 0x34
 800c14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c14c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c150:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	330c      	adds	r3, #12
 800c15a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c15e:	647a      	str	r2, [r7, #68]	; 0x44
 800c160:	643b      	str	r3, [r7, #64]	; 0x40
 800c162:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c164:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c166:	e841 2300 	strex	r3, r2, [r1]
 800c16a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c16c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d1e3      	bne.n	800c13a <HAL_UART_IRQHandler+0x406>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	3314      	adds	r3, #20
 800c178:	627b      	str	r3, [r7, #36]	; 0x24
 800c17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17c:	e853 3f00 	ldrex	r3, [r3]
 800c180:	623b      	str	r3, [r7, #32]
 800c182:	6a3b      	ldr	r3, [r7, #32]
 800c184:	f023 0301 	bic.w	r3, r3, #1
 800c188:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	3314      	adds	r3, #20
 800c192:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c196:	633a      	str	r2, [r7, #48]	; 0x30
 800c198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c19a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c19c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c19e:	e841 2300 	strex	r3, r2, [r1]
 800c1a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d1e3      	bne.n	800c172 <HAL_UART_IRQHandler+0x43e>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2220      	movs	r2, #32
 800c1ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	631a      	str	r2, [r3, #48]	; 0x30
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	330c      	adds	r3, #12
 800c1be:	613b      	str	r3, [r7, #16]
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	e853 3f00 	ldrex	r3, [r3]
 800c1c6:	60fb      	str	r3, [r7, #12]
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f023 0310 	bic.w	r3, r3, #16
 800c1ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	330c      	adds	r3, #12
 800c1d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c1dc:	61fa      	str	r2, [r7, #28]
 800c1de:	61bb      	str	r3, [r7, #24]
 800c1e0:	69b9      	ldr	r1, [r7, #24]
 800c1e2:	69fa      	ldr	r2, [r7, #28]
 800c1e4:	e841 2300 	strex	r3, r2, [r1]
 800c1e8:	617b      	str	r3, [r7, #20]
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d1e3      	bne.n	800c1b8 <HAL_UART_IRQHandler+0x484>
 800c1f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 f83e 	bl	800c278 <HAL_UARTEx_RxEventCallback>
 800c1fc:	e023      	b.n	800c246 <HAL_UART_IRQHandler+0x512>
 800c1fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c206:	2b00      	cmp	r3, #0
 800c208:	d009      	beq.n	800c21e <HAL_UART_IRQHandler+0x4ea>
 800c20a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c20e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c212:	2b00      	cmp	r3, #0
 800c214:	d003      	beq.n	800c21e <HAL_UART_IRQHandler+0x4ea>
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f000 f95d 	bl	800c4d6 <UART_Transmit_IT>
 800c21c:	e014      	b.n	800c248 <HAL_UART_IRQHandler+0x514>
 800c21e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c226:	2b00      	cmp	r3, #0
 800c228:	d00e      	beq.n	800c248 <HAL_UART_IRQHandler+0x514>
 800c22a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c22e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c232:	2b00      	cmp	r3, #0
 800c234:	d008      	beq.n	800c248 <HAL_UART_IRQHandler+0x514>
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 f99d 	bl	800c576 <UART_EndTransmit_IT>
 800c23c:	e004      	b.n	800c248 <HAL_UART_IRQHandler+0x514>
 800c23e:	bf00      	nop
 800c240:	e002      	b.n	800c248 <HAL_UART_IRQHandler+0x514>
 800c242:	bf00      	nop
 800c244:	e000      	b.n	800c248 <HAL_UART_IRQHandler+0x514>
 800c246:	bf00      	nop
 800c248:	37e8      	adds	r7, #232	; 0xe8
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop

0800c250 <HAL_UART_TxCpltCallback>:
 800c250:	b480      	push	{r7}
 800c252:	b083      	sub	sp, #12
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	bf00      	nop
 800c25a:	370c      	adds	r7, #12
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr

0800c264 <HAL_UART_ErrorCallback>:
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	bf00      	nop
 800c26e:	370c      	adds	r7, #12
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr

0800c278 <HAL_UARTEx_RxEventCallback>:
 800c278:	b480      	push	{r7}
 800c27a:	b083      	sub	sp, #12
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	460b      	mov	r3, r1
 800c282:	807b      	strh	r3, [r7, #2]
 800c284:	bf00      	nop
 800c286:	370c      	adds	r7, #12
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <UART_WaitOnFlagUntilTimeout>:
 800c290:	b580      	push	{r7, lr}
 800c292:	b090      	sub	sp, #64	; 0x40
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	603b      	str	r3, [r7, #0]
 800c29c:	4613      	mov	r3, r2
 800c29e:	71fb      	strb	r3, [r7, #7]
 800c2a0:	e050      	b.n	800c344 <UART_WaitOnFlagUntilTimeout+0xb4>
 800c2a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2a8:	d04c      	beq.n	800c344 <UART_WaitOnFlagUntilTimeout+0xb4>
 800c2aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d007      	beq.n	800c2c0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c2b0:	f7fa fbd2 	bl	8006a58 <HAL_GetTick>
 800c2b4:	4602      	mov	r2, r0
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	1ad3      	subs	r3, r2, r3
 800c2ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d241      	bcs.n	800c344 <UART_WaitOnFlagUntilTimeout+0xb4>
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	330c      	adds	r3, #12
 800c2c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ca:	e853 3f00 	ldrex	r3, [r3]
 800c2ce:	627b      	str	r3, [r7, #36]	; 0x24
 800c2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	330c      	adds	r3, #12
 800c2de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c2e0:	637a      	str	r2, [r7, #52]	; 0x34
 800c2e2:	633b      	str	r3, [r7, #48]	; 0x30
 800c2e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c2e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2e8:	e841 2300 	strex	r3, r2, [r1]
 800c2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d1e5      	bne.n	800c2c0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	3314      	adds	r3, #20
 800c2fa:	617b      	str	r3, [r7, #20]
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	e853 3f00 	ldrex	r3, [r3]
 800c302:	613b      	str	r3, [r7, #16]
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	f023 0301 	bic.w	r3, r3, #1
 800c30a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	3314      	adds	r3, #20
 800c312:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c314:	623a      	str	r2, [r7, #32]
 800c316:	61fb      	str	r3, [r7, #28]
 800c318:	69f9      	ldr	r1, [r7, #28]
 800c31a:	6a3a      	ldr	r2, [r7, #32]
 800c31c:	e841 2300 	strex	r3, r2, [r1]
 800c320:	61bb      	str	r3, [r7, #24]
 800c322:	69bb      	ldr	r3, [r7, #24]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d1e5      	bne.n	800c2f4 <UART_WaitOnFlagUntilTimeout+0x64>
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2220      	movs	r2, #32
 800c32c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2220      	movs	r2, #32
 800c334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2200      	movs	r2, #0
 800c33c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c340:	2303      	movs	r3, #3
 800c342:	e00f      	b.n	800c364 <UART_WaitOnFlagUntilTimeout+0xd4>
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	4013      	ands	r3, r2
 800c34e:	68ba      	ldr	r2, [r7, #8]
 800c350:	429a      	cmp	r2, r3
 800c352:	bf0c      	ite	eq
 800c354:	2301      	moveq	r3, #1
 800c356:	2300      	movne	r3, #0
 800c358:	b2db      	uxtb	r3, r3
 800c35a:	461a      	mov	r2, r3
 800c35c:	79fb      	ldrb	r3, [r7, #7]
 800c35e:	429a      	cmp	r2, r3
 800c360:	d09f      	beq.n	800c2a2 <UART_WaitOnFlagUntilTimeout+0x12>
 800c362:	2300      	movs	r3, #0
 800c364:	4618      	mov	r0, r3
 800c366:	3740      	adds	r7, #64	; 0x40
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <UART_Start_Receive_IT>:
 800c36c:	b480      	push	{r7}
 800c36e:	b085      	sub	sp, #20
 800c370:	af00      	add	r7, sp, #0
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	60b9      	str	r1, [r7, #8]
 800c376:	4613      	mov	r3, r2
 800c378:	80fb      	strh	r3, [r7, #6]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	68ba      	ldr	r2, [r7, #8]
 800c37e:	629a      	str	r2, [r3, #40]	; 0x28
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	88fa      	ldrh	r2, [r7, #6]
 800c384:	859a      	strh	r2, [r3, #44]	; 0x2c
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	88fa      	ldrh	r2, [r7, #6]
 800c38a:	85da      	strh	r2, [r3, #46]	; 0x2e
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2200      	movs	r2, #0
 800c390:	641a      	str	r2, [r3, #64]	; 0x40
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	2222      	movs	r2, #34	; 0x22
 800c396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	2200      	movs	r2, #0
 800c39e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	691b      	ldr	r3, [r3, #16]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d007      	beq.n	800c3ba <UART_Start_Receive_IT+0x4e>
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	68da      	ldr	r2, [r3, #12]
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c3b8:	60da      	str	r2, [r3, #12]
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	695a      	ldr	r2, [r3, #20]
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f042 0201 	orr.w	r2, r2, #1
 800c3c8:	615a      	str	r2, [r3, #20]
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	68da      	ldr	r2, [r3, #12]
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f042 0220 	orr.w	r2, r2, #32
 800c3d8:	60da      	str	r2, [r3, #12]
 800c3da:	2300      	movs	r3, #0
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3714      	adds	r7, #20
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e6:	4770      	bx	lr

0800c3e8 <UART_EndRxTransfer>:
 800c3e8:	b480      	push	{r7}
 800c3ea:	b095      	sub	sp, #84	; 0x54
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	330c      	adds	r3, #12
 800c3f6:	637b      	str	r3, [r7, #52]	; 0x34
 800c3f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3fa:	e853 3f00 	ldrex	r3, [r3]
 800c3fe:	633b      	str	r3, [r7, #48]	; 0x30
 800c400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c402:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c406:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	330c      	adds	r3, #12
 800c40e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c410:	643a      	str	r2, [r7, #64]	; 0x40
 800c412:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c414:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c416:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c418:	e841 2300 	strex	r3, r2, [r1]
 800c41c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c420:	2b00      	cmp	r3, #0
 800c422:	d1e5      	bne.n	800c3f0 <UART_EndRxTransfer+0x8>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	3314      	adds	r3, #20
 800c42a:	623b      	str	r3, [r7, #32]
 800c42c:	6a3b      	ldr	r3, [r7, #32]
 800c42e:	e853 3f00 	ldrex	r3, [r3]
 800c432:	61fb      	str	r3, [r7, #28]
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	f023 0301 	bic.w	r3, r3, #1
 800c43a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	3314      	adds	r3, #20
 800c442:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c444:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c446:	62bb      	str	r3, [r7, #40]	; 0x28
 800c448:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c44a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c44c:	e841 2300 	strex	r3, r2, [r1]
 800c450:	627b      	str	r3, [r7, #36]	; 0x24
 800c452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c454:	2b00      	cmp	r3, #0
 800c456:	d1e5      	bne.n	800c424 <UART_EndRxTransfer+0x3c>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	d119      	bne.n	800c494 <UART_EndRxTransfer+0xac>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	330c      	adds	r3, #12
 800c466:	60fb      	str	r3, [r7, #12]
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	e853 3f00 	ldrex	r3, [r3]
 800c46e:	60bb      	str	r3, [r7, #8]
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	f023 0310 	bic.w	r3, r3, #16
 800c476:	647b      	str	r3, [r7, #68]	; 0x44
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	330c      	adds	r3, #12
 800c47e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c480:	61ba      	str	r2, [r7, #24]
 800c482:	617b      	str	r3, [r7, #20]
 800c484:	6979      	ldr	r1, [r7, #20]
 800c486:	69ba      	ldr	r2, [r7, #24]
 800c488:	e841 2300 	strex	r3, r2, [r1]
 800c48c:	613b      	str	r3, [r7, #16]
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d1e5      	bne.n	800c460 <UART_EndRxTransfer+0x78>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2220      	movs	r2, #32
 800c498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	631a      	str	r2, [r3, #48]	; 0x30
 800c4a2:	bf00      	nop
 800c4a4:	3754      	adds	r7, #84	; 0x54
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr

0800c4ae <UART_DMAAbortOnError>:
 800c4ae:	b580      	push	{r7, lr}
 800c4b0:	b084      	sub	sp, #16
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ba:	60fb      	str	r3, [r7, #12]
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	85da      	strh	r2, [r3, #46]	; 0x2e
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	84da      	strh	r2, [r3, #38]	; 0x26
 800c4c8:	68f8      	ldr	r0, [r7, #12]
 800c4ca:	f7ff fecb 	bl	800c264 <HAL_UART_ErrorCallback>
 800c4ce:	bf00      	nop
 800c4d0:	3710      	adds	r7, #16
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <UART_Transmit_IT>:
 800c4d6:	b480      	push	{r7}
 800c4d8:	b085      	sub	sp, #20
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	6078      	str	r0, [r7, #4]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	2b21      	cmp	r3, #33	; 0x21
 800c4e8:	d13e      	bne.n	800c568 <UART_Transmit_IT+0x92>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	689b      	ldr	r3, [r3, #8]
 800c4ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4f2:	d114      	bne.n	800c51e <UART_Transmit_IT+0x48>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	691b      	ldr	r3, [r3, #16]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d110      	bne.n	800c51e <UART_Transmit_IT+0x48>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6a1b      	ldr	r3, [r3, #32]
 800c500:	60fb      	str	r3, [r7, #12]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	881b      	ldrh	r3, [r3, #0]
 800c506:	461a      	mov	r2, r3
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c510:	605a      	str	r2, [r3, #4]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6a1b      	ldr	r3, [r3, #32]
 800c516:	1c9a      	adds	r2, r3, #2
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	621a      	str	r2, [r3, #32]
 800c51c:	e008      	b.n	800c530 <UART_Transmit_IT+0x5a>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6a1b      	ldr	r3, [r3, #32]
 800c522:	1c59      	adds	r1, r3, #1
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	6211      	str	r1, [r2, #32]
 800c528:	781a      	ldrb	r2, [r3, #0]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	605a      	str	r2, [r3, #4]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c534:	b29b      	uxth	r3, r3
 800c536:	3b01      	subs	r3, #1
 800c538:	b29b      	uxth	r3, r3
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	4619      	mov	r1, r3
 800c53e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c540:	2b00      	cmp	r3, #0
 800c542:	d10f      	bne.n	800c564 <UART_Transmit_IT+0x8e>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	68da      	ldr	r2, [r3, #12]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c552:	60da      	str	r2, [r3, #12]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	68da      	ldr	r2, [r3, #12]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c562:	60da      	str	r2, [r3, #12]
 800c564:	2300      	movs	r3, #0
 800c566:	e000      	b.n	800c56a <UART_Transmit_IT+0x94>
 800c568:	2302      	movs	r3, #2
 800c56a:	4618      	mov	r0, r3
 800c56c:	3714      	adds	r7, #20
 800c56e:	46bd      	mov	sp, r7
 800c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c574:	4770      	bx	lr

0800c576 <UART_EndTransmit_IT>:
 800c576:	b580      	push	{r7, lr}
 800c578:	b082      	sub	sp, #8
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	6078      	str	r0, [r7, #4]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	68da      	ldr	r2, [r3, #12]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c58c:	60da      	str	r2, [r3, #12]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2220      	movs	r2, #32
 800c592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f7ff fe5a 	bl	800c250 <HAL_UART_TxCpltCallback>
 800c59c:	2300      	movs	r3, #0
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3708      	adds	r7, #8
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}

0800c5a6 <UART_Receive_IT>:
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b08c      	sub	sp, #48	; 0x30
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	2b22      	cmp	r3, #34	; 0x22
 800c5b8:	f040 80ab 	bne.w	800c712 <UART_Receive_IT+0x16c>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	689b      	ldr	r3, [r3, #8]
 800c5c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5c4:	d117      	bne.n	800c5f6 <UART_Receive_IT+0x50>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	691b      	ldr	r3, [r3, #16]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d113      	bne.n	800c5f6 <UART_Receive_IT+0x50>
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5e4:	b29a      	uxth	r2, r3
 800c5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e8:	801a      	strh	r2, [r3, #0]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ee:	1c9a      	adds	r2, r3, #2
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	629a      	str	r2, [r3, #40]	; 0x28
 800c5f4:	e026      	b.n	800c644 <UART_Receive_IT+0x9e>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	689b      	ldr	r3, [r3, #8]
 800c604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c608:	d007      	beq.n	800c61a <UART_Receive_IT+0x74>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	689b      	ldr	r3, [r3, #8]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d10a      	bne.n	800c628 <UART_Receive_IT+0x82>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	691b      	ldr	r3, [r3, #16]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d106      	bne.n	800c628 <UART_Receive_IT+0x82>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	b2da      	uxtb	r2, r3
 800c622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c624:	701a      	strb	r2, [r3, #0]
 800c626:	e008      	b.n	800c63a <UART_Receive_IT+0x94>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	b2db      	uxtb	r3, r3
 800c630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c634:	b2da      	uxtb	r2, r3
 800c636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c638:	701a      	strb	r2, [r3, #0]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c63e:	1c5a      	adds	r2, r3, #1
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	629a      	str	r2, [r3, #40]	; 0x28
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c648:	b29b      	uxth	r3, r3
 800c64a:	3b01      	subs	r3, #1
 800c64c:	b29b      	uxth	r3, r3
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	4619      	mov	r1, r3
 800c652:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c654:	2b00      	cmp	r3, #0
 800c656:	d15a      	bne.n	800c70e <UART_Receive_IT+0x168>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	68da      	ldr	r2, [r3, #12]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f022 0220 	bic.w	r2, r2, #32
 800c666:	60da      	str	r2, [r3, #12]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	68da      	ldr	r2, [r3, #12]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c676:	60da      	str	r2, [r3, #12]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	695a      	ldr	r2, [r3, #20]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f022 0201 	bic.w	r2, r2, #1
 800c686:	615a      	str	r2, [r3, #20]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2220      	movs	r2, #32
 800c68c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c694:	2b01      	cmp	r3, #1
 800c696:	d135      	bne.n	800c704 <UART_Receive_IT+0x15e>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2200      	movs	r2, #0
 800c69c:	631a      	str	r2, [r3, #48]	; 0x30
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	330c      	adds	r3, #12
 800c6a4:	617b      	str	r3, [r7, #20]
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	e853 3f00 	ldrex	r3, [r3]
 800c6ac:	613b      	str	r3, [r7, #16]
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	f023 0310 	bic.w	r3, r3, #16
 800c6b4:	627b      	str	r3, [r7, #36]	; 0x24
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	330c      	adds	r3, #12
 800c6bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6be:	623a      	str	r2, [r7, #32]
 800c6c0:	61fb      	str	r3, [r7, #28]
 800c6c2:	69f9      	ldr	r1, [r7, #28]
 800c6c4:	6a3a      	ldr	r2, [r7, #32]
 800c6c6:	e841 2300 	strex	r3, r2, [r1]
 800c6ca:	61bb      	str	r3, [r7, #24]
 800c6cc:	69bb      	ldr	r3, [r7, #24]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d1e5      	bne.n	800c69e <UART_Receive_IT+0xf8>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f003 0310 	and.w	r3, r3, #16
 800c6dc:	2b10      	cmp	r3, #16
 800c6de:	d10a      	bne.n	800c6f6 <UART_Receive_IT+0x150>
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	60fb      	str	r3, [r7, #12]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	60fb      	str	r3, [r7, #12]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	60fb      	str	r3, [r7, #12]
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f7ff fdbb 	bl	800c278 <HAL_UARTEx_RxEventCallback>
 800c702:	e002      	b.n	800c70a <UART_Receive_IT+0x164>
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f7f5 f851 	bl	80017ac <HAL_UART_RxCpltCallback>
 800c70a:	2300      	movs	r3, #0
 800c70c:	e002      	b.n	800c714 <UART_Receive_IT+0x16e>
 800c70e:	2300      	movs	r3, #0
 800c710:	e000      	b.n	800c714 <UART_Receive_IT+0x16e>
 800c712:	2302      	movs	r3, #2
 800c714:	4618      	mov	r0, r3
 800c716:	3730      	adds	r7, #48	; 0x30
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <UART_SetConfig>:
 800c71c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c720:	b0c0      	sub	sp, #256	; 0x100
 800c722:	af00      	add	r7, sp, #0
 800c724:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 800c728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	691b      	ldr	r3, [r3, #16]
 800c730:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c738:	68d9      	ldr	r1, [r3, #12]
 800c73a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c73e:	681a      	ldr	r2, [r3, #0]
 800c740:	ea40 0301 	orr.w	r3, r0, r1
 800c744:	6113      	str	r3, [r2, #16]
 800c746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c74a:	689a      	ldr	r2, [r3, #8]
 800c74c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c750:	691b      	ldr	r3, [r3, #16]
 800c752:	431a      	orrs	r2, r3
 800c754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c758:	695b      	ldr	r3, [r3, #20]
 800c75a:	431a      	orrs	r2, r3
 800c75c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c760:	69db      	ldr	r3, [r3, #28]
 800c762:	4313      	orrs	r3, r2
 800c764:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c774:	f021 010c 	bic.w	r1, r1, #12
 800c778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c782:	430b      	orrs	r3, r1
 800c784:	60d3      	str	r3, [r2, #12]
 800c786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	695b      	ldr	r3, [r3, #20]
 800c78e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c796:	6999      	ldr	r1, [r3, #24]
 800c798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c79c:	681a      	ldr	r2, [r3, #0]
 800c79e:	ea40 0301 	orr.w	r3, r0, r1
 800c7a2:	6153      	str	r3, [r2, #20]
 800c7a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	4b8f      	ldr	r3, [pc, #572]	; (800c9e8 <UART_SetConfig+0x2cc>)
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d005      	beq.n	800c7bc <UART_SetConfig+0xa0>
 800c7b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7b4:	681a      	ldr	r2, [r3, #0]
 800c7b6:	4b8d      	ldr	r3, [pc, #564]	; (800c9ec <UART_SetConfig+0x2d0>)
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d104      	bne.n	800c7c6 <UART_SetConfig+0xaa>
 800c7bc:	f7fd fcc4 	bl	800a148 <HAL_RCC_GetPCLK2Freq>
 800c7c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c7c4:	e003      	b.n	800c7ce <UART_SetConfig+0xb2>
 800c7c6:	f7fd fcab 	bl	800a120 <HAL_RCC_GetPCLK1Freq>
 800c7ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c7ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7d2:	69db      	ldr	r3, [r3, #28]
 800c7d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7d8:	f040 810c 	bne.w	800c9f4 <UART_SetConfig+0x2d8>
 800c7dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c7e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c7ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c7ee:	4622      	mov	r2, r4
 800c7f0:	462b      	mov	r3, r5
 800c7f2:	1891      	adds	r1, r2, r2
 800c7f4:	65b9      	str	r1, [r7, #88]	; 0x58
 800c7f6:	415b      	adcs	r3, r3
 800c7f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c7fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c7fe:	4621      	mov	r1, r4
 800c800:	eb12 0801 	adds.w	r8, r2, r1
 800c804:	4629      	mov	r1, r5
 800c806:	eb43 0901 	adc.w	r9, r3, r1
 800c80a:	f04f 0200 	mov.w	r2, #0
 800c80e:	f04f 0300 	mov.w	r3, #0
 800c812:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c816:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c81a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c81e:	4690      	mov	r8, r2
 800c820:	4699      	mov	r9, r3
 800c822:	4623      	mov	r3, r4
 800c824:	eb18 0303 	adds.w	r3, r8, r3
 800c828:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c82c:	462b      	mov	r3, r5
 800c82e:	eb49 0303 	adc.w	r3, r9, r3
 800c832:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	2200      	movs	r2, #0
 800c83e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c842:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c846:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c84a:	460b      	mov	r3, r1
 800c84c:	18db      	adds	r3, r3, r3
 800c84e:	653b      	str	r3, [r7, #80]	; 0x50
 800c850:	4613      	mov	r3, r2
 800c852:	eb42 0303 	adc.w	r3, r2, r3
 800c856:	657b      	str	r3, [r7, #84]	; 0x54
 800c858:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c85c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c860:	f7f4 fa12 	bl	8000c88 <__aeabi_uldivmod>
 800c864:	4602      	mov	r2, r0
 800c866:	460b      	mov	r3, r1
 800c868:	4b61      	ldr	r3, [pc, #388]	; (800c9f0 <UART_SetConfig+0x2d4>)
 800c86a:	fba3 2302 	umull	r2, r3, r3, r2
 800c86e:	095b      	lsrs	r3, r3, #5
 800c870:	011c      	lsls	r4, r3, #4
 800c872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c876:	2200      	movs	r2, #0
 800c878:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c87c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c880:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c884:	4642      	mov	r2, r8
 800c886:	464b      	mov	r3, r9
 800c888:	1891      	adds	r1, r2, r2
 800c88a:	64b9      	str	r1, [r7, #72]	; 0x48
 800c88c:	415b      	adcs	r3, r3
 800c88e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c890:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c894:	4641      	mov	r1, r8
 800c896:	eb12 0a01 	adds.w	sl, r2, r1
 800c89a:	4649      	mov	r1, r9
 800c89c:	eb43 0b01 	adc.w	fp, r3, r1
 800c8a0:	f04f 0200 	mov.w	r2, #0
 800c8a4:	f04f 0300 	mov.w	r3, #0
 800c8a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c8ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c8b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c8b4:	4692      	mov	sl, r2
 800c8b6:	469b      	mov	fp, r3
 800c8b8:	4643      	mov	r3, r8
 800c8ba:	eb1a 0303 	adds.w	r3, sl, r3
 800c8be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c8c2:	464b      	mov	r3, r9
 800c8c4:	eb4b 0303 	adc.w	r3, fp, r3
 800c8c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c8cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c8d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c8dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c8e0:	460b      	mov	r3, r1
 800c8e2:	18db      	adds	r3, r3, r3
 800c8e4:	643b      	str	r3, [r7, #64]	; 0x40
 800c8e6:	4613      	mov	r3, r2
 800c8e8:	eb42 0303 	adc.w	r3, r2, r3
 800c8ec:	647b      	str	r3, [r7, #68]	; 0x44
 800c8ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c8f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c8f6:	f7f4 f9c7 	bl	8000c88 <__aeabi_uldivmod>
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	4611      	mov	r1, r2
 800c900:	4b3b      	ldr	r3, [pc, #236]	; (800c9f0 <UART_SetConfig+0x2d4>)
 800c902:	fba3 2301 	umull	r2, r3, r3, r1
 800c906:	095b      	lsrs	r3, r3, #5
 800c908:	2264      	movs	r2, #100	; 0x64
 800c90a:	fb02 f303 	mul.w	r3, r2, r3
 800c90e:	1acb      	subs	r3, r1, r3
 800c910:	00db      	lsls	r3, r3, #3
 800c912:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c916:	4b36      	ldr	r3, [pc, #216]	; (800c9f0 <UART_SetConfig+0x2d4>)
 800c918:	fba3 2302 	umull	r2, r3, r3, r2
 800c91c:	095b      	lsrs	r3, r3, #5
 800c91e:	005b      	lsls	r3, r3, #1
 800c920:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c924:	441c      	add	r4, r3
 800c926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c92a:	2200      	movs	r2, #0
 800c92c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c930:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c934:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c938:	4642      	mov	r2, r8
 800c93a:	464b      	mov	r3, r9
 800c93c:	1891      	adds	r1, r2, r2
 800c93e:	63b9      	str	r1, [r7, #56]	; 0x38
 800c940:	415b      	adcs	r3, r3
 800c942:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c944:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c948:	4641      	mov	r1, r8
 800c94a:	1851      	adds	r1, r2, r1
 800c94c:	6339      	str	r1, [r7, #48]	; 0x30
 800c94e:	4649      	mov	r1, r9
 800c950:	414b      	adcs	r3, r1
 800c952:	637b      	str	r3, [r7, #52]	; 0x34
 800c954:	f04f 0200 	mov.w	r2, #0
 800c958:	f04f 0300 	mov.w	r3, #0
 800c95c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c960:	4659      	mov	r1, fp
 800c962:	00cb      	lsls	r3, r1, #3
 800c964:	4651      	mov	r1, sl
 800c966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c96a:	4651      	mov	r1, sl
 800c96c:	00ca      	lsls	r2, r1, #3
 800c96e:	4610      	mov	r0, r2
 800c970:	4619      	mov	r1, r3
 800c972:	4603      	mov	r3, r0
 800c974:	4642      	mov	r2, r8
 800c976:	189b      	adds	r3, r3, r2
 800c978:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c97c:	464b      	mov	r3, r9
 800c97e:	460a      	mov	r2, r1
 800c980:	eb42 0303 	adc.w	r3, r2, r3
 800c984:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	2200      	movs	r2, #0
 800c990:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c994:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c998:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c99c:	460b      	mov	r3, r1
 800c99e:	18db      	adds	r3, r3, r3
 800c9a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9a2:	4613      	mov	r3, r2
 800c9a4:	eb42 0303 	adc.w	r3, r2, r3
 800c9a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c9ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c9b2:	f7f4 f969 	bl	8000c88 <__aeabi_uldivmod>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	4b0d      	ldr	r3, [pc, #52]	; (800c9f0 <UART_SetConfig+0x2d4>)
 800c9bc:	fba3 1302 	umull	r1, r3, r3, r2
 800c9c0:	095b      	lsrs	r3, r3, #5
 800c9c2:	2164      	movs	r1, #100	; 0x64
 800c9c4:	fb01 f303 	mul.w	r3, r1, r3
 800c9c8:	1ad3      	subs	r3, r2, r3
 800c9ca:	00db      	lsls	r3, r3, #3
 800c9cc:	3332      	adds	r3, #50	; 0x32
 800c9ce:	4a08      	ldr	r2, [pc, #32]	; (800c9f0 <UART_SetConfig+0x2d4>)
 800c9d0:	fba2 2303 	umull	r2, r3, r2, r3
 800c9d4:	095b      	lsrs	r3, r3, #5
 800c9d6:	f003 0207 	and.w	r2, r3, #7
 800c9da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4422      	add	r2, r4
 800c9e2:	609a      	str	r2, [r3, #8]
 800c9e4:	e105      	b.n	800cbf2 <UART_SetConfig+0x4d6>
 800c9e6:	bf00      	nop
 800c9e8:	40011000 	.word	0x40011000
 800c9ec:	40011400 	.word	0x40011400
 800c9f0:	51eb851f 	.word	0x51eb851f
 800c9f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c9fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ca02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ca06:	4642      	mov	r2, r8
 800ca08:	464b      	mov	r3, r9
 800ca0a:	1891      	adds	r1, r2, r2
 800ca0c:	6239      	str	r1, [r7, #32]
 800ca0e:	415b      	adcs	r3, r3
 800ca10:	627b      	str	r3, [r7, #36]	; 0x24
 800ca12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ca16:	4641      	mov	r1, r8
 800ca18:	1854      	adds	r4, r2, r1
 800ca1a:	4649      	mov	r1, r9
 800ca1c:	eb43 0501 	adc.w	r5, r3, r1
 800ca20:	f04f 0200 	mov.w	r2, #0
 800ca24:	f04f 0300 	mov.w	r3, #0
 800ca28:	00eb      	lsls	r3, r5, #3
 800ca2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ca2e:	00e2      	lsls	r2, r4, #3
 800ca30:	4614      	mov	r4, r2
 800ca32:	461d      	mov	r5, r3
 800ca34:	4643      	mov	r3, r8
 800ca36:	18e3      	adds	r3, r4, r3
 800ca38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ca3c:	464b      	mov	r3, r9
 800ca3e:	eb45 0303 	adc.w	r3, r5, r3
 800ca42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ca46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca4a:	685b      	ldr	r3, [r3, #4]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ca52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ca56:	f04f 0200 	mov.w	r2, #0
 800ca5a:	f04f 0300 	mov.w	r3, #0
 800ca5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ca62:	4629      	mov	r1, r5
 800ca64:	008b      	lsls	r3, r1, #2
 800ca66:	4621      	mov	r1, r4
 800ca68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ca6c:	4621      	mov	r1, r4
 800ca6e:	008a      	lsls	r2, r1, #2
 800ca70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ca74:	f7f4 f908 	bl	8000c88 <__aeabi_uldivmod>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	460b      	mov	r3, r1
 800ca7c:	4b60      	ldr	r3, [pc, #384]	; (800cc00 <UART_SetConfig+0x4e4>)
 800ca7e:	fba3 2302 	umull	r2, r3, r3, r2
 800ca82:	095b      	lsrs	r3, r3, #5
 800ca84:	011c      	lsls	r4, r3, #4
 800ca86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ca90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ca94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ca98:	4642      	mov	r2, r8
 800ca9a:	464b      	mov	r3, r9
 800ca9c:	1891      	adds	r1, r2, r2
 800ca9e:	61b9      	str	r1, [r7, #24]
 800caa0:	415b      	adcs	r3, r3
 800caa2:	61fb      	str	r3, [r7, #28]
 800caa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800caa8:	4641      	mov	r1, r8
 800caaa:	1851      	adds	r1, r2, r1
 800caac:	6139      	str	r1, [r7, #16]
 800caae:	4649      	mov	r1, r9
 800cab0:	414b      	adcs	r3, r1
 800cab2:	617b      	str	r3, [r7, #20]
 800cab4:	f04f 0200 	mov.w	r2, #0
 800cab8:	f04f 0300 	mov.w	r3, #0
 800cabc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cac0:	4659      	mov	r1, fp
 800cac2:	00cb      	lsls	r3, r1, #3
 800cac4:	4651      	mov	r1, sl
 800cac6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800caca:	4651      	mov	r1, sl
 800cacc:	00ca      	lsls	r2, r1, #3
 800cace:	4610      	mov	r0, r2
 800cad0:	4619      	mov	r1, r3
 800cad2:	4603      	mov	r3, r0
 800cad4:	4642      	mov	r2, r8
 800cad6:	189b      	adds	r3, r3, r2
 800cad8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cadc:	464b      	mov	r3, r9
 800cade:	460a      	mov	r2, r1
 800cae0:	eb42 0303 	adc.w	r3, r2, r3
 800cae4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	2200      	movs	r2, #0
 800caf0:	67bb      	str	r3, [r7, #120]	; 0x78
 800caf2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800caf4:	f04f 0200 	mov.w	r2, #0
 800caf8:	f04f 0300 	mov.w	r3, #0
 800cafc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cb00:	4649      	mov	r1, r9
 800cb02:	008b      	lsls	r3, r1, #2
 800cb04:	4641      	mov	r1, r8
 800cb06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cb0a:	4641      	mov	r1, r8
 800cb0c:	008a      	lsls	r2, r1, #2
 800cb0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cb12:	f7f4 f8b9 	bl	8000c88 <__aeabi_uldivmod>
 800cb16:	4602      	mov	r2, r0
 800cb18:	460b      	mov	r3, r1
 800cb1a:	4b39      	ldr	r3, [pc, #228]	; (800cc00 <UART_SetConfig+0x4e4>)
 800cb1c:	fba3 1302 	umull	r1, r3, r3, r2
 800cb20:	095b      	lsrs	r3, r3, #5
 800cb22:	2164      	movs	r1, #100	; 0x64
 800cb24:	fb01 f303 	mul.w	r3, r1, r3
 800cb28:	1ad3      	subs	r3, r2, r3
 800cb2a:	011b      	lsls	r3, r3, #4
 800cb2c:	3332      	adds	r3, #50	; 0x32
 800cb2e:	4a34      	ldr	r2, [pc, #208]	; (800cc00 <UART_SetConfig+0x4e4>)
 800cb30:	fba2 2303 	umull	r2, r3, r2, r3
 800cb34:	095b      	lsrs	r3, r3, #5
 800cb36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb3a:	441c      	add	r4, r3
 800cb3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb40:	2200      	movs	r2, #0
 800cb42:	673b      	str	r3, [r7, #112]	; 0x70
 800cb44:	677a      	str	r2, [r7, #116]	; 0x74
 800cb46:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cb4a:	4642      	mov	r2, r8
 800cb4c:	464b      	mov	r3, r9
 800cb4e:	1891      	adds	r1, r2, r2
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	415b      	adcs	r3, r3
 800cb54:	60fb      	str	r3, [r7, #12]
 800cb56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cb5a:	4641      	mov	r1, r8
 800cb5c:	1851      	adds	r1, r2, r1
 800cb5e:	6039      	str	r1, [r7, #0]
 800cb60:	4649      	mov	r1, r9
 800cb62:	414b      	adcs	r3, r1
 800cb64:	607b      	str	r3, [r7, #4]
 800cb66:	f04f 0200 	mov.w	r2, #0
 800cb6a:	f04f 0300 	mov.w	r3, #0
 800cb6e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cb72:	4659      	mov	r1, fp
 800cb74:	00cb      	lsls	r3, r1, #3
 800cb76:	4651      	mov	r1, sl
 800cb78:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cb7c:	4651      	mov	r1, sl
 800cb7e:	00ca      	lsls	r2, r1, #3
 800cb80:	4610      	mov	r0, r2
 800cb82:	4619      	mov	r1, r3
 800cb84:	4603      	mov	r3, r0
 800cb86:	4642      	mov	r2, r8
 800cb88:	189b      	adds	r3, r3, r2
 800cb8a:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb8c:	464b      	mov	r3, r9
 800cb8e:	460a      	mov	r2, r1
 800cb90:	eb42 0303 	adc.w	r3, r2, r3
 800cb94:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cb96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb9a:	685b      	ldr	r3, [r3, #4]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	663b      	str	r3, [r7, #96]	; 0x60
 800cba0:	667a      	str	r2, [r7, #100]	; 0x64
 800cba2:	f04f 0200 	mov.w	r2, #0
 800cba6:	f04f 0300 	mov.w	r3, #0
 800cbaa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800cbae:	4649      	mov	r1, r9
 800cbb0:	008b      	lsls	r3, r1, #2
 800cbb2:	4641      	mov	r1, r8
 800cbb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cbb8:	4641      	mov	r1, r8
 800cbba:	008a      	lsls	r2, r1, #2
 800cbbc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cbc0:	f7f4 f862 	bl	8000c88 <__aeabi_uldivmod>
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	4b0d      	ldr	r3, [pc, #52]	; (800cc00 <UART_SetConfig+0x4e4>)
 800cbca:	fba3 1302 	umull	r1, r3, r3, r2
 800cbce:	095b      	lsrs	r3, r3, #5
 800cbd0:	2164      	movs	r1, #100	; 0x64
 800cbd2:	fb01 f303 	mul.w	r3, r1, r3
 800cbd6:	1ad3      	subs	r3, r2, r3
 800cbd8:	011b      	lsls	r3, r3, #4
 800cbda:	3332      	adds	r3, #50	; 0x32
 800cbdc:	4a08      	ldr	r2, [pc, #32]	; (800cc00 <UART_SetConfig+0x4e4>)
 800cbde:	fba2 2303 	umull	r2, r3, r2, r3
 800cbe2:	095b      	lsrs	r3, r3, #5
 800cbe4:	f003 020f 	and.w	r2, r3, #15
 800cbe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4422      	add	r2, r4
 800cbf0:	609a      	str	r2, [r3, #8]
 800cbf2:	bf00      	nop
 800cbf4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cbfe:	bf00      	nop
 800cc00:	51eb851f 	.word	0x51eb851f

0800cc04 <__NVIC_SetPriority>:
 800cc04:	b480      	push	{r7}
 800cc06:	b083      	sub	sp, #12
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	6039      	str	r1, [r7, #0]
 800cc0e:	71fb      	strb	r3, [r7, #7]
 800cc10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	db0a      	blt.n	800cc2e <__NVIC_SetPriority+0x2a>
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	b2da      	uxtb	r2, r3
 800cc1c:	490c      	ldr	r1, [pc, #48]	; (800cc50 <__NVIC_SetPriority+0x4c>)
 800cc1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc22:	0112      	lsls	r2, r2, #4
 800cc24:	b2d2      	uxtb	r2, r2
 800cc26:	440b      	add	r3, r1
 800cc28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800cc2c:	e00a      	b.n	800cc44 <__NVIC_SetPriority+0x40>
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	b2da      	uxtb	r2, r3
 800cc32:	4908      	ldr	r1, [pc, #32]	; (800cc54 <__NVIC_SetPriority+0x50>)
 800cc34:	79fb      	ldrb	r3, [r7, #7]
 800cc36:	f003 030f 	and.w	r3, r3, #15
 800cc3a:	3b04      	subs	r3, #4
 800cc3c:	0112      	lsls	r2, r2, #4
 800cc3e:	b2d2      	uxtb	r2, r2
 800cc40:	440b      	add	r3, r1
 800cc42:	761a      	strb	r2, [r3, #24]
 800cc44:	bf00      	nop
 800cc46:	370c      	adds	r7, #12
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr
 800cc50:	e000e100 	.word	0xe000e100
 800cc54:	e000ed00 	.word	0xe000ed00

0800cc58 <SVC_Setup>:
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	2100      	movs	r1, #0
 800cc5e:	f06f 0004 	mvn.w	r0, #4
 800cc62:	f7ff ffcf 	bl	800cc04 <__NVIC_SetPriority>
 800cc66:	bf00      	nop
 800cc68:	bd80      	pop	{r7, pc}
	...

0800cc6c <osKernelInitialize>:
 800cc6c:	b480      	push	{r7}
 800cc6e:	b083      	sub	sp, #12
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	f3ef 8305 	mrs	r3, IPSR
 800cc76:	603b      	str	r3, [r7, #0]
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d003      	beq.n	800cc86 <osKernelInitialize+0x1a>
 800cc7e:	f06f 0305 	mvn.w	r3, #5
 800cc82:	607b      	str	r3, [r7, #4]
 800cc84:	e00c      	b.n	800cca0 <osKernelInitialize+0x34>
 800cc86:	4b0a      	ldr	r3, [pc, #40]	; (800ccb0 <osKernelInitialize+0x44>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d105      	bne.n	800cc9a <osKernelInitialize+0x2e>
 800cc8e:	4b08      	ldr	r3, [pc, #32]	; (800ccb0 <osKernelInitialize+0x44>)
 800cc90:	2201      	movs	r2, #1
 800cc92:	601a      	str	r2, [r3, #0]
 800cc94:	2300      	movs	r3, #0
 800cc96:	607b      	str	r3, [r7, #4]
 800cc98:	e002      	b.n	800cca0 <osKernelInitialize+0x34>
 800cc9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc9e:	607b      	str	r3, [r7, #4]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	4618      	mov	r0, r3
 800cca4:	370c      	adds	r7, #12
 800cca6:	46bd      	mov	sp, r7
 800cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccac:	4770      	bx	lr
 800ccae:	bf00      	nop
 800ccb0:	2000086c 	.word	0x2000086c

0800ccb4 <osKernelStart>:
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	f3ef 8305 	mrs	r3, IPSR
 800ccbe:	603b      	str	r3, [r7, #0]
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d003      	beq.n	800ccce <osKernelStart+0x1a>
 800ccc6:	f06f 0305 	mvn.w	r3, #5
 800ccca:	607b      	str	r3, [r7, #4]
 800cccc:	e010      	b.n	800ccf0 <osKernelStart+0x3c>
 800ccce:	4b0b      	ldr	r3, [pc, #44]	; (800ccfc <osKernelStart+0x48>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	2b01      	cmp	r3, #1
 800ccd4:	d109      	bne.n	800ccea <osKernelStart+0x36>
 800ccd6:	f7ff ffbf 	bl	800cc58 <SVC_Setup>
 800ccda:	4b08      	ldr	r3, [pc, #32]	; (800ccfc <osKernelStart+0x48>)
 800ccdc:	2202      	movs	r2, #2
 800ccde:	601a      	str	r2, [r3, #0]
 800cce0:	f001 f912 	bl	800df08 <vTaskStartScheduler>
 800cce4:	2300      	movs	r3, #0
 800cce6:	607b      	str	r3, [r7, #4]
 800cce8:	e002      	b.n	800ccf0 <osKernelStart+0x3c>
 800ccea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ccee:	607b      	str	r3, [r7, #4]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3708      	adds	r7, #8
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}
 800ccfa:	bf00      	nop
 800ccfc:	2000086c 	.word	0x2000086c

0800cd00 <osThreadNew>:
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b08e      	sub	sp, #56	; 0x38
 800cd04:	af04      	add	r7, sp, #16
 800cd06:	60f8      	str	r0, [r7, #12]
 800cd08:	60b9      	str	r1, [r7, #8]
 800cd0a:	607a      	str	r2, [r7, #4]
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	613b      	str	r3, [r7, #16]
 800cd10:	f3ef 8305 	mrs	r3, IPSR
 800cd14:	617b      	str	r3, [r7, #20]
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d17f      	bne.n	800ce1c <osThreadNew+0x11c>
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d07c      	beq.n	800ce1c <osThreadNew+0x11c>
 800cd22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd26:	623b      	str	r3, [r7, #32]
 800cd28:	2318      	movs	r3, #24
 800cd2a:	61fb      	str	r3, [r7, #28]
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	627b      	str	r3, [r7, #36]	; 0x24
 800cd30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd34:	61bb      	str	r3, [r7, #24]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d045      	beq.n	800cdc8 <osThreadNew+0xc8>
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d002      	beq.n	800cd4a <osThreadNew+0x4a>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	627b      	str	r3, [r7, #36]	; 0x24
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	699b      	ldr	r3, [r3, #24]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d002      	beq.n	800cd58 <osThreadNew+0x58>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	699b      	ldr	r3, [r3, #24]
 800cd56:	61fb      	str	r3, [r7, #28]
 800cd58:	69fb      	ldr	r3, [r7, #28]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d008      	beq.n	800cd70 <osThreadNew+0x70>
 800cd5e:	69fb      	ldr	r3, [r7, #28]
 800cd60:	2b38      	cmp	r3, #56	; 0x38
 800cd62:	d805      	bhi.n	800cd70 <osThreadNew+0x70>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	f003 0301 	and.w	r3, r3, #1
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d001      	beq.n	800cd74 <osThreadNew+0x74>
 800cd70:	2300      	movs	r3, #0
 800cd72:	e054      	b.n	800ce1e <osThreadNew+0x11e>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	695b      	ldr	r3, [r3, #20]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d003      	beq.n	800cd84 <osThreadNew+0x84>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	695b      	ldr	r3, [r3, #20]
 800cd80:	089b      	lsrs	r3, r3, #2
 800cd82:	623b      	str	r3, [r7, #32]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	689b      	ldr	r3, [r3, #8]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d00e      	beq.n	800cdaa <osThreadNew+0xaa>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	68db      	ldr	r3, [r3, #12]
 800cd90:	2b5b      	cmp	r3, #91	; 0x5b
 800cd92:	d90a      	bls.n	800cdaa <osThreadNew+0xaa>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	691b      	ldr	r3, [r3, #16]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d006      	beq.n	800cdaa <osThreadNew+0xaa>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	695b      	ldr	r3, [r3, #20]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d002      	beq.n	800cdaa <osThreadNew+0xaa>
 800cda4:	2301      	movs	r3, #1
 800cda6:	61bb      	str	r3, [r7, #24]
 800cda8:	e010      	b.n	800cdcc <osThreadNew+0xcc>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	689b      	ldr	r3, [r3, #8]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d10c      	bne.n	800cdcc <osThreadNew+0xcc>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d108      	bne.n	800cdcc <osThreadNew+0xcc>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	691b      	ldr	r3, [r3, #16]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d104      	bne.n	800cdcc <osThreadNew+0xcc>
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	61bb      	str	r3, [r7, #24]
 800cdc6:	e001      	b.n	800cdcc <osThreadNew+0xcc>
 800cdc8:	2300      	movs	r3, #0
 800cdca:	61bb      	str	r3, [r7, #24]
 800cdcc:	69bb      	ldr	r3, [r7, #24]
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	d110      	bne.n	800cdf4 <osThreadNew+0xf4>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	691b      	ldr	r3, [r3, #16]
 800cdd6:	687a      	ldr	r2, [r7, #4]
 800cdd8:	6892      	ldr	r2, [r2, #8]
 800cdda:	9202      	str	r2, [sp, #8]
 800cddc:	9301      	str	r3, [sp, #4]
 800cdde:	69fb      	ldr	r3, [r7, #28]
 800cde0:	9300      	str	r3, [sp, #0]
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	6a3a      	ldr	r2, [r7, #32]
 800cde6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cde8:	68f8      	ldr	r0, [r7, #12]
 800cdea:	f000 fe39 	bl	800da60 <xTaskCreateStatic>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	613b      	str	r3, [r7, #16]
 800cdf2:	e013      	b.n	800ce1c <osThreadNew+0x11c>
 800cdf4:	69bb      	ldr	r3, [r7, #24]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d110      	bne.n	800ce1c <osThreadNew+0x11c>
 800cdfa:	6a3b      	ldr	r3, [r7, #32]
 800cdfc:	b29a      	uxth	r2, r3
 800cdfe:	f107 0310 	add.w	r3, r7, #16
 800ce02:	9301      	str	r3, [sp, #4]
 800ce04:	69fb      	ldr	r3, [r7, #28]
 800ce06:	9300      	str	r3, [sp, #0]
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce0c:	68f8      	ldr	r0, [r7, #12]
 800ce0e:	f000 fe84 	bl	800db1a <xTaskCreate>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2b01      	cmp	r3, #1
 800ce16:	d001      	beq.n	800ce1c <osThreadNew+0x11c>
 800ce18:	2300      	movs	r3, #0
 800ce1a:	613b      	str	r3, [r7, #16]
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3728      	adds	r7, #40	; 0x28
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}

0800ce26 <osDelay>:
 800ce26:	b580      	push	{r7, lr}
 800ce28:	b084      	sub	sp, #16
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6078      	str	r0, [r7, #4]
 800ce2e:	f3ef 8305 	mrs	r3, IPSR
 800ce32:	60bb      	str	r3, [r7, #8]
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d003      	beq.n	800ce42 <osDelay+0x1c>
 800ce3a:	f06f 0305 	mvn.w	r3, #5
 800ce3e:	60fb      	str	r3, [r7, #12]
 800ce40:	e007      	b.n	800ce52 <osDelay+0x2c>
 800ce42:	2300      	movs	r3, #0
 800ce44:	60fb      	str	r3, [r7, #12]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d002      	beq.n	800ce52 <osDelay+0x2c>
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f001 f827 	bl	800dea0 <vTaskDelay>
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	4618      	mov	r0, r3
 800ce56:	3710      	adds	r7, #16
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}

0800ce5c <osDelayUntil>:
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b086      	sub	sp, #24
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	f3ef 8305 	mrs	r3, IPSR
 800ce68:	60fb      	str	r3, [r7, #12]
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d003      	beq.n	800ce78 <osDelayUntil+0x1c>
 800ce70:	f06f 0305 	mvn.w	r3, #5
 800ce74:	617b      	str	r3, [r7, #20]
 800ce76:	e019      	b.n	800ceac <osDelayUntil+0x50>
 800ce78:	2300      	movs	r3, #0
 800ce7a:	617b      	str	r3, [r7, #20]
 800ce7c:	f001 f956 	bl	800e12c <xTaskGetTickCount>
 800ce80:	4603      	mov	r3, r0
 800ce82:	60bb      	str	r3, [r7, #8]
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	687a      	ldr	r2, [r7, #4]
 800ce88:	1ad3      	subs	r3, r2, r3
 800ce8a:	613b      	str	r3, [r7, #16]
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d009      	beq.n	800cea6 <osDelayUntil+0x4a>
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	db06      	blt.n	800cea6 <osDelayUntil+0x4a>
 800ce98:	f107 0308 	add.w	r3, r7, #8
 800ce9c:	6939      	ldr	r1, [r7, #16]
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f000 ff80 	bl	800dda4 <vTaskDelayUntil>
 800cea4:	e002      	b.n	800ceac <osDelayUntil+0x50>
 800cea6:	f06f 0303 	mvn.w	r3, #3
 800ceaa:	617b      	str	r3, [r7, #20]
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3718      	adds	r7, #24
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
	...

0800ceb8 <vApplicationGetIdleTaskMemory>:
 800ceb8:	b480      	push	{r7}
 800ceba:	b085      	sub	sp, #20
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	60f8      	str	r0, [r7, #12]
 800cec0:	60b9      	str	r1, [r7, #8]
 800cec2:	607a      	str	r2, [r7, #4]
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	4a07      	ldr	r2, [pc, #28]	; (800cee4 <vApplicationGetIdleTaskMemory+0x2c>)
 800cec8:	601a      	str	r2, [r3, #0]
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	4a06      	ldr	r2, [pc, #24]	; (800cee8 <vApplicationGetIdleTaskMemory+0x30>)
 800cece:	601a      	str	r2, [r3, #0]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ced6:	601a      	str	r2, [r3, #0]
 800ced8:	bf00      	nop
 800ceda:	3714      	adds	r7, #20
 800cedc:	46bd      	mov	sp, r7
 800cede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee2:	4770      	bx	lr
 800cee4:	20000870 	.word	0x20000870
 800cee8:	200008cc 	.word	0x200008cc

0800ceec <vApplicationGetTimerTaskMemory>:
 800ceec:	b480      	push	{r7}
 800ceee:	b085      	sub	sp, #20
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	60b9      	str	r1, [r7, #8]
 800cef6:	607a      	str	r2, [r7, #4]
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	4a07      	ldr	r2, [pc, #28]	; (800cf18 <vApplicationGetTimerTaskMemory+0x2c>)
 800cefc:	601a      	str	r2, [r3, #0]
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	4a06      	ldr	r2, [pc, #24]	; (800cf1c <vApplicationGetTimerTaskMemory+0x30>)
 800cf02:	601a      	str	r2, [r3, #0]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cf0a:	601a      	str	r2, [r3, #0]
 800cf0c:	bf00      	nop
 800cf0e:	3714      	adds	r7, #20
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr
 800cf18:	200010cc 	.word	0x200010cc
 800cf1c:	20001128 	.word	0x20001128

0800cf20 <vListInitialise>:
 800cf20:	b480      	push	{r7}
 800cf22:	b083      	sub	sp, #12
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f103 0208 	add.w	r2, r3, #8
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	605a      	str	r2, [r3, #4]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf38:	609a      	str	r2, [r3, #8]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f103 0208 	add.w	r2, r3, #8
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	60da      	str	r2, [r3, #12]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f103 0208 	add.w	r2, r3, #8
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	611a      	str	r2, [r3, #16]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2200      	movs	r2, #0
 800cf52:	601a      	str	r2, [r3, #0]
 800cf54:	bf00      	nop
 800cf56:	370c      	adds	r7, #12
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <vListInitialiseItem>:
 800cf60:	b480      	push	{r7}
 800cf62:	b083      	sub	sp, #12
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	611a      	str	r2, [r3, #16]
 800cf6e:	bf00      	nop
 800cf70:	370c      	adds	r7, #12
 800cf72:	46bd      	mov	sp, r7
 800cf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf78:	4770      	bx	lr

0800cf7a <vListInsertEnd>:
 800cf7a:	b480      	push	{r7}
 800cf7c:	b085      	sub	sp, #20
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
 800cf82:	6039      	str	r1, [r7, #0]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	685b      	ldr	r3, [r3, #4]
 800cf88:	60fb      	str	r3, [r7, #12]
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	68fa      	ldr	r2, [r7, #12]
 800cf8e:	605a      	str	r2, [r3, #4]
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	689a      	ldr	r2, [r3, #8]
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	609a      	str	r2, [r3, #8]
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	689b      	ldr	r3, [r3, #8]
 800cf9c:	683a      	ldr	r2, [r7, #0]
 800cf9e:	605a      	str	r2, [r3, #4]
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	683a      	ldr	r2, [r7, #0]
 800cfa4:	609a      	str	r2, [r3, #8]
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	687a      	ldr	r2, [r7, #4]
 800cfaa:	611a      	str	r2, [r3, #16]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	1c5a      	adds	r2, r3, #1
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	601a      	str	r2, [r3, #0]
 800cfb6:	bf00      	nop
 800cfb8:	3714      	adds	r7, #20
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr

0800cfc2 <vListInsert>:
 800cfc2:	b480      	push	{r7}
 800cfc4:	b085      	sub	sp, #20
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
 800cfca:	6039      	str	r1, [r7, #0]
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	60bb      	str	r3, [r7, #8]
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfd8:	d103      	bne.n	800cfe2 <vListInsert+0x20>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	691b      	ldr	r3, [r3, #16]
 800cfde:	60fb      	str	r3, [r7, #12]
 800cfe0:	e00c      	b.n	800cffc <vListInsert+0x3a>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	3308      	adds	r3, #8
 800cfe6:	60fb      	str	r3, [r7, #12]
 800cfe8:	e002      	b.n	800cff0 <vListInsert+0x2e>
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	685b      	ldr	r3, [r3, #4]
 800cfee:	60fb      	str	r3, [r7, #12]
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	685b      	ldr	r3, [r3, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	68ba      	ldr	r2, [r7, #8]
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d2f6      	bcs.n	800cfea <vListInsert+0x28>
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	685a      	ldr	r2, [r3, #4]
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	605a      	str	r2, [r3, #4]
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	685b      	ldr	r3, [r3, #4]
 800d008:	683a      	ldr	r2, [r7, #0]
 800d00a:	609a      	str	r2, [r3, #8]
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	68fa      	ldr	r2, [r7, #12]
 800d010:	609a      	str	r2, [r3, #8]
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	683a      	ldr	r2, [r7, #0]
 800d016:	605a      	str	r2, [r3, #4]
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	687a      	ldr	r2, [r7, #4]
 800d01c:	611a      	str	r2, [r3, #16]
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	1c5a      	adds	r2, r3, #1
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	601a      	str	r2, [r3, #0]
 800d028:	bf00      	nop
 800d02a:	3714      	adds	r7, #20
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr

0800d034 <uxListRemove>:
 800d034:	b480      	push	{r7}
 800d036:	b085      	sub	sp, #20
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	691b      	ldr	r3, [r3, #16]
 800d040:	60fb      	str	r3, [r7, #12]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	687a      	ldr	r2, [r7, #4]
 800d048:	6892      	ldr	r2, [r2, #8]
 800d04a:	609a      	str	r2, [r3, #8]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	689b      	ldr	r3, [r3, #8]
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	6852      	ldr	r2, [r2, #4]
 800d054:	605a      	str	r2, [r3, #4]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	685b      	ldr	r3, [r3, #4]
 800d05a:	687a      	ldr	r2, [r7, #4]
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d103      	bne.n	800d068 <uxListRemove+0x34>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	689a      	ldr	r2, [r3, #8]
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	605a      	str	r2, [r3, #4]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2200      	movs	r2, #0
 800d06c:	611a      	str	r2, [r3, #16]
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	1e5a      	subs	r2, r3, #1
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	601a      	str	r2, [r3, #0]
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	4618      	mov	r0, r3
 800d07e:	3714      	adds	r7, #20
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr

0800d088 <xQueueGenericReset>:
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	6039      	str	r1, [r7, #0]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	60fb      	str	r3, [r7, #12]
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d10a      	bne.n	800d0b2 <xQueueGenericReset+0x2a>
 800d09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a0:	f383 8811 	msr	BASEPRI, r3
 800d0a4:	f3bf 8f6f 	isb	sy
 800d0a8:	f3bf 8f4f 	dsb	sy
 800d0ac:	60bb      	str	r3, [r7, #8]
 800d0ae:	bf00      	nop
 800d0b0:	e7fe      	b.n	800d0b0 <xQueueGenericReset+0x28>
 800d0b2:	f002 f8cf 	bl	800f254 <vPortEnterCritical>
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	681a      	ldr	r2, [r3, #0]
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0be:	68f9      	ldr	r1, [r7, #12]
 800d0c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d0c2:	fb01 f303 	mul.w	r3, r1, r3
 800d0c6:	441a      	add	r2, r3
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	609a      	str	r2, [r3, #8]
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	639a      	str	r2, [r3, #56]	; 0x38
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	605a      	str	r2, [r3, #4]
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	681a      	ldr	r2, [r3, #0]
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0e2:	3b01      	subs	r3, #1
 800d0e4:	68f9      	ldr	r1, [r7, #12]
 800d0e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d0e8:	fb01 f303 	mul.w	r3, r1, r3
 800d0ec:	441a      	add	r2, r3
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	60da      	str	r2, [r3, #12]
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	22ff      	movs	r2, #255	; 0xff
 800d0f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	22ff      	movs	r2, #255	; 0xff
 800d0fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d114      	bne.n	800d132 <xQueueGenericReset+0xaa>
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	691b      	ldr	r3, [r3, #16]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d01a      	beq.n	800d146 <xQueueGenericReset+0xbe>
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	3310      	adds	r3, #16
 800d114:	4618      	mov	r0, r3
 800d116:	f001 f981 	bl	800e41c <xTaskRemoveFromEventList>
 800d11a:	4603      	mov	r3, r0
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d012      	beq.n	800d146 <xQueueGenericReset+0xbe>
 800d120:	4b0c      	ldr	r3, [pc, #48]	; (800d154 <xQueueGenericReset+0xcc>)
 800d122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d126:	601a      	str	r2, [r3, #0]
 800d128:	f3bf 8f4f 	dsb	sy
 800d12c:	f3bf 8f6f 	isb	sy
 800d130:	e009      	b.n	800d146 <xQueueGenericReset+0xbe>
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	3310      	adds	r3, #16
 800d136:	4618      	mov	r0, r3
 800d138:	f7ff fef2 	bl	800cf20 <vListInitialise>
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	3324      	adds	r3, #36	; 0x24
 800d140:	4618      	mov	r0, r3
 800d142:	f7ff feed 	bl	800cf20 <vListInitialise>
 800d146:	f002 f8b5 	bl	800f2b4 <vPortExitCritical>
 800d14a:	2301      	movs	r3, #1
 800d14c:	4618      	mov	r0, r3
 800d14e:	3710      	adds	r7, #16
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}
 800d154:	e000ed04 	.word	0xe000ed04

0800d158 <xQueueGenericCreateStatic>:
 800d158:	b580      	push	{r7, lr}
 800d15a:	b08e      	sub	sp, #56	; 0x38
 800d15c:	af02      	add	r7, sp, #8
 800d15e:	60f8      	str	r0, [r7, #12]
 800d160:	60b9      	str	r1, [r7, #8]
 800d162:	607a      	str	r2, [r7, #4]
 800d164:	603b      	str	r3, [r7, #0]
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d10a      	bne.n	800d182 <xQueueGenericCreateStatic+0x2a>
 800d16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d170:	f383 8811 	msr	BASEPRI, r3
 800d174:	f3bf 8f6f 	isb	sy
 800d178:	f3bf 8f4f 	dsb	sy
 800d17c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d17e:	bf00      	nop
 800d180:	e7fe      	b.n	800d180 <xQueueGenericCreateStatic+0x28>
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d10a      	bne.n	800d19e <xQueueGenericCreateStatic+0x46>
 800d188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18c:	f383 8811 	msr	BASEPRI, r3
 800d190:	f3bf 8f6f 	isb	sy
 800d194:	f3bf 8f4f 	dsb	sy
 800d198:	627b      	str	r3, [r7, #36]	; 0x24
 800d19a:	bf00      	nop
 800d19c:	e7fe      	b.n	800d19c <xQueueGenericCreateStatic+0x44>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d002      	beq.n	800d1aa <xQueueGenericCreateStatic+0x52>
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d001      	beq.n	800d1ae <xQueueGenericCreateStatic+0x56>
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	e000      	b.n	800d1b0 <xQueueGenericCreateStatic+0x58>
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d10a      	bne.n	800d1ca <xQueueGenericCreateStatic+0x72>
 800d1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b8:	f383 8811 	msr	BASEPRI, r3
 800d1bc:	f3bf 8f6f 	isb	sy
 800d1c0:	f3bf 8f4f 	dsb	sy
 800d1c4:	623b      	str	r3, [r7, #32]
 800d1c6:	bf00      	nop
 800d1c8:	e7fe      	b.n	800d1c8 <xQueueGenericCreateStatic+0x70>
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d102      	bne.n	800d1d6 <xQueueGenericCreateStatic+0x7e>
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d101      	bne.n	800d1da <xQueueGenericCreateStatic+0x82>
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	e000      	b.n	800d1dc <xQueueGenericCreateStatic+0x84>
 800d1da:	2300      	movs	r3, #0
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d10a      	bne.n	800d1f6 <xQueueGenericCreateStatic+0x9e>
 800d1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e4:	f383 8811 	msr	BASEPRI, r3
 800d1e8:	f3bf 8f6f 	isb	sy
 800d1ec:	f3bf 8f4f 	dsb	sy
 800d1f0:	61fb      	str	r3, [r7, #28]
 800d1f2:	bf00      	nop
 800d1f4:	e7fe      	b.n	800d1f4 <xQueueGenericCreateStatic+0x9c>
 800d1f6:	2350      	movs	r3, #80	; 0x50
 800d1f8:	617b      	str	r3, [r7, #20]
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	2b50      	cmp	r3, #80	; 0x50
 800d1fe:	d00a      	beq.n	800d216 <xQueueGenericCreateStatic+0xbe>
 800d200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d204:	f383 8811 	msr	BASEPRI, r3
 800d208:	f3bf 8f6f 	isb	sy
 800d20c:	f3bf 8f4f 	dsb	sy
 800d210:	61bb      	str	r3, [r7, #24]
 800d212:	bf00      	nop
 800d214:	e7fe      	b.n	800d214 <xQueueGenericCreateStatic+0xbc>
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d00d      	beq.n	800d23e <xQueueGenericCreateStatic+0xe6>
 800d222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d224:	2201      	movs	r2, #1
 800d226:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d22a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d230:	9300      	str	r3, [sp, #0]
 800d232:	4613      	mov	r3, r2
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	68b9      	ldr	r1, [r7, #8]
 800d238:	68f8      	ldr	r0, [r7, #12]
 800d23a:	f000 f805 	bl	800d248 <prvInitialiseNewQueue>
 800d23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d240:	4618      	mov	r0, r3
 800d242:	3730      	adds	r7, #48	; 0x30
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <prvInitialiseNewQueue>:
 800d248:	b580      	push	{r7, lr}
 800d24a:	b084      	sub	sp, #16
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	60f8      	str	r0, [r7, #12]
 800d250:	60b9      	str	r1, [r7, #8]
 800d252:	607a      	str	r2, [r7, #4]
 800d254:	70fb      	strb	r3, [r7, #3]
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d103      	bne.n	800d264 <prvInitialiseNewQueue+0x1c>
 800d25c:	69bb      	ldr	r3, [r7, #24]
 800d25e:	69ba      	ldr	r2, [r7, #24]
 800d260:	601a      	str	r2, [r3, #0]
 800d262:	e002      	b.n	800d26a <prvInitialiseNewQueue+0x22>
 800d264:	69bb      	ldr	r3, [r7, #24]
 800d266:	687a      	ldr	r2, [r7, #4]
 800d268:	601a      	str	r2, [r3, #0]
 800d26a:	69bb      	ldr	r3, [r7, #24]
 800d26c:	68fa      	ldr	r2, [r7, #12]
 800d26e:	63da      	str	r2, [r3, #60]	; 0x3c
 800d270:	69bb      	ldr	r3, [r7, #24]
 800d272:	68ba      	ldr	r2, [r7, #8]
 800d274:	641a      	str	r2, [r3, #64]	; 0x40
 800d276:	2101      	movs	r1, #1
 800d278:	69b8      	ldr	r0, [r7, #24]
 800d27a:	f7ff ff05 	bl	800d088 <xQueueGenericReset>
 800d27e:	69bb      	ldr	r3, [r7, #24]
 800d280:	78fa      	ldrb	r2, [r7, #3]
 800d282:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800d286:	bf00      	nop
 800d288:	3710      	adds	r7, #16
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
	...

0800d290 <xQueueGenericSend>:
 800d290:	b580      	push	{r7, lr}
 800d292:	b08e      	sub	sp, #56	; 0x38
 800d294:	af00      	add	r7, sp, #0
 800d296:	60f8      	str	r0, [r7, #12]
 800d298:	60b9      	str	r1, [r7, #8]
 800d29a:	607a      	str	r2, [r7, #4]
 800d29c:	603b      	str	r3, [r7, #0]
 800d29e:	2300      	movs	r3, #0
 800d2a0:	637b      	str	r3, [r7, #52]	; 0x34
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	633b      	str	r3, [r7, #48]	; 0x30
 800d2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d10a      	bne.n	800d2c2 <xQueueGenericSend+0x32>
 800d2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b0:	f383 8811 	msr	BASEPRI, r3
 800d2b4:	f3bf 8f6f 	isb	sy
 800d2b8:	f3bf 8f4f 	dsb	sy
 800d2bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800d2be:	bf00      	nop
 800d2c0:	e7fe      	b.n	800d2c0 <xQueueGenericSend+0x30>
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d103      	bne.n	800d2d0 <xQueueGenericSend+0x40>
 800d2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d101      	bne.n	800d2d4 <xQueueGenericSend+0x44>
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	e000      	b.n	800d2d6 <xQueueGenericSend+0x46>
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d10a      	bne.n	800d2f0 <xQueueGenericSend+0x60>
 800d2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2de:	f383 8811 	msr	BASEPRI, r3
 800d2e2:	f3bf 8f6f 	isb	sy
 800d2e6:	f3bf 8f4f 	dsb	sy
 800d2ea:	627b      	str	r3, [r7, #36]	; 0x24
 800d2ec:	bf00      	nop
 800d2ee:	e7fe      	b.n	800d2ee <xQueueGenericSend+0x5e>
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	2b02      	cmp	r3, #2
 800d2f4:	d103      	bne.n	800d2fe <xQueueGenericSend+0x6e>
 800d2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d101      	bne.n	800d302 <xQueueGenericSend+0x72>
 800d2fe:	2301      	movs	r3, #1
 800d300:	e000      	b.n	800d304 <xQueueGenericSend+0x74>
 800d302:	2300      	movs	r3, #0
 800d304:	2b00      	cmp	r3, #0
 800d306:	d10a      	bne.n	800d31e <xQueueGenericSend+0x8e>
 800d308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d30c:	f383 8811 	msr	BASEPRI, r3
 800d310:	f3bf 8f6f 	isb	sy
 800d314:	f3bf 8f4f 	dsb	sy
 800d318:	623b      	str	r3, [r7, #32]
 800d31a:	bf00      	nop
 800d31c:	e7fe      	b.n	800d31c <xQueueGenericSend+0x8c>
 800d31e:	f001 fa3b 	bl	800e798 <xTaskGetSchedulerState>
 800d322:	4603      	mov	r3, r0
 800d324:	2b00      	cmp	r3, #0
 800d326:	d102      	bne.n	800d32e <xQueueGenericSend+0x9e>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d101      	bne.n	800d332 <xQueueGenericSend+0xa2>
 800d32e:	2301      	movs	r3, #1
 800d330:	e000      	b.n	800d334 <xQueueGenericSend+0xa4>
 800d332:	2300      	movs	r3, #0
 800d334:	2b00      	cmp	r3, #0
 800d336:	d10a      	bne.n	800d34e <xQueueGenericSend+0xbe>
 800d338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d33c:	f383 8811 	msr	BASEPRI, r3
 800d340:	f3bf 8f6f 	isb	sy
 800d344:	f3bf 8f4f 	dsb	sy
 800d348:	61fb      	str	r3, [r7, #28]
 800d34a:	bf00      	nop
 800d34c:	e7fe      	b.n	800d34c <xQueueGenericSend+0xbc>
 800d34e:	f001 ff81 	bl	800f254 <vPortEnterCritical>
 800d352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d302      	bcc.n	800d364 <xQueueGenericSend+0xd4>
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	2b02      	cmp	r3, #2
 800d362:	d129      	bne.n	800d3b8 <xQueueGenericSend+0x128>
 800d364:	683a      	ldr	r2, [r7, #0]
 800d366:	68b9      	ldr	r1, [r7, #8]
 800d368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d36a:	f000 fa0b 	bl	800d784 <prvCopyDataToQueue>
 800d36e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d374:	2b00      	cmp	r3, #0
 800d376:	d010      	beq.n	800d39a <xQueueGenericSend+0x10a>
 800d378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d37a:	3324      	adds	r3, #36	; 0x24
 800d37c:	4618      	mov	r0, r3
 800d37e:	f001 f84d 	bl	800e41c <xTaskRemoveFromEventList>
 800d382:	4603      	mov	r3, r0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d013      	beq.n	800d3b0 <xQueueGenericSend+0x120>
 800d388:	4b3f      	ldr	r3, [pc, #252]	; (800d488 <xQueueGenericSend+0x1f8>)
 800d38a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d38e:	601a      	str	r2, [r3, #0]
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	f3bf 8f6f 	isb	sy
 800d398:	e00a      	b.n	800d3b0 <xQueueGenericSend+0x120>
 800d39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d007      	beq.n	800d3b0 <xQueueGenericSend+0x120>
 800d3a0:	4b39      	ldr	r3, [pc, #228]	; (800d488 <xQueueGenericSend+0x1f8>)
 800d3a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3a6:	601a      	str	r2, [r3, #0]
 800d3a8:	f3bf 8f4f 	dsb	sy
 800d3ac:	f3bf 8f6f 	isb	sy
 800d3b0:	f001 ff80 	bl	800f2b4 <vPortExitCritical>
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	e063      	b.n	800d480 <xQueueGenericSend+0x1f0>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d103      	bne.n	800d3c6 <xQueueGenericSend+0x136>
 800d3be:	f001 ff79 	bl	800f2b4 <vPortExitCritical>
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	e05c      	b.n	800d480 <xQueueGenericSend+0x1f0>
 800d3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d106      	bne.n	800d3da <xQueueGenericSend+0x14a>
 800d3cc:	f107 0314 	add.w	r3, r7, #20
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f001 f887 	bl	800e4e4 <vTaskInternalSetTimeOutState>
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	637b      	str	r3, [r7, #52]	; 0x34
 800d3da:	f001 ff6b 	bl	800f2b4 <vPortExitCritical>
 800d3de:	f000 fdf9 	bl	800dfd4 <vTaskSuspendAll>
 800d3e2:	f001 ff37 	bl	800f254 <vPortEnterCritical>
 800d3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3ec:	b25b      	sxtb	r3, r3
 800d3ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3f2:	d103      	bne.n	800d3fc <xQueueGenericSend+0x16c>
 800d3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d402:	b25b      	sxtb	r3, r3
 800d404:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d408:	d103      	bne.n	800d412 <xQueueGenericSend+0x182>
 800d40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40c:	2200      	movs	r2, #0
 800d40e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d412:	f001 ff4f 	bl	800f2b4 <vPortExitCritical>
 800d416:	1d3a      	adds	r2, r7, #4
 800d418:	f107 0314 	add.w	r3, r7, #20
 800d41c:	4611      	mov	r1, r2
 800d41e:	4618      	mov	r0, r3
 800d420:	f001 f876 	bl	800e510 <xTaskCheckForTimeOut>
 800d424:	4603      	mov	r3, r0
 800d426:	2b00      	cmp	r3, #0
 800d428:	d124      	bne.n	800d474 <xQueueGenericSend+0x1e4>
 800d42a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d42c:	f000 faa2 	bl	800d974 <prvIsQueueFull>
 800d430:	4603      	mov	r3, r0
 800d432:	2b00      	cmp	r3, #0
 800d434:	d018      	beq.n	800d468 <xQueueGenericSend+0x1d8>
 800d436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d438:	3310      	adds	r3, #16
 800d43a:	687a      	ldr	r2, [r7, #4]
 800d43c:	4611      	mov	r1, r2
 800d43e:	4618      	mov	r0, r3
 800d440:	f000 ff9c 	bl	800e37c <vTaskPlaceOnEventList>
 800d444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d446:	f000 fa2d 	bl	800d8a4 <prvUnlockQueue>
 800d44a:	f000 fdd1 	bl	800dff0 <xTaskResumeAll>
 800d44e:	4603      	mov	r3, r0
 800d450:	2b00      	cmp	r3, #0
 800d452:	f47f af7c 	bne.w	800d34e <xQueueGenericSend+0xbe>
 800d456:	4b0c      	ldr	r3, [pc, #48]	; (800d488 <xQueueGenericSend+0x1f8>)
 800d458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d45c:	601a      	str	r2, [r3, #0]
 800d45e:	f3bf 8f4f 	dsb	sy
 800d462:	f3bf 8f6f 	isb	sy
 800d466:	e772      	b.n	800d34e <xQueueGenericSend+0xbe>
 800d468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d46a:	f000 fa1b 	bl	800d8a4 <prvUnlockQueue>
 800d46e:	f000 fdbf 	bl	800dff0 <xTaskResumeAll>
 800d472:	e76c      	b.n	800d34e <xQueueGenericSend+0xbe>
 800d474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d476:	f000 fa15 	bl	800d8a4 <prvUnlockQueue>
 800d47a:	f000 fdb9 	bl	800dff0 <xTaskResumeAll>
 800d47e:	2300      	movs	r3, #0
 800d480:	4618      	mov	r0, r3
 800d482:	3738      	adds	r7, #56	; 0x38
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}
 800d488:	e000ed04 	.word	0xe000ed04

0800d48c <xQueueGenericSendFromISR>:
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b090      	sub	sp, #64	; 0x40
 800d490:	af00      	add	r7, sp, #0
 800d492:	60f8      	str	r0, [r7, #12]
 800d494:	60b9      	str	r1, [r7, #8]
 800d496:	607a      	str	r2, [r7, #4]
 800d498:	603b      	str	r3, [r7, #0]
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d10a      	bne.n	800d4ba <xQueueGenericSendFromISR+0x2e>
 800d4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a8:	f383 8811 	msr	BASEPRI, r3
 800d4ac:	f3bf 8f6f 	isb	sy
 800d4b0:	f3bf 8f4f 	dsb	sy
 800d4b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d4b6:	bf00      	nop
 800d4b8:	e7fe      	b.n	800d4b8 <xQueueGenericSendFromISR+0x2c>
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d103      	bne.n	800d4c8 <xQueueGenericSendFromISR+0x3c>
 800d4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d101      	bne.n	800d4cc <xQueueGenericSendFromISR+0x40>
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	e000      	b.n	800d4ce <xQueueGenericSendFromISR+0x42>
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d10a      	bne.n	800d4e8 <xQueueGenericSendFromISR+0x5c>
 800d4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d6:	f383 8811 	msr	BASEPRI, r3
 800d4da:	f3bf 8f6f 	isb	sy
 800d4de:	f3bf 8f4f 	dsb	sy
 800d4e2:	627b      	str	r3, [r7, #36]	; 0x24
 800d4e4:	bf00      	nop
 800d4e6:	e7fe      	b.n	800d4e6 <xQueueGenericSendFromISR+0x5a>
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	2b02      	cmp	r3, #2
 800d4ec:	d103      	bne.n	800d4f6 <xQueueGenericSendFromISR+0x6a>
 800d4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4f2:	2b01      	cmp	r3, #1
 800d4f4:	d101      	bne.n	800d4fa <xQueueGenericSendFromISR+0x6e>
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	e000      	b.n	800d4fc <xQueueGenericSendFromISR+0x70>
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d10a      	bne.n	800d516 <xQueueGenericSendFromISR+0x8a>
 800d500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d504:	f383 8811 	msr	BASEPRI, r3
 800d508:	f3bf 8f6f 	isb	sy
 800d50c:	f3bf 8f4f 	dsb	sy
 800d510:	623b      	str	r3, [r7, #32]
 800d512:	bf00      	nop
 800d514:	e7fe      	b.n	800d514 <xQueueGenericSendFromISR+0x88>
 800d516:	f001 ff7f 	bl	800f418 <vPortValidateInterruptPriority>
 800d51a:	f3ef 8211 	mrs	r2, BASEPRI
 800d51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d522:	f383 8811 	msr	BASEPRI, r3
 800d526:	f3bf 8f6f 	isb	sy
 800d52a:	f3bf 8f4f 	dsb	sy
 800d52e:	61fa      	str	r2, [r7, #28]
 800d530:	61bb      	str	r3, [r7, #24]
 800d532:	69fb      	ldr	r3, [r7, #28]
 800d534:	637b      	str	r3, [r7, #52]	; 0x34
 800d536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d53c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d53e:	429a      	cmp	r2, r3
 800d540:	d302      	bcc.n	800d548 <xQueueGenericSendFromISR+0xbc>
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	2b02      	cmp	r3, #2
 800d546:	d12f      	bne.n	800d5a8 <xQueueGenericSendFromISR+0x11c>
 800d548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d54a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d54e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d556:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d558:	683a      	ldr	r2, [r7, #0]
 800d55a:	68b9      	ldr	r1, [r7, #8]
 800d55c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d55e:	f000 f911 	bl	800d784 <prvCopyDataToQueue>
 800d562:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d56a:	d112      	bne.n	800d592 <xQueueGenericSendFromISR+0x106>
 800d56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d570:	2b00      	cmp	r3, #0
 800d572:	d016      	beq.n	800d5a2 <xQueueGenericSendFromISR+0x116>
 800d574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d576:	3324      	adds	r3, #36	; 0x24
 800d578:	4618      	mov	r0, r3
 800d57a:	f000 ff4f 	bl	800e41c <xTaskRemoveFromEventList>
 800d57e:	4603      	mov	r3, r0
 800d580:	2b00      	cmp	r3, #0
 800d582:	d00e      	beq.n	800d5a2 <xQueueGenericSendFromISR+0x116>
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d00b      	beq.n	800d5a2 <xQueueGenericSendFromISR+0x116>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2201      	movs	r2, #1
 800d58e:	601a      	str	r2, [r3, #0]
 800d590:	e007      	b.n	800d5a2 <xQueueGenericSendFromISR+0x116>
 800d592:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d596:	3301      	adds	r3, #1
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	b25a      	sxtb	r2, r3
 800d59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d59e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d5a6:	e001      	b.n	800d5ac <xQueueGenericSendFromISR+0x120>
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d5ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5ae:	617b      	str	r3, [r7, #20]
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	f383 8811 	msr	BASEPRI, r3
 800d5b6:	bf00      	nop
 800d5b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3740      	adds	r7, #64	; 0x40
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}
	...

0800d5c4 <xQueueReceive>:
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b08c      	sub	sp, #48	; 0x30
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	60f8      	str	r0, [r7, #12]
 800d5cc:	60b9      	str	r1, [r7, #8]
 800d5ce:	607a      	str	r2, [r7, #4]
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d10a      	bne.n	800d5f4 <xQueueReceive+0x30>
 800d5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e2:	f383 8811 	msr	BASEPRI, r3
 800d5e6:	f3bf 8f6f 	isb	sy
 800d5ea:	f3bf 8f4f 	dsb	sy
 800d5ee:	623b      	str	r3, [r7, #32]
 800d5f0:	bf00      	nop
 800d5f2:	e7fe      	b.n	800d5f2 <xQueueReceive+0x2e>
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d103      	bne.n	800d602 <xQueueReceive+0x3e>
 800d5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d101      	bne.n	800d606 <xQueueReceive+0x42>
 800d602:	2301      	movs	r3, #1
 800d604:	e000      	b.n	800d608 <xQueueReceive+0x44>
 800d606:	2300      	movs	r3, #0
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d10a      	bne.n	800d622 <xQueueReceive+0x5e>
 800d60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d610:	f383 8811 	msr	BASEPRI, r3
 800d614:	f3bf 8f6f 	isb	sy
 800d618:	f3bf 8f4f 	dsb	sy
 800d61c:	61fb      	str	r3, [r7, #28]
 800d61e:	bf00      	nop
 800d620:	e7fe      	b.n	800d620 <xQueueReceive+0x5c>
 800d622:	f001 f8b9 	bl	800e798 <xTaskGetSchedulerState>
 800d626:	4603      	mov	r3, r0
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d102      	bne.n	800d632 <xQueueReceive+0x6e>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d101      	bne.n	800d636 <xQueueReceive+0x72>
 800d632:	2301      	movs	r3, #1
 800d634:	e000      	b.n	800d638 <xQueueReceive+0x74>
 800d636:	2300      	movs	r3, #0
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d10a      	bne.n	800d652 <xQueueReceive+0x8e>
 800d63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d640:	f383 8811 	msr	BASEPRI, r3
 800d644:	f3bf 8f6f 	isb	sy
 800d648:	f3bf 8f4f 	dsb	sy
 800d64c:	61bb      	str	r3, [r7, #24]
 800d64e:	bf00      	nop
 800d650:	e7fe      	b.n	800d650 <xQueueReceive+0x8c>
 800d652:	f001 fdff 	bl	800f254 <vPortEnterCritical>
 800d656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d65a:	627b      	str	r3, [r7, #36]	; 0x24
 800d65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d01f      	beq.n	800d6a2 <xQueueReceive+0xde>
 800d662:	68b9      	ldr	r1, [r7, #8]
 800d664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d666:	f000 f8f7 	bl	800d858 <prvCopyDataFromQueue>
 800d66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66c:	1e5a      	subs	r2, r3, #1
 800d66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d670:	639a      	str	r2, [r3, #56]	; 0x38
 800d672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d674:	691b      	ldr	r3, [r3, #16]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d00f      	beq.n	800d69a <xQueueReceive+0xd6>
 800d67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d67c:	3310      	adds	r3, #16
 800d67e:	4618      	mov	r0, r3
 800d680:	f000 fecc 	bl	800e41c <xTaskRemoveFromEventList>
 800d684:	4603      	mov	r3, r0
 800d686:	2b00      	cmp	r3, #0
 800d688:	d007      	beq.n	800d69a <xQueueReceive+0xd6>
 800d68a:	4b3d      	ldr	r3, [pc, #244]	; (800d780 <xQueueReceive+0x1bc>)
 800d68c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d690:	601a      	str	r2, [r3, #0]
 800d692:	f3bf 8f4f 	dsb	sy
 800d696:	f3bf 8f6f 	isb	sy
 800d69a:	f001 fe0b 	bl	800f2b4 <vPortExitCritical>
 800d69e:	2301      	movs	r3, #1
 800d6a0:	e069      	b.n	800d776 <xQueueReceive+0x1b2>
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d103      	bne.n	800d6b0 <xQueueReceive+0xec>
 800d6a8:	f001 fe04 	bl	800f2b4 <vPortExitCritical>
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	e062      	b.n	800d776 <xQueueReceive+0x1b2>
 800d6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d106      	bne.n	800d6c4 <xQueueReceive+0x100>
 800d6b6:	f107 0310 	add.w	r3, r7, #16
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f000 ff12 	bl	800e4e4 <vTaskInternalSetTimeOutState>
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6c4:	f001 fdf6 	bl	800f2b4 <vPortExitCritical>
 800d6c8:	f000 fc84 	bl	800dfd4 <vTaskSuspendAll>
 800d6cc:	f001 fdc2 	bl	800f254 <vPortEnterCritical>
 800d6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6d6:	b25b      	sxtb	r3, r3
 800d6d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6dc:	d103      	bne.n	800d6e6 <xQueueReceive+0x122>
 800d6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6ec:	b25b      	sxtb	r3, r3
 800d6ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6f2:	d103      	bne.n	800d6fc <xQueueReceive+0x138>
 800d6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d6fc:	f001 fdda 	bl	800f2b4 <vPortExitCritical>
 800d700:	1d3a      	adds	r2, r7, #4
 800d702:	f107 0310 	add.w	r3, r7, #16
 800d706:	4611      	mov	r1, r2
 800d708:	4618      	mov	r0, r3
 800d70a:	f000 ff01 	bl	800e510 <xTaskCheckForTimeOut>
 800d70e:	4603      	mov	r3, r0
 800d710:	2b00      	cmp	r3, #0
 800d712:	d123      	bne.n	800d75c <xQueueReceive+0x198>
 800d714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d716:	f000 f917 	bl	800d948 <prvIsQueueEmpty>
 800d71a:	4603      	mov	r3, r0
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d017      	beq.n	800d750 <xQueueReceive+0x18c>
 800d720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d722:	3324      	adds	r3, #36	; 0x24
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	4611      	mov	r1, r2
 800d728:	4618      	mov	r0, r3
 800d72a:	f000 fe27 	bl	800e37c <vTaskPlaceOnEventList>
 800d72e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d730:	f000 f8b8 	bl	800d8a4 <prvUnlockQueue>
 800d734:	f000 fc5c 	bl	800dff0 <xTaskResumeAll>
 800d738:	4603      	mov	r3, r0
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d189      	bne.n	800d652 <xQueueReceive+0x8e>
 800d73e:	4b10      	ldr	r3, [pc, #64]	; (800d780 <xQueueReceive+0x1bc>)
 800d740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d744:	601a      	str	r2, [r3, #0]
 800d746:	f3bf 8f4f 	dsb	sy
 800d74a:	f3bf 8f6f 	isb	sy
 800d74e:	e780      	b.n	800d652 <xQueueReceive+0x8e>
 800d750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d752:	f000 f8a7 	bl	800d8a4 <prvUnlockQueue>
 800d756:	f000 fc4b 	bl	800dff0 <xTaskResumeAll>
 800d75a:	e77a      	b.n	800d652 <xQueueReceive+0x8e>
 800d75c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d75e:	f000 f8a1 	bl	800d8a4 <prvUnlockQueue>
 800d762:	f000 fc45 	bl	800dff0 <xTaskResumeAll>
 800d766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d768:	f000 f8ee 	bl	800d948 <prvIsQueueEmpty>
 800d76c:	4603      	mov	r3, r0
 800d76e:	2b00      	cmp	r3, #0
 800d770:	f43f af6f 	beq.w	800d652 <xQueueReceive+0x8e>
 800d774:	2300      	movs	r3, #0
 800d776:	4618      	mov	r0, r3
 800d778:	3730      	adds	r7, #48	; 0x30
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
 800d77e:	bf00      	nop
 800d780:	e000ed04 	.word	0xe000ed04

0800d784 <prvCopyDataToQueue>:
 800d784:	b580      	push	{r7, lr}
 800d786:	b086      	sub	sp, #24
 800d788:	af00      	add	r7, sp, #0
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	60b9      	str	r1, [r7, #8]
 800d78e:	607a      	str	r2, [r7, #4]
 800d790:	2300      	movs	r3, #0
 800d792:	617b      	str	r3, [r7, #20]
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d798:	613b      	str	r3, [r7, #16]
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d10d      	bne.n	800d7be <prvCopyDataToQueue+0x3a>
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d14d      	bne.n	800d846 <prvCopyDataToQueue+0xc2>
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	689b      	ldr	r3, [r3, #8]
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f001 f810 	bl	800e7d4 <xTaskPriorityDisinherit>
 800d7b4:	6178      	str	r0, [r7, #20]
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	609a      	str	r2, [r3, #8]
 800d7bc:	e043      	b.n	800d846 <prvCopyDataToQueue+0xc2>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d119      	bne.n	800d7f8 <prvCopyDataToQueue+0x74>
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	6858      	ldr	r0, [r3, #4]
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7cc:	461a      	mov	r2, r3
 800d7ce:	68b9      	ldr	r1, [r7, #8]
 800d7d0:	f002 f876 	bl	800f8c0 <memcpy>
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	685a      	ldr	r2, [r3, #4]
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7dc:	441a      	add	r2, r3
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	605a      	str	r2, [r3, #4]
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	685a      	ldr	r2, [r3, #4]
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	689b      	ldr	r3, [r3, #8]
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d32b      	bcc.n	800d846 <prvCopyDataToQueue+0xc2>
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	681a      	ldr	r2, [r3, #0]
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	605a      	str	r2, [r3, #4]
 800d7f6:	e026      	b.n	800d846 <prvCopyDataToQueue+0xc2>
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	68d8      	ldr	r0, [r3, #12]
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d800:	461a      	mov	r2, r3
 800d802:	68b9      	ldr	r1, [r7, #8]
 800d804:	f002 f85c 	bl	800f8c0 <memcpy>
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	68da      	ldr	r2, [r3, #12]
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d810:	425b      	negs	r3, r3
 800d812:	441a      	add	r2, r3
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	60da      	str	r2, [r3, #12]
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	68da      	ldr	r2, [r3, #12]
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	429a      	cmp	r2, r3
 800d822:	d207      	bcs.n	800d834 <prvCopyDataToQueue+0xb0>
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	689a      	ldr	r2, [r3, #8]
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d82c:	425b      	negs	r3, r3
 800d82e:	441a      	add	r2, r3
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	60da      	str	r2, [r3, #12]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2b02      	cmp	r3, #2
 800d838:	d105      	bne.n	800d846 <prvCopyDataToQueue+0xc2>
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d002      	beq.n	800d846 <prvCopyDataToQueue+0xc2>
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	3b01      	subs	r3, #1
 800d844:	613b      	str	r3, [r7, #16]
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	1c5a      	adds	r2, r3, #1
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	639a      	str	r2, [r3, #56]	; 0x38
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	4618      	mov	r0, r3
 800d852:	3718      	adds	r7, #24
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <prvCopyDataFromQueue>:
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d866:	2b00      	cmp	r3, #0
 800d868:	d018      	beq.n	800d89c <prvCopyDataFromQueue+0x44>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	68da      	ldr	r2, [r3, #12]
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d872:	441a      	add	r2, r3
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	60da      	str	r2, [r3, #12]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	68da      	ldr	r2, [r3, #12]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	429a      	cmp	r2, r3
 800d882:	d303      	bcc.n	800d88c <prvCopyDataFromQueue+0x34>
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681a      	ldr	r2, [r3, #0]
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	60da      	str	r2, [r3, #12]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	68d9      	ldr	r1, [r3, #12]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d894:	461a      	mov	r2, r3
 800d896:	6838      	ldr	r0, [r7, #0]
 800d898:	f002 f812 	bl	800f8c0 <memcpy>
 800d89c:	bf00      	nop
 800d89e:	3708      	adds	r7, #8
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <prvUnlockQueue>:
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b084      	sub	sp, #16
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	f001 fcd2 	bl	800f254 <vPortEnterCritical>
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d8b6:	73fb      	strb	r3, [r7, #15]
 800d8b8:	e011      	b.n	800d8de <prvUnlockQueue+0x3a>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d012      	beq.n	800d8e8 <prvUnlockQueue+0x44>
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	3324      	adds	r3, #36	; 0x24
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f000 fda8 	bl	800e41c <xTaskRemoveFromEventList>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d001      	beq.n	800d8d6 <prvUnlockQueue+0x32>
 800d8d2:	f000 fe7f 	bl	800e5d4 <vTaskMissedYield>
 800d8d6:	7bfb      	ldrb	r3, [r7, #15]
 800d8d8:	3b01      	subs	r3, #1
 800d8da:	b2db      	uxtb	r3, r3
 800d8dc:	73fb      	strb	r3, [r7, #15]
 800d8de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	dce9      	bgt.n	800d8ba <prvUnlockQueue+0x16>
 800d8e6:	e000      	b.n	800d8ea <prvUnlockQueue+0x46>
 800d8e8:	bf00      	nop
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	22ff      	movs	r2, #255	; 0xff
 800d8ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d8f2:	f001 fcdf 	bl	800f2b4 <vPortExitCritical>
 800d8f6:	f001 fcad 	bl	800f254 <vPortEnterCritical>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d900:	73bb      	strb	r3, [r7, #14]
 800d902:	e011      	b.n	800d928 <prvUnlockQueue+0x84>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	691b      	ldr	r3, [r3, #16]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d012      	beq.n	800d932 <prvUnlockQueue+0x8e>
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	3310      	adds	r3, #16
 800d910:	4618      	mov	r0, r3
 800d912:	f000 fd83 	bl	800e41c <xTaskRemoveFromEventList>
 800d916:	4603      	mov	r3, r0
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d001      	beq.n	800d920 <prvUnlockQueue+0x7c>
 800d91c:	f000 fe5a 	bl	800e5d4 <vTaskMissedYield>
 800d920:	7bbb      	ldrb	r3, [r7, #14]
 800d922:	3b01      	subs	r3, #1
 800d924:	b2db      	uxtb	r3, r3
 800d926:	73bb      	strb	r3, [r7, #14]
 800d928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	dce9      	bgt.n	800d904 <prvUnlockQueue+0x60>
 800d930:	e000      	b.n	800d934 <prvUnlockQueue+0x90>
 800d932:	bf00      	nop
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	22ff      	movs	r2, #255	; 0xff
 800d938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d93c:	f001 fcba 	bl	800f2b4 <vPortExitCritical>
 800d940:	bf00      	nop
 800d942:	3710      	adds	r7, #16
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <prvIsQueueEmpty>:
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	f001 fc80 	bl	800f254 <vPortEnterCritical>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d102      	bne.n	800d962 <prvIsQueueEmpty+0x1a>
 800d95c:	2301      	movs	r3, #1
 800d95e:	60fb      	str	r3, [r7, #12]
 800d960:	e001      	b.n	800d966 <prvIsQueueEmpty+0x1e>
 800d962:	2300      	movs	r3, #0
 800d964:	60fb      	str	r3, [r7, #12]
 800d966:	f001 fca5 	bl	800f2b4 <vPortExitCritical>
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	4618      	mov	r0, r3
 800d96e:	3710      	adds	r7, #16
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}

0800d974 <prvIsQueueFull>:
 800d974:	b580      	push	{r7, lr}
 800d976:	b084      	sub	sp, #16
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	f001 fc6a 	bl	800f254 <vPortEnterCritical>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d988:	429a      	cmp	r2, r3
 800d98a:	d102      	bne.n	800d992 <prvIsQueueFull+0x1e>
 800d98c:	2301      	movs	r3, #1
 800d98e:	60fb      	str	r3, [r7, #12]
 800d990:	e001      	b.n	800d996 <prvIsQueueFull+0x22>
 800d992:	2300      	movs	r3, #0
 800d994:	60fb      	str	r3, [r7, #12]
 800d996:	f001 fc8d 	bl	800f2b4 <vPortExitCritical>
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	4618      	mov	r0, r3
 800d99e:	3710      	adds	r7, #16
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}

0800d9a4 <vQueueAddToRegistry>:
 800d9a4:	b480      	push	{r7}
 800d9a6:	b085      	sub	sp, #20
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	6039      	str	r1, [r7, #0]
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	60fb      	str	r3, [r7, #12]
 800d9b2:	e014      	b.n	800d9de <vQueueAddToRegistry+0x3a>
 800d9b4:	4a0f      	ldr	r2, [pc, #60]	; (800d9f4 <vQueueAddToRegistry+0x50>)
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d10b      	bne.n	800d9d8 <vQueueAddToRegistry+0x34>
 800d9c0:	490c      	ldr	r1, [pc, #48]	; (800d9f4 <vQueueAddToRegistry+0x50>)
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	683a      	ldr	r2, [r7, #0]
 800d9c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800d9ca:	4a0a      	ldr	r2, [pc, #40]	; (800d9f4 <vQueueAddToRegistry+0x50>)
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	00db      	lsls	r3, r3, #3
 800d9d0:	4413      	add	r3, r2
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	605a      	str	r2, [r3, #4]
 800d9d6:	e006      	b.n	800d9e6 <vQueueAddToRegistry+0x42>
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	3301      	adds	r3, #1
 800d9dc:	60fb      	str	r3, [r7, #12]
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2b07      	cmp	r3, #7
 800d9e2:	d9e7      	bls.n	800d9b4 <vQueueAddToRegistry+0x10>
 800d9e4:	bf00      	nop
 800d9e6:	bf00      	nop
 800d9e8:	3714      	adds	r7, #20
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f0:	4770      	bx	lr
 800d9f2:	bf00      	nop
 800d9f4:	20002128 	.word	0x20002128

0800d9f8 <vQueueWaitForMessageRestricted>:
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b086      	sub	sp, #24
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	607a      	str	r2, [r7, #4]
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	617b      	str	r3, [r7, #20]
 800da08:	f001 fc24 	bl	800f254 <vPortEnterCritical>
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da12:	b25b      	sxtb	r3, r3
 800da14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da18:	d103      	bne.n	800da22 <vQueueWaitForMessageRestricted+0x2a>
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	2200      	movs	r2, #0
 800da1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da28:	b25b      	sxtb	r3, r3
 800da2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da2e:	d103      	bne.n	800da38 <vQueueWaitForMessageRestricted+0x40>
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	2200      	movs	r2, #0
 800da34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da38:	f001 fc3c 	bl	800f2b4 <vPortExitCritical>
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da40:	2b00      	cmp	r3, #0
 800da42:	d106      	bne.n	800da52 <vQueueWaitForMessageRestricted+0x5a>
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	3324      	adds	r3, #36	; 0x24
 800da48:	687a      	ldr	r2, [r7, #4]
 800da4a:	68b9      	ldr	r1, [r7, #8]
 800da4c:	4618      	mov	r0, r3
 800da4e:	f000 fcb9 	bl	800e3c4 <vTaskPlaceOnEventListRestricted>
 800da52:	6978      	ldr	r0, [r7, #20]
 800da54:	f7ff ff26 	bl	800d8a4 <prvUnlockQueue>
 800da58:	bf00      	nop
 800da5a:	3718      	adds	r7, #24
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}

0800da60 <xTaskCreateStatic>:
 800da60:	b580      	push	{r7, lr}
 800da62:	b08e      	sub	sp, #56	; 0x38
 800da64:	af04      	add	r7, sp, #16
 800da66:	60f8      	str	r0, [r7, #12]
 800da68:	60b9      	str	r1, [r7, #8]
 800da6a:	607a      	str	r2, [r7, #4]
 800da6c:	603b      	str	r3, [r7, #0]
 800da6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da70:	2b00      	cmp	r3, #0
 800da72:	d10a      	bne.n	800da8a <xTaskCreateStatic+0x2a>
 800da74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da78:	f383 8811 	msr	BASEPRI, r3
 800da7c:	f3bf 8f6f 	isb	sy
 800da80:	f3bf 8f4f 	dsb	sy
 800da84:	623b      	str	r3, [r7, #32]
 800da86:	bf00      	nop
 800da88:	e7fe      	b.n	800da88 <xTaskCreateStatic+0x28>
 800da8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d10a      	bne.n	800daa6 <xTaskCreateStatic+0x46>
 800da90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da94:	f383 8811 	msr	BASEPRI, r3
 800da98:	f3bf 8f6f 	isb	sy
 800da9c:	f3bf 8f4f 	dsb	sy
 800daa0:	61fb      	str	r3, [r7, #28]
 800daa2:	bf00      	nop
 800daa4:	e7fe      	b.n	800daa4 <xTaskCreateStatic+0x44>
 800daa6:	235c      	movs	r3, #92	; 0x5c
 800daa8:	613b      	str	r3, [r7, #16]
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	2b5c      	cmp	r3, #92	; 0x5c
 800daae:	d00a      	beq.n	800dac6 <xTaskCreateStatic+0x66>
 800dab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab4:	f383 8811 	msr	BASEPRI, r3
 800dab8:	f3bf 8f6f 	isb	sy
 800dabc:	f3bf 8f4f 	dsb	sy
 800dac0:	61bb      	str	r3, [r7, #24]
 800dac2:	bf00      	nop
 800dac4:	e7fe      	b.n	800dac4 <xTaskCreateStatic+0x64>
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d01e      	beq.n	800db0c <xTaskCreateStatic+0xac>
 800dace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d01b      	beq.n	800db0c <xTaskCreateStatic+0xac>
 800dad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad6:	627b      	str	r3, [r7, #36]	; 0x24
 800dad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dada:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dadc:	631a      	str	r2, [r3, #48]	; 0x30
 800dade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae0:	2202      	movs	r2, #2
 800dae2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 800dae6:	2300      	movs	r3, #0
 800dae8:	9303      	str	r3, [sp, #12]
 800daea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daec:	9302      	str	r3, [sp, #8]
 800daee:	f107 0314 	add.w	r3, r7, #20
 800daf2:	9301      	str	r3, [sp, #4]
 800daf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf6:	9300      	str	r3, [sp, #0]
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	687a      	ldr	r2, [r7, #4]
 800dafc:	68b9      	ldr	r1, [r7, #8]
 800dafe:	68f8      	ldr	r0, [r7, #12]
 800db00:	f000 f850 	bl	800dba4 <prvInitialiseNewTask>
 800db04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db06:	f000 f8dd 	bl	800dcc4 <prvAddNewTaskToReadyList>
 800db0a:	e001      	b.n	800db10 <xTaskCreateStatic+0xb0>
 800db0c:	2300      	movs	r3, #0
 800db0e:	617b      	str	r3, [r7, #20]
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	4618      	mov	r0, r3
 800db14:	3728      	adds	r7, #40	; 0x28
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}

0800db1a <xTaskCreate>:
 800db1a:	b580      	push	{r7, lr}
 800db1c:	b08c      	sub	sp, #48	; 0x30
 800db1e:	af04      	add	r7, sp, #16
 800db20:	60f8      	str	r0, [r7, #12]
 800db22:	60b9      	str	r1, [r7, #8]
 800db24:	603b      	str	r3, [r7, #0]
 800db26:	4613      	mov	r3, r2
 800db28:	80fb      	strh	r3, [r7, #6]
 800db2a:	88fb      	ldrh	r3, [r7, #6]
 800db2c:	009b      	lsls	r3, r3, #2
 800db2e:	4618      	mov	r0, r3
 800db30:	f001 fcb2 	bl	800f498 <pvPortMalloc>
 800db34:	6178      	str	r0, [r7, #20]
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d00e      	beq.n	800db5a <xTaskCreate+0x40>
 800db3c:	205c      	movs	r0, #92	; 0x5c
 800db3e:	f001 fcab 	bl	800f498 <pvPortMalloc>
 800db42:	61f8      	str	r0, [r7, #28]
 800db44:	69fb      	ldr	r3, [r7, #28]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d003      	beq.n	800db52 <xTaskCreate+0x38>
 800db4a:	69fb      	ldr	r3, [r7, #28]
 800db4c:	697a      	ldr	r2, [r7, #20]
 800db4e:	631a      	str	r2, [r3, #48]	; 0x30
 800db50:	e005      	b.n	800db5e <xTaskCreate+0x44>
 800db52:	6978      	ldr	r0, [r7, #20]
 800db54:	f001 fd6c 	bl	800f630 <vPortFree>
 800db58:	e001      	b.n	800db5e <xTaskCreate+0x44>
 800db5a:	2300      	movs	r3, #0
 800db5c:	61fb      	str	r3, [r7, #28]
 800db5e:	69fb      	ldr	r3, [r7, #28]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d017      	beq.n	800db94 <xTaskCreate+0x7a>
 800db64:	69fb      	ldr	r3, [r7, #28]
 800db66:	2200      	movs	r2, #0
 800db68:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 800db6c:	88fa      	ldrh	r2, [r7, #6]
 800db6e:	2300      	movs	r3, #0
 800db70:	9303      	str	r3, [sp, #12]
 800db72:	69fb      	ldr	r3, [r7, #28]
 800db74:	9302      	str	r3, [sp, #8]
 800db76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db78:	9301      	str	r3, [sp, #4]
 800db7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7c:	9300      	str	r3, [sp, #0]
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	68b9      	ldr	r1, [r7, #8]
 800db82:	68f8      	ldr	r0, [r7, #12]
 800db84:	f000 f80e 	bl	800dba4 <prvInitialiseNewTask>
 800db88:	69f8      	ldr	r0, [r7, #28]
 800db8a:	f000 f89b 	bl	800dcc4 <prvAddNewTaskToReadyList>
 800db8e:	2301      	movs	r3, #1
 800db90:	61bb      	str	r3, [r7, #24]
 800db92:	e002      	b.n	800db9a <xTaskCreate+0x80>
 800db94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db98:	61bb      	str	r3, [r7, #24]
 800db9a:	69bb      	ldr	r3, [r7, #24]
 800db9c:	4618      	mov	r0, r3
 800db9e:	3720      	adds	r7, #32
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <prvInitialiseNewTask>:
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b088      	sub	sp, #32
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	607a      	str	r2, [r7, #4]
 800dbb0:	603b      	str	r3, [r7, #0]
 800dbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	009b      	lsls	r3, r3, #2
 800dbba:	461a      	mov	r2, r3
 800dbbc:	21a5      	movs	r1, #165	; 0xa5
 800dbbe:	f001 fe8d 	bl	800f8dc <memset>
 800dbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dbcc:	3b01      	subs	r3, #1
 800dbce:	009b      	lsls	r3, r3, #2
 800dbd0:	4413      	add	r3, r2
 800dbd2:	61bb      	str	r3, [r7, #24]
 800dbd4:	69bb      	ldr	r3, [r7, #24]
 800dbd6:	f023 0307 	bic.w	r3, r3, #7
 800dbda:	61bb      	str	r3, [r7, #24]
 800dbdc:	69bb      	ldr	r3, [r7, #24]
 800dbde:	f003 0307 	and.w	r3, r3, #7
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d00a      	beq.n	800dbfc <prvInitialiseNewTask+0x58>
 800dbe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbea:	f383 8811 	msr	BASEPRI, r3
 800dbee:	f3bf 8f6f 	isb	sy
 800dbf2:	f3bf 8f4f 	dsb	sy
 800dbf6:	617b      	str	r3, [r7, #20]
 800dbf8:	bf00      	nop
 800dbfa:	e7fe      	b.n	800dbfa <prvInitialiseNewTask+0x56>
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d01f      	beq.n	800dc42 <prvInitialiseNewTask+0x9e>
 800dc02:	2300      	movs	r3, #0
 800dc04:	61fb      	str	r3, [r7, #28]
 800dc06:	e012      	b.n	800dc2e <prvInitialiseNewTask+0x8a>
 800dc08:	68ba      	ldr	r2, [r7, #8]
 800dc0a:	69fb      	ldr	r3, [r7, #28]
 800dc0c:	4413      	add	r3, r2
 800dc0e:	7819      	ldrb	r1, [r3, #0]
 800dc10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc12:	69fb      	ldr	r3, [r7, #28]
 800dc14:	4413      	add	r3, r2
 800dc16:	3334      	adds	r3, #52	; 0x34
 800dc18:	460a      	mov	r2, r1
 800dc1a:	701a      	strb	r2, [r3, #0]
 800dc1c:	68ba      	ldr	r2, [r7, #8]
 800dc1e:	69fb      	ldr	r3, [r7, #28]
 800dc20:	4413      	add	r3, r2
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d006      	beq.n	800dc36 <prvInitialiseNewTask+0x92>
 800dc28:	69fb      	ldr	r3, [r7, #28]
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	61fb      	str	r3, [r7, #28]
 800dc2e:	69fb      	ldr	r3, [r7, #28]
 800dc30:	2b0f      	cmp	r3, #15
 800dc32:	d9e9      	bls.n	800dc08 <prvInitialiseNewTask+0x64>
 800dc34:	e000      	b.n	800dc38 <prvInitialiseNewTask+0x94>
 800dc36:	bf00      	nop
 800dc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dc40:	e003      	b.n	800dc4a <prvInitialiseNewTask+0xa6>
 800dc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc44:	2200      	movs	r2, #0
 800dc46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800dc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc4c:	2b37      	cmp	r3, #55	; 0x37
 800dc4e:	d901      	bls.n	800dc54 <prvInitialiseNewTask+0xb0>
 800dc50:	2337      	movs	r3, #55	; 0x37
 800dc52:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc58:	62da      	str	r2, [r3, #44]	; 0x2c
 800dc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc5e:	64da      	str	r2, [r3, #76]	; 0x4c
 800dc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc62:	2200      	movs	r2, #0
 800dc64:	651a      	str	r2, [r3, #80]	; 0x50
 800dc66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc68:	3304      	adds	r3, #4
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7ff f978 	bl	800cf60 <vListInitialiseItem>
 800dc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc72:	3318      	adds	r3, #24
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7ff f973 	bl	800cf60 <vListInitialiseItem>
 800dc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc7e:	611a      	str	r2, [r3, #16]
 800dc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc88:	619a      	str	r2, [r3, #24]
 800dc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc8e:	625a      	str	r2, [r3, #36]	; 0x24
 800dc90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc92:	2200      	movs	r2, #0
 800dc94:	655a      	str	r2, [r3, #84]	; 0x54
 800dc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc98:	2200      	movs	r2, #0
 800dc9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800dc9e:	683a      	ldr	r2, [r7, #0]
 800dca0:	68f9      	ldr	r1, [r7, #12]
 800dca2:	69b8      	ldr	r0, [r7, #24]
 800dca4:	f001 f9a6 	bl	800eff4 <pxPortInitialiseStack>
 800dca8:	4602      	mov	r2, r0
 800dcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcac:	601a      	str	r2, [r3, #0]
 800dcae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d002      	beq.n	800dcba <prvInitialiseNewTask+0x116>
 800dcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcb8:	601a      	str	r2, [r3, #0]
 800dcba:	bf00      	nop
 800dcbc:	3720      	adds	r7, #32
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}
	...

0800dcc4 <prvAddNewTaskToReadyList>:
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	f001 fac2 	bl	800f254 <vPortEnterCritical>
 800dcd0:	4b2d      	ldr	r3, [pc, #180]	; (800dd88 <prvAddNewTaskToReadyList+0xc4>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	3301      	adds	r3, #1
 800dcd6:	4a2c      	ldr	r2, [pc, #176]	; (800dd88 <prvAddNewTaskToReadyList+0xc4>)
 800dcd8:	6013      	str	r3, [r2, #0]
 800dcda:	4b2c      	ldr	r3, [pc, #176]	; (800dd8c <prvAddNewTaskToReadyList+0xc8>)
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d109      	bne.n	800dcf6 <prvAddNewTaskToReadyList+0x32>
 800dce2:	4a2a      	ldr	r2, [pc, #168]	; (800dd8c <prvAddNewTaskToReadyList+0xc8>)
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6013      	str	r3, [r2, #0]
 800dce8:	4b27      	ldr	r3, [pc, #156]	; (800dd88 <prvAddNewTaskToReadyList+0xc4>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	2b01      	cmp	r3, #1
 800dcee:	d110      	bne.n	800dd12 <prvAddNewTaskToReadyList+0x4e>
 800dcf0:	f000 fc94 	bl	800e61c <prvInitialiseTaskLists>
 800dcf4:	e00d      	b.n	800dd12 <prvAddNewTaskToReadyList+0x4e>
 800dcf6:	4b26      	ldr	r3, [pc, #152]	; (800dd90 <prvAddNewTaskToReadyList+0xcc>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d109      	bne.n	800dd12 <prvAddNewTaskToReadyList+0x4e>
 800dcfe:	4b23      	ldr	r3, [pc, #140]	; (800dd8c <prvAddNewTaskToReadyList+0xc8>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d802      	bhi.n	800dd12 <prvAddNewTaskToReadyList+0x4e>
 800dd0c:	4a1f      	ldr	r2, [pc, #124]	; (800dd8c <prvAddNewTaskToReadyList+0xc8>)
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6013      	str	r3, [r2, #0]
 800dd12:	4b20      	ldr	r3, [pc, #128]	; (800dd94 <prvAddNewTaskToReadyList+0xd0>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	3301      	adds	r3, #1
 800dd18:	4a1e      	ldr	r2, [pc, #120]	; (800dd94 <prvAddNewTaskToReadyList+0xd0>)
 800dd1a:	6013      	str	r3, [r2, #0]
 800dd1c:	4b1d      	ldr	r3, [pc, #116]	; (800dd94 <prvAddNewTaskToReadyList+0xd0>)
 800dd1e:	681a      	ldr	r2, [r3, #0]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	645a      	str	r2, [r3, #68]	; 0x44
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd28:	4b1b      	ldr	r3, [pc, #108]	; (800dd98 <prvAddNewTaskToReadyList+0xd4>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d903      	bls.n	800dd38 <prvAddNewTaskToReadyList+0x74>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd34:	4a18      	ldr	r2, [pc, #96]	; (800dd98 <prvAddNewTaskToReadyList+0xd4>)
 800dd36:	6013      	str	r3, [r2, #0]
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	4413      	add	r3, r2
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	4a15      	ldr	r2, [pc, #84]	; (800dd9c <prvAddNewTaskToReadyList+0xd8>)
 800dd46:	441a      	add	r2, r3
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	3304      	adds	r3, #4
 800dd4c:	4619      	mov	r1, r3
 800dd4e:	4610      	mov	r0, r2
 800dd50:	f7ff f913 	bl	800cf7a <vListInsertEnd>
 800dd54:	f001 faae 	bl	800f2b4 <vPortExitCritical>
 800dd58:	4b0d      	ldr	r3, [pc, #52]	; (800dd90 <prvAddNewTaskToReadyList+0xcc>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d00e      	beq.n	800dd7e <prvAddNewTaskToReadyList+0xba>
 800dd60:	4b0a      	ldr	r3, [pc, #40]	; (800dd8c <prvAddNewTaskToReadyList+0xc8>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd6a:	429a      	cmp	r2, r3
 800dd6c:	d207      	bcs.n	800dd7e <prvAddNewTaskToReadyList+0xba>
 800dd6e:	4b0c      	ldr	r3, [pc, #48]	; (800dda0 <prvAddNewTaskToReadyList+0xdc>)
 800dd70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd74:	601a      	str	r2, [r3, #0]
 800dd76:	f3bf 8f4f 	dsb	sy
 800dd7a:	f3bf 8f6f 	isb	sy
 800dd7e:	bf00      	nop
 800dd80:	3708      	adds	r7, #8
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}
 800dd86:	bf00      	nop
 800dd88:	2000263c 	.word	0x2000263c
 800dd8c:	20002168 	.word	0x20002168
 800dd90:	20002648 	.word	0x20002648
 800dd94:	20002658 	.word	0x20002658
 800dd98:	20002644 	.word	0x20002644
 800dd9c:	2000216c 	.word	0x2000216c
 800dda0:	e000ed04 	.word	0xe000ed04

0800dda4 <vTaskDelayUntil>:
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b08a      	sub	sp, #40	; 0x28
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]
 800ddae:	2300      	movs	r3, #0
 800ddb0:	627b      	str	r3, [r7, #36]	; 0x24
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d10a      	bne.n	800ddce <vTaskDelayUntil+0x2a>
 800ddb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddbc:	f383 8811 	msr	BASEPRI, r3
 800ddc0:	f3bf 8f6f 	isb	sy
 800ddc4:	f3bf 8f4f 	dsb	sy
 800ddc8:	617b      	str	r3, [r7, #20]
 800ddca:	bf00      	nop
 800ddcc:	e7fe      	b.n	800ddcc <vTaskDelayUntil+0x28>
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d10a      	bne.n	800ddea <vTaskDelayUntil+0x46>
 800ddd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd8:	f383 8811 	msr	BASEPRI, r3
 800dddc:	f3bf 8f6f 	isb	sy
 800dde0:	f3bf 8f4f 	dsb	sy
 800dde4:	613b      	str	r3, [r7, #16]
 800dde6:	bf00      	nop
 800dde8:	e7fe      	b.n	800dde8 <vTaskDelayUntil+0x44>
 800ddea:	4b2a      	ldr	r3, [pc, #168]	; (800de94 <vTaskDelayUntil+0xf0>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d00a      	beq.n	800de08 <vTaskDelayUntil+0x64>
 800ddf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf6:	f383 8811 	msr	BASEPRI, r3
 800ddfa:	f3bf 8f6f 	isb	sy
 800ddfe:	f3bf 8f4f 	dsb	sy
 800de02:	60fb      	str	r3, [r7, #12]
 800de04:	bf00      	nop
 800de06:	e7fe      	b.n	800de06 <vTaskDelayUntil+0x62>
 800de08:	f000 f8e4 	bl	800dfd4 <vTaskSuspendAll>
 800de0c:	4b22      	ldr	r3, [pc, #136]	; (800de98 <vTaskDelayUntil+0xf4>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	623b      	str	r3, [r7, #32]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	683a      	ldr	r2, [r7, #0]
 800de18:	4413      	add	r3, r2
 800de1a:	61fb      	str	r3, [r7, #28]
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	6a3a      	ldr	r2, [r7, #32]
 800de22:	429a      	cmp	r2, r3
 800de24:	d20b      	bcs.n	800de3e <vTaskDelayUntil+0x9a>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	69fa      	ldr	r2, [r7, #28]
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d211      	bcs.n	800de54 <vTaskDelayUntil+0xb0>
 800de30:	69fa      	ldr	r2, [r7, #28]
 800de32:	6a3b      	ldr	r3, [r7, #32]
 800de34:	429a      	cmp	r2, r3
 800de36:	d90d      	bls.n	800de54 <vTaskDelayUntil+0xb0>
 800de38:	2301      	movs	r3, #1
 800de3a:	627b      	str	r3, [r7, #36]	; 0x24
 800de3c:	e00a      	b.n	800de54 <vTaskDelayUntil+0xb0>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	69fa      	ldr	r2, [r7, #28]
 800de44:	429a      	cmp	r2, r3
 800de46:	d303      	bcc.n	800de50 <vTaskDelayUntil+0xac>
 800de48:	69fa      	ldr	r2, [r7, #28]
 800de4a:	6a3b      	ldr	r3, [r7, #32]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d901      	bls.n	800de54 <vTaskDelayUntil+0xb0>
 800de50:	2301      	movs	r3, #1
 800de52:	627b      	str	r3, [r7, #36]	; 0x24
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	69fa      	ldr	r2, [r7, #28]
 800de58:	601a      	str	r2, [r3, #0]
 800de5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d006      	beq.n	800de6e <vTaskDelayUntil+0xca>
 800de60:	69fa      	ldr	r2, [r7, #28]
 800de62:	6a3b      	ldr	r3, [r7, #32]
 800de64:	1ad3      	subs	r3, r2, r3
 800de66:	2100      	movs	r1, #0
 800de68:	4618      	mov	r0, r3
 800de6a:	f000 fd21 	bl	800e8b0 <prvAddCurrentTaskToDelayedList>
 800de6e:	f000 f8bf 	bl	800dff0 <xTaskResumeAll>
 800de72:	61b8      	str	r0, [r7, #24]
 800de74:	69bb      	ldr	r3, [r7, #24]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d107      	bne.n	800de8a <vTaskDelayUntil+0xe6>
 800de7a:	4b08      	ldr	r3, [pc, #32]	; (800de9c <vTaskDelayUntil+0xf8>)
 800de7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de80:	601a      	str	r2, [r3, #0]
 800de82:	f3bf 8f4f 	dsb	sy
 800de86:	f3bf 8f6f 	isb	sy
 800de8a:	bf00      	nop
 800de8c:	3728      	adds	r7, #40	; 0x28
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	20002664 	.word	0x20002664
 800de98:	20002640 	.word	0x20002640
 800de9c:	e000ed04 	.word	0xe000ed04

0800dea0 <vTaskDelay>:
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	2300      	movs	r3, #0
 800deaa:	60fb      	str	r3, [r7, #12]
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d017      	beq.n	800dee2 <vTaskDelay+0x42>
 800deb2:	4b13      	ldr	r3, [pc, #76]	; (800df00 <vTaskDelay+0x60>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d00a      	beq.n	800ded0 <vTaskDelay+0x30>
 800deba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800debe:	f383 8811 	msr	BASEPRI, r3
 800dec2:	f3bf 8f6f 	isb	sy
 800dec6:	f3bf 8f4f 	dsb	sy
 800deca:	60bb      	str	r3, [r7, #8]
 800decc:	bf00      	nop
 800dece:	e7fe      	b.n	800dece <vTaskDelay+0x2e>
 800ded0:	f000 f880 	bl	800dfd4 <vTaskSuspendAll>
 800ded4:	2100      	movs	r1, #0
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f000 fcea 	bl	800e8b0 <prvAddCurrentTaskToDelayedList>
 800dedc:	f000 f888 	bl	800dff0 <xTaskResumeAll>
 800dee0:	60f8      	str	r0, [r7, #12]
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d107      	bne.n	800def8 <vTaskDelay+0x58>
 800dee8:	4b06      	ldr	r3, [pc, #24]	; (800df04 <vTaskDelay+0x64>)
 800deea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800deee:	601a      	str	r2, [r3, #0]
 800def0:	f3bf 8f4f 	dsb	sy
 800def4:	f3bf 8f6f 	isb	sy
 800def8:	bf00      	nop
 800defa:	3710      	adds	r7, #16
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}
 800df00:	20002664 	.word	0x20002664
 800df04:	e000ed04 	.word	0xe000ed04

0800df08 <vTaskStartScheduler>:
 800df08:	b580      	push	{r7, lr}
 800df0a:	b08a      	sub	sp, #40	; 0x28
 800df0c:	af04      	add	r7, sp, #16
 800df0e:	2300      	movs	r3, #0
 800df10:	60bb      	str	r3, [r7, #8]
 800df12:	2300      	movs	r3, #0
 800df14:	607b      	str	r3, [r7, #4]
 800df16:	463a      	mov	r2, r7
 800df18:	1d39      	adds	r1, r7, #4
 800df1a:	f107 0308 	add.w	r3, r7, #8
 800df1e:	4618      	mov	r0, r3
 800df20:	f7fe ffca 	bl	800ceb8 <vApplicationGetIdleTaskMemory>
 800df24:	6839      	ldr	r1, [r7, #0]
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	68ba      	ldr	r2, [r7, #8]
 800df2a:	9202      	str	r2, [sp, #8]
 800df2c:	9301      	str	r3, [sp, #4]
 800df2e:	2300      	movs	r3, #0
 800df30:	9300      	str	r3, [sp, #0]
 800df32:	2300      	movs	r3, #0
 800df34:	460a      	mov	r2, r1
 800df36:	4921      	ldr	r1, [pc, #132]	; (800dfbc <vTaskStartScheduler+0xb4>)
 800df38:	4821      	ldr	r0, [pc, #132]	; (800dfc0 <vTaskStartScheduler+0xb8>)
 800df3a:	f7ff fd91 	bl	800da60 <xTaskCreateStatic>
 800df3e:	4603      	mov	r3, r0
 800df40:	4a20      	ldr	r2, [pc, #128]	; (800dfc4 <vTaskStartScheduler+0xbc>)
 800df42:	6013      	str	r3, [r2, #0]
 800df44:	4b1f      	ldr	r3, [pc, #124]	; (800dfc4 <vTaskStartScheduler+0xbc>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d002      	beq.n	800df52 <vTaskStartScheduler+0x4a>
 800df4c:	2301      	movs	r3, #1
 800df4e:	617b      	str	r3, [r7, #20]
 800df50:	e001      	b.n	800df56 <vTaskStartScheduler+0x4e>
 800df52:	2300      	movs	r3, #0
 800df54:	617b      	str	r3, [r7, #20]
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	2b01      	cmp	r3, #1
 800df5a:	d102      	bne.n	800df62 <vTaskStartScheduler+0x5a>
 800df5c:	f000 fcfc 	bl	800e958 <xTimerCreateTimerTask>
 800df60:	6178      	str	r0, [r7, #20]
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	2b01      	cmp	r3, #1
 800df66:	d116      	bne.n	800df96 <vTaskStartScheduler+0x8e>
 800df68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df6c:	f383 8811 	msr	BASEPRI, r3
 800df70:	f3bf 8f6f 	isb	sy
 800df74:	f3bf 8f4f 	dsb	sy
 800df78:	613b      	str	r3, [r7, #16]
 800df7a:	bf00      	nop
 800df7c:	4b12      	ldr	r3, [pc, #72]	; (800dfc8 <vTaskStartScheduler+0xc0>)
 800df7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df82:	601a      	str	r2, [r3, #0]
 800df84:	4b11      	ldr	r3, [pc, #68]	; (800dfcc <vTaskStartScheduler+0xc4>)
 800df86:	2201      	movs	r2, #1
 800df88:	601a      	str	r2, [r3, #0]
 800df8a:	4b11      	ldr	r3, [pc, #68]	; (800dfd0 <vTaskStartScheduler+0xc8>)
 800df8c:	2200      	movs	r2, #0
 800df8e:	601a      	str	r2, [r3, #0]
 800df90:	f001 f8be 	bl	800f110 <xPortStartScheduler>
 800df94:	e00e      	b.n	800dfb4 <vTaskStartScheduler+0xac>
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df9c:	d10a      	bne.n	800dfb4 <vTaskStartScheduler+0xac>
 800df9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa2:	f383 8811 	msr	BASEPRI, r3
 800dfa6:	f3bf 8f6f 	isb	sy
 800dfaa:	f3bf 8f4f 	dsb	sy
 800dfae:	60fb      	str	r3, [r7, #12]
 800dfb0:	bf00      	nop
 800dfb2:	e7fe      	b.n	800dfb2 <vTaskStartScheduler+0xaa>
 800dfb4:	bf00      	nop
 800dfb6:	3718      	adds	r7, #24
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}
 800dfbc:	0801429c 	.word	0x0801429c
 800dfc0:	0800e5ed 	.word	0x0800e5ed
 800dfc4:	20002660 	.word	0x20002660
 800dfc8:	2000265c 	.word	0x2000265c
 800dfcc:	20002648 	.word	0x20002648
 800dfd0:	20002640 	.word	0x20002640

0800dfd4 <vTaskSuspendAll>:
 800dfd4:	b480      	push	{r7}
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	4b04      	ldr	r3, [pc, #16]	; (800dfec <vTaskSuspendAll+0x18>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	3301      	adds	r3, #1
 800dfde:	4a03      	ldr	r2, [pc, #12]	; (800dfec <vTaskSuspendAll+0x18>)
 800dfe0:	6013      	str	r3, [r2, #0]
 800dfe2:	bf00      	nop
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfea:	4770      	bx	lr
 800dfec:	20002664 	.word	0x20002664

0800dff0 <xTaskResumeAll>:
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b084      	sub	sp, #16
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	2300      	movs	r3, #0
 800dff8:	60fb      	str	r3, [r7, #12]
 800dffa:	2300      	movs	r3, #0
 800dffc:	60bb      	str	r3, [r7, #8]
 800dffe:	4b42      	ldr	r3, [pc, #264]	; (800e108 <xTaskResumeAll+0x118>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d10a      	bne.n	800e01c <xTaskResumeAll+0x2c>
 800e006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e00a:	f383 8811 	msr	BASEPRI, r3
 800e00e:	f3bf 8f6f 	isb	sy
 800e012:	f3bf 8f4f 	dsb	sy
 800e016:	603b      	str	r3, [r7, #0]
 800e018:	bf00      	nop
 800e01a:	e7fe      	b.n	800e01a <xTaskResumeAll+0x2a>
 800e01c:	f001 f91a 	bl	800f254 <vPortEnterCritical>
 800e020:	4b39      	ldr	r3, [pc, #228]	; (800e108 <xTaskResumeAll+0x118>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	3b01      	subs	r3, #1
 800e026:	4a38      	ldr	r2, [pc, #224]	; (800e108 <xTaskResumeAll+0x118>)
 800e028:	6013      	str	r3, [r2, #0]
 800e02a:	4b37      	ldr	r3, [pc, #220]	; (800e108 <xTaskResumeAll+0x118>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d162      	bne.n	800e0f8 <xTaskResumeAll+0x108>
 800e032:	4b36      	ldr	r3, [pc, #216]	; (800e10c <xTaskResumeAll+0x11c>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d05e      	beq.n	800e0f8 <xTaskResumeAll+0x108>
 800e03a:	e02f      	b.n	800e09c <xTaskResumeAll+0xac>
 800e03c:	4b34      	ldr	r3, [pc, #208]	; (800e110 <xTaskResumeAll+0x120>)
 800e03e:	68db      	ldr	r3, [r3, #12]
 800e040:	68db      	ldr	r3, [r3, #12]
 800e042:	60fb      	str	r3, [r7, #12]
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	3318      	adds	r3, #24
 800e048:	4618      	mov	r0, r3
 800e04a:	f7fe fff3 	bl	800d034 <uxListRemove>
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	3304      	adds	r3, #4
 800e052:	4618      	mov	r0, r3
 800e054:	f7fe ffee 	bl	800d034 <uxListRemove>
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e05c:	4b2d      	ldr	r3, [pc, #180]	; (800e114 <xTaskResumeAll+0x124>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	429a      	cmp	r2, r3
 800e062:	d903      	bls.n	800e06c <xTaskResumeAll+0x7c>
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e068:	4a2a      	ldr	r2, [pc, #168]	; (800e114 <xTaskResumeAll+0x124>)
 800e06a:	6013      	str	r3, [r2, #0]
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e070:	4613      	mov	r3, r2
 800e072:	009b      	lsls	r3, r3, #2
 800e074:	4413      	add	r3, r2
 800e076:	009b      	lsls	r3, r3, #2
 800e078:	4a27      	ldr	r2, [pc, #156]	; (800e118 <xTaskResumeAll+0x128>)
 800e07a:	441a      	add	r2, r3
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	3304      	adds	r3, #4
 800e080:	4619      	mov	r1, r3
 800e082:	4610      	mov	r0, r2
 800e084:	f7fe ff79 	bl	800cf7a <vListInsertEnd>
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e08c:	4b23      	ldr	r3, [pc, #140]	; (800e11c <xTaskResumeAll+0x12c>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e092:	429a      	cmp	r2, r3
 800e094:	d302      	bcc.n	800e09c <xTaskResumeAll+0xac>
 800e096:	4b22      	ldr	r3, [pc, #136]	; (800e120 <xTaskResumeAll+0x130>)
 800e098:	2201      	movs	r2, #1
 800e09a:	601a      	str	r2, [r3, #0]
 800e09c:	4b1c      	ldr	r3, [pc, #112]	; (800e110 <xTaskResumeAll+0x120>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d1cb      	bne.n	800e03c <xTaskResumeAll+0x4c>
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d001      	beq.n	800e0ae <xTaskResumeAll+0xbe>
 800e0aa:	f000 fb55 	bl	800e758 <prvResetNextTaskUnblockTime>
 800e0ae:	4b1d      	ldr	r3, [pc, #116]	; (800e124 <xTaskResumeAll+0x134>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	607b      	str	r3, [r7, #4]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d010      	beq.n	800e0dc <xTaskResumeAll+0xec>
 800e0ba:	f000 f847 	bl	800e14c <xTaskIncrementTick>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d002      	beq.n	800e0ca <xTaskResumeAll+0xda>
 800e0c4:	4b16      	ldr	r3, [pc, #88]	; (800e120 <xTaskResumeAll+0x130>)
 800e0c6:	2201      	movs	r2, #1
 800e0c8:	601a      	str	r2, [r3, #0]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	3b01      	subs	r3, #1
 800e0ce:	607b      	str	r3, [r7, #4]
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d1f1      	bne.n	800e0ba <xTaskResumeAll+0xca>
 800e0d6:	4b13      	ldr	r3, [pc, #76]	; (800e124 <xTaskResumeAll+0x134>)
 800e0d8:	2200      	movs	r2, #0
 800e0da:	601a      	str	r2, [r3, #0]
 800e0dc:	4b10      	ldr	r3, [pc, #64]	; (800e120 <xTaskResumeAll+0x130>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d009      	beq.n	800e0f8 <xTaskResumeAll+0x108>
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	60bb      	str	r3, [r7, #8]
 800e0e8:	4b0f      	ldr	r3, [pc, #60]	; (800e128 <xTaskResumeAll+0x138>)
 800e0ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0ee:	601a      	str	r2, [r3, #0]
 800e0f0:	f3bf 8f4f 	dsb	sy
 800e0f4:	f3bf 8f6f 	isb	sy
 800e0f8:	f001 f8dc 	bl	800f2b4 <vPortExitCritical>
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	4618      	mov	r0, r3
 800e100:	3710      	adds	r7, #16
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
 800e106:	bf00      	nop
 800e108:	20002664 	.word	0x20002664
 800e10c:	2000263c 	.word	0x2000263c
 800e110:	200025fc 	.word	0x200025fc
 800e114:	20002644 	.word	0x20002644
 800e118:	2000216c 	.word	0x2000216c
 800e11c:	20002168 	.word	0x20002168
 800e120:	20002650 	.word	0x20002650
 800e124:	2000264c 	.word	0x2000264c
 800e128:	e000ed04 	.word	0xe000ed04

0800e12c <xTaskGetTickCount>:
 800e12c:	b480      	push	{r7}
 800e12e:	b083      	sub	sp, #12
 800e130:	af00      	add	r7, sp, #0
 800e132:	4b05      	ldr	r3, [pc, #20]	; (800e148 <xTaskGetTickCount+0x1c>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	607b      	str	r3, [r7, #4]
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	4618      	mov	r0, r3
 800e13c:	370c      	adds	r7, #12
 800e13e:	46bd      	mov	sp, r7
 800e140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e144:	4770      	bx	lr
 800e146:	bf00      	nop
 800e148:	20002640 	.word	0x20002640

0800e14c <xTaskIncrementTick>:
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b086      	sub	sp, #24
 800e150:	af00      	add	r7, sp, #0
 800e152:	2300      	movs	r3, #0
 800e154:	617b      	str	r3, [r7, #20]
 800e156:	4b4f      	ldr	r3, [pc, #316]	; (800e294 <xTaskIncrementTick+0x148>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	f040 808f 	bne.w	800e27e <xTaskIncrementTick+0x132>
 800e160:	4b4d      	ldr	r3, [pc, #308]	; (800e298 <xTaskIncrementTick+0x14c>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	3301      	adds	r3, #1
 800e166:	613b      	str	r3, [r7, #16]
 800e168:	4a4b      	ldr	r2, [pc, #300]	; (800e298 <xTaskIncrementTick+0x14c>)
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	6013      	str	r3, [r2, #0]
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d120      	bne.n	800e1b6 <xTaskIncrementTick+0x6a>
 800e174:	4b49      	ldr	r3, [pc, #292]	; (800e29c <xTaskIncrementTick+0x150>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d00a      	beq.n	800e194 <xTaskIncrementTick+0x48>
 800e17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e182:	f383 8811 	msr	BASEPRI, r3
 800e186:	f3bf 8f6f 	isb	sy
 800e18a:	f3bf 8f4f 	dsb	sy
 800e18e:	603b      	str	r3, [r7, #0]
 800e190:	bf00      	nop
 800e192:	e7fe      	b.n	800e192 <xTaskIncrementTick+0x46>
 800e194:	4b41      	ldr	r3, [pc, #260]	; (800e29c <xTaskIncrementTick+0x150>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	60fb      	str	r3, [r7, #12]
 800e19a:	4b41      	ldr	r3, [pc, #260]	; (800e2a0 <xTaskIncrementTick+0x154>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	4a3f      	ldr	r2, [pc, #252]	; (800e29c <xTaskIncrementTick+0x150>)
 800e1a0:	6013      	str	r3, [r2, #0]
 800e1a2:	4a3f      	ldr	r2, [pc, #252]	; (800e2a0 <xTaskIncrementTick+0x154>)
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	6013      	str	r3, [r2, #0]
 800e1a8:	4b3e      	ldr	r3, [pc, #248]	; (800e2a4 <xTaskIncrementTick+0x158>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	3301      	adds	r3, #1
 800e1ae:	4a3d      	ldr	r2, [pc, #244]	; (800e2a4 <xTaskIncrementTick+0x158>)
 800e1b0:	6013      	str	r3, [r2, #0]
 800e1b2:	f000 fad1 	bl	800e758 <prvResetNextTaskUnblockTime>
 800e1b6:	4b3c      	ldr	r3, [pc, #240]	; (800e2a8 <xTaskIncrementTick+0x15c>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	693a      	ldr	r2, [r7, #16]
 800e1bc:	429a      	cmp	r2, r3
 800e1be:	d349      	bcc.n	800e254 <xTaskIncrementTick+0x108>
 800e1c0:	4b36      	ldr	r3, [pc, #216]	; (800e29c <xTaskIncrementTick+0x150>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d104      	bne.n	800e1d4 <xTaskIncrementTick+0x88>
 800e1ca:	4b37      	ldr	r3, [pc, #220]	; (800e2a8 <xTaskIncrementTick+0x15c>)
 800e1cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e1d0:	601a      	str	r2, [r3, #0]
 800e1d2:	e03f      	b.n	800e254 <xTaskIncrementTick+0x108>
 800e1d4:	4b31      	ldr	r3, [pc, #196]	; (800e29c <xTaskIncrementTick+0x150>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	68db      	ldr	r3, [r3, #12]
 800e1da:	68db      	ldr	r3, [r3, #12]
 800e1dc:	60bb      	str	r3, [r7, #8]
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	685b      	ldr	r3, [r3, #4]
 800e1e2:	607b      	str	r3, [r7, #4]
 800e1e4:	693a      	ldr	r2, [r7, #16]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	d203      	bcs.n	800e1f4 <xTaskIncrementTick+0xa8>
 800e1ec:	4a2e      	ldr	r2, [pc, #184]	; (800e2a8 <xTaskIncrementTick+0x15c>)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6013      	str	r3, [r2, #0]
 800e1f2:	e02f      	b.n	800e254 <xTaskIncrementTick+0x108>
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	3304      	adds	r3, #4
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f7fe ff1b 	bl	800d034 <uxListRemove>
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e202:	2b00      	cmp	r3, #0
 800e204:	d004      	beq.n	800e210 <xTaskIncrementTick+0xc4>
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	3318      	adds	r3, #24
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7fe ff12 	bl	800d034 <uxListRemove>
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e214:	4b25      	ldr	r3, [pc, #148]	; (800e2ac <xTaskIncrementTick+0x160>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	429a      	cmp	r2, r3
 800e21a:	d903      	bls.n	800e224 <xTaskIncrementTick+0xd8>
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e220:	4a22      	ldr	r2, [pc, #136]	; (800e2ac <xTaskIncrementTick+0x160>)
 800e222:	6013      	str	r3, [r2, #0]
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e228:	4613      	mov	r3, r2
 800e22a:	009b      	lsls	r3, r3, #2
 800e22c:	4413      	add	r3, r2
 800e22e:	009b      	lsls	r3, r3, #2
 800e230:	4a1f      	ldr	r2, [pc, #124]	; (800e2b0 <xTaskIncrementTick+0x164>)
 800e232:	441a      	add	r2, r3
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	3304      	adds	r3, #4
 800e238:	4619      	mov	r1, r3
 800e23a:	4610      	mov	r0, r2
 800e23c:	f7fe fe9d 	bl	800cf7a <vListInsertEnd>
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e244:	4b1b      	ldr	r3, [pc, #108]	; (800e2b4 <xTaskIncrementTick+0x168>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d3b8      	bcc.n	800e1c0 <xTaskIncrementTick+0x74>
 800e24e:	2301      	movs	r3, #1
 800e250:	617b      	str	r3, [r7, #20]
 800e252:	e7b5      	b.n	800e1c0 <xTaskIncrementTick+0x74>
 800e254:	4b17      	ldr	r3, [pc, #92]	; (800e2b4 <xTaskIncrementTick+0x168>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e25a:	4915      	ldr	r1, [pc, #84]	; (800e2b0 <xTaskIncrementTick+0x164>)
 800e25c:	4613      	mov	r3, r2
 800e25e:	009b      	lsls	r3, r3, #2
 800e260:	4413      	add	r3, r2
 800e262:	009b      	lsls	r3, r3, #2
 800e264:	440b      	add	r3, r1
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d901      	bls.n	800e270 <xTaskIncrementTick+0x124>
 800e26c:	2301      	movs	r3, #1
 800e26e:	617b      	str	r3, [r7, #20]
 800e270:	4b11      	ldr	r3, [pc, #68]	; (800e2b8 <xTaskIncrementTick+0x16c>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d007      	beq.n	800e288 <xTaskIncrementTick+0x13c>
 800e278:	2301      	movs	r3, #1
 800e27a:	617b      	str	r3, [r7, #20]
 800e27c:	e004      	b.n	800e288 <xTaskIncrementTick+0x13c>
 800e27e:	4b0f      	ldr	r3, [pc, #60]	; (800e2bc <xTaskIncrementTick+0x170>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	3301      	adds	r3, #1
 800e284:	4a0d      	ldr	r2, [pc, #52]	; (800e2bc <xTaskIncrementTick+0x170>)
 800e286:	6013      	str	r3, [r2, #0]
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	4618      	mov	r0, r3
 800e28c:	3718      	adds	r7, #24
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}
 800e292:	bf00      	nop
 800e294:	20002664 	.word	0x20002664
 800e298:	20002640 	.word	0x20002640
 800e29c:	200025f4 	.word	0x200025f4
 800e2a0:	200025f8 	.word	0x200025f8
 800e2a4:	20002654 	.word	0x20002654
 800e2a8:	2000265c 	.word	0x2000265c
 800e2ac:	20002644 	.word	0x20002644
 800e2b0:	2000216c 	.word	0x2000216c
 800e2b4:	20002168 	.word	0x20002168
 800e2b8:	20002650 	.word	0x20002650
 800e2bc:	2000264c 	.word	0x2000264c

0800e2c0 <vTaskSwitchContext>:
 800e2c0:	b480      	push	{r7}
 800e2c2:	b085      	sub	sp, #20
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	4b28      	ldr	r3, [pc, #160]	; (800e368 <vTaskSwitchContext+0xa8>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d003      	beq.n	800e2d6 <vTaskSwitchContext+0x16>
 800e2ce:	4b27      	ldr	r3, [pc, #156]	; (800e36c <vTaskSwitchContext+0xac>)
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	601a      	str	r2, [r3, #0]
 800e2d4:	e041      	b.n	800e35a <vTaskSwitchContext+0x9a>
 800e2d6:	4b25      	ldr	r3, [pc, #148]	; (800e36c <vTaskSwitchContext+0xac>)
 800e2d8:	2200      	movs	r2, #0
 800e2da:	601a      	str	r2, [r3, #0]
 800e2dc:	4b24      	ldr	r3, [pc, #144]	; (800e370 <vTaskSwitchContext+0xb0>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	60fb      	str	r3, [r7, #12]
 800e2e2:	e010      	b.n	800e306 <vTaskSwitchContext+0x46>
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d10a      	bne.n	800e300 <vTaskSwitchContext+0x40>
 800e2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ee:	f383 8811 	msr	BASEPRI, r3
 800e2f2:	f3bf 8f6f 	isb	sy
 800e2f6:	f3bf 8f4f 	dsb	sy
 800e2fa:	607b      	str	r3, [r7, #4]
 800e2fc:	bf00      	nop
 800e2fe:	e7fe      	b.n	800e2fe <vTaskSwitchContext+0x3e>
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	3b01      	subs	r3, #1
 800e304:	60fb      	str	r3, [r7, #12]
 800e306:	491b      	ldr	r1, [pc, #108]	; (800e374 <vTaskSwitchContext+0xb4>)
 800e308:	68fa      	ldr	r2, [r7, #12]
 800e30a:	4613      	mov	r3, r2
 800e30c:	009b      	lsls	r3, r3, #2
 800e30e:	4413      	add	r3, r2
 800e310:	009b      	lsls	r3, r3, #2
 800e312:	440b      	add	r3, r1
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d0e4      	beq.n	800e2e4 <vTaskSwitchContext+0x24>
 800e31a:	68fa      	ldr	r2, [r7, #12]
 800e31c:	4613      	mov	r3, r2
 800e31e:	009b      	lsls	r3, r3, #2
 800e320:	4413      	add	r3, r2
 800e322:	009b      	lsls	r3, r3, #2
 800e324:	4a13      	ldr	r2, [pc, #76]	; (800e374 <vTaskSwitchContext+0xb4>)
 800e326:	4413      	add	r3, r2
 800e328:	60bb      	str	r3, [r7, #8]
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	685b      	ldr	r3, [r3, #4]
 800e32e:	685a      	ldr	r2, [r3, #4]
 800e330:	68bb      	ldr	r3, [r7, #8]
 800e332:	605a      	str	r2, [r3, #4]
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	685a      	ldr	r2, [r3, #4]
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	3308      	adds	r3, #8
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d104      	bne.n	800e34a <vTaskSwitchContext+0x8a>
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	685b      	ldr	r3, [r3, #4]
 800e344:	685a      	ldr	r2, [r3, #4]
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	605a      	str	r2, [r3, #4]
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	68db      	ldr	r3, [r3, #12]
 800e350:	4a09      	ldr	r2, [pc, #36]	; (800e378 <vTaskSwitchContext+0xb8>)
 800e352:	6013      	str	r3, [r2, #0]
 800e354:	4a06      	ldr	r2, [pc, #24]	; (800e370 <vTaskSwitchContext+0xb0>)
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	6013      	str	r3, [r2, #0]
 800e35a:	bf00      	nop
 800e35c:	3714      	adds	r7, #20
 800e35e:	46bd      	mov	sp, r7
 800e360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e364:	4770      	bx	lr
 800e366:	bf00      	nop
 800e368:	20002664 	.word	0x20002664
 800e36c:	20002650 	.word	0x20002650
 800e370:	20002644 	.word	0x20002644
 800e374:	2000216c 	.word	0x2000216c
 800e378:	20002168 	.word	0x20002168

0800e37c <vTaskPlaceOnEventList>:
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b084      	sub	sp, #16
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	6039      	str	r1, [r7, #0]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d10a      	bne.n	800e3a2 <vTaskPlaceOnEventList+0x26>
 800e38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e390:	f383 8811 	msr	BASEPRI, r3
 800e394:	f3bf 8f6f 	isb	sy
 800e398:	f3bf 8f4f 	dsb	sy
 800e39c:	60fb      	str	r3, [r7, #12]
 800e39e:	bf00      	nop
 800e3a0:	e7fe      	b.n	800e3a0 <vTaskPlaceOnEventList+0x24>
 800e3a2:	4b07      	ldr	r3, [pc, #28]	; (800e3c0 <vTaskPlaceOnEventList+0x44>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	3318      	adds	r3, #24
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f7fe fe09 	bl	800cfc2 <vListInsert>
 800e3b0:	2101      	movs	r1, #1
 800e3b2:	6838      	ldr	r0, [r7, #0]
 800e3b4:	f000 fa7c 	bl	800e8b0 <prvAddCurrentTaskToDelayedList>
 800e3b8:	bf00      	nop
 800e3ba:	3710      	adds	r7, #16
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}
 800e3c0:	20002168 	.word	0x20002168

0800e3c4 <vTaskPlaceOnEventListRestricted>:
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b086      	sub	sp, #24
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	60f8      	str	r0, [r7, #12]
 800e3cc:	60b9      	str	r1, [r7, #8]
 800e3ce:	607a      	str	r2, [r7, #4]
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d10a      	bne.n	800e3ec <vTaskPlaceOnEventListRestricted+0x28>
 800e3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3da:	f383 8811 	msr	BASEPRI, r3
 800e3de:	f3bf 8f6f 	isb	sy
 800e3e2:	f3bf 8f4f 	dsb	sy
 800e3e6:	617b      	str	r3, [r7, #20]
 800e3e8:	bf00      	nop
 800e3ea:	e7fe      	b.n	800e3ea <vTaskPlaceOnEventListRestricted+0x26>
 800e3ec:	4b0a      	ldr	r3, [pc, #40]	; (800e418 <vTaskPlaceOnEventListRestricted+0x54>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	3318      	adds	r3, #24
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	68f8      	ldr	r0, [r7, #12]
 800e3f6:	f7fe fdc0 	bl	800cf7a <vListInsertEnd>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d002      	beq.n	800e406 <vTaskPlaceOnEventListRestricted+0x42>
 800e400:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e404:	60bb      	str	r3, [r7, #8]
 800e406:	6879      	ldr	r1, [r7, #4]
 800e408:	68b8      	ldr	r0, [r7, #8]
 800e40a:	f000 fa51 	bl	800e8b0 <prvAddCurrentTaskToDelayedList>
 800e40e:	bf00      	nop
 800e410:	3718      	adds	r7, #24
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}
 800e416:	bf00      	nop
 800e418:	20002168 	.word	0x20002168

0800e41c <xTaskRemoveFromEventList>:
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b086      	sub	sp, #24
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	68db      	ldr	r3, [r3, #12]
 800e428:	68db      	ldr	r3, [r3, #12]
 800e42a:	613b      	str	r3, [r7, #16]
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d10a      	bne.n	800e448 <xTaskRemoveFromEventList+0x2c>
 800e432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e436:	f383 8811 	msr	BASEPRI, r3
 800e43a:	f3bf 8f6f 	isb	sy
 800e43e:	f3bf 8f4f 	dsb	sy
 800e442:	60fb      	str	r3, [r7, #12]
 800e444:	bf00      	nop
 800e446:	e7fe      	b.n	800e446 <xTaskRemoveFromEventList+0x2a>
 800e448:	693b      	ldr	r3, [r7, #16]
 800e44a:	3318      	adds	r3, #24
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7fe fdf1 	bl	800d034 <uxListRemove>
 800e452:	4b1e      	ldr	r3, [pc, #120]	; (800e4cc <xTaskRemoveFromEventList+0xb0>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d11d      	bne.n	800e496 <xTaskRemoveFromEventList+0x7a>
 800e45a:	693b      	ldr	r3, [r7, #16]
 800e45c:	3304      	adds	r3, #4
 800e45e:	4618      	mov	r0, r3
 800e460:	f7fe fde8 	bl	800d034 <uxListRemove>
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e468:	4b19      	ldr	r3, [pc, #100]	; (800e4d0 <xTaskRemoveFromEventList+0xb4>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d903      	bls.n	800e478 <xTaskRemoveFromEventList+0x5c>
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e474:	4a16      	ldr	r2, [pc, #88]	; (800e4d0 <xTaskRemoveFromEventList+0xb4>)
 800e476:	6013      	str	r3, [r2, #0]
 800e478:	693b      	ldr	r3, [r7, #16]
 800e47a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e47c:	4613      	mov	r3, r2
 800e47e:	009b      	lsls	r3, r3, #2
 800e480:	4413      	add	r3, r2
 800e482:	009b      	lsls	r3, r3, #2
 800e484:	4a13      	ldr	r2, [pc, #76]	; (800e4d4 <xTaskRemoveFromEventList+0xb8>)
 800e486:	441a      	add	r2, r3
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	3304      	adds	r3, #4
 800e48c:	4619      	mov	r1, r3
 800e48e:	4610      	mov	r0, r2
 800e490:	f7fe fd73 	bl	800cf7a <vListInsertEnd>
 800e494:	e005      	b.n	800e4a2 <xTaskRemoveFromEventList+0x86>
 800e496:	693b      	ldr	r3, [r7, #16]
 800e498:	3318      	adds	r3, #24
 800e49a:	4619      	mov	r1, r3
 800e49c:	480e      	ldr	r0, [pc, #56]	; (800e4d8 <xTaskRemoveFromEventList+0xbc>)
 800e49e:	f7fe fd6c 	bl	800cf7a <vListInsertEnd>
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4a6:	4b0d      	ldr	r3, [pc, #52]	; (800e4dc <xTaskRemoveFromEventList+0xc0>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	d905      	bls.n	800e4bc <xTaskRemoveFromEventList+0xa0>
 800e4b0:	2301      	movs	r3, #1
 800e4b2:	617b      	str	r3, [r7, #20]
 800e4b4:	4b0a      	ldr	r3, [pc, #40]	; (800e4e0 <xTaskRemoveFromEventList+0xc4>)
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	601a      	str	r2, [r3, #0]
 800e4ba:	e001      	b.n	800e4c0 <xTaskRemoveFromEventList+0xa4>
 800e4bc:	2300      	movs	r3, #0
 800e4be:	617b      	str	r3, [r7, #20]
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3718      	adds	r7, #24
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}
 800e4ca:	bf00      	nop
 800e4cc:	20002664 	.word	0x20002664
 800e4d0:	20002644 	.word	0x20002644
 800e4d4:	2000216c 	.word	0x2000216c
 800e4d8:	200025fc 	.word	0x200025fc
 800e4dc:	20002168 	.word	0x20002168
 800e4e0:	20002650 	.word	0x20002650

0800e4e4 <vTaskInternalSetTimeOutState>:
 800e4e4:	b480      	push	{r7}
 800e4e6:	b083      	sub	sp, #12
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	4b06      	ldr	r3, [pc, #24]	; (800e508 <vTaskInternalSetTimeOutState+0x24>)
 800e4ee:	681a      	ldr	r2, [r3, #0]
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	601a      	str	r2, [r3, #0]
 800e4f4:	4b05      	ldr	r3, [pc, #20]	; (800e50c <vTaskInternalSetTimeOutState+0x28>)
 800e4f6:	681a      	ldr	r2, [r3, #0]
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	605a      	str	r2, [r3, #4]
 800e4fc:	bf00      	nop
 800e4fe:	370c      	adds	r7, #12
 800e500:	46bd      	mov	sp, r7
 800e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e506:	4770      	bx	lr
 800e508:	20002654 	.word	0x20002654
 800e50c:	20002640 	.word	0x20002640

0800e510 <xTaskCheckForTimeOut>:
 800e510:	b580      	push	{r7, lr}
 800e512:	b088      	sub	sp, #32
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	6039      	str	r1, [r7, #0]
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d10a      	bne.n	800e536 <xTaskCheckForTimeOut+0x26>
 800e520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e524:	f383 8811 	msr	BASEPRI, r3
 800e528:	f3bf 8f6f 	isb	sy
 800e52c:	f3bf 8f4f 	dsb	sy
 800e530:	613b      	str	r3, [r7, #16]
 800e532:	bf00      	nop
 800e534:	e7fe      	b.n	800e534 <xTaskCheckForTimeOut+0x24>
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d10a      	bne.n	800e552 <xTaskCheckForTimeOut+0x42>
 800e53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e540:	f383 8811 	msr	BASEPRI, r3
 800e544:	f3bf 8f6f 	isb	sy
 800e548:	f3bf 8f4f 	dsb	sy
 800e54c:	60fb      	str	r3, [r7, #12]
 800e54e:	bf00      	nop
 800e550:	e7fe      	b.n	800e550 <xTaskCheckForTimeOut+0x40>
 800e552:	f000 fe7f 	bl	800f254 <vPortEnterCritical>
 800e556:	4b1d      	ldr	r3, [pc, #116]	; (800e5cc <xTaskCheckForTimeOut+0xbc>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	61bb      	str	r3, [r7, #24]
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	69ba      	ldr	r2, [r7, #24]
 800e562:	1ad3      	subs	r3, r2, r3
 800e564:	617b      	str	r3, [r7, #20]
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e56e:	d102      	bne.n	800e576 <xTaskCheckForTimeOut+0x66>
 800e570:	2300      	movs	r3, #0
 800e572:	61fb      	str	r3, [r7, #28]
 800e574:	e023      	b.n	800e5be <xTaskCheckForTimeOut+0xae>
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681a      	ldr	r2, [r3, #0]
 800e57a:	4b15      	ldr	r3, [pc, #84]	; (800e5d0 <xTaskCheckForTimeOut+0xc0>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	429a      	cmp	r2, r3
 800e580:	d007      	beq.n	800e592 <xTaskCheckForTimeOut+0x82>
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	685b      	ldr	r3, [r3, #4]
 800e586:	69ba      	ldr	r2, [r7, #24]
 800e588:	429a      	cmp	r2, r3
 800e58a:	d302      	bcc.n	800e592 <xTaskCheckForTimeOut+0x82>
 800e58c:	2301      	movs	r3, #1
 800e58e:	61fb      	str	r3, [r7, #28]
 800e590:	e015      	b.n	800e5be <xTaskCheckForTimeOut+0xae>
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	697a      	ldr	r2, [r7, #20]
 800e598:	429a      	cmp	r2, r3
 800e59a:	d20b      	bcs.n	800e5b4 <xTaskCheckForTimeOut+0xa4>
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	681a      	ldr	r2, [r3, #0]
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	1ad2      	subs	r2, r2, r3
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	601a      	str	r2, [r3, #0]
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f7ff ff9b 	bl	800e4e4 <vTaskInternalSetTimeOutState>
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	61fb      	str	r3, [r7, #28]
 800e5b2:	e004      	b.n	800e5be <xTaskCheckForTimeOut+0xae>
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	601a      	str	r2, [r3, #0]
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	61fb      	str	r3, [r7, #28]
 800e5be:	f000 fe79 	bl	800f2b4 <vPortExitCritical>
 800e5c2:	69fb      	ldr	r3, [r7, #28]
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3720      	adds	r7, #32
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}
 800e5cc:	20002640 	.word	0x20002640
 800e5d0:	20002654 	.word	0x20002654

0800e5d4 <vTaskMissedYield>:
 800e5d4:	b480      	push	{r7}
 800e5d6:	af00      	add	r7, sp, #0
 800e5d8:	4b03      	ldr	r3, [pc, #12]	; (800e5e8 <vTaskMissedYield+0x14>)
 800e5da:	2201      	movs	r2, #1
 800e5dc:	601a      	str	r2, [r3, #0]
 800e5de:	bf00      	nop
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e6:	4770      	bx	lr
 800e5e8:	20002650 	.word	0x20002650

0800e5ec <prvIdleTask>:
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	f000 f852 	bl	800e69c <prvCheckTasksWaitingTermination>
 800e5f8:	4b06      	ldr	r3, [pc, #24]	; (800e614 <prvIdleTask+0x28>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	2b01      	cmp	r3, #1
 800e5fe:	d9f9      	bls.n	800e5f4 <prvIdleTask+0x8>
 800e600:	4b05      	ldr	r3, [pc, #20]	; (800e618 <prvIdleTask+0x2c>)
 800e602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e606:	601a      	str	r2, [r3, #0]
 800e608:	f3bf 8f4f 	dsb	sy
 800e60c:	f3bf 8f6f 	isb	sy
 800e610:	e7f0      	b.n	800e5f4 <prvIdleTask+0x8>
 800e612:	bf00      	nop
 800e614:	2000216c 	.word	0x2000216c
 800e618:	e000ed04 	.word	0xe000ed04

0800e61c <prvInitialiseTaskLists>:
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
 800e622:	2300      	movs	r3, #0
 800e624:	607b      	str	r3, [r7, #4]
 800e626:	e00c      	b.n	800e642 <prvInitialiseTaskLists+0x26>
 800e628:	687a      	ldr	r2, [r7, #4]
 800e62a:	4613      	mov	r3, r2
 800e62c:	009b      	lsls	r3, r3, #2
 800e62e:	4413      	add	r3, r2
 800e630:	009b      	lsls	r3, r3, #2
 800e632:	4a12      	ldr	r2, [pc, #72]	; (800e67c <prvInitialiseTaskLists+0x60>)
 800e634:	4413      	add	r3, r2
 800e636:	4618      	mov	r0, r3
 800e638:	f7fe fc72 	bl	800cf20 <vListInitialise>
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	3301      	adds	r3, #1
 800e640:	607b      	str	r3, [r7, #4]
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2b37      	cmp	r3, #55	; 0x37
 800e646:	d9ef      	bls.n	800e628 <prvInitialiseTaskLists+0xc>
 800e648:	480d      	ldr	r0, [pc, #52]	; (800e680 <prvInitialiseTaskLists+0x64>)
 800e64a:	f7fe fc69 	bl	800cf20 <vListInitialise>
 800e64e:	480d      	ldr	r0, [pc, #52]	; (800e684 <prvInitialiseTaskLists+0x68>)
 800e650:	f7fe fc66 	bl	800cf20 <vListInitialise>
 800e654:	480c      	ldr	r0, [pc, #48]	; (800e688 <prvInitialiseTaskLists+0x6c>)
 800e656:	f7fe fc63 	bl	800cf20 <vListInitialise>
 800e65a:	480c      	ldr	r0, [pc, #48]	; (800e68c <prvInitialiseTaskLists+0x70>)
 800e65c:	f7fe fc60 	bl	800cf20 <vListInitialise>
 800e660:	480b      	ldr	r0, [pc, #44]	; (800e690 <prvInitialiseTaskLists+0x74>)
 800e662:	f7fe fc5d 	bl	800cf20 <vListInitialise>
 800e666:	4b0b      	ldr	r3, [pc, #44]	; (800e694 <prvInitialiseTaskLists+0x78>)
 800e668:	4a05      	ldr	r2, [pc, #20]	; (800e680 <prvInitialiseTaskLists+0x64>)
 800e66a:	601a      	str	r2, [r3, #0]
 800e66c:	4b0a      	ldr	r3, [pc, #40]	; (800e698 <prvInitialiseTaskLists+0x7c>)
 800e66e:	4a05      	ldr	r2, [pc, #20]	; (800e684 <prvInitialiseTaskLists+0x68>)
 800e670:	601a      	str	r2, [r3, #0]
 800e672:	bf00      	nop
 800e674:	3708      	adds	r7, #8
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
 800e67a:	bf00      	nop
 800e67c:	2000216c 	.word	0x2000216c
 800e680:	200025cc 	.word	0x200025cc
 800e684:	200025e0 	.word	0x200025e0
 800e688:	200025fc 	.word	0x200025fc
 800e68c:	20002610 	.word	0x20002610
 800e690:	20002628 	.word	0x20002628
 800e694:	200025f4 	.word	0x200025f4
 800e698:	200025f8 	.word	0x200025f8

0800e69c <prvCheckTasksWaitingTermination>:
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b082      	sub	sp, #8
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	e019      	b.n	800e6d8 <prvCheckTasksWaitingTermination+0x3c>
 800e6a4:	f000 fdd6 	bl	800f254 <vPortEnterCritical>
 800e6a8:	4b10      	ldr	r3, [pc, #64]	; (800e6ec <prvCheckTasksWaitingTermination+0x50>)
 800e6aa:	68db      	ldr	r3, [r3, #12]
 800e6ac:	68db      	ldr	r3, [r3, #12]
 800e6ae:	607b      	str	r3, [r7, #4]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	3304      	adds	r3, #4
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7fe fcbd 	bl	800d034 <uxListRemove>
 800e6ba:	4b0d      	ldr	r3, [pc, #52]	; (800e6f0 <prvCheckTasksWaitingTermination+0x54>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	3b01      	subs	r3, #1
 800e6c0:	4a0b      	ldr	r2, [pc, #44]	; (800e6f0 <prvCheckTasksWaitingTermination+0x54>)
 800e6c2:	6013      	str	r3, [r2, #0]
 800e6c4:	4b0b      	ldr	r3, [pc, #44]	; (800e6f4 <prvCheckTasksWaitingTermination+0x58>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	3b01      	subs	r3, #1
 800e6ca:	4a0a      	ldr	r2, [pc, #40]	; (800e6f4 <prvCheckTasksWaitingTermination+0x58>)
 800e6cc:	6013      	str	r3, [r2, #0]
 800e6ce:	f000 fdf1 	bl	800f2b4 <vPortExitCritical>
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f000 f810 	bl	800e6f8 <prvDeleteTCB>
 800e6d8:	4b06      	ldr	r3, [pc, #24]	; (800e6f4 <prvCheckTasksWaitingTermination+0x58>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d1e1      	bne.n	800e6a4 <prvCheckTasksWaitingTermination+0x8>
 800e6e0:	bf00      	nop
 800e6e2:	bf00      	nop
 800e6e4:	3708      	adds	r7, #8
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}
 800e6ea:	bf00      	nop
 800e6ec:	20002610 	.word	0x20002610
 800e6f0:	2000263c 	.word	0x2000263c
 800e6f4:	20002624 	.word	0x20002624

0800e6f8 <prvDeleteTCB>:
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b084      	sub	sp, #16
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e706:	2b00      	cmp	r3, #0
 800e708:	d108      	bne.n	800e71c <prvDeleteTCB+0x24>
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e70e:	4618      	mov	r0, r3
 800e710:	f000 ff8e 	bl	800f630 <vPortFree>
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f000 ff8b 	bl	800f630 <vPortFree>
 800e71a:	e018      	b.n	800e74e <prvDeleteTCB+0x56>
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e722:	2b01      	cmp	r3, #1
 800e724:	d103      	bne.n	800e72e <prvDeleteTCB+0x36>
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f000 ff82 	bl	800f630 <vPortFree>
 800e72c:	e00f      	b.n	800e74e <prvDeleteTCB+0x56>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e734:	2b02      	cmp	r3, #2
 800e736:	d00a      	beq.n	800e74e <prvDeleteTCB+0x56>
 800e738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e73c:	f383 8811 	msr	BASEPRI, r3
 800e740:	f3bf 8f6f 	isb	sy
 800e744:	f3bf 8f4f 	dsb	sy
 800e748:	60fb      	str	r3, [r7, #12]
 800e74a:	bf00      	nop
 800e74c:	e7fe      	b.n	800e74c <prvDeleteTCB+0x54>
 800e74e:	bf00      	nop
 800e750:	3710      	adds	r7, #16
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}
	...

0800e758 <prvResetNextTaskUnblockTime>:
 800e758:	b480      	push	{r7}
 800e75a:	b083      	sub	sp, #12
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	4b0c      	ldr	r3, [pc, #48]	; (800e790 <prvResetNextTaskUnblockTime+0x38>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d104      	bne.n	800e772 <prvResetNextTaskUnblockTime+0x1a>
 800e768:	4b0a      	ldr	r3, [pc, #40]	; (800e794 <prvResetNextTaskUnblockTime+0x3c>)
 800e76a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e76e:	601a      	str	r2, [r3, #0]
 800e770:	e008      	b.n	800e784 <prvResetNextTaskUnblockTime+0x2c>
 800e772:	4b07      	ldr	r3, [pc, #28]	; (800e790 <prvResetNextTaskUnblockTime+0x38>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	68db      	ldr	r3, [r3, #12]
 800e778:	68db      	ldr	r3, [r3, #12]
 800e77a:	607b      	str	r3, [r7, #4]
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	685b      	ldr	r3, [r3, #4]
 800e780:	4a04      	ldr	r2, [pc, #16]	; (800e794 <prvResetNextTaskUnblockTime+0x3c>)
 800e782:	6013      	str	r3, [r2, #0]
 800e784:	bf00      	nop
 800e786:	370c      	adds	r7, #12
 800e788:	46bd      	mov	sp, r7
 800e78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78e:	4770      	bx	lr
 800e790:	200025f4 	.word	0x200025f4
 800e794:	2000265c 	.word	0x2000265c

0800e798 <xTaskGetSchedulerState>:
 800e798:	b480      	push	{r7}
 800e79a:	b083      	sub	sp, #12
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	4b0b      	ldr	r3, [pc, #44]	; (800e7cc <xTaskGetSchedulerState+0x34>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d102      	bne.n	800e7ac <xTaskGetSchedulerState+0x14>
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	607b      	str	r3, [r7, #4]
 800e7aa:	e008      	b.n	800e7be <xTaskGetSchedulerState+0x26>
 800e7ac:	4b08      	ldr	r3, [pc, #32]	; (800e7d0 <xTaskGetSchedulerState+0x38>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d102      	bne.n	800e7ba <xTaskGetSchedulerState+0x22>
 800e7b4:	2302      	movs	r3, #2
 800e7b6:	607b      	str	r3, [r7, #4]
 800e7b8:	e001      	b.n	800e7be <xTaskGetSchedulerState+0x26>
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	607b      	str	r3, [r7, #4]
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	370c      	adds	r7, #12
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr
 800e7cc:	20002648 	.word	0x20002648
 800e7d0:	20002664 	.word	0x20002664

0800e7d4 <xTaskPriorityDisinherit>:
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b086      	sub	sp, #24
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	613b      	str	r3, [r7, #16]
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	617b      	str	r3, [r7, #20]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d056      	beq.n	800e898 <xTaskPriorityDisinherit+0xc4>
 800e7ea:	4b2e      	ldr	r3, [pc, #184]	; (800e8a4 <xTaskPriorityDisinherit+0xd0>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	693a      	ldr	r2, [r7, #16]
 800e7f0:	429a      	cmp	r2, r3
 800e7f2:	d00a      	beq.n	800e80a <xTaskPriorityDisinherit+0x36>
 800e7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f8:	f383 8811 	msr	BASEPRI, r3
 800e7fc:	f3bf 8f6f 	isb	sy
 800e800:	f3bf 8f4f 	dsb	sy
 800e804:	60fb      	str	r3, [r7, #12]
 800e806:	bf00      	nop
 800e808:	e7fe      	b.n	800e808 <xTaskPriorityDisinherit+0x34>
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d10a      	bne.n	800e828 <xTaskPriorityDisinherit+0x54>
 800e812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e816:	f383 8811 	msr	BASEPRI, r3
 800e81a:	f3bf 8f6f 	isb	sy
 800e81e:	f3bf 8f4f 	dsb	sy
 800e822:	60bb      	str	r3, [r7, #8]
 800e824:	bf00      	nop
 800e826:	e7fe      	b.n	800e826 <xTaskPriorityDisinherit+0x52>
 800e828:	693b      	ldr	r3, [r7, #16]
 800e82a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e82c:	1e5a      	subs	r2, r3, #1
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	651a      	str	r2, [r3, #80]	; 0x50
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e836:	693b      	ldr	r3, [r7, #16]
 800e838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d02c      	beq.n	800e898 <xTaskPriorityDisinherit+0xc4>
 800e83e:	693b      	ldr	r3, [r7, #16]
 800e840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e842:	2b00      	cmp	r3, #0
 800e844:	d128      	bne.n	800e898 <xTaskPriorityDisinherit+0xc4>
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	3304      	adds	r3, #4
 800e84a:	4618      	mov	r0, r3
 800e84c:	f7fe fbf2 	bl	800d034 <uxListRemove>
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	62da      	str	r2, [r3, #44]	; 0x2c
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e85c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	619a      	str	r2, [r3, #24]
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e868:	4b0f      	ldr	r3, [pc, #60]	; (800e8a8 <xTaskPriorityDisinherit+0xd4>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d903      	bls.n	800e878 <xTaskPriorityDisinherit+0xa4>
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e874:	4a0c      	ldr	r2, [pc, #48]	; (800e8a8 <xTaskPriorityDisinherit+0xd4>)
 800e876:	6013      	str	r3, [r2, #0]
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e87c:	4613      	mov	r3, r2
 800e87e:	009b      	lsls	r3, r3, #2
 800e880:	4413      	add	r3, r2
 800e882:	009b      	lsls	r3, r3, #2
 800e884:	4a09      	ldr	r2, [pc, #36]	; (800e8ac <xTaskPriorityDisinherit+0xd8>)
 800e886:	441a      	add	r2, r3
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	3304      	adds	r3, #4
 800e88c:	4619      	mov	r1, r3
 800e88e:	4610      	mov	r0, r2
 800e890:	f7fe fb73 	bl	800cf7a <vListInsertEnd>
 800e894:	2301      	movs	r3, #1
 800e896:	617b      	str	r3, [r7, #20]
 800e898:	697b      	ldr	r3, [r7, #20]
 800e89a:	4618      	mov	r0, r3
 800e89c:	3718      	adds	r7, #24
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}
 800e8a2:	bf00      	nop
 800e8a4:	20002168 	.word	0x20002168
 800e8a8:	20002644 	.word	0x20002644
 800e8ac:	2000216c 	.word	0x2000216c

0800e8b0 <prvAddCurrentTaskToDelayedList>:
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b084      	sub	sp, #16
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	6039      	str	r1, [r7, #0]
 800e8ba:	4b21      	ldr	r3, [pc, #132]	; (800e940 <prvAddCurrentTaskToDelayedList+0x90>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	60fb      	str	r3, [r7, #12]
 800e8c0:	4b20      	ldr	r3, [pc, #128]	; (800e944 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	3304      	adds	r3, #4
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f7fe fbb4 	bl	800d034 <uxListRemove>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e8d2:	d10a      	bne.n	800e8ea <prvAddCurrentTaskToDelayedList+0x3a>
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d007      	beq.n	800e8ea <prvAddCurrentTaskToDelayedList+0x3a>
 800e8da:	4b1a      	ldr	r3, [pc, #104]	; (800e944 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	3304      	adds	r3, #4
 800e8e0:	4619      	mov	r1, r3
 800e8e2:	4819      	ldr	r0, [pc, #100]	; (800e948 <prvAddCurrentTaskToDelayedList+0x98>)
 800e8e4:	f7fe fb49 	bl	800cf7a <vListInsertEnd>
 800e8e8:	e026      	b.n	800e938 <prvAddCurrentTaskToDelayedList+0x88>
 800e8ea:	68fa      	ldr	r2, [r7, #12]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	4413      	add	r3, r2
 800e8f0:	60bb      	str	r3, [r7, #8]
 800e8f2:	4b14      	ldr	r3, [pc, #80]	; (800e944 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	68ba      	ldr	r2, [r7, #8]
 800e8f8:	605a      	str	r2, [r3, #4]
 800e8fa:	68ba      	ldr	r2, [r7, #8]
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d209      	bcs.n	800e916 <prvAddCurrentTaskToDelayedList+0x66>
 800e902:	4b12      	ldr	r3, [pc, #72]	; (800e94c <prvAddCurrentTaskToDelayedList+0x9c>)
 800e904:	681a      	ldr	r2, [r3, #0]
 800e906:	4b0f      	ldr	r3, [pc, #60]	; (800e944 <prvAddCurrentTaskToDelayedList+0x94>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	3304      	adds	r3, #4
 800e90c:	4619      	mov	r1, r3
 800e90e:	4610      	mov	r0, r2
 800e910:	f7fe fb57 	bl	800cfc2 <vListInsert>
 800e914:	e010      	b.n	800e938 <prvAddCurrentTaskToDelayedList+0x88>
 800e916:	4b0e      	ldr	r3, [pc, #56]	; (800e950 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e918:	681a      	ldr	r2, [r3, #0]
 800e91a:	4b0a      	ldr	r3, [pc, #40]	; (800e944 <prvAddCurrentTaskToDelayedList+0x94>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	3304      	adds	r3, #4
 800e920:	4619      	mov	r1, r3
 800e922:	4610      	mov	r0, r2
 800e924:	f7fe fb4d 	bl	800cfc2 <vListInsert>
 800e928:	4b0a      	ldr	r3, [pc, #40]	; (800e954 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	68ba      	ldr	r2, [r7, #8]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d202      	bcs.n	800e938 <prvAddCurrentTaskToDelayedList+0x88>
 800e932:	4a08      	ldr	r2, [pc, #32]	; (800e954 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	6013      	str	r3, [r2, #0]
 800e938:	bf00      	nop
 800e93a:	3710      	adds	r7, #16
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}
 800e940:	20002640 	.word	0x20002640
 800e944:	20002168 	.word	0x20002168
 800e948:	20002628 	.word	0x20002628
 800e94c:	200025f8 	.word	0x200025f8
 800e950:	200025f4 	.word	0x200025f4
 800e954:	2000265c 	.word	0x2000265c

0800e958 <xTimerCreateTimerTask>:
 800e958:	b580      	push	{r7, lr}
 800e95a:	b08a      	sub	sp, #40	; 0x28
 800e95c:	af04      	add	r7, sp, #16
 800e95e:	2300      	movs	r3, #0
 800e960:	617b      	str	r3, [r7, #20]
 800e962:	f000 fb07 	bl	800ef74 <prvCheckForValidListAndQueue>
 800e966:	4b1c      	ldr	r3, [pc, #112]	; (800e9d8 <xTimerCreateTimerTask+0x80>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d021      	beq.n	800e9b2 <xTimerCreateTimerTask+0x5a>
 800e96e:	2300      	movs	r3, #0
 800e970:	60fb      	str	r3, [r7, #12]
 800e972:	2300      	movs	r3, #0
 800e974:	60bb      	str	r3, [r7, #8]
 800e976:	1d3a      	adds	r2, r7, #4
 800e978:	f107 0108 	add.w	r1, r7, #8
 800e97c:	f107 030c 	add.w	r3, r7, #12
 800e980:	4618      	mov	r0, r3
 800e982:	f7fe fab3 	bl	800ceec <vApplicationGetTimerTaskMemory>
 800e986:	6879      	ldr	r1, [r7, #4]
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	68fa      	ldr	r2, [r7, #12]
 800e98c:	9202      	str	r2, [sp, #8]
 800e98e:	9301      	str	r3, [sp, #4]
 800e990:	2302      	movs	r3, #2
 800e992:	9300      	str	r3, [sp, #0]
 800e994:	2300      	movs	r3, #0
 800e996:	460a      	mov	r2, r1
 800e998:	4910      	ldr	r1, [pc, #64]	; (800e9dc <xTimerCreateTimerTask+0x84>)
 800e99a:	4811      	ldr	r0, [pc, #68]	; (800e9e0 <xTimerCreateTimerTask+0x88>)
 800e99c:	f7ff f860 	bl	800da60 <xTaskCreateStatic>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	4a10      	ldr	r2, [pc, #64]	; (800e9e4 <xTimerCreateTimerTask+0x8c>)
 800e9a4:	6013      	str	r3, [r2, #0]
 800e9a6:	4b0f      	ldr	r3, [pc, #60]	; (800e9e4 <xTimerCreateTimerTask+0x8c>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d001      	beq.n	800e9b2 <xTimerCreateTimerTask+0x5a>
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	617b      	str	r3, [r7, #20]
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d10a      	bne.n	800e9ce <xTimerCreateTimerTask+0x76>
 800e9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9bc:	f383 8811 	msr	BASEPRI, r3
 800e9c0:	f3bf 8f6f 	isb	sy
 800e9c4:	f3bf 8f4f 	dsb	sy
 800e9c8:	613b      	str	r3, [r7, #16]
 800e9ca:	bf00      	nop
 800e9cc:	e7fe      	b.n	800e9cc <xTimerCreateTimerTask+0x74>
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3718      	adds	r7, #24
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	20002698 	.word	0x20002698
 800e9dc:	080142a4 	.word	0x080142a4
 800e9e0:	0800eb1d 	.word	0x0800eb1d
 800e9e4:	2000269c 	.word	0x2000269c

0800e9e8 <xTimerGenericCommand>:
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b08a      	sub	sp, #40	; 0x28
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	60f8      	str	r0, [r7, #12]
 800e9f0:	60b9      	str	r1, [r7, #8]
 800e9f2:	607a      	str	r2, [r7, #4]
 800e9f4:	603b      	str	r3, [r7, #0]
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	627b      	str	r3, [r7, #36]	; 0x24
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d10a      	bne.n	800ea16 <xTimerGenericCommand+0x2e>
 800ea00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea04:	f383 8811 	msr	BASEPRI, r3
 800ea08:	f3bf 8f6f 	isb	sy
 800ea0c:	f3bf 8f4f 	dsb	sy
 800ea10:	623b      	str	r3, [r7, #32]
 800ea12:	bf00      	nop
 800ea14:	e7fe      	b.n	800ea14 <xTimerGenericCommand+0x2c>
 800ea16:	4b1a      	ldr	r3, [pc, #104]	; (800ea80 <xTimerGenericCommand+0x98>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d02a      	beq.n	800ea74 <xTimerGenericCommand+0x8c>
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	613b      	str	r3, [r7, #16]
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	617b      	str	r3, [r7, #20]
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	61bb      	str	r3, [r7, #24]
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	2b05      	cmp	r3, #5
 800ea2e:	dc18      	bgt.n	800ea62 <xTimerGenericCommand+0x7a>
 800ea30:	f7ff feb2 	bl	800e798 <xTaskGetSchedulerState>
 800ea34:	4603      	mov	r3, r0
 800ea36:	2b02      	cmp	r3, #2
 800ea38:	d109      	bne.n	800ea4e <xTimerGenericCommand+0x66>
 800ea3a:	4b11      	ldr	r3, [pc, #68]	; (800ea80 <xTimerGenericCommand+0x98>)
 800ea3c:	6818      	ldr	r0, [r3, #0]
 800ea3e:	f107 0110 	add.w	r1, r7, #16
 800ea42:	2300      	movs	r3, #0
 800ea44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea46:	f7fe fc23 	bl	800d290 <xQueueGenericSend>
 800ea4a:	6278      	str	r0, [r7, #36]	; 0x24
 800ea4c:	e012      	b.n	800ea74 <xTimerGenericCommand+0x8c>
 800ea4e:	4b0c      	ldr	r3, [pc, #48]	; (800ea80 <xTimerGenericCommand+0x98>)
 800ea50:	6818      	ldr	r0, [r3, #0]
 800ea52:	f107 0110 	add.w	r1, r7, #16
 800ea56:	2300      	movs	r3, #0
 800ea58:	2200      	movs	r2, #0
 800ea5a:	f7fe fc19 	bl	800d290 <xQueueGenericSend>
 800ea5e:	6278      	str	r0, [r7, #36]	; 0x24
 800ea60:	e008      	b.n	800ea74 <xTimerGenericCommand+0x8c>
 800ea62:	4b07      	ldr	r3, [pc, #28]	; (800ea80 <xTimerGenericCommand+0x98>)
 800ea64:	6818      	ldr	r0, [r3, #0]
 800ea66:	f107 0110 	add.w	r1, r7, #16
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	683a      	ldr	r2, [r7, #0]
 800ea6e:	f7fe fd0d 	bl	800d48c <xQueueGenericSendFromISR>
 800ea72:	6278      	str	r0, [r7, #36]	; 0x24
 800ea74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea76:	4618      	mov	r0, r3
 800ea78:	3728      	adds	r7, #40	; 0x28
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	20002698 	.word	0x20002698

0800ea84 <prvProcessExpiredTimer>:
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b088      	sub	sp, #32
 800ea88:	af02      	add	r7, sp, #8
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
 800ea8e:	4b22      	ldr	r3, [pc, #136]	; (800eb18 <prvProcessExpiredTimer+0x94>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	68db      	ldr	r3, [r3, #12]
 800ea94:	68db      	ldr	r3, [r3, #12]
 800ea96:	617b      	str	r3, [r7, #20]
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	3304      	adds	r3, #4
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f7fe fac9 	bl	800d034 <uxListRemove>
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eaa8:	f003 0304 	and.w	r3, r3, #4
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d022      	beq.n	800eaf6 <prvProcessExpiredTimer+0x72>
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	699a      	ldr	r2, [r3, #24]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	18d1      	adds	r1, r2, r3
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	683a      	ldr	r2, [r7, #0]
 800eabc:	6978      	ldr	r0, [r7, #20]
 800eabe:	f000 f8d1 	bl	800ec64 <prvInsertTimerInActiveList>
 800eac2:	4603      	mov	r3, r0
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d01f      	beq.n	800eb08 <prvProcessExpiredTimer+0x84>
 800eac8:	2300      	movs	r3, #0
 800eaca:	9300      	str	r3, [sp, #0]
 800eacc:	2300      	movs	r3, #0
 800eace:	687a      	ldr	r2, [r7, #4]
 800ead0:	2100      	movs	r1, #0
 800ead2:	6978      	ldr	r0, [r7, #20]
 800ead4:	f7ff ff88 	bl	800e9e8 <xTimerGenericCommand>
 800ead8:	6138      	str	r0, [r7, #16]
 800eada:	693b      	ldr	r3, [r7, #16]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d113      	bne.n	800eb08 <prvProcessExpiredTimer+0x84>
 800eae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae4:	f383 8811 	msr	BASEPRI, r3
 800eae8:	f3bf 8f6f 	isb	sy
 800eaec:	f3bf 8f4f 	dsb	sy
 800eaf0:	60fb      	str	r3, [r7, #12]
 800eaf2:	bf00      	nop
 800eaf4:	e7fe      	b.n	800eaf4 <prvProcessExpiredTimer+0x70>
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eafc:	f023 0301 	bic.w	r3, r3, #1
 800eb00:	b2da      	uxtb	r2, r3
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	6a1b      	ldr	r3, [r3, #32]
 800eb0c:	6978      	ldr	r0, [r7, #20]
 800eb0e:	4798      	blx	r3
 800eb10:	bf00      	nop
 800eb12:	3718      	adds	r7, #24
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}
 800eb18:	20002690 	.word	0x20002690

0800eb1c <prvTimerTask>:
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b084      	sub	sp, #16
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	f107 0308 	add.w	r3, r7, #8
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f000 f857 	bl	800ebdc <prvGetNextExpireTime>
 800eb2e:	60f8      	str	r0, [r7, #12]
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	4619      	mov	r1, r3
 800eb34:	68f8      	ldr	r0, [r7, #12]
 800eb36:	f000 f803 	bl	800eb40 <prvProcessTimerOrBlockTask>
 800eb3a:	f000 f8d5 	bl	800ece8 <prvProcessReceivedCommands>
 800eb3e:	e7f1      	b.n	800eb24 <prvTimerTask+0x8>

0800eb40 <prvProcessTimerOrBlockTask>:
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b084      	sub	sp, #16
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
 800eb48:	6039      	str	r1, [r7, #0]
 800eb4a:	f7ff fa43 	bl	800dfd4 <vTaskSuspendAll>
 800eb4e:	f107 0308 	add.w	r3, r7, #8
 800eb52:	4618      	mov	r0, r3
 800eb54:	f000 f866 	bl	800ec24 <prvSampleTimeNow>
 800eb58:	60f8      	str	r0, [r7, #12]
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d130      	bne.n	800ebc2 <prvProcessTimerOrBlockTask+0x82>
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d10a      	bne.n	800eb7c <prvProcessTimerOrBlockTask+0x3c>
 800eb66:	687a      	ldr	r2, [r7, #4]
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	d806      	bhi.n	800eb7c <prvProcessTimerOrBlockTask+0x3c>
 800eb6e:	f7ff fa3f 	bl	800dff0 <xTaskResumeAll>
 800eb72:	68f9      	ldr	r1, [r7, #12]
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f7ff ff85 	bl	800ea84 <prvProcessExpiredTimer>
 800eb7a:	e024      	b.n	800ebc6 <prvProcessTimerOrBlockTask+0x86>
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d008      	beq.n	800eb94 <prvProcessTimerOrBlockTask+0x54>
 800eb82:	4b13      	ldr	r3, [pc, #76]	; (800ebd0 <prvProcessTimerOrBlockTask+0x90>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d101      	bne.n	800eb90 <prvProcessTimerOrBlockTask+0x50>
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	e000      	b.n	800eb92 <prvProcessTimerOrBlockTask+0x52>
 800eb90:	2300      	movs	r3, #0
 800eb92:	603b      	str	r3, [r7, #0]
 800eb94:	4b0f      	ldr	r3, [pc, #60]	; (800ebd4 <prvProcessTimerOrBlockTask+0x94>)
 800eb96:	6818      	ldr	r0, [r3, #0]
 800eb98:	687a      	ldr	r2, [r7, #4]
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	1ad3      	subs	r3, r2, r3
 800eb9e:	683a      	ldr	r2, [r7, #0]
 800eba0:	4619      	mov	r1, r3
 800eba2:	f7fe ff29 	bl	800d9f8 <vQueueWaitForMessageRestricted>
 800eba6:	f7ff fa23 	bl	800dff0 <xTaskResumeAll>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d10a      	bne.n	800ebc6 <prvProcessTimerOrBlockTask+0x86>
 800ebb0:	4b09      	ldr	r3, [pc, #36]	; (800ebd8 <prvProcessTimerOrBlockTask+0x98>)
 800ebb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebb6:	601a      	str	r2, [r3, #0]
 800ebb8:	f3bf 8f4f 	dsb	sy
 800ebbc:	f3bf 8f6f 	isb	sy
 800ebc0:	e001      	b.n	800ebc6 <prvProcessTimerOrBlockTask+0x86>
 800ebc2:	f7ff fa15 	bl	800dff0 <xTaskResumeAll>
 800ebc6:	bf00      	nop
 800ebc8:	3710      	adds	r7, #16
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}
 800ebce:	bf00      	nop
 800ebd0:	20002694 	.word	0x20002694
 800ebd4:	20002698 	.word	0x20002698
 800ebd8:	e000ed04 	.word	0xe000ed04

0800ebdc <prvGetNextExpireTime>:
 800ebdc:	b480      	push	{r7}
 800ebde:	b085      	sub	sp, #20
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	4b0e      	ldr	r3, [pc, #56]	; (800ec20 <prvGetNextExpireTime+0x44>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d101      	bne.n	800ebf2 <prvGetNextExpireTime+0x16>
 800ebee:	2201      	movs	r2, #1
 800ebf0:	e000      	b.n	800ebf4 <prvGetNextExpireTime+0x18>
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	601a      	str	r2, [r3, #0]
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d105      	bne.n	800ec0c <prvGetNextExpireTime+0x30>
 800ec00:	4b07      	ldr	r3, [pc, #28]	; (800ec20 <prvGetNextExpireTime+0x44>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	68db      	ldr	r3, [r3, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	60fb      	str	r3, [r7, #12]
 800ec0a:	e001      	b.n	800ec10 <prvGetNextExpireTime+0x34>
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	60fb      	str	r3, [r7, #12]
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	4618      	mov	r0, r3
 800ec14:	3714      	adds	r7, #20
 800ec16:	46bd      	mov	sp, r7
 800ec18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1c:	4770      	bx	lr
 800ec1e:	bf00      	nop
 800ec20:	20002690 	.word	0x20002690

0800ec24 <prvSampleTimeNow>:
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b084      	sub	sp, #16
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
 800ec2c:	f7ff fa7e 	bl	800e12c <xTaskGetTickCount>
 800ec30:	60f8      	str	r0, [r7, #12]
 800ec32:	4b0b      	ldr	r3, [pc, #44]	; (800ec60 <prvSampleTimeNow+0x3c>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	68fa      	ldr	r2, [r7, #12]
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d205      	bcs.n	800ec48 <prvSampleTimeNow+0x24>
 800ec3c:	f000 f936 	bl	800eeac <prvSwitchTimerLists>
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2201      	movs	r2, #1
 800ec44:	601a      	str	r2, [r3, #0]
 800ec46:	e002      	b.n	800ec4e <prvSampleTimeNow+0x2a>
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	601a      	str	r2, [r3, #0]
 800ec4e:	4a04      	ldr	r2, [pc, #16]	; (800ec60 <prvSampleTimeNow+0x3c>)
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	6013      	str	r3, [r2, #0]
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	4618      	mov	r0, r3
 800ec58:	3710      	adds	r7, #16
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}
 800ec5e:	bf00      	nop
 800ec60:	200026a0 	.word	0x200026a0

0800ec64 <prvInsertTimerInActiveList>:
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b086      	sub	sp, #24
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	60f8      	str	r0, [r7, #12]
 800ec6c:	60b9      	str	r1, [r7, #8]
 800ec6e:	607a      	str	r2, [r7, #4]
 800ec70:	603b      	str	r3, [r7, #0]
 800ec72:	2300      	movs	r3, #0
 800ec74:	617b      	str	r3, [r7, #20]
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	68ba      	ldr	r2, [r7, #8]
 800ec7a:	605a      	str	r2, [r3, #4]
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	68fa      	ldr	r2, [r7, #12]
 800ec80:	611a      	str	r2, [r3, #16]
 800ec82:	68ba      	ldr	r2, [r7, #8]
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d812      	bhi.n	800ecb0 <prvInsertTimerInActiveList+0x4c>
 800ec8a:	687a      	ldr	r2, [r7, #4]
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	1ad2      	subs	r2, r2, r3
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	699b      	ldr	r3, [r3, #24]
 800ec94:	429a      	cmp	r2, r3
 800ec96:	d302      	bcc.n	800ec9e <prvInsertTimerInActiveList+0x3a>
 800ec98:	2301      	movs	r3, #1
 800ec9a:	617b      	str	r3, [r7, #20]
 800ec9c:	e01b      	b.n	800ecd6 <prvInsertTimerInActiveList+0x72>
 800ec9e:	4b10      	ldr	r3, [pc, #64]	; (800ece0 <prvInsertTimerInActiveList+0x7c>)
 800eca0:	681a      	ldr	r2, [r3, #0]
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	3304      	adds	r3, #4
 800eca6:	4619      	mov	r1, r3
 800eca8:	4610      	mov	r0, r2
 800ecaa:	f7fe f98a 	bl	800cfc2 <vListInsert>
 800ecae:	e012      	b.n	800ecd6 <prvInsertTimerInActiveList+0x72>
 800ecb0:	687a      	ldr	r2, [r7, #4]
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	d206      	bcs.n	800ecc6 <prvInsertTimerInActiveList+0x62>
 800ecb8:	68ba      	ldr	r2, [r7, #8]
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d302      	bcc.n	800ecc6 <prvInsertTimerInActiveList+0x62>
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	617b      	str	r3, [r7, #20]
 800ecc4:	e007      	b.n	800ecd6 <prvInsertTimerInActiveList+0x72>
 800ecc6:	4b07      	ldr	r3, [pc, #28]	; (800ece4 <prvInsertTimerInActiveList+0x80>)
 800ecc8:	681a      	ldr	r2, [r3, #0]
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	3304      	adds	r3, #4
 800ecce:	4619      	mov	r1, r3
 800ecd0:	4610      	mov	r0, r2
 800ecd2:	f7fe f976 	bl	800cfc2 <vListInsert>
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3718      	adds	r7, #24
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}
 800ece0:	20002694 	.word	0x20002694
 800ece4:	20002690 	.word	0x20002690

0800ece8 <prvProcessReceivedCommands>:
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b08e      	sub	sp, #56	; 0x38
 800ecec:	af02      	add	r7, sp, #8
 800ecee:	e0ca      	b.n	800ee86 <prvProcessReceivedCommands+0x19e>
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	da18      	bge.n	800ed28 <prvProcessReceivedCommands+0x40>
 800ecf6:	1d3b      	adds	r3, r7, #4
 800ecf8:	3304      	adds	r3, #4
 800ecfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ecfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d10a      	bne.n	800ed18 <prvProcessReceivedCommands+0x30>
 800ed02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed06:	f383 8811 	msr	BASEPRI, r3
 800ed0a:	f3bf 8f6f 	isb	sy
 800ed0e:	f3bf 8f4f 	dsb	sy
 800ed12:	61fb      	str	r3, [r7, #28]
 800ed14:	bf00      	nop
 800ed16:	e7fe      	b.n	800ed16 <prvProcessReceivedCommands+0x2e>
 800ed18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed1e:	6850      	ldr	r0, [r2, #4]
 800ed20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed22:	6892      	ldr	r2, [r2, #8]
 800ed24:	4611      	mov	r1, r2
 800ed26:	4798      	blx	r3
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	f2c0 80aa 	blt.w	800ee84 <prvProcessReceivedCommands+0x19c>
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed36:	695b      	ldr	r3, [r3, #20]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d004      	beq.n	800ed46 <prvProcessReceivedCommands+0x5e>
 800ed3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed3e:	3304      	adds	r3, #4
 800ed40:	4618      	mov	r0, r3
 800ed42:	f7fe f977 	bl	800d034 <uxListRemove>
 800ed46:	463b      	mov	r3, r7
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7ff ff6b 	bl	800ec24 <prvSampleTimeNow>
 800ed4e:	6278      	str	r0, [r7, #36]	; 0x24
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2b09      	cmp	r3, #9
 800ed54:	f200 8097 	bhi.w	800ee86 <prvProcessReceivedCommands+0x19e>
 800ed58:	a201      	add	r2, pc, #4	; (adr r2, 800ed60 <prvProcessReceivedCommands+0x78>)
 800ed5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed5e:	bf00      	nop
 800ed60:	0800ed89 	.word	0x0800ed89
 800ed64:	0800ed89 	.word	0x0800ed89
 800ed68:	0800ed89 	.word	0x0800ed89
 800ed6c:	0800edfd 	.word	0x0800edfd
 800ed70:	0800ee11 	.word	0x0800ee11
 800ed74:	0800ee5b 	.word	0x0800ee5b
 800ed78:	0800ed89 	.word	0x0800ed89
 800ed7c:	0800ed89 	.word	0x0800ed89
 800ed80:	0800edfd 	.word	0x0800edfd
 800ed84:	0800ee11 	.word	0x0800ee11
 800ed88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed8e:	f043 0301 	orr.w	r3, r3, #1
 800ed92:	b2da      	uxtb	r2, r3
 800ed94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800ed9a:	68ba      	ldr	r2, [r7, #8]
 800ed9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed9e:	699b      	ldr	r3, [r3, #24]
 800eda0:	18d1      	adds	r1, r2, r3
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eda6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eda8:	f7ff ff5c 	bl	800ec64 <prvInsertTimerInActiveList>
 800edac:	4603      	mov	r3, r0
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d069      	beq.n	800ee86 <prvProcessReceivedCommands+0x19e>
 800edb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edb4:	6a1b      	ldr	r3, [r3, #32]
 800edb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800edb8:	4798      	blx	r3
 800edba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edc0:	f003 0304 	and.w	r3, r3, #4
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d05e      	beq.n	800ee86 <prvProcessReceivedCommands+0x19e>
 800edc8:	68ba      	ldr	r2, [r7, #8]
 800edca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edcc:	699b      	ldr	r3, [r3, #24]
 800edce:	441a      	add	r2, r3
 800edd0:	2300      	movs	r3, #0
 800edd2:	9300      	str	r3, [sp, #0]
 800edd4:	2300      	movs	r3, #0
 800edd6:	2100      	movs	r1, #0
 800edd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800edda:	f7ff fe05 	bl	800e9e8 <xTimerGenericCommand>
 800edde:	6238      	str	r0, [r7, #32]
 800ede0:	6a3b      	ldr	r3, [r7, #32]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d14f      	bne.n	800ee86 <prvProcessReceivedCommands+0x19e>
 800ede6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edea:	f383 8811 	msr	BASEPRI, r3
 800edee:	f3bf 8f6f 	isb	sy
 800edf2:	f3bf 8f4f 	dsb	sy
 800edf6:	61bb      	str	r3, [r7, #24]
 800edf8:	bf00      	nop
 800edfa:	e7fe      	b.n	800edfa <prvProcessReceivedCommands+0x112>
 800edfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee02:	f023 0301 	bic.w	r3, r3, #1
 800ee06:	b2da      	uxtb	r2, r3
 800ee08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800ee0e:	e03a      	b.n	800ee86 <prvProcessReceivedCommands+0x19e>
 800ee10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee16:	f043 0301 	orr.w	r3, r3, #1
 800ee1a:	b2da      	uxtb	r2, r3
 800ee1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800ee22:	68ba      	ldr	r2, [r7, #8]
 800ee24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee26:	619a      	str	r2, [r3, #24]
 800ee28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee2a:	699b      	ldr	r3, [r3, #24]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d10a      	bne.n	800ee46 <prvProcessReceivedCommands+0x15e>
 800ee30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee34:	f383 8811 	msr	BASEPRI, r3
 800ee38:	f3bf 8f6f 	isb	sy
 800ee3c:	f3bf 8f4f 	dsb	sy
 800ee40:	617b      	str	r3, [r7, #20]
 800ee42:	bf00      	nop
 800ee44:	e7fe      	b.n	800ee44 <prvProcessReceivedCommands+0x15c>
 800ee46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee48:	699a      	ldr	r2, [r3, #24]
 800ee4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee4c:	18d1      	adds	r1, r2, r3
 800ee4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee54:	f7ff ff06 	bl	800ec64 <prvInsertTimerInActiveList>
 800ee58:	e015      	b.n	800ee86 <prvProcessReceivedCommands+0x19e>
 800ee5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee60:	f003 0302 	and.w	r3, r3, #2
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d103      	bne.n	800ee70 <prvProcessReceivedCommands+0x188>
 800ee68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee6a:	f000 fbe1 	bl	800f630 <vPortFree>
 800ee6e:	e00a      	b.n	800ee86 <prvProcessReceivedCommands+0x19e>
 800ee70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee76:	f023 0301 	bic.w	r3, r3, #1
 800ee7a:	b2da      	uxtb	r2, r3
 800ee7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800ee82:	e000      	b.n	800ee86 <prvProcessReceivedCommands+0x19e>
 800ee84:	bf00      	nop
 800ee86:	4b08      	ldr	r3, [pc, #32]	; (800eea8 <prvProcessReceivedCommands+0x1c0>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	1d39      	adds	r1, r7, #4
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f7fe fb98 	bl	800d5c4 <xQueueReceive>
 800ee94:	4603      	mov	r3, r0
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	f47f af2a 	bne.w	800ecf0 <prvProcessReceivedCommands+0x8>
 800ee9c:	bf00      	nop
 800ee9e:	bf00      	nop
 800eea0:	3730      	adds	r7, #48	; 0x30
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}
 800eea6:	bf00      	nop
 800eea8:	20002698 	.word	0x20002698

0800eeac <prvSwitchTimerLists>:
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b088      	sub	sp, #32
 800eeb0:	af02      	add	r7, sp, #8
 800eeb2:	e048      	b.n	800ef46 <prvSwitchTimerLists+0x9a>
 800eeb4:	4b2d      	ldr	r3, [pc, #180]	; (800ef6c <prvSwitchTimerLists+0xc0>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	68db      	ldr	r3, [r3, #12]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	613b      	str	r3, [r7, #16]
 800eebe:	4b2b      	ldr	r3, [pc, #172]	; (800ef6c <prvSwitchTimerLists+0xc0>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	68db      	ldr	r3, [r3, #12]
 800eec4:	68db      	ldr	r3, [r3, #12]
 800eec6:	60fb      	str	r3, [r7, #12]
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	3304      	adds	r3, #4
 800eecc:	4618      	mov	r0, r3
 800eece:	f7fe f8b1 	bl	800d034 <uxListRemove>
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	6a1b      	ldr	r3, [r3, #32]
 800eed6:	68f8      	ldr	r0, [r7, #12]
 800eed8:	4798      	blx	r3
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eee0:	f003 0304 	and.w	r3, r3, #4
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d02e      	beq.n	800ef46 <prvSwitchTimerLists+0x9a>
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	699b      	ldr	r3, [r3, #24]
 800eeec:	693a      	ldr	r2, [r7, #16]
 800eeee:	4413      	add	r3, r2
 800eef0:	60bb      	str	r3, [r7, #8]
 800eef2:	68ba      	ldr	r2, [r7, #8]
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d90e      	bls.n	800ef18 <prvSwitchTimerLists+0x6c>
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	68ba      	ldr	r2, [r7, #8]
 800eefe:	605a      	str	r2, [r3, #4]
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	68fa      	ldr	r2, [r7, #12]
 800ef04:	611a      	str	r2, [r3, #16]
 800ef06:	4b19      	ldr	r3, [pc, #100]	; (800ef6c <prvSwitchTimerLists+0xc0>)
 800ef08:	681a      	ldr	r2, [r3, #0]
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	3304      	adds	r3, #4
 800ef0e:	4619      	mov	r1, r3
 800ef10:	4610      	mov	r0, r2
 800ef12:	f7fe f856 	bl	800cfc2 <vListInsert>
 800ef16:	e016      	b.n	800ef46 <prvSwitchTimerLists+0x9a>
 800ef18:	2300      	movs	r3, #0
 800ef1a:	9300      	str	r3, [sp, #0]
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	693a      	ldr	r2, [r7, #16]
 800ef20:	2100      	movs	r1, #0
 800ef22:	68f8      	ldr	r0, [r7, #12]
 800ef24:	f7ff fd60 	bl	800e9e8 <xTimerGenericCommand>
 800ef28:	6078      	str	r0, [r7, #4]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d10a      	bne.n	800ef46 <prvSwitchTimerLists+0x9a>
 800ef30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef34:	f383 8811 	msr	BASEPRI, r3
 800ef38:	f3bf 8f6f 	isb	sy
 800ef3c:	f3bf 8f4f 	dsb	sy
 800ef40:	603b      	str	r3, [r7, #0]
 800ef42:	bf00      	nop
 800ef44:	e7fe      	b.n	800ef44 <prvSwitchTimerLists+0x98>
 800ef46:	4b09      	ldr	r3, [pc, #36]	; (800ef6c <prvSwitchTimerLists+0xc0>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d1b1      	bne.n	800eeb4 <prvSwitchTimerLists+0x8>
 800ef50:	4b06      	ldr	r3, [pc, #24]	; (800ef6c <prvSwitchTimerLists+0xc0>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	617b      	str	r3, [r7, #20]
 800ef56:	4b06      	ldr	r3, [pc, #24]	; (800ef70 <prvSwitchTimerLists+0xc4>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	4a04      	ldr	r2, [pc, #16]	; (800ef6c <prvSwitchTimerLists+0xc0>)
 800ef5c:	6013      	str	r3, [r2, #0]
 800ef5e:	4a04      	ldr	r2, [pc, #16]	; (800ef70 <prvSwitchTimerLists+0xc4>)
 800ef60:	697b      	ldr	r3, [r7, #20]
 800ef62:	6013      	str	r3, [r2, #0]
 800ef64:	bf00      	nop
 800ef66:	3718      	adds	r7, #24
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd80      	pop	{r7, pc}
 800ef6c:	20002690 	.word	0x20002690
 800ef70:	20002694 	.word	0x20002694

0800ef74 <prvCheckForValidListAndQueue>:
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b082      	sub	sp, #8
 800ef78:	af02      	add	r7, sp, #8
 800ef7a:	f000 f96b 	bl	800f254 <vPortEnterCritical>
 800ef7e:	4b15      	ldr	r3, [pc, #84]	; (800efd4 <prvCheckForValidListAndQueue+0x60>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d120      	bne.n	800efc8 <prvCheckForValidListAndQueue+0x54>
 800ef86:	4814      	ldr	r0, [pc, #80]	; (800efd8 <prvCheckForValidListAndQueue+0x64>)
 800ef88:	f7fd ffca 	bl	800cf20 <vListInitialise>
 800ef8c:	4813      	ldr	r0, [pc, #76]	; (800efdc <prvCheckForValidListAndQueue+0x68>)
 800ef8e:	f7fd ffc7 	bl	800cf20 <vListInitialise>
 800ef92:	4b13      	ldr	r3, [pc, #76]	; (800efe0 <prvCheckForValidListAndQueue+0x6c>)
 800ef94:	4a10      	ldr	r2, [pc, #64]	; (800efd8 <prvCheckForValidListAndQueue+0x64>)
 800ef96:	601a      	str	r2, [r3, #0]
 800ef98:	4b12      	ldr	r3, [pc, #72]	; (800efe4 <prvCheckForValidListAndQueue+0x70>)
 800ef9a:	4a10      	ldr	r2, [pc, #64]	; (800efdc <prvCheckForValidListAndQueue+0x68>)
 800ef9c:	601a      	str	r2, [r3, #0]
 800ef9e:	2300      	movs	r3, #0
 800efa0:	9300      	str	r3, [sp, #0]
 800efa2:	4b11      	ldr	r3, [pc, #68]	; (800efe8 <prvCheckForValidListAndQueue+0x74>)
 800efa4:	4a11      	ldr	r2, [pc, #68]	; (800efec <prvCheckForValidListAndQueue+0x78>)
 800efa6:	2110      	movs	r1, #16
 800efa8:	200a      	movs	r0, #10
 800efaa:	f7fe f8d5 	bl	800d158 <xQueueGenericCreateStatic>
 800efae:	4603      	mov	r3, r0
 800efb0:	4a08      	ldr	r2, [pc, #32]	; (800efd4 <prvCheckForValidListAndQueue+0x60>)
 800efb2:	6013      	str	r3, [r2, #0]
 800efb4:	4b07      	ldr	r3, [pc, #28]	; (800efd4 <prvCheckForValidListAndQueue+0x60>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d005      	beq.n	800efc8 <prvCheckForValidListAndQueue+0x54>
 800efbc:	4b05      	ldr	r3, [pc, #20]	; (800efd4 <prvCheckForValidListAndQueue+0x60>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	490b      	ldr	r1, [pc, #44]	; (800eff0 <prvCheckForValidListAndQueue+0x7c>)
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7fe fcee 	bl	800d9a4 <vQueueAddToRegistry>
 800efc8:	f000 f974 	bl	800f2b4 <vPortExitCritical>
 800efcc:	bf00      	nop
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}
 800efd2:	bf00      	nop
 800efd4:	20002698 	.word	0x20002698
 800efd8:	20002668 	.word	0x20002668
 800efdc:	2000267c 	.word	0x2000267c
 800efe0:	20002690 	.word	0x20002690
 800efe4:	20002694 	.word	0x20002694
 800efe8:	20002744 	.word	0x20002744
 800efec:	200026a4 	.word	0x200026a4
 800eff0:	080142ac 	.word	0x080142ac

0800eff4 <pxPortInitialiseStack>:
 800eff4:	b480      	push	{r7}
 800eff6:	b085      	sub	sp, #20
 800eff8:	af00      	add	r7, sp, #0
 800effa:	60f8      	str	r0, [r7, #12]
 800effc:	60b9      	str	r1, [r7, #8]
 800effe:	607a      	str	r2, [r7, #4]
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	3b04      	subs	r3, #4
 800f004:	60fb      	str	r3, [r7, #12]
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f00c:	601a      	str	r2, [r3, #0]
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	3b04      	subs	r3, #4
 800f012:	60fb      	str	r3, [r7, #12]
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	f023 0201 	bic.w	r2, r3, #1
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	601a      	str	r2, [r3, #0]
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	3b04      	subs	r3, #4
 800f022:	60fb      	str	r3, [r7, #12]
 800f024:	4a0c      	ldr	r2, [pc, #48]	; (800f058 <pxPortInitialiseStack+0x64>)
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	601a      	str	r2, [r3, #0]
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	3b14      	subs	r3, #20
 800f02e:	60fb      	str	r3, [r7, #12]
 800f030:	687a      	ldr	r2, [r7, #4]
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	601a      	str	r2, [r3, #0]
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	3b04      	subs	r3, #4
 800f03a:	60fb      	str	r3, [r7, #12]
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f06f 0202 	mvn.w	r2, #2
 800f042:	601a      	str	r2, [r3, #0]
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	3b20      	subs	r3, #32
 800f048:	60fb      	str	r3, [r7, #12]
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	4618      	mov	r0, r3
 800f04e:	3714      	adds	r7, #20
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr
 800f058:	0800f05d 	.word	0x0800f05d

0800f05c <prvTaskExitError>:
 800f05c:	b480      	push	{r7}
 800f05e:	b085      	sub	sp, #20
 800f060:	af00      	add	r7, sp, #0
 800f062:	2300      	movs	r3, #0
 800f064:	607b      	str	r3, [r7, #4]
 800f066:	4b12      	ldr	r3, [pc, #72]	; (800f0b0 <prvTaskExitError+0x54>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f06e:	d00a      	beq.n	800f086 <prvTaskExitError+0x2a>
 800f070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f074:	f383 8811 	msr	BASEPRI, r3
 800f078:	f3bf 8f6f 	isb	sy
 800f07c:	f3bf 8f4f 	dsb	sy
 800f080:	60fb      	str	r3, [r7, #12]
 800f082:	bf00      	nop
 800f084:	e7fe      	b.n	800f084 <prvTaskExitError+0x28>
 800f086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f08a:	f383 8811 	msr	BASEPRI, r3
 800f08e:	f3bf 8f6f 	isb	sy
 800f092:	f3bf 8f4f 	dsb	sy
 800f096:	60bb      	str	r3, [r7, #8]
 800f098:	bf00      	nop
 800f09a:	bf00      	nop
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d0fc      	beq.n	800f09c <prvTaskExitError+0x40>
 800f0a2:	bf00      	nop
 800f0a4:	bf00      	nop
 800f0a6:	3714      	adds	r7, #20
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ae:	4770      	bx	lr
 800f0b0:	20000010 	.word	0x20000010
	...

0800f0c0 <SVC_Handler>:
 800f0c0:	4b07      	ldr	r3, [pc, #28]	; (800f0e0 <pxCurrentTCBConst2>)
 800f0c2:	6819      	ldr	r1, [r3, #0]
 800f0c4:	6808      	ldr	r0, [r1, #0]
 800f0c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0ca:	f380 8809 	msr	PSP, r0
 800f0ce:	f3bf 8f6f 	isb	sy
 800f0d2:	f04f 0000 	mov.w	r0, #0
 800f0d6:	f380 8811 	msr	BASEPRI, r0
 800f0da:	4770      	bx	lr
 800f0dc:	f3af 8000 	nop.w

0800f0e0 <pxCurrentTCBConst2>:
 800f0e0:	20002168 	.word	0x20002168
 800f0e4:	bf00      	nop
 800f0e6:	bf00      	nop

0800f0e8 <prvPortStartFirstTask>:
 800f0e8:	4808      	ldr	r0, [pc, #32]	; (800f10c <prvPortStartFirstTask+0x24>)
 800f0ea:	6800      	ldr	r0, [r0, #0]
 800f0ec:	6800      	ldr	r0, [r0, #0]
 800f0ee:	f380 8808 	msr	MSP, r0
 800f0f2:	f04f 0000 	mov.w	r0, #0
 800f0f6:	f380 8814 	msr	CONTROL, r0
 800f0fa:	b662      	cpsie	i
 800f0fc:	b661      	cpsie	f
 800f0fe:	f3bf 8f4f 	dsb	sy
 800f102:	f3bf 8f6f 	isb	sy
 800f106:	df00      	svc	0
 800f108:	bf00      	nop
 800f10a:	bf00      	nop
 800f10c:	e000ed08 	.word	0xe000ed08

0800f110 <xPortStartScheduler>:
 800f110:	b580      	push	{r7, lr}
 800f112:	b086      	sub	sp, #24
 800f114:	af00      	add	r7, sp, #0
 800f116:	4b46      	ldr	r3, [pc, #280]	; (800f230 <xPortStartScheduler+0x120>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	4a46      	ldr	r2, [pc, #280]	; (800f234 <xPortStartScheduler+0x124>)
 800f11c:	4293      	cmp	r3, r2
 800f11e:	d10a      	bne.n	800f136 <xPortStartScheduler+0x26>
 800f120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f124:	f383 8811 	msr	BASEPRI, r3
 800f128:	f3bf 8f6f 	isb	sy
 800f12c:	f3bf 8f4f 	dsb	sy
 800f130:	613b      	str	r3, [r7, #16]
 800f132:	bf00      	nop
 800f134:	e7fe      	b.n	800f134 <xPortStartScheduler+0x24>
 800f136:	4b3e      	ldr	r3, [pc, #248]	; (800f230 <xPortStartScheduler+0x120>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	4a3f      	ldr	r2, [pc, #252]	; (800f238 <xPortStartScheduler+0x128>)
 800f13c:	4293      	cmp	r3, r2
 800f13e:	d10a      	bne.n	800f156 <xPortStartScheduler+0x46>
 800f140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f144:	f383 8811 	msr	BASEPRI, r3
 800f148:	f3bf 8f6f 	isb	sy
 800f14c:	f3bf 8f4f 	dsb	sy
 800f150:	60fb      	str	r3, [r7, #12]
 800f152:	bf00      	nop
 800f154:	e7fe      	b.n	800f154 <xPortStartScheduler+0x44>
 800f156:	4b39      	ldr	r3, [pc, #228]	; (800f23c <xPortStartScheduler+0x12c>)
 800f158:	617b      	str	r3, [r7, #20]
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	781b      	ldrb	r3, [r3, #0]
 800f15e:	b2db      	uxtb	r3, r3
 800f160:	607b      	str	r3, [r7, #4]
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	22ff      	movs	r2, #255	; 0xff
 800f166:	701a      	strb	r2, [r3, #0]
 800f168:	697b      	ldr	r3, [r7, #20]
 800f16a:	781b      	ldrb	r3, [r3, #0]
 800f16c:	b2db      	uxtb	r3, r3
 800f16e:	70fb      	strb	r3, [r7, #3]
 800f170:	78fb      	ldrb	r3, [r7, #3]
 800f172:	b2db      	uxtb	r3, r3
 800f174:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f178:	b2da      	uxtb	r2, r3
 800f17a:	4b31      	ldr	r3, [pc, #196]	; (800f240 <xPortStartScheduler+0x130>)
 800f17c:	701a      	strb	r2, [r3, #0]
 800f17e:	4b31      	ldr	r3, [pc, #196]	; (800f244 <xPortStartScheduler+0x134>)
 800f180:	2207      	movs	r2, #7
 800f182:	601a      	str	r2, [r3, #0]
 800f184:	e009      	b.n	800f19a <xPortStartScheduler+0x8a>
 800f186:	4b2f      	ldr	r3, [pc, #188]	; (800f244 <xPortStartScheduler+0x134>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	3b01      	subs	r3, #1
 800f18c:	4a2d      	ldr	r2, [pc, #180]	; (800f244 <xPortStartScheduler+0x134>)
 800f18e:	6013      	str	r3, [r2, #0]
 800f190:	78fb      	ldrb	r3, [r7, #3]
 800f192:	b2db      	uxtb	r3, r3
 800f194:	005b      	lsls	r3, r3, #1
 800f196:	b2db      	uxtb	r3, r3
 800f198:	70fb      	strb	r3, [r7, #3]
 800f19a:	78fb      	ldrb	r3, [r7, #3]
 800f19c:	b2db      	uxtb	r3, r3
 800f19e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1a2:	2b80      	cmp	r3, #128	; 0x80
 800f1a4:	d0ef      	beq.n	800f186 <xPortStartScheduler+0x76>
 800f1a6:	4b27      	ldr	r3, [pc, #156]	; (800f244 <xPortStartScheduler+0x134>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	f1c3 0307 	rsb	r3, r3, #7
 800f1ae:	2b04      	cmp	r3, #4
 800f1b0:	d00a      	beq.n	800f1c8 <xPortStartScheduler+0xb8>
 800f1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b6:	f383 8811 	msr	BASEPRI, r3
 800f1ba:	f3bf 8f6f 	isb	sy
 800f1be:	f3bf 8f4f 	dsb	sy
 800f1c2:	60bb      	str	r3, [r7, #8]
 800f1c4:	bf00      	nop
 800f1c6:	e7fe      	b.n	800f1c6 <xPortStartScheduler+0xb6>
 800f1c8:	4b1e      	ldr	r3, [pc, #120]	; (800f244 <xPortStartScheduler+0x134>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	021b      	lsls	r3, r3, #8
 800f1ce:	4a1d      	ldr	r2, [pc, #116]	; (800f244 <xPortStartScheduler+0x134>)
 800f1d0:	6013      	str	r3, [r2, #0]
 800f1d2:	4b1c      	ldr	r3, [pc, #112]	; (800f244 <xPortStartScheduler+0x134>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f1da:	4a1a      	ldr	r2, [pc, #104]	; (800f244 <xPortStartScheduler+0x134>)
 800f1dc:	6013      	str	r3, [r2, #0]
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	b2da      	uxtb	r2, r3
 800f1e2:	697b      	ldr	r3, [r7, #20]
 800f1e4:	701a      	strb	r2, [r3, #0]
 800f1e6:	4b18      	ldr	r3, [pc, #96]	; (800f248 <xPortStartScheduler+0x138>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	4a17      	ldr	r2, [pc, #92]	; (800f248 <xPortStartScheduler+0x138>)
 800f1ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f1f0:	6013      	str	r3, [r2, #0]
 800f1f2:	4b15      	ldr	r3, [pc, #84]	; (800f248 <xPortStartScheduler+0x138>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	4a14      	ldr	r2, [pc, #80]	; (800f248 <xPortStartScheduler+0x138>)
 800f1f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f1fc:	6013      	str	r3, [r2, #0]
 800f1fe:	f000 f8dd 	bl	800f3bc <vPortSetupTimerInterrupt>
 800f202:	4b12      	ldr	r3, [pc, #72]	; (800f24c <xPortStartScheduler+0x13c>)
 800f204:	2200      	movs	r2, #0
 800f206:	601a      	str	r2, [r3, #0]
 800f208:	f000 f8fc 	bl	800f404 <vPortEnableVFP>
 800f20c:	4b10      	ldr	r3, [pc, #64]	; (800f250 <xPortStartScheduler+0x140>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	4a0f      	ldr	r2, [pc, #60]	; (800f250 <xPortStartScheduler+0x140>)
 800f212:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f216:	6013      	str	r3, [r2, #0]
 800f218:	f7ff ff66 	bl	800f0e8 <prvPortStartFirstTask>
 800f21c:	f7ff f850 	bl	800e2c0 <vTaskSwitchContext>
 800f220:	f7ff ff1c 	bl	800f05c <prvTaskExitError>
 800f224:	2300      	movs	r3, #0
 800f226:	4618      	mov	r0, r3
 800f228:	3718      	adds	r7, #24
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}
 800f22e:	bf00      	nop
 800f230:	e000ed00 	.word	0xe000ed00
 800f234:	410fc271 	.word	0x410fc271
 800f238:	410fc270 	.word	0x410fc270
 800f23c:	e000e400 	.word	0xe000e400
 800f240:	20002794 	.word	0x20002794
 800f244:	20002798 	.word	0x20002798
 800f248:	e000ed20 	.word	0xe000ed20
 800f24c:	20000010 	.word	0x20000010
 800f250:	e000ef34 	.word	0xe000ef34

0800f254 <vPortEnterCritical>:
 800f254:	b480      	push	{r7}
 800f256:	b083      	sub	sp, #12
 800f258:	af00      	add	r7, sp, #0
 800f25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f25e:	f383 8811 	msr	BASEPRI, r3
 800f262:	f3bf 8f6f 	isb	sy
 800f266:	f3bf 8f4f 	dsb	sy
 800f26a:	607b      	str	r3, [r7, #4]
 800f26c:	bf00      	nop
 800f26e:	4b0f      	ldr	r3, [pc, #60]	; (800f2ac <vPortEnterCritical+0x58>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	3301      	adds	r3, #1
 800f274:	4a0d      	ldr	r2, [pc, #52]	; (800f2ac <vPortEnterCritical+0x58>)
 800f276:	6013      	str	r3, [r2, #0]
 800f278:	4b0c      	ldr	r3, [pc, #48]	; (800f2ac <vPortEnterCritical+0x58>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	d10f      	bne.n	800f2a0 <vPortEnterCritical+0x4c>
 800f280:	4b0b      	ldr	r3, [pc, #44]	; (800f2b0 <vPortEnterCritical+0x5c>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	b2db      	uxtb	r3, r3
 800f286:	2b00      	cmp	r3, #0
 800f288:	d00a      	beq.n	800f2a0 <vPortEnterCritical+0x4c>
 800f28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f28e:	f383 8811 	msr	BASEPRI, r3
 800f292:	f3bf 8f6f 	isb	sy
 800f296:	f3bf 8f4f 	dsb	sy
 800f29a:	603b      	str	r3, [r7, #0]
 800f29c:	bf00      	nop
 800f29e:	e7fe      	b.n	800f29e <vPortEnterCritical+0x4a>
 800f2a0:	bf00      	nop
 800f2a2:	370c      	adds	r7, #12
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2aa:	4770      	bx	lr
 800f2ac:	20000010 	.word	0x20000010
 800f2b0:	e000ed04 	.word	0xe000ed04

0800f2b4 <vPortExitCritical>:
 800f2b4:	b480      	push	{r7}
 800f2b6:	b083      	sub	sp, #12
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	4b12      	ldr	r3, [pc, #72]	; (800f304 <vPortExitCritical+0x50>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d10a      	bne.n	800f2d8 <vPortExitCritical+0x24>
 800f2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c6:	f383 8811 	msr	BASEPRI, r3
 800f2ca:	f3bf 8f6f 	isb	sy
 800f2ce:	f3bf 8f4f 	dsb	sy
 800f2d2:	607b      	str	r3, [r7, #4]
 800f2d4:	bf00      	nop
 800f2d6:	e7fe      	b.n	800f2d6 <vPortExitCritical+0x22>
 800f2d8:	4b0a      	ldr	r3, [pc, #40]	; (800f304 <vPortExitCritical+0x50>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	3b01      	subs	r3, #1
 800f2de:	4a09      	ldr	r2, [pc, #36]	; (800f304 <vPortExitCritical+0x50>)
 800f2e0:	6013      	str	r3, [r2, #0]
 800f2e2:	4b08      	ldr	r3, [pc, #32]	; (800f304 <vPortExitCritical+0x50>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d105      	bne.n	800f2f6 <vPortExitCritical+0x42>
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	603b      	str	r3, [r7, #0]
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	f383 8811 	msr	BASEPRI, r3
 800f2f4:	bf00      	nop
 800f2f6:	bf00      	nop
 800f2f8:	370c      	adds	r7, #12
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f300:	4770      	bx	lr
 800f302:	bf00      	nop
 800f304:	20000010 	.word	0x20000010
	...

0800f310 <PendSV_Handler>:
 800f310:	f3ef 8009 	mrs	r0, PSP
 800f314:	f3bf 8f6f 	isb	sy
 800f318:	4b15      	ldr	r3, [pc, #84]	; (800f370 <pxCurrentTCBConst>)
 800f31a:	681a      	ldr	r2, [r3, #0]
 800f31c:	f01e 0f10 	tst.w	lr, #16
 800f320:	bf08      	it	eq
 800f322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f32a:	6010      	str	r0, [r2, #0]
 800f32c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f330:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f334:	f380 8811 	msr	BASEPRI, r0
 800f338:	f3bf 8f4f 	dsb	sy
 800f33c:	f3bf 8f6f 	isb	sy
 800f340:	f7fe ffbe 	bl	800e2c0 <vTaskSwitchContext>
 800f344:	f04f 0000 	mov.w	r0, #0
 800f348:	f380 8811 	msr	BASEPRI, r0
 800f34c:	bc09      	pop	{r0, r3}
 800f34e:	6819      	ldr	r1, [r3, #0]
 800f350:	6808      	ldr	r0, [r1, #0]
 800f352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f356:	f01e 0f10 	tst.w	lr, #16
 800f35a:	bf08      	it	eq
 800f35c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f360:	f380 8809 	msr	PSP, r0
 800f364:	f3bf 8f6f 	isb	sy
 800f368:	4770      	bx	lr
 800f36a:	bf00      	nop
 800f36c:	f3af 8000 	nop.w

0800f370 <pxCurrentTCBConst>:
 800f370:	20002168 	.word	0x20002168
 800f374:	bf00      	nop
 800f376:	bf00      	nop

0800f378 <xPortSysTickHandler>:
 800f378:	b580      	push	{r7, lr}
 800f37a:	b082      	sub	sp, #8
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f382:	f383 8811 	msr	BASEPRI, r3
 800f386:	f3bf 8f6f 	isb	sy
 800f38a:	f3bf 8f4f 	dsb	sy
 800f38e:	607b      	str	r3, [r7, #4]
 800f390:	bf00      	nop
 800f392:	f7fe fedb 	bl	800e14c <xTaskIncrementTick>
 800f396:	4603      	mov	r3, r0
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d003      	beq.n	800f3a4 <xPortSysTickHandler+0x2c>
 800f39c:	4b06      	ldr	r3, [pc, #24]	; (800f3b8 <xPortSysTickHandler+0x40>)
 800f39e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3a2:	601a      	str	r2, [r3, #0]
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	603b      	str	r3, [r7, #0]
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	f383 8811 	msr	BASEPRI, r3
 800f3ae:	bf00      	nop
 800f3b0:	bf00      	nop
 800f3b2:	3708      	adds	r7, #8
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}
 800f3b8:	e000ed04 	.word	0xe000ed04

0800f3bc <vPortSetupTimerInterrupt>:
 800f3bc:	b480      	push	{r7}
 800f3be:	af00      	add	r7, sp, #0
 800f3c0:	4b0b      	ldr	r3, [pc, #44]	; (800f3f0 <vPortSetupTimerInterrupt+0x34>)
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	601a      	str	r2, [r3, #0]
 800f3c6:	4b0b      	ldr	r3, [pc, #44]	; (800f3f4 <vPortSetupTimerInterrupt+0x38>)
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	601a      	str	r2, [r3, #0]
 800f3cc:	4b0a      	ldr	r3, [pc, #40]	; (800f3f8 <vPortSetupTimerInterrupt+0x3c>)
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	4a0a      	ldr	r2, [pc, #40]	; (800f3fc <vPortSetupTimerInterrupt+0x40>)
 800f3d2:	fba2 2303 	umull	r2, r3, r2, r3
 800f3d6:	099b      	lsrs	r3, r3, #6
 800f3d8:	4a09      	ldr	r2, [pc, #36]	; (800f400 <vPortSetupTimerInterrupt+0x44>)
 800f3da:	3b01      	subs	r3, #1
 800f3dc:	6013      	str	r3, [r2, #0]
 800f3de:	4b04      	ldr	r3, [pc, #16]	; (800f3f0 <vPortSetupTimerInterrupt+0x34>)
 800f3e0:	2207      	movs	r2, #7
 800f3e2:	601a      	str	r2, [r3, #0]
 800f3e4:	bf00      	nop
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ec:	4770      	bx	lr
 800f3ee:	bf00      	nop
 800f3f0:	e000e010 	.word	0xe000e010
 800f3f4:	e000e018 	.word	0xe000e018
 800f3f8:	20000004 	.word	0x20000004
 800f3fc:	10624dd3 	.word	0x10624dd3
 800f400:	e000e014 	.word	0xe000e014

0800f404 <vPortEnableVFP>:
 800f404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f414 <vPortEnableVFP+0x10>
 800f408:	6801      	ldr	r1, [r0, #0]
 800f40a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f40e:	6001      	str	r1, [r0, #0]
 800f410:	4770      	bx	lr
 800f412:	bf00      	nop
 800f414:	e000ed88 	.word	0xe000ed88

0800f418 <vPortValidateInterruptPriority>:
 800f418:	b480      	push	{r7}
 800f41a:	b085      	sub	sp, #20
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	f3ef 8305 	mrs	r3, IPSR
 800f422:	60fb      	str	r3, [r7, #12]
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	2b0f      	cmp	r3, #15
 800f428:	d914      	bls.n	800f454 <vPortValidateInterruptPriority+0x3c>
 800f42a:	4a17      	ldr	r2, [pc, #92]	; (800f488 <vPortValidateInterruptPriority+0x70>)
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	4413      	add	r3, r2
 800f430:	781b      	ldrb	r3, [r3, #0]
 800f432:	72fb      	strb	r3, [r7, #11]
 800f434:	4b15      	ldr	r3, [pc, #84]	; (800f48c <vPortValidateInterruptPriority+0x74>)
 800f436:	781b      	ldrb	r3, [r3, #0]
 800f438:	7afa      	ldrb	r2, [r7, #11]
 800f43a:	429a      	cmp	r2, r3
 800f43c:	d20a      	bcs.n	800f454 <vPortValidateInterruptPriority+0x3c>
 800f43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f442:	f383 8811 	msr	BASEPRI, r3
 800f446:	f3bf 8f6f 	isb	sy
 800f44a:	f3bf 8f4f 	dsb	sy
 800f44e:	607b      	str	r3, [r7, #4]
 800f450:	bf00      	nop
 800f452:	e7fe      	b.n	800f452 <vPortValidateInterruptPriority+0x3a>
 800f454:	4b0e      	ldr	r3, [pc, #56]	; (800f490 <vPortValidateInterruptPriority+0x78>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f45c:	4b0d      	ldr	r3, [pc, #52]	; (800f494 <vPortValidateInterruptPriority+0x7c>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	429a      	cmp	r2, r3
 800f462:	d90a      	bls.n	800f47a <vPortValidateInterruptPriority+0x62>
 800f464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f468:	f383 8811 	msr	BASEPRI, r3
 800f46c:	f3bf 8f6f 	isb	sy
 800f470:	f3bf 8f4f 	dsb	sy
 800f474:	603b      	str	r3, [r7, #0]
 800f476:	bf00      	nop
 800f478:	e7fe      	b.n	800f478 <vPortValidateInterruptPriority+0x60>
 800f47a:	bf00      	nop
 800f47c:	3714      	adds	r7, #20
 800f47e:	46bd      	mov	sp, r7
 800f480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f484:	4770      	bx	lr
 800f486:	bf00      	nop
 800f488:	e000e3f0 	.word	0xe000e3f0
 800f48c:	20002794 	.word	0x20002794
 800f490:	e000ed0c 	.word	0xe000ed0c
 800f494:	20002798 	.word	0x20002798

0800f498 <pvPortMalloc>:
 800f498:	b580      	push	{r7, lr}
 800f49a:	b08a      	sub	sp, #40	; 0x28
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	61fb      	str	r3, [r7, #28]
 800f4a4:	f7fe fd96 	bl	800dfd4 <vTaskSuspendAll>
 800f4a8:	4b5b      	ldr	r3, [pc, #364]	; (800f618 <pvPortMalloc+0x180>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d101      	bne.n	800f4b4 <pvPortMalloc+0x1c>
 800f4b0:	f000 f920 	bl	800f6f4 <prvHeapInit>
 800f4b4:	4b59      	ldr	r3, [pc, #356]	; (800f61c <pvPortMalloc+0x184>)
 800f4b6:	681a      	ldr	r2, [r3, #0]
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	4013      	ands	r3, r2
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	f040 8093 	bne.w	800f5e8 <pvPortMalloc+0x150>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d01d      	beq.n	800f504 <pvPortMalloc+0x6c>
 800f4c8:	2208      	movs	r2, #8
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	4413      	add	r3, r2
 800f4ce:	607b      	str	r3, [r7, #4]
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f003 0307 	and.w	r3, r3, #7
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d014      	beq.n	800f504 <pvPortMalloc+0x6c>
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f023 0307 	bic.w	r3, r3, #7
 800f4e0:	3308      	adds	r3, #8
 800f4e2:	607b      	str	r3, [r7, #4]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f003 0307 	and.w	r3, r3, #7
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d00a      	beq.n	800f504 <pvPortMalloc+0x6c>
 800f4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4f2:	f383 8811 	msr	BASEPRI, r3
 800f4f6:	f3bf 8f6f 	isb	sy
 800f4fa:	f3bf 8f4f 	dsb	sy
 800f4fe:	617b      	str	r3, [r7, #20]
 800f500:	bf00      	nop
 800f502:	e7fe      	b.n	800f502 <pvPortMalloc+0x6a>
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d06e      	beq.n	800f5e8 <pvPortMalloc+0x150>
 800f50a:	4b45      	ldr	r3, [pc, #276]	; (800f620 <pvPortMalloc+0x188>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	687a      	ldr	r2, [r7, #4]
 800f510:	429a      	cmp	r2, r3
 800f512:	d869      	bhi.n	800f5e8 <pvPortMalloc+0x150>
 800f514:	4b43      	ldr	r3, [pc, #268]	; (800f624 <pvPortMalloc+0x18c>)
 800f516:	623b      	str	r3, [r7, #32]
 800f518:	4b42      	ldr	r3, [pc, #264]	; (800f624 <pvPortMalloc+0x18c>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	627b      	str	r3, [r7, #36]	; 0x24
 800f51e:	e004      	b.n	800f52a <pvPortMalloc+0x92>
 800f520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f522:	623b      	str	r3, [r7, #32]
 800f524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	627b      	str	r3, [r7, #36]	; 0x24
 800f52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52c:	685b      	ldr	r3, [r3, #4]
 800f52e:	687a      	ldr	r2, [r7, #4]
 800f530:	429a      	cmp	r2, r3
 800f532:	d903      	bls.n	800f53c <pvPortMalloc+0xa4>
 800f534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d1f1      	bne.n	800f520 <pvPortMalloc+0x88>
 800f53c:	4b36      	ldr	r3, [pc, #216]	; (800f618 <pvPortMalloc+0x180>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f542:	429a      	cmp	r2, r3
 800f544:	d050      	beq.n	800f5e8 <pvPortMalloc+0x150>
 800f546:	6a3b      	ldr	r3, [r7, #32]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	2208      	movs	r2, #8
 800f54c:	4413      	add	r3, r2
 800f54e:	61fb      	str	r3, [r7, #28]
 800f550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f552:	681a      	ldr	r2, [r3, #0]
 800f554:	6a3b      	ldr	r3, [r7, #32]
 800f556:	601a      	str	r2, [r3, #0]
 800f558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55a:	685a      	ldr	r2, [r3, #4]
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	1ad2      	subs	r2, r2, r3
 800f560:	2308      	movs	r3, #8
 800f562:	005b      	lsls	r3, r3, #1
 800f564:	429a      	cmp	r2, r3
 800f566:	d91f      	bls.n	800f5a8 <pvPortMalloc+0x110>
 800f568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	4413      	add	r3, r2
 800f56e:	61bb      	str	r3, [r7, #24]
 800f570:	69bb      	ldr	r3, [r7, #24]
 800f572:	f003 0307 	and.w	r3, r3, #7
 800f576:	2b00      	cmp	r3, #0
 800f578:	d00a      	beq.n	800f590 <pvPortMalloc+0xf8>
 800f57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f57e:	f383 8811 	msr	BASEPRI, r3
 800f582:	f3bf 8f6f 	isb	sy
 800f586:	f3bf 8f4f 	dsb	sy
 800f58a:	613b      	str	r3, [r7, #16]
 800f58c:	bf00      	nop
 800f58e:	e7fe      	b.n	800f58e <pvPortMalloc+0xf6>
 800f590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f592:	685a      	ldr	r2, [r3, #4]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	1ad2      	subs	r2, r2, r3
 800f598:	69bb      	ldr	r3, [r7, #24]
 800f59a:	605a      	str	r2, [r3, #4]
 800f59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f59e:	687a      	ldr	r2, [r7, #4]
 800f5a0:	605a      	str	r2, [r3, #4]
 800f5a2:	69b8      	ldr	r0, [r7, #24]
 800f5a4:	f000 f908 	bl	800f7b8 <prvInsertBlockIntoFreeList>
 800f5a8:	4b1d      	ldr	r3, [pc, #116]	; (800f620 <pvPortMalloc+0x188>)
 800f5aa:	681a      	ldr	r2, [r3, #0]
 800f5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ae:	685b      	ldr	r3, [r3, #4]
 800f5b0:	1ad3      	subs	r3, r2, r3
 800f5b2:	4a1b      	ldr	r2, [pc, #108]	; (800f620 <pvPortMalloc+0x188>)
 800f5b4:	6013      	str	r3, [r2, #0]
 800f5b6:	4b1a      	ldr	r3, [pc, #104]	; (800f620 <pvPortMalloc+0x188>)
 800f5b8:	681a      	ldr	r2, [r3, #0]
 800f5ba:	4b1b      	ldr	r3, [pc, #108]	; (800f628 <pvPortMalloc+0x190>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	429a      	cmp	r2, r3
 800f5c0:	d203      	bcs.n	800f5ca <pvPortMalloc+0x132>
 800f5c2:	4b17      	ldr	r3, [pc, #92]	; (800f620 <pvPortMalloc+0x188>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	4a18      	ldr	r2, [pc, #96]	; (800f628 <pvPortMalloc+0x190>)
 800f5c8:	6013      	str	r3, [r2, #0]
 800f5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5cc:	685a      	ldr	r2, [r3, #4]
 800f5ce:	4b13      	ldr	r3, [pc, #76]	; (800f61c <pvPortMalloc+0x184>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	431a      	orrs	r2, r3
 800f5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d6:	605a      	str	r2, [r3, #4]
 800f5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5da:	2200      	movs	r2, #0
 800f5dc:	601a      	str	r2, [r3, #0]
 800f5de:	4b13      	ldr	r3, [pc, #76]	; (800f62c <pvPortMalloc+0x194>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	3301      	adds	r3, #1
 800f5e4:	4a11      	ldr	r2, [pc, #68]	; (800f62c <pvPortMalloc+0x194>)
 800f5e6:	6013      	str	r3, [r2, #0]
 800f5e8:	f7fe fd02 	bl	800dff0 <xTaskResumeAll>
 800f5ec:	69fb      	ldr	r3, [r7, #28]
 800f5ee:	f003 0307 	and.w	r3, r3, #7
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d00a      	beq.n	800f60c <pvPortMalloc+0x174>
 800f5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5fa:	f383 8811 	msr	BASEPRI, r3
 800f5fe:	f3bf 8f6f 	isb	sy
 800f602:	f3bf 8f4f 	dsb	sy
 800f606:	60fb      	str	r3, [r7, #12]
 800f608:	bf00      	nop
 800f60a:	e7fe      	b.n	800f60a <pvPortMalloc+0x172>
 800f60c:	69fb      	ldr	r3, [r7, #28]
 800f60e:	4618      	mov	r0, r3
 800f610:	3728      	adds	r7, #40	; 0x28
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
 800f616:	bf00      	nop
 800f618:	200063a4 	.word	0x200063a4
 800f61c:	200063b8 	.word	0x200063b8
 800f620:	200063a8 	.word	0x200063a8
 800f624:	2000639c 	.word	0x2000639c
 800f628:	200063ac 	.word	0x200063ac
 800f62c:	200063b0 	.word	0x200063b0

0800f630 <vPortFree>:
 800f630:	b580      	push	{r7, lr}
 800f632:	b086      	sub	sp, #24
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	617b      	str	r3, [r7, #20]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d04d      	beq.n	800f6de <vPortFree+0xae>
 800f642:	2308      	movs	r3, #8
 800f644:	425b      	negs	r3, r3
 800f646:	697a      	ldr	r2, [r7, #20]
 800f648:	4413      	add	r3, r2
 800f64a:	617b      	str	r3, [r7, #20]
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	613b      	str	r3, [r7, #16]
 800f650:	693b      	ldr	r3, [r7, #16]
 800f652:	685a      	ldr	r2, [r3, #4]
 800f654:	4b24      	ldr	r3, [pc, #144]	; (800f6e8 <vPortFree+0xb8>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	4013      	ands	r3, r2
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d10a      	bne.n	800f674 <vPortFree+0x44>
 800f65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f662:	f383 8811 	msr	BASEPRI, r3
 800f666:	f3bf 8f6f 	isb	sy
 800f66a:	f3bf 8f4f 	dsb	sy
 800f66e:	60fb      	str	r3, [r7, #12]
 800f670:	bf00      	nop
 800f672:	e7fe      	b.n	800f672 <vPortFree+0x42>
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d00a      	beq.n	800f692 <vPortFree+0x62>
 800f67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f680:	f383 8811 	msr	BASEPRI, r3
 800f684:	f3bf 8f6f 	isb	sy
 800f688:	f3bf 8f4f 	dsb	sy
 800f68c:	60bb      	str	r3, [r7, #8]
 800f68e:	bf00      	nop
 800f690:	e7fe      	b.n	800f690 <vPortFree+0x60>
 800f692:	693b      	ldr	r3, [r7, #16]
 800f694:	685a      	ldr	r2, [r3, #4]
 800f696:	4b14      	ldr	r3, [pc, #80]	; (800f6e8 <vPortFree+0xb8>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	4013      	ands	r3, r2
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d01e      	beq.n	800f6de <vPortFree+0xae>
 800f6a0:	693b      	ldr	r3, [r7, #16]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d11a      	bne.n	800f6de <vPortFree+0xae>
 800f6a8:	693b      	ldr	r3, [r7, #16]
 800f6aa:	685a      	ldr	r2, [r3, #4]
 800f6ac:	4b0e      	ldr	r3, [pc, #56]	; (800f6e8 <vPortFree+0xb8>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	43db      	mvns	r3, r3
 800f6b2:	401a      	ands	r2, r3
 800f6b4:	693b      	ldr	r3, [r7, #16]
 800f6b6:	605a      	str	r2, [r3, #4]
 800f6b8:	f7fe fc8c 	bl	800dfd4 <vTaskSuspendAll>
 800f6bc:	693b      	ldr	r3, [r7, #16]
 800f6be:	685a      	ldr	r2, [r3, #4]
 800f6c0:	4b0a      	ldr	r3, [pc, #40]	; (800f6ec <vPortFree+0xbc>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	4413      	add	r3, r2
 800f6c6:	4a09      	ldr	r2, [pc, #36]	; (800f6ec <vPortFree+0xbc>)
 800f6c8:	6013      	str	r3, [r2, #0]
 800f6ca:	6938      	ldr	r0, [r7, #16]
 800f6cc:	f000 f874 	bl	800f7b8 <prvInsertBlockIntoFreeList>
 800f6d0:	4b07      	ldr	r3, [pc, #28]	; (800f6f0 <vPortFree+0xc0>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	3301      	adds	r3, #1
 800f6d6:	4a06      	ldr	r2, [pc, #24]	; (800f6f0 <vPortFree+0xc0>)
 800f6d8:	6013      	str	r3, [r2, #0]
 800f6da:	f7fe fc89 	bl	800dff0 <xTaskResumeAll>
 800f6de:	bf00      	nop
 800f6e0:	3718      	adds	r7, #24
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}
 800f6e6:	bf00      	nop
 800f6e8:	200063b8 	.word	0x200063b8
 800f6ec:	200063a8 	.word	0x200063a8
 800f6f0:	200063b4 	.word	0x200063b4

0800f6f4 <prvHeapInit>:
 800f6f4:	b480      	push	{r7}
 800f6f6:	b085      	sub	sp, #20
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f6fe:	60bb      	str	r3, [r7, #8]
 800f700:	4b27      	ldr	r3, [pc, #156]	; (800f7a0 <prvHeapInit+0xac>)
 800f702:	60fb      	str	r3, [r7, #12]
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f003 0307 	and.w	r3, r3, #7
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d00c      	beq.n	800f728 <prvHeapInit+0x34>
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	3307      	adds	r3, #7
 800f712:	60fb      	str	r3, [r7, #12]
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	f023 0307 	bic.w	r3, r3, #7
 800f71a:	60fb      	str	r3, [r7, #12]
 800f71c:	68ba      	ldr	r2, [r7, #8]
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	1ad3      	subs	r3, r2, r3
 800f722:	4a1f      	ldr	r2, [pc, #124]	; (800f7a0 <prvHeapInit+0xac>)
 800f724:	4413      	add	r3, r2
 800f726:	60bb      	str	r3, [r7, #8]
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	607b      	str	r3, [r7, #4]
 800f72c:	4a1d      	ldr	r2, [pc, #116]	; (800f7a4 <prvHeapInit+0xb0>)
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6013      	str	r3, [r2, #0]
 800f732:	4b1c      	ldr	r3, [pc, #112]	; (800f7a4 <prvHeapInit+0xb0>)
 800f734:	2200      	movs	r2, #0
 800f736:	605a      	str	r2, [r3, #4]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	68ba      	ldr	r2, [r7, #8]
 800f73c:	4413      	add	r3, r2
 800f73e:	60fb      	str	r3, [r7, #12]
 800f740:	2208      	movs	r2, #8
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	1a9b      	subs	r3, r3, r2
 800f746:	60fb      	str	r3, [r7, #12]
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	f023 0307 	bic.w	r3, r3, #7
 800f74e:	60fb      	str	r3, [r7, #12]
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	4a15      	ldr	r2, [pc, #84]	; (800f7a8 <prvHeapInit+0xb4>)
 800f754:	6013      	str	r3, [r2, #0]
 800f756:	4b14      	ldr	r3, [pc, #80]	; (800f7a8 <prvHeapInit+0xb4>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	2200      	movs	r2, #0
 800f75c:	605a      	str	r2, [r3, #4]
 800f75e:	4b12      	ldr	r3, [pc, #72]	; (800f7a8 <prvHeapInit+0xb4>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	2200      	movs	r2, #0
 800f764:	601a      	str	r2, [r3, #0]
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	603b      	str	r3, [r7, #0]
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	68fa      	ldr	r2, [r7, #12]
 800f76e:	1ad2      	subs	r2, r2, r3
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	605a      	str	r2, [r3, #4]
 800f774:	4b0c      	ldr	r3, [pc, #48]	; (800f7a8 <prvHeapInit+0xb4>)
 800f776:	681a      	ldr	r2, [r3, #0]
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	601a      	str	r2, [r3, #0]
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	685b      	ldr	r3, [r3, #4]
 800f780:	4a0a      	ldr	r2, [pc, #40]	; (800f7ac <prvHeapInit+0xb8>)
 800f782:	6013      	str	r3, [r2, #0]
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	685b      	ldr	r3, [r3, #4]
 800f788:	4a09      	ldr	r2, [pc, #36]	; (800f7b0 <prvHeapInit+0xbc>)
 800f78a:	6013      	str	r3, [r2, #0]
 800f78c:	4b09      	ldr	r3, [pc, #36]	; (800f7b4 <prvHeapInit+0xc0>)
 800f78e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f792:	601a      	str	r2, [r3, #0]
 800f794:	bf00      	nop
 800f796:	3714      	adds	r7, #20
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr
 800f7a0:	2000279c 	.word	0x2000279c
 800f7a4:	2000639c 	.word	0x2000639c
 800f7a8:	200063a4 	.word	0x200063a4
 800f7ac:	200063ac 	.word	0x200063ac
 800f7b0:	200063a8 	.word	0x200063a8
 800f7b4:	200063b8 	.word	0x200063b8

0800f7b8 <prvInsertBlockIntoFreeList>:
 800f7b8:	b480      	push	{r7}
 800f7ba:	b085      	sub	sp, #20
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
 800f7c0:	4b28      	ldr	r3, [pc, #160]	; (800f864 <prvInsertBlockIntoFreeList+0xac>)
 800f7c2:	60fb      	str	r3, [r7, #12]
 800f7c4:	e002      	b.n	800f7cc <prvInsertBlockIntoFreeList+0x14>
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	60fb      	str	r3, [r7, #12]
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	687a      	ldr	r2, [r7, #4]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d8f7      	bhi.n	800f7c6 <prvInsertBlockIntoFreeList+0xe>
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	60bb      	str	r3, [r7, #8]
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	685b      	ldr	r3, [r3, #4]
 800f7de:	68ba      	ldr	r2, [r7, #8]
 800f7e0:	4413      	add	r3, r2
 800f7e2:	687a      	ldr	r2, [r7, #4]
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	d108      	bne.n	800f7fa <prvInsertBlockIntoFreeList+0x42>
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	685a      	ldr	r2, [r3, #4]
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	685b      	ldr	r3, [r3, #4]
 800f7f0:	441a      	add	r2, r3
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	605a      	str	r2, [r3, #4]
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	607b      	str	r3, [r7, #4]
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	60bb      	str	r3, [r7, #8]
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	685b      	ldr	r3, [r3, #4]
 800f802:	68ba      	ldr	r2, [r7, #8]
 800f804:	441a      	add	r2, r3
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	429a      	cmp	r2, r3
 800f80c:	d118      	bne.n	800f840 <prvInsertBlockIntoFreeList+0x88>
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	681a      	ldr	r2, [r3, #0]
 800f812:	4b15      	ldr	r3, [pc, #84]	; (800f868 <prvInsertBlockIntoFreeList+0xb0>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	429a      	cmp	r2, r3
 800f818:	d00d      	beq.n	800f836 <prvInsertBlockIntoFreeList+0x7e>
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	685a      	ldr	r2, [r3, #4]
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	685b      	ldr	r3, [r3, #4]
 800f824:	441a      	add	r2, r3
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	605a      	str	r2, [r3, #4]
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	681a      	ldr	r2, [r3, #0]
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	601a      	str	r2, [r3, #0]
 800f834:	e008      	b.n	800f848 <prvInsertBlockIntoFreeList+0x90>
 800f836:	4b0c      	ldr	r3, [pc, #48]	; (800f868 <prvInsertBlockIntoFreeList+0xb0>)
 800f838:	681a      	ldr	r2, [r3, #0]
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	601a      	str	r2, [r3, #0]
 800f83e:	e003      	b.n	800f848 <prvInsertBlockIntoFreeList+0x90>
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	681a      	ldr	r2, [r3, #0]
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	601a      	str	r2, [r3, #0]
 800f848:	68fa      	ldr	r2, [r7, #12]
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d002      	beq.n	800f856 <prvInsertBlockIntoFreeList+0x9e>
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	687a      	ldr	r2, [r7, #4]
 800f854:	601a      	str	r2, [r3, #0]
 800f856:	bf00      	nop
 800f858:	3714      	adds	r7, #20
 800f85a:	46bd      	mov	sp, r7
 800f85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f860:	4770      	bx	lr
 800f862:	bf00      	nop
 800f864:	2000639c 	.word	0x2000639c
 800f868:	200063a4 	.word	0x200063a4

0800f86c <__errno>:
 800f86c:	4b01      	ldr	r3, [pc, #4]	; (800f874 <__errno+0x8>)
 800f86e:	6818      	ldr	r0, [r3, #0]
 800f870:	4770      	bx	lr
 800f872:	bf00      	nop
 800f874:	20000014 	.word	0x20000014

0800f878 <__libc_init_array>:
 800f878:	b570      	push	{r4, r5, r6, lr}
 800f87a:	4d0d      	ldr	r5, [pc, #52]	; (800f8b0 <__libc_init_array+0x38>)
 800f87c:	4c0d      	ldr	r4, [pc, #52]	; (800f8b4 <__libc_init_array+0x3c>)
 800f87e:	1b64      	subs	r4, r4, r5
 800f880:	10a4      	asrs	r4, r4, #2
 800f882:	2600      	movs	r6, #0
 800f884:	42a6      	cmp	r6, r4
 800f886:	d109      	bne.n	800f89c <__libc_init_array+0x24>
 800f888:	4d0b      	ldr	r5, [pc, #44]	; (800f8b8 <__libc_init_array+0x40>)
 800f88a:	4c0c      	ldr	r4, [pc, #48]	; (800f8bc <__libc_init_array+0x44>)
 800f88c:	f004 fc90 	bl	80141b0 <_init>
 800f890:	1b64      	subs	r4, r4, r5
 800f892:	10a4      	asrs	r4, r4, #2
 800f894:	2600      	movs	r6, #0
 800f896:	42a6      	cmp	r6, r4
 800f898:	d105      	bne.n	800f8a6 <__libc_init_array+0x2e>
 800f89a:	bd70      	pop	{r4, r5, r6, pc}
 800f89c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8a0:	4798      	blx	r3
 800f8a2:	3601      	adds	r6, #1
 800f8a4:	e7ee      	b.n	800f884 <__libc_init_array+0xc>
 800f8a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8aa:	4798      	blx	r3
 800f8ac:	3601      	adds	r6, #1
 800f8ae:	e7f2      	b.n	800f896 <__libc_init_array+0x1e>
 800f8b0:	0801526c 	.word	0x0801526c
 800f8b4:	0801526c 	.word	0x0801526c
 800f8b8:	0801526c 	.word	0x0801526c
 800f8bc:	08015270 	.word	0x08015270

0800f8c0 <memcpy>:
 800f8c0:	440a      	add	r2, r1
 800f8c2:	4291      	cmp	r1, r2
 800f8c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f8c8:	d100      	bne.n	800f8cc <memcpy+0xc>
 800f8ca:	4770      	bx	lr
 800f8cc:	b510      	push	{r4, lr}
 800f8ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f8d6:	4291      	cmp	r1, r2
 800f8d8:	d1f9      	bne.n	800f8ce <memcpy+0xe>
 800f8da:	bd10      	pop	{r4, pc}

0800f8dc <memset>:
 800f8dc:	4402      	add	r2, r0
 800f8de:	4603      	mov	r3, r0
 800f8e0:	4293      	cmp	r3, r2
 800f8e2:	d100      	bne.n	800f8e6 <memset+0xa>
 800f8e4:	4770      	bx	lr
 800f8e6:	f803 1b01 	strb.w	r1, [r3], #1
 800f8ea:	e7f9      	b.n	800f8e0 <memset+0x4>

0800f8ec <__cvt>:
 800f8ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f8f0:	ec55 4b10 	vmov	r4, r5, d0
 800f8f4:	2d00      	cmp	r5, #0
 800f8f6:	460e      	mov	r6, r1
 800f8f8:	4619      	mov	r1, r3
 800f8fa:	462b      	mov	r3, r5
 800f8fc:	bfbb      	ittet	lt
 800f8fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f902:	461d      	movlt	r5, r3
 800f904:	2300      	movge	r3, #0
 800f906:	232d      	movlt	r3, #45	; 0x2d
 800f908:	700b      	strb	r3, [r1, #0]
 800f90a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f90c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f910:	4691      	mov	r9, r2
 800f912:	f023 0820 	bic.w	r8, r3, #32
 800f916:	bfbc      	itt	lt
 800f918:	4622      	movlt	r2, r4
 800f91a:	4614      	movlt	r4, r2
 800f91c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f920:	d005      	beq.n	800f92e <__cvt+0x42>
 800f922:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f926:	d100      	bne.n	800f92a <__cvt+0x3e>
 800f928:	3601      	adds	r6, #1
 800f92a:	2102      	movs	r1, #2
 800f92c:	e000      	b.n	800f930 <__cvt+0x44>
 800f92e:	2103      	movs	r1, #3
 800f930:	ab03      	add	r3, sp, #12
 800f932:	9301      	str	r3, [sp, #4]
 800f934:	ab02      	add	r3, sp, #8
 800f936:	9300      	str	r3, [sp, #0]
 800f938:	ec45 4b10 	vmov	d0, r4, r5
 800f93c:	4653      	mov	r3, sl
 800f93e:	4632      	mov	r2, r6
 800f940:	f001 fdae 	bl	80114a0 <_dtoa_r>
 800f944:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f948:	4607      	mov	r7, r0
 800f94a:	d102      	bne.n	800f952 <__cvt+0x66>
 800f94c:	f019 0f01 	tst.w	r9, #1
 800f950:	d022      	beq.n	800f998 <__cvt+0xac>
 800f952:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f956:	eb07 0906 	add.w	r9, r7, r6
 800f95a:	d110      	bne.n	800f97e <__cvt+0x92>
 800f95c:	783b      	ldrb	r3, [r7, #0]
 800f95e:	2b30      	cmp	r3, #48	; 0x30
 800f960:	d10a      	bne.n	800f978 <__cvt+0x8c>
 800f962:	2200      	movs	r2, #0
 800f964:	2300      	movs	r3, #0
 800f966:	4620      	mov	r0, r4
 800f968:	4629      	mov	r1, r5
 800f96a:	f7f1 f8ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800f96e:	b918      	cbnz	r0, 800f978 <__cvt+0x8c>
 800f970:	f1c6 0601 	rsb	r6, r6, #1
 800f974:	f8ca 6000 	str.w	r6, [sl]
 800f978:	f8da 3000 	ldr.w	r3, [sl]
 800f97c:	4499      	add	r9, r3
 800f97e:	2200      	movs	r2, #0
 800f980:	2300      	movs	r3, #0
 800f982:	4620      	mov	r0, r4
 800f984:	4629      	mov	r1, r5
 800f986:	f7f1 f89f 	bl	8000ac8 <__aeabi_dcmpeq>
 800f98a:	b108      	cbz	r0, 800f990 <__cvt+0xa4>
 800f98c:	f8cd 900c 	str.w	r9, [sp, #12]
 800f990:	2230      	movs	r2, #48	; 0x30
 800f992:	9b03      	ldr	r3, [sp, #12]
 800f994:	454b      	cmp	r3, r9
 800f996:	d307      	bcc.n	800f9a8 <__cvt+0xbc>
 800f998:	9b03      	ldr	r3, [sp, #12]
 800f99a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f99c:	1bdb      	subs	r3, r3, r7
 800f99e:	4638      	mov	r0, r7
 800f9a0:	6013      	str	r3, [r2, #0]
 800f9a2:	b004      	add	sp, #16
 800f9a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9a8:	1c59      	adds	r1, r3, #1
 800f9aa:	9103      	str	r1, [sp, #12]
 800f9ac:	701a      	strb	r2, [r3, #0]
 800f9ae:	e7f0      	b.n	800f992 <__cvt+0xa6>

0800f9b0 <__exponent>:
 800f9b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	2900      	cmp	r1, #0
 800f9b6:	bfb8      	it	lt
 800f9b8:	4249      	neglt	r1, r1
 800f9ba:	f803 2b02 	strb.w	r2, [r3], #2
 800f9be:	bfb4      	ite	lt
 800f9c0:	222d      	movlt	r2, #45	; 0x2d
 800f9c2:	222b      	movge	r2, #43	; 0x2b
 800f9c4:	2909      	cmp	r1, #9
 800f9c6:	7042      	strb	r2, [r0, #1]
 800f9c8:	dd2a      	ble.n	800fa20 <__exponent+0x70>
 800f9ca:	f10d 0407 	add.w	r4, sp, #7
 800f9ce:	46a4      	mov	ip, r4
 800f9d0:	270a      	movs	r7, #10
 800f9d2:	46a6      	mov	lr, r4
 800f9d4:	460a      	mov	r2, r1
 800f9d6:	fb91 f6f7 	sdiv	r6, r1, r7
 800f9da:	fb07 1516 	mls	r5, r7, r6, r1
 800f9de:	3530      	adds	r5, #48	; 0x30
 800f9e0:	2a63      	cmp	r2, #99	; 0x63
 800f9e2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800f9e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f9ea:	4631      	mov	r1, r6
 800f9ec:	dcf1      	bgt.n	800f9d2 <__exponent+0x22>
 800f9ee:	3130      	adds	r1, #48	; 0x30
 800f9f0:	f1ae 0502 	sub.w	r5, lr, #2
 800f9f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f9f8:	1c44      	adds	r4, r0, #1
 800f9fa:	4629      	mov	r1, r5
 800f9fc:	4561      	cmp	r1, ip
 800f9fe:	d30a      	bcc.n	800fa16 <__exponent+0x66>
 800fa00:	f10d 0209 	add.w	r2, sp, #9
 800fa04:	eba2 020e 	sub.w	r2, r2, lr
 800fa08:	4565      	cmp	r5, ip
 800fa0a:	bf88      	it	hi
 800fa0c:	2200      	movhi	r2, #0
 800fa0e:	4413      	add	r3, r2
 800fa10:	1a18      	subs	r0, r3, r0
 800fa12:	b003      	add	sp, #12
 800fa14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa1a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fa1e:	e7ed      	b.n	800f9fc <__exponent+0x4c>
 800fa20:	2330      	movs	r3, #48	; 0x30
 800fa22:	3130      	adds	r1, #48	; 0x30
 800fa24:	7083      	strb	r3, [r0, #2]
 800fa26:	70c1      	strb	r1, [r0, #3]
 800fa28:	1d03      	adds	r3, r0, #4
 800fa2a:	e7f1      	b.n	800fa10 <__exponent+0x60>

0800fa2c <_printf_float>:
 800fa2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa30:	ed2d 8b02 	vpush	{d8}
 800fa34:	b08d      	sub	sp, #52	; 0x34
 800fa36:	460c      	mov	r4, r1
 800fa38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fa3c:	4616      	mov	r6, r2
 800fa3e:	461f      	mov	r7, r3
 800fa40:	4605      	mov	r5, r0
 800fa42:	f002 fe8b 	bl	801275c <_localeconv_r>
 800fa46:	f8d0 a000 	ldr.w	sl, [r0]
 800fa4a:	4650      	mov	r0, sl
 800fa4c:	f7f0 fbc0 	bl	80001d0 <strlen>
 800fa50:	2300      	movs	r3, #0
 800fa52:	930a      	str	r3, [sp, #40]	; 0x28
 800fa54:	6823      	ldr	r3, [r4, #0]
 800fa56:	9305      	str	r3, [sp, #20]
 800fa58:	f8d8 3000 	ldr.w	r3, [r8]
 800fa5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fa60:	3307      	adds	r3, #7
 800fa62:	f023 0307 	bic.w	r3, r3, #7
 800fa66:	f103 0208 	add.w	r2, r3, #8
 800fa6a:	f8c8 2000 	str.w	r2, [r8]
 800fa6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa72:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fa76:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fa7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fa7e:	9307      	str	r3, [sp, #28]
 800fa80:	f8cd 8018 	str.w	r8, [sp, #24]
 800fa84:	ee08 0a10 	vmov	s16, r0
 800fa88:	4b9f      	ldr	r3, [pc, #636]	; (800fd08 <_printf_float+0x2dc>)
 800fa8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fa8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fa92:	f7f1 f84b 	bl	8000b2c <__aeabi_dcmpun>
 800fa96:	bb88      	cbnz	r0, 800fafc <_printf_float+0xd0>
 800fa98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fa9c:	4b9a      	ldr	r3, [pc, #616]	; (800fd08 <_printf_float+0x2dc>)
 800fa9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800faa2:	f7f1 f825 	bl	8000af0 <__aeabi_dcmple>
 800faa6:	bb48      	cbnz	r0, 800fafc <_printf_float+0xd0>
 800faa8:	2200      	movs	r2, #0
 800faaa:	2300      	movs	r3, #0
 800faac:	4640      	mov	r0, r8
 800faae:	4649      	mov	r1, r9
 800fab0:	f7f1 f814 	bl	8000adc <__aeabi_dcmplt>
 800fab4:	b110      	cbz	r0, 800fabc <_printf_float+0x90>
 800fab6:	232d      	movs	r3, #45	; 0x2d
 800fab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fabc:	4b93      	ldr	r3, [pc, #588]	; (800fd0c <_printf_float+0x2e0>)
 800fabe:	4894      	ldr	r0, [pc, #592]	; (800fd10 <_printf_float+0x2e4>)
 800fac0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fac4:	bf94      	ite	ls
 800fac6:	4698      	movls	r8, r3
 800fac8:	4680      	movhi	r8, r0
 800faca:	2303      	movs	r3, #3
 800facc:	6123      	str	r3, [r4, #16]
 800face:	9b05      	ldr	r3, [sp, #20]
 800fad0:	f023 0204 	bic.w	r2, r3, #4
 800fad4:	6022      	str	r2, [r4, #0]
 800fad6:	f04f 0900 	mov.w	r9, #0
 800fada:	9700      	str	r7, [sp, #0]
 800fadc:	4633      	mov	r3, r6
 800fade:	aa0b      	add	r2, sp, #44	; 0x2c
 800fae0:	4621      	mov	r1, r4
 800fae2:	4628      	mov	r0, r5
 800fae4:	f000 f9d8 	bl	800fe98 <_printf_common>
 800fae8:	3001      	adds	r0, #1
 800faea:	f040 8090 	bne.w	800fc0e <_printf_float+0x1e2>
 800faee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800faf2:	b00d      	add	sp, #52	; 0x34
 800faf4:	ecbd 8b02 	vpop	{d8}
 800faf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fafc:	4642      	mov	r2, r8
 800fafe:	464b      	mov	r3, r9
 800fb00:	4640      	mov	r0, r8
 800fb02:	4649      	mov	r1, r9
 800fb04:	f7f1 f812 	bl	8000b2c <__aeabi_dcmpun>
 800fb08:	b140      	cbz	r0, 800fb1c <_printf_float+0xf0>
 800fb0a:	464b      	mov	r3, r9
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	bfbc      	itt	lt
 800fb10:	232d      	movlt	r3, #45	; 0x2d
 800fb12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fb16:	487f      	ldr	r0, [pc, #508]	; (800fd14 <_printf_float+0x2e8>)
 800fb18:	4b7f      	ldr	r3, [pc, #508]	; (800fd18 <_printf_float+0x2ec>)
 800fb1a:	e7d1      	b.n	800fac0 <_printf_float+0x94>
 800fb1c:	6863      	ldr	r3, [r4, #4]
 800fb1e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800fb22:	9206      	str	r2, [sp, #24]
 800fb24:	1c5a      	adds	r2, r3, #1
 800fb26:	d13f      	bne.n	800fba8 <_printf_float+0x17c>
 800fb28:	2306      	movs	r3, #6
 800fb2a:	6063      	str	r3, [r4, #4]
 800fb2c:	9b05      	ldr	r3, [sp, #20]
 800fb2e:	6861      	ldr	r1, [r4, #4]
 800fb30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fb34:	2300      	movs	r3, #0
 800fb36:	9303      	str	r3, [sp, #12]
 800fb38:	ab0a      	add	r3, sp, #40	; 0x28
 800fb3a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fb3e:	ab09      	add	r3, sp, #36	; 0x24
 800fb40:	ec49 8b10 	vmov	d0, r8, r9
 800fb44:	9300      	str	r3, [sp, #0]
 800fb46:	6022      	str	r2, [r4, #0]
 800fb48:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fb4c:	4628      	mov	r0, r5
 800fb4e:	f7ff fecd 	bl	800f8ec <__cvt>
 800fb52:	9b06      	ldr	r3, [sp, #24]
 800fb54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fb56:	2b47      	cmp	r3, #71	; 0x47
 800fb58:	4680      	mov	r8, r0
 800fb5a:	d108      	bne.n	800fb6e <_printf_float+0x142>
 800fb5c:	1cc8      	adds	r0, r1, #3
 800fb5e:	db02      	blt.n	800fb66 <_printf_float+0x13a>
 800fb60:	6863      	ldr	r3, [r4, #4]
 800fb62:	4299      	cmp	r1, r3
 800fb64:	dd41      	ble.n	800fbea <_printf_float+0x1be>
 800fb66:	f1ab 0b02 	sub.w	fp, fp, #2
 800fb6a:	fa5f fb8b 	uxtb.w	fp, fp
 800fb6e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fb72:	d820      	bhi.n	800fbb6 <_printf_float+0x18a>
 800fb74:	3901      	subs	r1, #1
 800fb76:	465a      	mov	r2, fp
 800fb78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fb7c:	9109      	str	r1, [sp, #36]	; 0x24
 800fb7e:	f7ff ff17 	bl	800f9b0 <__exponent>
 800fb82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb84:	1813      	adds	r3, r2, r0
 800fb86:	2a01      	cmp	r2, #1
 800fb88:	4681      	mov	r9, r0
 800fb8a:	6123      	str	r3, [r4, #16]
 800fb8c:	dc02      	bgt.n	800fb94 <_printf_float+0x168>
 800fb8e:	6822      	ldr	r2, [r4, #0]
 800fb90:	07d2      	lsls	r2, r2, #31
 800fb92:	d501      	bpl.n	800fb98 <_printf_float+0x16c>
 800fb94:	3301      	adds	r3, #1
 800fb96:	6123      	str	r3, [r4, #16]
 800fb98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d09c      	beq.n	800fada <_printf_float+0xae>
 800fba0:	232d      	movs	r3, #45	; 0x2d
 800fba2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fba6:	e798      	b.n	800fada <_printf_float+0xae>
 800fba8:	9a06      	ldr	r2, [sp, #24]
 800fbaa:	2a47      	cmp	r2, #71	; 0x47
 800fbac:	d1be      	bne.n	800fb2c <_printf_float+0x100>
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d1bc      	bne.n	800fb2c <_printf_float+0x100>
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	e7b9      	b.n	800fb2a <_printf_float+0xfe>
 800fbb6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800fbba:	d118      	bne.n	800fbee <_printf_float+0x1c2>
 800fbbc:	2900      	cmp	r1, #0
 800fbbe:	6863      	ldr	r3, [r4, #4]
 800fbc0:	dd0b      	ble.n	800fbda <_printf_float+0x1ae>
 800fbc2:	6121      	str	r1, [r4, #16]
 800fbc4:	b913      	cbnz	r3, 800fbcc <_printf_float+0x1a0>
 800fbc6:	6822      	ldr	r2, [r4, #0]
 800fbc8:	07d0      	lsls	r0, r2, #31
 800fbca:	d502      	bpl.n	800fbd2 <_printf_float+0x1a6>
 800fbcc:	3301      	adds	r3, #1
 800fbce:	440b      	add	r3, r1
 800fbd0:	6123      	str	r3, [r4, #16]
 800fbd2:	65a1      	str	r1, [r4, #88]	; 0x58
 800fbd4:	f04f 0900 	mov.w	r9, #0
 800fbd8:	e7de      	b.n	800fb98 <_printf_float+0x16c>
 800fbda:	b913      	cbnz	r3, 800fbe2 <_printf_float+0x1b6>
 800fbdc:	6822      	ldr	r2, [r4, #0]
 800fbde:	07d2      	lsls	r2, r2, #31
 800fbe0:	d501      	bpl.n	800fbe6 <_printf_float+0x1ba>
 800fbe2:	3302      	adds	r3, #2
 800fbe4:	e7f4      	b.n	800fbd0 <_printf_float+0x1a4>
 800fbe6:	2301      	movs	r3, #1
 800fbe8:	e7f2      	b.n	800fbd0 <_printf_float+0x1a4>
 800fbea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800fbee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbf0:	4299      	cmp	r1, r3
 800fbf2:	db05      	blt.n	800fc00 <_printf_float+0x1d4>
 800fbf4:	6823      	ldr	r3, [r4, #0]
 800fbf6:	6121      	str	r1, [r4, #16]
 800fbf8:	07d8      	lsls	r0, r3, #31
 800fbfa:	d5ea      	bpl.n	800fbd2 <_printf_float+0x1a6>
 800fbfc:	1c4b      	adds	r3, r1, #1
 800fbfe:	e7e7      	b.n	800fbd0 <_printf_float+0x1a4>
 800fc00:	2900      	cmp	r1, #0
 800fc02:	bfd4      	ite	le
 800fc04:	f1c1 0202 	rsble	r2, r1, #2
 800fc08:	2201      	movgt	r2, #1
 800fc0a:	4413      	add	r3, r2
 800fc0c:	e7e0      	b.n	800fbd0 <_printf_float+0x1a4>
 800fc0e:	6823      	ldr	r3, [r4, #0]
 800fc10:	055a      	lsls	r2, r3, #21
 800fc12:	d407      	bmi.n	800fc24 <_printf_float+0x1f8>
 800fc14:	6923      	ldr	r3, [r4, #16]
 800fc16:	4642      	mov	r2, r8
 800fc18:	4631      	mov	r1, r6
 800fc1a:	4628      	mov	r0, r5
 800fc1c:	47b8      	blx	r7
 800fc1e:	3001      	adds	r0, #1
 800fc20:	d12c      	bne.n	800fc7c <_printf_float+0x250>
 800fc22:	e764      	b.n	800faee <_printf_float+0xc2>
 800fc24:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fc28:	f240 80e0 	bls.w	800fdec <_printf_float+0x3c0>
 800fc2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fc30:	2200      	movs	r2, #0
 800fc32:	2300      	movs	r3, #0
 800fc34:	f7f0 ff48 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc38:	2800      	cmp	r0, #0
 800fc3a:	d034      	beq.n	800fca6 <_printf_float+0x27a>
 800fc3c:	4a37      	ldr	r2, [pc, #220]	; (800fd1c <_printf_float+0x2f0>)
 800fc3e:	2301      	movs	r3, #1
 800fc40:	4631      	mov	r1, r6
 800fc42:	4628      	mov	r0, r5
 800fc44:	47b8      	blx	r7
 800fc46:	3001      	adds	r0, #1
 800fc48:	f43f af51 	beq.w	800faee <_printf_float+0xc2>
 800fc4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fc50:	429a      	cmp	r2, r3
 800fc52:	db02      	blt.n	800fc5a <_printf_float+0x22e>
 800fc54:	6823      	ldr	r3, [r4, #0]
 800fc56:	07d8      	lsls	r0, r3, #31
 800fc58:	d510      	bpl.n	800fc7c <_printf_float+0x250>
 800fc5a:	ee18 3a10 	vmov	r3, s16
 800fc5e:	4652      	mov	r2, sl
 800fc60:	4631      	mov	r1, r6
 800fc62:	4628      	mov	r0, r5
 800fc64:	47b8      	blx	r7
 800fc66:	3001      	adds	r0, #1
 800fc68:	f43f af41 	beq.w	800faee <_printf_float+0xc2>
 800fc6c:	f04f 0800 	mov.w	r8, #0
 800fc70:	f104 091a 	add.w	r9, r4, #26
 800fc74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc76:	3b01      	subs	r3, #1
 800fc78:	4543      	cmp	r3, r8
 800fc7a:	dc09      	bgt.n	800fc90 <_printf_float+0x264>
 800fc7c:	6823      	ldr	r3, [r4, #0]
 800fc7e:	079b      	lsls	r3, r3, #30
 800fc80:	f100 8105 	bmi.w	800fe8e <_printf_float+0x462>
 800fc84:	68e0      	ldr	r0, [r4, #12]
 800fc86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc88:	4298      	cmp	r0, r3
 800fc8a:	bfb8      	it	lt
 800fc8c:	4618      	movlt	r0, r3
 800fc8e:	e730      	b.n	800faf2 <_printf_float+0xc6>
 800fc90:	2301      	movs	r3, #1
 800fc92:	464a      	mov	r2, r9
 800fc94:	4631      	mov	r1, r6
 800fc96:	4628      	mov	r0, r5
 800fc98:	47b8      	blx	r7
 800fc9a:	3001      	adds	r0, #1
 800fc9c:	f43f af27 	beq.w	800faee <_printf_float+0xc2>
 800fca0:	f108 0801 	add.w	r8, r8, #1
 800fca4:	e7e6      	b.n	800fc74 <_printf_float+0x248>
 800fca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	dc39      	bgt.n	800fd20 <_printf_float+0x2f4>
 800fcac:	4a1b      	ldr	r2, [pc, #108]	; (800fd1c <_printf_float+0x2f0>)
 800fcae:	2301      	movs	r3, #1
 800fcb0:	4631      	mov	r1, r6
 800fcb2:	4628      	mov	r0, r5
 800fcb4:	47b8      	blx	r7
 800fcb6:	3001      	adds	r0, #1
 800fcb8:	f43f af19 	beq.w	800faee <_printf_float+0xc2>
 800fcbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fcc0:	4313      	orrs	r3, r2
 800fcc2:	d102      	bne.n	800fcca <_printf_float+0x29e>
 800fcc4:	6823      	ldr	r3, [r4, #0]
 800fcc6:	07d9      	lsls	r1, r3, #31
 800fcc8:	d5d8      	bpl.n	800fc7c <_printf_float+0x250>
 800fcca:	ee18 3a10 	vmov	r3, s16
 800fcce:	4652      	mov	r2, sl
 800fcd0:	4631      	mov	r1, r6
 800fcd2:	4628      	mov	r0, r5
 800fcd4:	47b8      	blx	r7
 800fcd6:	3001      	adds	r0, #1
 800fcd8:	f43f af09 	beq.w	800faee <_printf_float+0xc2>
 800fcdc:	f04f 0900 	mov.w	r9, #0
 800fce0:	f104 0a1a 	add.w	sl, r4, #26
 800fce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fce6:	425b      	negs	r3, r3
 800fce8:	454b      	cmp	r3, r9
 800fcea:	dc01      	bgt.n	800fcf0 <_printf_float+0x2c4>
 800fcec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcee:	e792      	b.n	800fc16 <_printf_float+0x1ea>
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	4652      	mov	r2, sl
 800fcf4:	4631      	mov	r1, r6
 800fcf6:	4628      	mov	r0, r5
 800fcf8:	47b8      	blx	r7
 800fcfa:	3001      	adds	r0, #1
 800fcfc:	f43f aef7 	beq.w	800faee <_printf_float+0xc2>
 800fd00:	f109 0901 	add.w	r9, r9, #1
 800fd04:	e7ee      	b.n	800fce4 <_printf_float+0x2b8>
 800fd06:	bf00      	nop
 800fd08:	7fefffff 	.word	0x7fefffff
 800fd0c:	08014dc4 	.word	0x08014dc4
 800fd10:	08014dc8 	.word	0x08014dc8
 800fd14:	08014dd0 	.word	0x08014dd0
 800fd18:	08014dcc 	.word	0x08014dcc
 800fd1c:	08014dd4 	.word	0x08014dd4
 800fd20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fd24:	429a      	cmp	r2, r3
 800fd26:	bfa8      	it	ge
 800fd28:	461a      	movge	r2, r3
 800fd2a:	2a00      	cmp	r2, #0
 800fd2c:	4691      	mov	r9, r2
 800fd2e:	dc37      	bgt.n	800fda0 <_printf_float+0x374>
 800fd30:	f04f 0b00 	mov.w	fp, #0
 800fd34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fd38:	f104 021a 	add.w	r2, r4, #26
 800fd3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fd3e:	9305      	str	r3, [sp, #20]
 800fd40:	eba3 0309 	sub.w	r3, r3, r9
 800fd44:	455b      	cmp	r3, fp
 800fd46:	dc33      	bgt.n	800fdb0 <_printf_float+0x384>
 800fd48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	db3b      	blt.n	800fdc8 <_printf_float+0x39c>
 800fd50:	6823      	ldr	r3, [r4, #0]
 800fd52:	07da      	lsls	r2, r3, #31
 800fd54:	d438      	bmi.n	800fdc8 <_printf_float+0x39c>
 800fd56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd58:	9a05      	ldr	r2, [sp, #20]
 800fd5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fd5c:	1a9a      	subs	r2, r3, r2
 800fd5e:	eba3 0901 	sub.w	r9, r3, r1
 800fd62:	4591      	cmp	r9, r2
 800fd64:	bfa8      	it	ge
 800fd66:	4691      	movge	r9, r2
 800fd68:	f1b9 0f00 	cmp.w	r9, #0
 800fd6c:	dc35      	bgt.n	800fdda <_printf_float+0x3ae>
 800fd6e:	f04f 0800 	mov.w	r8, #0
 800fd72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fd76:	f104 0a1a 	add.w	sl, r4, #26
 800fd7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fd7e:	1a9b      	subs	r3, r3, r2
 800fd80:	eba3 0309 	sub.w	r3, r3, r9
 800fd84:	4543      	cmp	r3, r8
 800fd86:	f77f af79 	ble.w	800fc7c <_printf_float+0x250>
 800fd8a:	2301      	movs	r3, #1
 800fd8c:	4652      	mov	r2, sl
 800fd8e:	4631      	mov	r1, r6
 800fd90:	4628      	mov	r0, r5
 800fd92:	47b8      	blx	r7
 800fd94:	3001      	adds	r0, #1
 800fd96:	f43f aeaa 	beq.w	800faee <_printf_float+0xc2>
 800fd9a:	f108 0801 	add.w	r8, r8, #1
 800fd9e:	e7ec      	b.n	800fd7a <_printf_float+0x34e>
 800fda0:	4613      	mov	r3, r2
 800fda2:	4631      	mov	r1, r6
 800fda4:	4642      	mov	r2, r8
 800fda6:	4628      	mov	r0, r5
 800fda8:	47b8      	blx	r7
 800fdaa:	3001      	adds	r0, #1
 800fdac:	d1c0      	bne.n	800fd30 <_printf_float+0x304>
 800fdae:	e69e      	b.n	800faee <_printf_float+0xc2>
 800fdb0:	2301      	movs	r3, #1
 800fdb2:	4631      	mov	r1, r6
 800fdb4:	4628      	mov	r0, r5
 800fdb6:	9205      	str	r2, [sp, #20]
 800fdb8:	47b8      	blx	r7
 800fdba:	3001      	adds	r0, #1
 800fdbc:	f43f ae97 	beq.w	800faee <_printf_float+0xc2>
 800fdc0:	9a05      	ldr	r2, [sp, #20]
 800fdc2:	f10b 0b01 	add.w	fp, fp, #1
 800fdc6:	e7b9      	b.n	800fd3c <_printf_float+0x310>
 800fdc8:	ee18 3a10 	vmov	r3, s16
 800fdcc:	4652      	mov	r2, sl
 800fdce:	4631      	mov	r1, r6
 800fdd0:	4628      	mov	r0, r5
 800fdd2:	47b8      	blx	r7
 800fdd4:	3001      	adds	r0, #1
 800fdd6:	d1be      	bne.n	800fd56 <_printf_float+0x32a>
 800fdd8:	e689      	b.n	800faee <_printf_float+0xc2>
 800fdda:	9a05      	ldr	r2, [sp, #20]
 800fddc:	464b      	mov	r3, r9
 800fdde:	4442      	add	r2, r8
 800fde0:	4631      	mov	r1, r6
 800fde2:	4628      	mov	r0, r5
 800fde4:	47b8      	blx	r7
 800fde6:	3001      	adds	r0, #1
 800fde8:	d1c1      	bne.n	800fd6e <_printf_float+0x342>
 800fdea:	e680      	b.n	800faee <_printf_float+0xc2>
 800fdec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fdee:	2a01      	cmp	r2, #1
 800fdf0:	dc01      	bgt.n	800fdf6 <_printf_float+0x3ca>
 800fdf2:	07db      	lsls	r3, r3, #31
 800fdf4:	d538      	bpl.n	800fe68 <_printf_float+0x43c>
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	4642      	mov	r2, r8
 800fdfa:	4631      	mov	r1, r6
 800fdfc:	4628      	mov	r0, r5
 800fdfe:	47b8      	blx	r7
 800fe00:	3001      	adds	r0, #1
 800fe02:	f43f ae74 	beq.w	800faee <_printf_float+0xc2>
 800fe06:	ee18 3a10 	vmov	r3, s16
 800fe0a:	4652      	mov	r2, sl
 800fe0c:	4631      	mov	r1, r6
 800fe0e:	4628      	mov	r0, r5
 800fe10:	47b8      	blx	r7
 800fe12:	3001      	adds	r0, #1
 800fe14:	f43f ae6b 	beq.w	800faee <_printf_float+0xc2>
 800fe18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	2300      	movs	r3, #0
 800fe20:	f7f0 fe52 	bl	8000ac8 <__aeabi_dcmpeq>
 800fe24:	b9d8      	cbnz	r0, 800fe5e <_printf_float+0x432>
 800fe26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe28:	f108 0201 	add.w	r2, r8, #1
 800fe2c:	3b01      	subs	r3, #1
 800fe2e:	4631      	mov	r1, r6
 800fe30:	4628      	mov	r0, r5
 800fe32:	47b8      	blx	r7
 800fe34:	3001      	adds	r0, #1
 800fe36:	d10e      	bne.n	800fe56 <_printf_float+0x42a>
 800fe38:	e659      	b.n	800faee <_printf_float+0xc2>
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	4652      	mov	r2, sl
 800fe3e:	4631      	mov	r1, r6
 800fe40:	4628      	mov	r0, r5
 800fe42:	47b8      	blx	r7
 800fe44:	3001      	adds	r0, #1
 800fe46:	f43f ae52 	beq.w	800faee <_printf_float+0xc2>
 800fe4a:	f108 0801 	add.w	r8, r8, #1
 800fe4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe50:	3b01      	subs	r3, #1
 800fe52:	4543      	cmp	r3, r8
 800fe54:	dcf1      	bgt.n	800fe3a <_printf_float+0x40e>
 800fe56:	464b      	mov	r3, r9
 800fe58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fe5c:	e6dc      	b.n	800fc18 <_printf_float+0x1ec>
 800fe5e:	f04f 0800 	mov.w	r8, #0
 800fe62:	f104 0a1a 	add.w	sl, r4, #26
 800fe66:	e7f2      	b.n	800fe4e <_printf_float+0x422>
 800fe68:	2301      	movs	r3, #1
 800fe6a:	4642      	mov	r2, r8
 800fe6c:	e7df      	b.n	800fe2e <_printf_float+0x402>
 800fe6e:	2301      	movs	r3, #1
 800fe70:	464a      	mov	r2, r9
 800fe72:	4631      	mov	r1, r6
 800fe74:	4628      	mov	r0, r5
 800fe76:	47b8      	blx	r7
 800fe78:	3001      	adds	r0, #1
 800fe7a:	f43f ae38 	beq.w	800faee <_printf_float+0xc2>
 800fe7e:	f108 0801 	add.w	r8, r8, #1
 800fe82:	68e3      	ldr	r3, [r4, #12]
 800fe84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fe86:	1a5b      	subs	r3, r3, r1
 800fe88:	4543      	cmp	r3, r8
 800fe8a:	dcf0      	bgt.n	800fe6e <_printf_float+0x442>
 800fe8c:	e6fa      	b.n	800fc84 <_printf_float+0x258>
 800fe8e:	f04f 0800 	mov.w	r8, #0
 800fe92:	f104 0919 	add.w	r9, r4, #25
 800fe96:	e7f4      	b.n	800fe82 <_printf_float+0x456>

0800fe98 <_printf_common>:
 800fe98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe9c:	4616      	mov	r6, r2
 800fe9e:	4699      	mov	r9, r3
 800fea0:	688a      	ldr	r2, [r1, #8]
 800fea2:	690b      	ldr	r3, [r1, #16]
 800fea4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fea8:	4293      	cmp	r3, r2
 800feaa:	bfb8      	it	lt
 800feac:	4613      	movlt	r3, r2
 800feae:	6033      	str	r3, [r6, #0]
 800feb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800feb4:	4607      	mov	r7, r0
 800feb6:	460c      	mov	r4, r1
 800feb8:	b10a      	cbz	r2, 800febe <_printf_common+0x26>
 800feba:	3301      	adds	r3, #1
 800febc:	6033      	str	r3, [r6, #0]
 800febe:	6823      	ldr	r3, [r4, #0]
 800fec0:	0699      	lsls	r1, r3, #26
 800fec2:	bf42      	ittt	mi
 800fec4:	6833      	ldrmi	r3, [r6, #0]
 800fec6:	3302      	addmi	r3, #2
 800fec8:	6033      	strmi	r3, [r6, #0]
 800feca:	6825      	ldr	r5, [r4, #0]
 800fecc:	f015 0506 	ands.w	r5, r5, #6
 800fed0:	d106      	bne.n	800fee0 <_printf_common+0x48>
 800fed2:	f104 0a19 	add.w	sl, r4, #25
 800fed6:	68e3      	ldr	r3, [r4, #12]
 800fed8:	6832      	ldr	r2, [r6, #0]
 800feda:	1a9b      	subs	r3, r3, r2
 800fedc:	42ab      	cmp	r3, r5
 800fede:	dc26      	bgt.n	800ff2e <_printf_common+0x96>
 800fee0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fee4:	1e13      	subs	r3, r2, #0
 800fee6:	6822      	ldr	r2, [r4, #0]
 800fee8:	bf18      	it	ne
 800feea:	2301      	movne	r3, #1
 800feec:	0692      	lsls	r2, r2, #26
 800feee:	d42b      	bmi.n	800ff48 <_printf_common+0xb0>
 800fef0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fef4:	4649      	mov	r1, r9
 800fef6:	4638      	mov	r0, r7
 800fef8:	47c0      	blx	r8
 800fefa:	3001      	adds	r0, #1
 800fefc:	d01e      	beq.n	800ff3c <_printf_common+0xa4>
 800fefe:	6823      	ldr	r3, [r4, #0]
 800ff00:	68e5      	ldr	r5, [r4, #12]
 800ff02:	6832      	ldr	r2, [r6, #0]
 800ff04:	f003 0306 	and.w	r3, r3, #6
 800ff08:	2b04      	cmp	r3, #4
 800ff0a:	bf08      	it	eq
 800ff0c:	1aad      	subeq	r5, r5, r2
 800ff0e:	68a3      	ldr	r3, [r4, #8]
 800ff10:	6922      	ldr	r2, [r4, #16]
 800ff12:	bf0c      	ite	eq
 800ff14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff18:	2500      	movne	r5, #0
 800ff1a:	4293      	cmp	r3, r2
 800ff1c:	bfc4      	itt	gt
 800ff1e:	1a9b      	subgt	r3, r3, r2
 800ff20:	18ed      	addgt	r5, r5, r3
 800ff22:	2600      	movs	r6, #0
 800ff24:	341a      	adds	r4, #26
 800ff26:	42b5      	cmp	r5, r6
 800ff28:	d11a      	bne.n	800ff60 <_printf_common+0xc8>
 800ff2a:	2000      	movs	r0, #0
 800ff2c:	e008      	b.n	800ff40 <_printf_common+0xa8>
 800ff2e:	2301      	movs	r3, #1
 800ff30:	4652      	mov	r2, sl
 800ff32:	4649      	mov	r1, r9
 800ff34:	4638      	mov	r0, r7
 800ff36:	47c0      	blx	r8
 800ff38:	3001      	adds	r0, #1
 800ff3a:	d103      	bne.n	800ff44 <_printf_common+0xac>
 800ff3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff44:	3501      	adds	r5, #1
 800ff46:	e7c6      	b.n	800fed6 <_printf_common+0x3e>
 800ff48:	18e1      	adds	r1, r4, r3
 800ff4a:	1c5a      	adds	r2, r3, #1
 800ff4c:	2030      	movs	r0, #48	; 0x30
 800ff4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ff52:	4422      	add	r2, r4
 800ff54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ff58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ff5c:	3302      	adds	r3, #2
 800ff5e:	e7c7      	b.n	800fef0 <_printf_common+0x58>
 800ff60:	2301      	movs	r3, #1
 800ff62:	4622      	mov	r2, r4
 800ff64:	4649      	mov	r1, r9
 800ff66:	4638      	mov	r0, r7
 800ff68:	47c0      	blx	r8
 800ff6a:	3001      	adds	r0, #1
 800ff6c:	d0e6      	beq.n	800ff3c <_printf_common+0xa4>
 800ff6e:	3601      	adds	r6, #1
 800ff70:	e7d9      	b.n	800ff26 <_printf_common+0x8e>
	...

0800ff74 <_printf_i>:
 800ff74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff78:	7e0f      	ldrb	r7, [r1, #24]
 800ff7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ff7c:	2f78      	cmp	r7, #120	; 0x78
 800ff7e:	4691      	mov	r9, r2
 800ff80:	4680      	mov	r8, r0
 800ff82:	460c      	mov	r4, r1
 800ff84:	469a      	mov	sl, r3
 800ff86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ff8a:	d807      	bhi.n	800ff9c <_printf_i+0x28>
 800ff8c:	2f62      	cmp	r7, #98	; 0x62
 800ff8e:	d80a      	bhi.n	800ffa6 <_printf_i+0x32>
 800ff90:	2f00      	cmp	r7, #0
 800ff92:	f000 80d8 	beq.w	8010146 <_printf_i+0x1d2>
 800ff96:	2f58      	cmp	r7, #88	; 0x58
 800ff98:	f000 80a3 	beq.w	80100e2 <_printf_i+0x16e>
 800ff9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ffa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ffa4:	e03a      	b.n	801001c <_printf_i+0xa8>
 800ffa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ffaa:	2b15      	cmp	r3, #21
 800ffac:	d8f6      	bhi.n	800ff9c <_printf_i+0x28>
 800ffae:	a101      	add	r1, pc, #4	; (adr r1, 800ffb4 <_printf_i+0x40>)
 800ffb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ffb4:	0801000d 	.word	0x0801000d
 800ffb8:	08010021 	.word	0x08010021
 800ffbc:	0800ff9d 	.word	0x0800ff9d
 800ffc0:	0800ff9d 	.word	0x0800ff9d
 800ffc4:	0800ff9d 	.word	0x0800ff9d
 800ffc8:	0800ff9d 	.word	0x0800ff9d
 800ffcc:	08010021 	.word	0x08010021
 800ffd0:	0800ff9d 	.word	0x0800ff9d
 800ffd4:	0800ff9d 	.word	0x0800ff9d
 800ffd8:	0800ff9d 	.word	0x0800ff9d
 800ffdc:	0800ff9d 	.word	0x0800ff9d
 800ffe0:	0801012d 	.word	0x0801012d
 800ffe4:	08010051 	.word	0x08010051
 800ffe8:	0801010f 	.word	0x0801010f
 800ffec:	0800ff9d 	.word	0x0800ff9d
 800fff0:	0800ff9d 	.word	0x0800ff9d
 800fff4:	0801014f 	.word	0x0801014f
 800fff8:	0800ff9d 	.word	0x0800ff9d
 800fffc:	08010051 	.word	0x08010051
 8010000:	0800ff9d 	.word	0x0800ff9d
 8010004:	0800ff9d 	.word	0x0800ff9d
 8010008:	08010117 	.word	0x08010117
 801000c:	682b      	ldr	r3, [r5, #0]
 801000e:	1d1a      	adds	r2, r3, #4
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	602a      	str	r2, [r5, #0]
 8010014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801001c:	2301      	movs	r3, #1
 801001e:	e0a3      	b.n	8010168 <_printf_i+0x1f4>
 8010020:	6820      	ldr	r0, [r4, #0]
 8010022:	6829      	ldr	r1, [r5, #0]
 8010024:	0606      	lsls	r6, r0, #24
 8010026:	f101 0304 	add.w	r3, r1, #4
 801002a:	d50a      	bpl.n	8010042 <_printf_i+0xce>
 801002c:	680e      	ldr	r6, [r1, #0]
 801002e:	602b      	str	r3, [r5, #0]
 8010030:	2e00      	cmp	r6, #0
 8010032:	da03      	bge.n	801003c <_printf_i+0xc8>
 8010034:	232d      	movs	r3, #45	; 0x2d
 8010036:	4276      	negs	r6, r6
 8010038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801003c:	485e      	ldr	r0, [pc, #376]	; (80101b8 <_printf_i+0x244>)
 801003e:	230a      	movs	r3, #10
 8010040:	e019      	b.n	8010076 <_printf_i+0x102>
 8010042:	680e      	ldr	r6, [r1, #0]
 8010044:	602b      	str	r3, [r5, #0]
 8010046:	f010 0f40 	tst.w	r0, #64	; 0x40
 801004a:	bf18      	it	ne
 801004c:	b236      	sxthne	r6, r6
 801004e:	e7ef      	b.n	8010030 <_printf_i+0xbc>
 8010050:	682b      	ldr	r3, [r5, #0]
 8010052:	6820      	ldr	r0, [r4, #0]
 8010054:	1d19      	adds	r1, r3, #4
 8010056:	6029      	str	r1, [r5, #0]
 8010058:	0601      	lsls	r1, r0, #24
 801005a:	d501      	bpl.n	8010060 <_printf_i+0xec>
 801005c:	681e      	ldr	r6, [r3, #0]
 801005e:	e002      	b.n	8010066 <_printf_i+0xf2>
 8010060:	0646      	lsls	r6, r0, #25
 8010062:	d5fb      	bpl.n	801005c <_printf_i+0xe8>
 8010064:	881e      	ldrh	r6, [r3, #0]
 8010066:	4854      	ldr	r0, [pc, #336]	; (80101b8 <_printf_i+0x244>)
 8010068:	2f6f      	cmp	r7, #111	; 0x6f
 801006a:	bf0c      	ite	eq
 801006c:	2308      	moveq	r3, #8
 801006e:	230a      	movne	r3, #10
 8010070:	2100      	movs	r1, #0
 8010072:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010076:	6865      	ldr	r5, [r4, #4]
 8010078:	60a5      	str	r5, [r4, #8]
 801007a:	2d00      	cmp	r5, #0
 801007c:	bfa2      	ittt	ge
 801007e:	6821      	ldrge	r1, [r4, #0]
 8010080:	f021 0104 	bicge.w	r1, r1, #4
 8010084:	6021      	strge	r1, [r4, #0]
 8010086:	b90e      	cbnz	r6, 801008c <_printf_i+0x118>
 8010088:	2d00      	cmp	r5, #0
 801008a:	d04d      	beq.n	8010128 <_printf_i+0x1b4>
 801008c:	4615      	mov	r5, r2
 801008e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010092:	fb03 6711 	mls	r7, r3, r1, r6
 8010096:	5dc7      	ldrb	r7, [r0, r7]
 8010098:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801009c:	4637      	mov	r7, r6
 801009e:	42bb      	cmp	r3, r7
 80100a0:	460e      	mov	r6, r1
 80100a2:	d9f4      	bls.n	801008e <_printf_i+0x11a>
 80100a4:	2b08      	cmp	r3, #8
 80100a6:	d10b      	bne.n	80100c0 <_printf_i+0x14c>
 80100a8:	6823      	ldr	r3, [r4, #0]
 80100aa:	07de      	lsls	r6, r3, #31
 80100ac:	d508      	bpl.n	80100c0 <_printf_i+0x14c>
 80100ae:	6923      	ldr	r3, [r4, #16]
 80100b0:	6861      	ldr	r1, [r4, #4]
 80100b2:	4299      	cmp	r1, r3
 80100b4:	bfde      	ittt	le
 80100b6:	2330      	movle	r3, #48	; 0x30
 80100b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80100bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80100c0:	1b52      	subs	r2, r2, r5
 80100c2:	6122      	str	r2, [r4, #16]
 80100c4:	f8cd a000 	str.w	sl, [sp]
 80100c8:	464b      	mov	r3, r9
 80100ca:	aa03      	add	r2, sp, #12
 80100cc:	4621      	mov	r1, r4
 80100ce:	4640      	mov	r0, r8
 80100d0:	f7ff fee2 	bl	800fe98 <_printf_common>
 80100d4:	3001      	adds	r0, #1
 80100d6:	d14c      	bne.n	8010172 <_printf_i+0x1fe>
 80100d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80100dc:	b004      	add	sp, #16
 80100de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100e2:	4835      	ldr	r0, [pc, #212]	; (80101b8 <_printf_i+0x244>)
 80100e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80100e8:	6829      	ldr	r1, [r5, #0]
 80100ea:	6823      	ldr	r3, [r4, #0]
 80100ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80100f0:	6029      	str	r1, [r5, #0]
 80100f2:	061d      	lsls	r5, r3, #24
 80100f4:	d514      	bpl.n	8010120 <_printf_i+0x1ac>
 80100f6:	07df      	lsls	r7, r3, #31
 80100f8:	bf44      	itt	mi
 80100fa:	f043 0320 	orrmi.w	r3, r3, #32
 80100fe:	6023      	strmi	r3, [r4, #0]
 8010100:	b91e      	cbnz	r6, 801010a <_printf_i+0x196>
 8010102:	6823      	ldr	r3, [r4, #0]
 8010104:	f023 0320 	bic.w	r3, r3, #32
 8010108:	6023      	str	r3, [r4, #0]
 801010a:	2310      	movs	r3, #16
 801010c:	e7b0      	b.n	8010070 <_printf_i+0xfc>
 801010e:	6823      	ldr	r3, [r4, #0]
 8010110:	f043 0320 	orr.w	r3, r3, #32
 8010114:	6023      	str	r3, [r4, #0]
 8010116:	2378      	movs	r3, #120	; 0x78
 8010118:	4828      	ldr	r0, [pc, #160]	; (80101bc <_printf_i+0x248>)
 801011a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801011e:	e7e3      	b.n	80100e8 <_printf_i+0x174>
 8010120:	0659      	lsls	r1, r3, #25
 8010122:	bf48      	it	mi
 8010124:	b2b6      	uxthmi	r6, r6
 8010126:	e7e6      	b.n	80100f6 <_printf_i+0x182>
 8010128:	4615      	mov	r5, r2
 801012a:	e7bb      	b.n	80100a4 <_printf_i+0x130>
 801012c:	682b      	ldr	r3, [r5, #0]
 801012e:	6826      	ldr	r6, [r4, #0]
 8010130:	6961      	ldr	r1, [r4, #20]
 8010132:	1d18      	adds	r0, r3, #4
 8010134:	6028      	str	r0, [r5, #0]
 8010136:	0635      	lsls	r5, r6, #24
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	d501      	bpl.n	8010140 <_printf_i+0x1cc>
 801013c:	6019      	str	r1, [r3, #0]
 801013e:	e002      	b.n	8010146 <_printf_i+0x1d2>
 8010140:	0670      	lsls	r0, r6, #25
 8010142:	d5fb      	bpl.n	801013c <_printf_i+0x1c8>
 8010144:	8019      	strh	r1, [r3, #0]
 8010146:	2300      	movs	r3, #0
 8010148:	6123      	str	r3, [r4, #16]
 801014a:	4615      	mov	r5, r2
 801014c:	e7ba      	b.n	80100c4 <_printf_i+0x150>
 801014e:	682b      	ldr	r3, [r5, #0]
 8010150:	1d1a      	adds	r2, r3, #4
 8010152:	602a      	str	r2, [r5, #0]
 8010154:	681d      	ldr	r5, [r3, #0]
 8010156:	6862      	ldr	r2, [r4, #4]
 8010158:	2100      	movs	r1, #0
 801015a:	4628      	mov	r0, r5
 801015c:	f7f0 f840 	bl	80001e0 <memchr>
 8010160:	b108      	cbz	r0, 8010166 <_printf_i+0x1f2>
 8010162:	1b40      	subs	r0, r0, r5
 8010164:	6060      	str	r0, [r4, #4]
 8010166:	6863      	ldr	r3, [r4, #4]
 8010168:	6123      	str	r3, [r4, #16]
 801016a:	2300      	movs	r3, #0
 801016c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010170:	e7a8      	b.n	80100c4 <_printf_i+0x150>
 8010172:	6923      	ldr	r3, [r4, #16]
 8010174:	462a      	mov	r2, r5
 8010176:	4649      	mov	r1, r9
 8010178:	4640      	mov	r0, r8
 801017a:	47d0      	blx	sl
 801017c:	3001      	adds	r0, #1
 801017e:	d0ab      	beq.n	80100d8 <_printf_i+0x164>
 8010180:	6823      	ldr	r3, [r4, #0]
 8010182:	079b      	lsls	r3, r3, #30
 8010184:	d413      	bmi.n	80101ae <_printf_i+0x23a>
 8010186:	68e0      	ldr	r0, [r4, #12]
 8010188:	9b03      	ldr	r3, [sp, #12]
 801018a:	4298      	cmp	r0, r3
 801018c:	bfb8      	it	lt
 801018e:	4618      	movlt	r0, r3
 8010190:	e7a4      	b.n	80100dc <_printf_i+0x168>
 8010192:	2301      	movs	r3, #1
 8010194:	4632      	mov	r2, r6
 8010196:	4649      	mov	r1, r9
 8010198:	4640      	mov	r0, r8
 801019a:	47d0      	blx	sl
 801019c:	3001      	adds	r0, #1
 801019e:	d09b      	beq.n	80100d8 <_printf_i+0x164>
 80101a0:	3501      	adds	r5, #1
 80101a2:	68e3      	ldr	r3, [r4, #12]
 80101a4:	9903      	ldr	r1, [sp, #12]
 80101a6:	1a5b      	subs	r3, r3, r1
 80101a8:	42ab      	cmp	r3, r5
 80101aa:	dcf2      	bgt.n	8010192 <_printf_i+0x21e>
 80101ac:	e7eb      	b.n	8010186 <_printf_i+0x212>
 80101ae:	2500      	movs	r5, #0
 80101b0:	f104 0619 	add.w	r6, r4, #25
 80101b4:	e7f5      	b.n	80101a2 <_printf_i+0x22e>
 80101b6:	bf00      	nop
 80101b8:	08014dd6 	.word	0x08014dd6
 80101bc:	08014de7 	.word	0x08014de7

080101c0 <_scanf_float>:
 80101c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101c4:	b087      	sub	sp, #28
 80101c6:	4617      	mov	r7, r2
 80101c8:	9303      	str	r3, [sp, #12]
 80101ca:	688b      	ldr	r3, [r1, #8]
 80101cc:	1e5a      	subs	r2, r3, #1
 80101ce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80101d2:	bf83      	ittte	hi
 80101d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80101d8:	195b      	addhi	r3, r3, r5
 80101da:	9302      	strhi	r3, [sp, #8]
 80101dc:	2300      	movls	r3, #0
 80101de:	bf86      	itte	hi
 80101e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80101e4:	608b      	strhi	r3, [r1, #8]
 80101e6:	9302      	strls	r3, [sp, #8]
 80101e8:	680b      	ldr	r3, [r1, #0]
 80101ea:	468b      	mov	fp, r1
 80101ec:	2500      	movs	r5, #0
 80101ee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80101f2:	f84b 3b1c 	str.w	r3, [fp], #28
 80101f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80101fa:	4680      	mov	r8, r0
 80101fc:	460c      	mov	r4, r1
 80101fe:	465e      	mov	r6, fp
 8010200:	46aa      	mov	sl, r5
 8010202:	46a9      	mov	r9, r5
 8010204:	9501      	str	r5, [sp, #4]
 8010206:	68a2      	ldr	r2, [r4, #8]
 8010208:	b152      	cbz	r2, 8010220 <_scanf_float+0x60>
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	781b      	ldrb	r3, [r3, #0]
 801020e:	2b4e      	cmp	r3, #78	; 0x4e
 8010210:	d864      	bhi.n	80102dc <_scanf_float+0x11c>
 8010212:	2b40      	cmp	r3, #64	; 0x40
 8010214:	d83c      	bhi.n	8010290 <_scanf_float+0xd0>
 8010216:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801021a:	b2c8      	uxtb	r0, r1
 801021c:	280e      	cmp	r0, #14
 801021e:	d93a      	bls.n	8010296 <_scanf_float+0xd6>
 8010220:	f1b9 0f00 	cmp.w	r9, #0
 8010224:	d003      	beq.n	801022e <_scanf_float+0x6e>
 8010226:	6823      	ldr	r3, [r4, #0]
 8010228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801022c:	6023      	str	r3, [r4, #0]
 801022e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010232:	f1ba 0f01 	cmp.w	sl, #1
 8010236:	f200 8113 	bhi.w	8010460 <_scanf_float+0x2a0>
 801023a:	455e      	cmp	r6, fp
 801023c:	f200 8105 	bhi.w	801044a <_scanf_float+0x28a>
 8010240:	2501      	movs	r5, #1
 8010242:	4628      	mov	r0, r5
 8010244:	b007      	add	sp, #28
 8010246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801024a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801024e:	2a0d      	cmp	r2, #13
 8010250:	d8e6      	bhi.n	8010220 <_scanf_float+0x60>
 8010252:	a101      	add	r1, pc, #4	; (adr r1, 8010258 <_scanf_float+0x98>)
 8010254:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010258:	08010397 	.word	0x08010397
 801025c:	08010221 	.word	0x08010221
 8010260:	08010221 	.word	0x08010221
 8010264:	08010221 	.word	0x08010221
 8010268:	080103f7 	.word	0x080103f7
 801026c:	080103cf 	.word	0x080103cf
 8010270:	08010221 	.word	0x08010221
 8010274:	08010221 	.word	0x08010221
 8010278:	080103a5 	.word	0x080103a5
 801027c:	08010221 	.word	0x08010221
 8010280:	08010221 	.word	0x08010221
 8010284:	08010221 	.word	0x08010221
 8010288:	08010221 	.word	0x08010221
 801028c:	0801035d 	.word	0x0801035d
 8010290:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010294:	e7db      	b.n	801024e <_scanf_float+0x8e>
 8010296:	290e      	cmp	r1, #14
 8010298:	d8c2      	bhi.n	8010220 <_scanf_float+0x60>
 801029a:	a001      	add	r0, pc, #4	; (adr r0, 80102a0 <_scanf_float+0xe0>)
 801029c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80102a0:	0801034f 	.word	0x0801034f
 80102a4:	08010221 	.word	0x08010221
 80102a8:	0801034f 	.word	0x0801034f
 80102ac:	080103e3 	.word	0x080103e3
 80102b0:	08010221 	.word	0x08010221
 80102b4:	080102fd 	.word	0x080102fd
 80102b8:	08010339 	.word	0x08010339
 80102bc:	08010339 	.word	0x08010339
 80102c0:	08010339 	.word	0x08010339
 80102c4:	08010339 	.word	0x08010339
 80102c8:	08010339 	.word	0x08010339
 80102cc:	08010339 	.word	0x08010339
 80102d0:	08010339 	.word	0x08010339
 80102d4:	08010339 	.word	0x08010339
 80102d8:	08010339 	.word	0x08010339
 80102dc:	2b6e      	cmp	r3, #110	; 0x6e
 80102de:	d809      	bhi.n	80102f4 <_scanf_float+0x134>
 80102e0:	2b60      	cmp	r3, #96	; 0x60
 80102e2:	d8b2      	bhi.n	801024a <_scanf_float+0x8a>
 80102e4:	2b54      	cmp	r3, #84	; 0x54
 80102e6:	d077      	beq.n	80103d8 <_scanf_float+0x218>
 80102e8:	2b59      	cmp	r3, #89	; 0x59
 80102ea:	d199      	bne.n	8010220 <_scanf_float+0x60>
 80102ec:	2d07      	cmp	r5, #7
 80102ee:	d197      	bne.n	8010220 <_scanf_float+0x60>
 80102f0:	2508      	movs	r5, #8
 80102f2:	e029      	b.n	8010348 <_scanf_float+0x188>
 80102f4:	2b74      	cmp	r3, #116	; 0x74
 80102f6:	d06f      	beq.n	80103d8 <_scanf_float+0x218>
 80102f8:	2b79      	cmp	r3, #121	; 0x79
 80102fa:	e7f6      	b.n	80102ea <_scanf_float+0x12a>
 80102fc:	6821      	ldr	r1, [r4, #0]
 80102fe:	05c8      	lsls	r0, r1, #23
 8010300:	d51a      	bpl.n	8010338 <_scanf_float+0x178>
 8010302:	9b02      	ldr	r3, [sp, #8]
 8010304:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010308:	6021      	str	r1, [r4, #0]
 801030a:	f109 0901 	add.w	r9, r9, #1
 801030e:	b11b      	cbz	r3, 8010318 <_scanf_float+0x158>
 8010310:	3b01      	subs	r3, #1
 8010312:	3201      	adds	r2, #1
 8010314:	9302      	str	r3, [sp, #8]
 8010316:	60a2      	str	r2, [r4, #8]
 8010318:	68a3      	ldr	r3, [r4, #8]
 801031a:	3b01      	subs	r3, #1
 801031c:	60a3      	str	r3, [r4, #8]
 801031e:	6923      	ldr	r3, [r4, #16]
 8010320:	3301      	adds	r3, #1
 8010322:	6123      	str	r3, [r4, #16]
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	3b01      	subs	r3, #1
 8010328:	2b00      	cmp	r3, #0
 801032a:	607b      	str	r3, [r7, #4]
 801032c:	f340 8084 	ble.w	8010438 <_scanf_float+0x278>
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	3301      	adds	r3, #1
 8010334:	603b      	str	r3, [r7, #0]
 8010336:	e766      	b.n	8010206 <_scanf_float+0x46>
 8010338:	eb1a 0f05 	cmn.w	sl, r5
 801033c:	f47f af70 	bne.w	8010220 <_scanf_float+0x60>
 8010340:	6822      	ldr	r2, [r4, #0]
 8010342:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010346:	6022      	str	r2, [r4, #0]
 8010348:	f806 3b01 	strb.w	r3, [r6], #1
 801034c:	e7e4      	b.n	8010318 <_scanf_float+0x158>
 801034e:	6822      	ldr	r2, [r4, #0]
 8010350:	0610      	lsls	r0, r2, #24
 8010352:	f57f af65 	bpl.w	8010220 <_scanf_float+0x60>
 8010356:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801035a:	e7f4      	b.n	8010346 <_scanf_float+0x186>
 801035c:	f1ba 0f00 	cmp.w	sl, #0
 8010360:	d10e      	bne.n	8010380 <_scanf_float+0x1c0>
 8010362:	f1b9 0f00 	cmp.w	r9, #0
 8010366:	d10e      	bne.n	8010386 <_scanf_float+0x1c6>
 8010368:	6822      	ldr	r2, [r4, #0]
 801036a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801036e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010372:	d108      	bne.n	8010386 <_scanf_float+0x1c6>
 8010374:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010378:	6022      	str	r2, [r4, #0]
 801037a:	f04f 0a01 	mov.w	sl, #1
 801037e:	e7e3      	b.n	8010348 <_scanf_float+0x188>
 8010380:	f1ba 0f02 	cmp.w	sl, #2
 8010384:	d055      	beq.n	8010432 <_scanf_float+0x272>
 8010386:	2d01      	cmp	r5, #1
 8010388:	d002      	beq.n	8010390 <_scanf_float+0x1d0>
 801038a:	2d04      	cmp	r5, #4
 801038c:	f47f af48 	bne.w	8010220 <_scanf_float+0x60>
 8010390:	3501      	adds	r5, #1
 8010392:	b2ed      	uxtb	r5, r5
 8010394:	e7d8      	b.n	8010348 <_scanf_float+0x188>
 8010396:	f1ba 0f01 	cmp.w	sl, #1
 801039a:	f47f af41 	bne.w	8010220 <_scanf_float+0x60>
 801039e:	f04f 0a02 	mov.w	sl, #2
 80103a2:	e7d1      	b.n	8010348 <_scanf_float+0x188>
 80103a4:	b97d      	cbnz	r5, 80103c6 <_scanf_float+0x206>
 80103a6:	f1b9 0f00 	cmp.w	r9, #0
 80103aa:	f47f af3c 	bne.w	8010226 <_scanf_float+0x66>
 80103ae:	6822      	ldr	r2, [r4, #0]
 80103b0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80103b4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80103b8:	f47f af39 	bne.w	801022e <_scanf_float+0x6e>
 80103bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80103c0:	6022      	str	r2, [r4, #0]
 80103c2:	2501      	movs	r5, #1
 80103c4:	e7c0      	b.n	8010348 <_scanf_float+0x188>
 80103c6:	2d03      	cmp	r5, #3
 80103c8:	d0e2      	beq.n	8010390 <_scanf_float+0x1d0>
 80103ca:	2d05      	cmp	r5, #5
 80103cc:	e7de      	b.n	801038c <_scanf_float+0x1cc>
 80103ce:	2d02      	cmp	r5, #2
 80103d0:	f47f af26 	bne.w	8010220 <_scanf_float+0x60>
 80103d4:	2503      	movs	r5, #3
 80103d6:	e7b7      	b.n	8010348 <_scanf_float+0x188>
 80103d8:	2d06      	cmp	r5, #6
 80103da:	f47f af21 	bne.w	8010220 <_scanf_float+0x60>
 80103de:	2507      	movs	r5, #7
 80103e0:	e7b2      	b.n	8010348 <_scanf_float+0x188>
 80103e2:	6822      	ldr	r2, [r4, #0]
 80103e4:	0591      	lsls	r1, r2, #22
 80103e6:	f57f af1b 	bpl.w	8010220 <_scanf_float+0x60>
 80103ea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80103ee:	6022      	str	r2, [r4, #0]
 80103f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80103f4:	e7a8      	b.n	8010348 <_scanf_float+0x188>
 80103f6:	6822      	ldr	r2, [r4, #0]
 80103f8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80103fc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010400:	d006      	beq.n	8010410 <_scanf_float+0x250>
 8010402:	0550      	lsls	r0, r2, #21
 8010404:	f57f af0c 	bpl.w	8010220 <_scanf_float+0x60>
 8010408:	f1b9 0f00 	cmp.w	r9, #0
 801040c:	f43f af0f 	beq.w	801022e <_scanf_float+0x6e>
 8010410:	0591      	lsls	r1, r2, #22
 8010412:	bf58      	it	pl
 8010414:	9901      	ldrpl	r1, [sp, #4]
 8010416:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801041a:	bf58      	it	pl
 801041c:	eba9 0101 	subpl.w	r1, r9, r1
 8010420:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010424:	bf58      	it	pl
 8010426:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801042a:	6022      	str	r2, [r4, #0]
 801042c:	f04f 0900 	mov.w	r9, #0
 8010430:	e78a      	b.n	8010348 <_scanf_float+0x188>
 8010432:	f04f 0a03 	mov.w	sl, #3
 8010436:	e787      	b.n	8010348 <_scanf_float+0x188>
 8010438:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801043c:	4639      	mov	r1, r7
 801043e:	4640      	mov	r0, r8
 8010440:	4798      	blx	r3
 8010442:	2800      	cmp	r0, #0
 8010444:	f43f aedf 	beq.w	8010206 <_scanf_float+0x46>
 8010448:	e6ea      	b.n	8010220 <_scanf_float+0x60>
 801044a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801044e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010452:	463a      	mov	r2, r7
 8010454:	4640      	mov	r0, r8
 8010456:	4798      	blx	r3
 8010458:	6923      	ldr	r3, [r4, #16]
 801045a:	3b01      	subs	r3, #1
 801045c:	6123      	str	r3, [r4, #16]
 801045e:	e6ec      	b.n	801023a <_scanf_float+0x7a>
 8010460:	1e6b      	subs	r3, r5, #1
 8010462:	2b06      	cmp	r3, #6
 8010464:	d825      	bhi.n	80104b2 <_scanf_float+0x2f2>
 8010466:	2d02      	cmp	r5, #2
 8010468:	d836      	bhi.n	80104d8 <_scanf_float+0x318>
 801046a:	455e      	cmp	r6, fp
 801046c:	f67f aee8 	bls.w	8010240 <_scanf_float+0x80>
 8010470:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010474:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010478:	463a      	mov	r2, r7
 801047a:	4640      	mov	r0, r8
 801047c:	4798      	blx	r3
 801047e:	6923      	ldr	r3, [r4, #16]
 8010480:	3b01      	subs	r3, #1
 8010482:	6123      	str	r3, [r4, #16]
 8010484:	e7f1      	b.n	801046a <_scanf_float+0x2aa>
 8010486:	9802      	ldr	r0, [sp, #8]
 8010488:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801048c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010490:	9002      	str	r0, [sp, #8]
 8010492:	463a      	mov	r2, r7
 8010494:	4640      	mov	r0, r8
 8010496:	4798      	blx	r3
 8010498:	6923      	ldr	r3, [r4, #16]
 801049a:	3b01      	subs	r3, #1
 801049c:	6123      	str	r3, [r4, #16]
 801049e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80104a2:	fa5f fa8a 	uxtb.w	sl, sl
 80104a6:	f1ba 0f02 	cmp.w	sl, #2
 80104aa:	d1ec      	bne.n	8010486 <_scanf_float+0x2c6>
 80104ac:	3d03      	subs	r5, #3
 80104ae:	b2ed      	uxtb	r5, r5
 80104b0:	1b76      	subs	r6, r6, r5
 80104b2:	6823      	ldr	r3, [r4, #0]
 80104b4:	05da      	lsls	r2, r3, #23
 80104b6:	d52f      	bpl.n	8010518 <_scanf_float+0x358>
 80104b8:	055b      	lsls	r3, r3, #21
 80104ba:	d510      	bpl.n	80104de <_scanf_float+0x31e>
 80104bc:	455e      	cmp	r6, fp
 80104be:	f67f aebf 	bls.w	8010240 <_scanf_float+0x80>
 80104c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80104c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80104ca:	463a      	mov	r2, r7
 80104cc:	4640      	mov	r0, r8
 80104ce:	4798      	blx	r3
 80104d0:	6923      	ldr	r3, [r4, #16]
 80104d2:	3b01      	subs	r3, #1
 80104d4:	6123      	str	r3, [r4, #16]
 80104d6:	e7f1      	b.n	80104bc <_scanf_float+0x2fc>
 80104d8:	46aa      	mov	sl, r5
 80104da:	9602      	str	r6, [sp, #8]
 80104dc:	e7df      	b.n	801049e <_scanf_float+0x2de>
 80104de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80104e2:	6923      	ldr	r3, [r4, #16]
 80104e4:	2965      	cmp	r1, #101	; 0x65
 80104e6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80104ea:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80104ee:	6123      	str	r3, [r4, #16]
 80104f0:	d00c      	beq.n	801050c <_scanf_float+0x34c>
 80104f2:	2945      	cmp	r1, #69	; 0x45
 80104f4:	d00a      	beq.n	801050c <_scanf_float+0x34c>
 80104f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80104fa:	463a      	mov	r2, r7
 80104fc:	4640      	mov	r0, r8
 80104fe:	4798      	blx	r3
 8010500:	6923      	ldr	r3, [r4, #16]
 8010502:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010506:	3b01      	subs	r3, #1
 8010508:	1eb5      	subs	r5, r6, #2
 801050a:	6123      	str	r3, [r4, #16]
 801050c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010510:	463a      	mov	r2, r7
 8010512:	4640      	mov	r0, r8
 8010514:	4798      	blx	r3
 8010516:	462e      	mov	r6, r5
 8010518:	6825      	ldr	r5, [r4, #0]
 801051a:	f015 0510 	ands.w	r5, r5, #16
 801051e:	d159      	bne.n	80105d4 <_scanf_float+0x414>
 8010520:	7035      	strb	r5, [r6, #0]
 8010522:	6823      	ldr	r3, [r4, #0]
 8010524:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801052c:	d11b      	bne.n	8010566 <_scanf_float+0x3a6>
 801052e:	9b01      	ldr	r3, [sp, #4]
 8010530:	454b      	cmp	r3, r9
 8010532:	eba3 0209 	sub.w	r2, r3, r9
 8010536:	d123      	bne.n	8010580 <_scanf_float+0x3c0>
 8010538:	2200      	movs	r2, #0
 801053a:	4659      	mov	r1, fp
 801053c:	4640      	mov	r0, r8
 801053e:	f000 fe99 	bl	8011274 <_strtod_r>
 8010542:	6822      	ldr	r2, [r4, #0]
 8010544:	9b03      	ldr	r3, [sp, #12]
 8010546:	f012 0f02 	tst.w	r2, #2
 801054a:	ec57 6b10 	vmov	r6, r7, d0
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	d021      	beq.n	8010596 <_scanf_float+0x3d6>
 8010552:	9903      	ldr	r1, [sp, #12]
 8010554:	1d1a      	adds	r2, r3, #4
 8010556:	600a      	str	r2, [r1, #0]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	e9c3 6700 	strd	r6, r7, [r3]
 801055e:	68e3      	ldr	r3, [r4, #12]
 8010560:	3301      	adds	r3, #1
 8010562:	60e3      	str	r3, [r4, #12]
 8010564:	e66d      	b.n	8010242 <_scanf_float+0x82>
 8010566:	9b04      	ldr	r3, [sp, #16]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d0e5      	beq.n	8010538 <_scanf_float+0x378>
 801056c:	9905      	ldr	r1, [sp, #20]
 801056e:	230a      	movs	r3, #10
 8010570:	462a      	mov	r2, r5
 8010572:	3101      	adds	r1, #1
 8010574:	4640      	mov	r0, r8
 8010576:	f000 ff05 	bl	8011384 <_strtol_r>
 801057a:	9b04      	ldr	r3, [sp, #16]
 801057c:	9e05      	ldr	r6, [sp, #20]
 801057e:	1ac2      	subs	r2, r0, r3
 8010580:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010584:	429e      	cmp	r6, r3
 8010586:	bf28      	it	cs
 8010588:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801058c:	4912      	ldr	r1, [pc, #72]	; (80105d8 <_scanf_float+0x418>)
 801058e:	4630      	mov	r0, r6
 8010590:	f000 f82c 	bl	80105ec <siprintf>
 8010594:	e7d0      	b.n	8010538 <_scanf_float+0x378>
 8010596:	9903      	ldr	r1, [sp, #12]
 8010598:	f012 0f04 	tst.w	r2, #4
 801059c:	f103 0204 	add.w	r2, r3, #4
 80105a0:	600a      	str	r2, [r1, #0]
 80105a2:	d1d9      	bne.n	8010558 <_scanf_float+0x398>
 80105a4:	f8d3 8000 	ldr.w	r8, [r3]
 80105a8:	ee10 2a10 	vmov	r2, s0
 80105ac:	ee10 0a10 	vmov	r0, s0
 80105b0:	463b      	mov	r3, r7
 80105b2:	4639      	mov	r1, r7
 80105b4:	f7f0 faba 	bl	8000b2c <__aeabi_dcmpun>
 80105b8:	b128      	cbz	r0, 80105c6 <_scanf_float+0x406>
 80105ba:	4808      	ldr	r0, [pc, #32]	; (80105dc <_scanf_float+0x41c>)
 80105bc:	f000 f810 	bl	80105e0 <nanf>
 80105c0:	ed88 0a00 	vstr	s0, [r8]
 80105c4:	e7cb      	b.n	801055e <_scanf_float+0x39e>
 80105c6:	4630      	mov	r0, r6
 80105c8:	4639      	mov	r1, r7
 80105ca:	f7f0 fb0d 	bl	8000be8 <__aeabi_d2f>
 80105ce:	f8c8 0000 	str.w	r0, [r8]
 80105d2:	e7c4      	b.n	801055e <_scanf_float+0x39e>
 80105d4:	2500      	movs	r5, #0
 80105d6:	e634      	b.n	8010242 <_scanf_float+0x82>
 80105d8:	08014df8 	.word	0x08014df8
 80105dc:	08015200 	.word	0x08015200

080105e0 <nanf>:
 80105e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80105e8 <nanf+0x8>
 80105e4:	4770      	bx	lr
 80105e6:	bf00      	nop
 80105e8:	7fc00000 	.word	0x7fc00000

080105ec <siprintf>:
 80105ec:	b40e      	push	{r1, r2, r3}
 80105ee:	b500      	push	{lr}
 80105f0:	b09c      	sub	sp, #112	; 0x70
 80105f2:	ab1d      	add	r3, sp, #116	; 0x74
 80105f4:	9002      	str	r0, [sp, #8]
 80105f6:	9006      	str	r0, [sp, #24]
 80105f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80105fc:	4809      	ldr	r0, [pc, #36]	; (8010624 <siprintf+0x38>)
 80105fe:	9107      	str	r1, [sp, #28]
 8010600:	9104      	str	r1, [sp, #16]
 8010602:	4909      	ldr	r1, [pc, #36]	; (8010628 <siprintf+0x3c>)
 8010604:	f853 2b04 	ldr.w	r2, [r3], #4
 8010608:	9105      	str	r1, [sp, #20]
 801060a:	6800      	ldr	r0, [r0, #0]
 801060c:	9301      	str	r3, [sp, #4]
 801060e:	a902      	add	r1, sp, #8
 8010610:	f002 fed6 	bl	80133c0 <_svfiprintf_r>
 8010614:	9b02      	ldr	r3, [sp, #8]
 8010616:	2200      	movs	r2, #0
 8010618:	701a      	strb	r2, [r3, #0]
 801061a:	b01c      	add	sp, #112	; 0x70
 801061c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010620:	b003      	add	sp, #12
 8010622:	4770      	bx	lr
 8010624:	20000014 	.word	0x20000014
 8010628:	ffff0208 	.word	0xffff0208

0801062c <sulp>:
 801062c:	b570      	push	{r4, r5, r6, lr}
 801062e:	4604      	mov	r4, r0
 8010630:	460d      	mov	r5, r1
 8010632:	ec45 4b10 	vmov	d0, r4, r5
 8010636:	4616      	mov	r6, r2
 8010638:	f002 fc20 	bl	8012e7c <__ulp>
 801063c:	ec51 0b10 	vmov	r0, r1, d0
 8010640:	b17e      	cbz	r6, 8010662 <sulp+0x36>
 8010642:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010646:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801064a:	2b00      	cmp	r3, #0
 801064c:	dd09      	ble.n	8010662 <sulp+0x36>
 801064e:	051b      	lsls	r3, r3, #20
 8010650:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010654:	2400      	movs	r4, #0
 8010656:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801065a:	4622      	mov	r2, r4
 801065c:	462b      	mov	r3, r5
 801065e:	f7ef ffcb 	bl	80005f8 <__aeabi_dmul>
 8010662:	bd70      	pop	{r4, r5, r6, pc}
 8010664:	0000      	movs	r0, r0
	...

08010668 <_strtod_l>:
 8010668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801066c:	ed2d 8b02 	vpush	{d8}
 8010670:	b09d      	sub	sp, #116	; 0x74
 8010672:	461f      	mov	r7, r3
 8010674:	2300      	movs	r3, #0
 8010676:	9318      	str	r3, [sp, #96]	; 0x60
 8010678:	4ba2      	ldr	r3, [pc, #648]	; (8010904 <_strtod_l+0x29c>)
 801067a:	9213      	str	r2, [sp, #76]	; 0x4c
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	9305      	str	r3, [sp, #20]
 8010680:	4604      	mov	r4, r0
 8010682:	4618      	mov	r0, r3
 8010684:	4688      	mov	r8, r1
 8010686:	f7ef fda3 	bl	80001d0 <strlen>
 801068a:	f04f 0a00 	mov.w	sl, #0
 801068e:	4605      	mov	r5, r0
 8010690:	f04f 0b00 	mov.w	fp, #0
 8010694:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010698:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801069a:	781a      	ldrb	r2, [r3, #0]
 801069c:	2a2b      	cmp	r2, #43	; 0x2b
 801069e:	d04e      	beq.n	801073e <_strtod_l+0xd6>
 80106a0:	d83b      	bhi.n	801071a <_strtod_l+0xb2>
 80106a2:	2a0d      	cmp	r2, #13
 80106a4:	d834      	bhi.n	8010710 <_strtod_l+0xa8>
 80106a6:	2a08      	cmp	r2, #8
 80106a8:	d834      	bhi.n	8010714 <_strtod_l+0xac>
 80106aa:	2a00      	cmp	r2, #0
 80106ac:	d03e      	beq.n	801072c <_strtod_l+0xc4>
 80106ae:	2300      	movs	r3, #0
 80106b0:	930a      	str	r3, [sp, #40]	; 0x28
 80106b2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80106b4:	7833      	ldrb	r3, [r6, #0]
 80106b6:	2b30      	cmp	r3, #48	; 0x30
 80106b8:	f040 80b0 	bne.w	801081c <_strtod_l+0x1b4>
 80106bc:	7873      	ldrb	r3, [r6, #1]
 80106be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80106c2:	2b58      	cmp	r3, #88	; 0x58
 80106c4:	d168      	bne.n	8010798 <_strtod_l+0x130>
 80106c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106c8:	9301      	str	r3, [sp, #4]
 80106ca:	ab18      	add	r3, sp, #96	; 0x60
 80106cc:	9702      	str	r7, [sp, #8]
 80106ce:	9300      	str	r3, [sp, #0]
 80106d0:	4a8d      	ldr	r2, [pc, #564]	; (8010908 <_strtod_l+0x2a0>)
 80106d2:	ab19      	add	r3, sp, #100	; 0x64
 80106d4:	a917      	add	r1, sp, #92	; 0x5c
 80106d6:	4620      	mov	r0, r4
 80106d8:	f001 fd38 	bl	801214c <__gethex>
 80106dc:	f010 0707 	ands.w	r7, r0, #7
 80106e0:	4605      	mov	r5, r0
 80106e2:	d005      	beq.n	80106f0 <_strtod_l+0x88>
 80106e4:	2f06      	cmp	r7, #6
 80106e6:	d12c      	bne.n	8010742 <_strtod_l+0xda>
 80106e8:	3601      	adds	r6, #1
 80106ea:	2300      	movs	r3, #0
 80106ec:	9617      	str	r6, [sp, #92]	; 0x5c
 80106ee:	930a      	str	r3, [sp, #40]	; 0x28
 80106f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	f040 8590 	bne.w	8011218 <_strtod_l+0xbb0>
 80106f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106fa:	b1eb      	cbz	r3, 8010738 <_strtod_l+0xd0>
 80106fc:	4652      	mov	r2, sl
 80106fe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010702:	ec43 2b10 	vmov	d0, r2, r3
 8010706:	b01d      	add	sp, #116	; 0x74
 8010708:	ecbd 8b02 	vpop	{d8}
 801070c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010710:	2a20      	cmp	r2, #32
 8010712:	d1cc      	bne.n	80106ae <_strtod_l+0x46>
 8010714:	3301      	adds	r3, #1
 8010716:	9317      	str	r3, [sp, #92]	; 0x5c
 8010718:	e7be      	b.n	8010698 <_strtod_l+0x30>
 801071a:	2a2d      	cmp	r2, #45	; 0x2d
 801071c:	d1c7      	bne.n	80106ae <_strtod_l+0x46>
 801071e:	2201      	movs	r2, #1
 8010720:	920a      	str	r2, [sp, #40]	; 0x28
 8010722:	1c5a      	adds	r2, r3, #1
 8010724:	9217      	str	r2, [sp, #92]	; 0x5c
 8010726:	785b      	ldrb	r3, [r3, #1]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d1c2      	bne.n	80106b2 <_strtod_l+0x4a>
 801072c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801072e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010732:	2b00      	cmp	r3, #0
 8010734:	f040 856e 	bne.w	8011214 <_strtod_l+0xbac>
 8010738:	4652      	mov	r2, sl
 801073a:	465b      	mov	r3, fp
 801073c:	e7e1      	b.n	8010702 <_strtod_l+0x9a>
 801073e:	2200      	movs	r2, #0
 8010740:	e7ee      	b.n	8010720 <_strtod_l+0xb8>
 8010742:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010744:	b13a      	cbz	r2, 8010756 <_strtod_l+0xee>
 8010746:	2135      	movs	r1, #53	; 0x35
 8010748:	a81a      	add	r0, sp, #104	; 0x68
 801074a:	f002 fca2 	bl	8013092 <__copybits>
 801074e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010750:	4620      	mov	r0, r4
 8010752:	f002 f861 	bl	8012818 <_Bfree>
 8010756:	3f01      	subs	r7, #1
 8010758:	2f04      	cmp	r7, #4
 801075a:	d806      	bhi.n	801076a <_strtod_l+0x102>
 801075c:	e8df f007 	tbb	[pc, r7]
 8010760:	1714030a 	.word	0x1714030a
 8010764:	0a          	.byte	0x0a
 8010765:	00          	.byte	0x00
 8010766:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801076a:	0728      	lsls	r0, r5, #28
 801076c:	d5c0      	bpl.n	80106f0 <_strtod_l+0x88>
 801076e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010772:	e7bd      	b.n	80106f0 <_strtod_l+0x88>
 8010774:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8010778:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801077a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801077e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010782:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010786:	e7f0      	b.n	801076a <_strtod_l+0x102>
 8010788:	f8df b180 	ldr.w	fp, [pc, #384]	; 801090c <_strtod_l+0x2a4>
 801078c:	e7ed      	b.n	801076a <_strtod_l+0x102>
 801078e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010792:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010796:	e7e8      	b.n	801076a <_strtod_l+0x102>
 8010798:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801079a:	1c5a      	adds	r2, r3, #1
 801079c:	9217      	str	r2, [sp, #92]	; 0x5c
 801079e:	785b      	ldrb	r3, [r3, #1]
 80107a0:	2b30      	cmp	r3, #48	; 0x30
 80107a2:	d0f9      	beq.n	8010798 <_strtod_l+0x130>
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d0a3      	beq.n	80106f0 <_strtod_l+0x88>
 80107a8:	2301      	movs	r3, #1
 80107aa:	f04f 0900 	mov.w	r9, #0
 80107ae:	9304      	str	r3, [sp, #16]
 80107b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80107b2:	9308      	str	r3, [sp, #32]
 80107b4:	f8cd 901c 	str.w	r9, [sp, #28]
 80107b8:	464f      	mov	r7, r9
 80107ba:	220a      	movs	r2, #10
 80107bc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80107be:	7806      	ldrb	r6, [r0, #0]
 80107c0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80107c4:	b2d9      	uxtb	r1, r3
 80107c6:	2909      	cmp	r1, #9
 80107c8:	d92a      	bls.n	8010820 <_strtod_l+0x1b8>
 80107ca:	9905      	ldr	r1, [sp, #20]
 80107cc:	462a      	mov	r2, r5
 80107ce:	f002 ff0f 	bl	80135f0 <strncmp>
 80107d2:	b398      	cbz	r0, 801083c <_strtod_l+0x1d4>
 80107d4:	2000      	movs	r0, #0
 80107d6:	4632      	mov	r2, r6
 80107d8:	463d      	mov	r5, r7
 80107da:	9005      	str	r0, [sp, #20]
 80107dc:	4603      	mov	r3, r0
 80107de:	2a65      	cmp	r2, #101	; 0x65
 80107e0:	d001      	beq.n	80107e6 <_strtod_l+0x17e>
 80107e2:	2a45      	cmp	r2, #69	; 0x45
 80107e4:	d118      	bne.n	8010818 <_strtod_l+0x1b0>
 80107e6:	b91d      	cbnz	r5, 80107f0 <_strtod_l+0x188>
 80107e8:	9a04      	ldr	r2, [sp, #16]
 80107ea:	4302      	orrs	r2, r0
 80107ec:	d09e      	beq.n	801072c <_strtod_l+0xc4>
 80107ee:	2500      	movs	r5, #0
 80107f0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80107f4:	f108 0201 	add.w	r2, r8, #1
 80107f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80107fa:	f898 2001 	ldrb.w	r2, [r8, #1]
 80107fe:	2a2b      	cmp	r2, #43	; 0x2b
 8010800:	d075      	beq.n	80108ee <_strtod_l+0x286>
 8010802:	2a2d      	cmp	r2, #45	; 0x2d
 8010804:	d07b      	beq.n	80108fe <_strtod_l+0x296>
 8010806:	f04f 0c00 	mov.w	ip, #0
 801080a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801080e:	2909      	cmp	r1, #9
 8010810:	f240 8082 	bls.w	8010918 <_strtod_l+0x2b0>
 8010814:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010818:	2600      	movs	r6, #0
 801081a:	e09d      	b.n	8010958 <_strtod_l+0x2f0>
 801081c:	2300      	movs	r3, #0
 801081e:	e7c4      	b.n	80107aa <_strtod_l+0x142>
 8010820:	2f08      	cmp	r7, #8
 8010822:	bfd8      	it	le
 8010824:	9907      	ldrle	r1, [sp, #28]
 8010826:	f100 0001 	add.w	r0, r0, #1
 801082a:	bfda      	itte	le
 801082c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010830:	9307      	strle	r3, [sp, #28]
 8010832:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010836:	3701      	adds	r7, #1
 8010838:	9017      	str	r0, [sp, #92]	; 0x5c
 801083a:	e7bf      	b.n	80107bc <_strtod_l+0x154>
 801083c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801083e:	195a      	adds	r2, r3, r5
 8010840:	9217      	str	r2, [sp, #92]	; 0x5c
 8010842:	5d5a      	ldrb	r2, [r3, r5]
 8010844:	2f00      	cmp	r7, #0
 8010846:	d037      	beq.n	80108b8 <_strtod_l+0x250>
 8010848:	9005      	str	r0, [sp, #20]
 801084a:	463d      	mov	r5, r7
 801084c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010850:	2b09      	cmp	r3, #9
 8010852:	d912      	bls.n	801087a <_strtod_l+0x212>
 8010854:	2301      	movs	r3, #1
 8010856:	e7c2      	b.n	80107de <_strtod_l+0x176>
 8010858:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801085a:	1c5a      	adds	r2, r3, #1
 801085c:	9217      	str	r2, [sp, #92]	; 0x5c
 801085e:	785a      	ldrb	r2, [r3, #1]
 8010860:	3001      	adds	r0, #1
 8010862:	2a30      	cmp	r2, #48	; 0x30
 8010864:	d0f8      	beq.n	8010858 <_strtod_l+0x1f0>
 8010866:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801086a:	2b08      	cmp	r3, #8
 801086c:	f200 84d9 	bhi.w	8011222 <_strtod_l+0xbba>
 8010870:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010872:	9005      	str	r0, [sp, #20]
 8010874:	2000      	movs	r0, #0
 8010876:	9308      	str	r3, [sp, #32]
 8010878:	4605      	mov	r5, r0
 801087a:	3a30      	subs	r2, #48	; 0x30
 801087c:	f100 0301 	add.w	r3, r0, #1
 8010880:	d014      	beq.n	80108ac <_strtod_l+0x244>
 8010882:	9905      	ldr	r1, [sp, #20]
 8010884:	4419      	add	r1, r3
 8010886:	9105      	str	r1, [sp, #20]
 8010888:	462b      	mov	r3, r5
 801088a:	eb00 0e05 	add.w	lr, r0, r5
 801088e:	210a      	movs	r1, #10
 8010890:	4573      	cmp	r3, lr
 8010892:	d113      	bne.n	80108bc <_strtod_l+0x254>
 8010894:	182b      	adds	r3, r5, r0
 8010896:	2b08      	cmp	r3, #8
 8010898:	f105 0501 	add.w	r5, r5, #1
 801089c:	4405      	add	r5, r0
 801089e:	dc1c      	bgt.n	80108da <_strtod_l+0x272>
 80108a0:	9907      	ldr	r1, [sp, #28]
 80108a2:	230a      	movs	r3, #10
 80108a4:	fb03 2301 	mla	r3, r3, r1, r2
 80108a8:	9307      	str	r3, [sp, #28]
 80108aa:	2300      	movs	r3, #0
 80108ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80108ae:	1c51      	adds	r1, r2, #1
 80108b0:	9117      	str	r1, [sp, #92]	; 0x5c
 80108b2:	7852      	ldrb	r2, [r2, #1]
 80108b4:	4618      	mov	r0, r3
 80108b6:	e7c9      	b.n	801084c <_strtod_l+0x1e4>
 80108b8:	4638      	mov	r0, r7
 80108ba:	e7d2      	b.n	8010862 <_strtod_l+0x1fa>
 80108bc:	2b08      	cmp	r3, #8
 80108be:	dc04      	bgt.n	80108ca <_strtod_l+0x262>
 80108c0:	9e07      	ldr	r6, [sp, #28]
 80108c2:	434e      	muls	r6, r1
 80108c4:	9607      	str	r6, [sp, #28]
 80108c6:	3301      	adds	r3, #1
 80108c8:	e7e2      	b.n	8010890 <_strtod_l+0x228>
 80108ca:	f103 0c01 	add.w	ip, r3, #1
 80108ce:	f1bc 0f10 	cmp.w	ip, #16
 80108d2:	bfd8      	it	le
 80108d4:	fb01 f909 	mulle.w	r9, r1, r9
 80108d8:	e7f5      	b.n	80108c6 <_strtod_l+0x25e>
 80108da:	2d10      	cmp	r5, #16
 80108dc:	bfdc      	itt	le
 80108de:	230a      	movle	r3, #10
 80108e0:	fb03 2909 	mlale	r9, r3, r9, r2
 80108e4:	e7e1      	b.n	80108aa <_strtod_l+0x242>
 80108e6:	2300      	movs	r3, #0
 80108e8:	9305      	str	r3, [sp, #20]
 80108ea:	2301      	movs	r3, #1
 80108ec:	e77c      	b.n	80107e8 <_strtod_l+0x180>
 80108ee:	f04f 0c00 	mov.w	ip, #0
 80108f2:	f108 0202 	add.w	r2, r8, #2
 80108f6:	9217      	str	r2, [sp, #92]	; 0x5c
 80108f8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80108fc:	e785      	b.n	801080a <_strtod_l+0x1a2>
 80108fe:	f04f 0c01 	mov.w	ip, #1
 8010902:	e7f6      	b.n	80108f2 <_strtod_l+0x28a>
 8010904:	08015048 	.word	0x08015048
 8010908:	08014e00 	.word	0x08014e00
 801090c:	7ff00000 	.word	0x7ff00000
 8010910:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010912:	1c51      	adds	r1, r2, #1
 8010914:	9117      	str	r1, [sp, #92]	; 0x5c
 8010916:	7852      	ldrb	r2, [r2, #1]
 8010918:	2a30      	cmp	r2, #48	; 0x30
 801091a:	d0f9      	beq.n	8010910 <_strtod_l+0x2a8>
 801091c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010920:	2908      	cmp	r1, #8
 8010922:	f63f af79 	bhi.w	8010818 <_strtod_l+0x1b0>
 8010926:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801092a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801092c:	9206      	str	r2, [sp, #24]
 801092e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010930:	1c51      	adds	r1, r2, #1
 8010932:	9117      	str	r1, [sp, #92]	; 0x5c
 8010934:	7852      	ldrb	r2, [r2, #1]
 8010936:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801093a:	2e09      	cmp	r6, #9
 801093c:	d937      	bls.n	80109ae <_strtod_l+0x346>
 801093e:	9e06      	ldr	r6, [sp, #24]
 8010940:	1b89      	subs	r1, r1, r6
 8010942:	2908      	cmp	r1, #8
 8010944:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010948:	dc02      	bgt.n	8010950 <_strtod_l+0x2e8>
 801094a:	4576      	cmp	r6, lr
 801094c:	bfa8      	it	ge
 801094e:	4676      	movge	r6, lr
 8010950:	f1bc 0f00 	cmp.w	ip, #0
 8010954:	d000      	beq.n	8010958 <_strtod_l+0x2f0>
 8010956:	4276      	negs	r6, r6
 8010958:	2d00      	cmp	r5, #0
 801095a:	d14d      	bne.n	80109f8 <_strtod_l+0x390>
 801095c:	9904      	ldr	r1, [sp, #16]
 801095e:	4301      	orrs	r1, r0
 8010960:	f47f aec6 	bne.w	80106f0 <_strtod_l+0x88>
 8010964:	2b00      	cmp	r3, #0
 8010966:	f47f aee1 	bne.w	801072c <_strtod_l+0xc4>
 801096a:	2a69      	cmp	r2, #105	; 0x69
 801096c:	d027      	beq.n	80109be <_strtod_l+0x356>
 801096e:	dc24      	bgt.n	80109ba <_strtod_l+0x352>
 8010970:	2a49      	cmp	r2, #73	; 0x49
 8010972:	d024      	beq.n	80109be <_strtod_l+0x356>
 8010974:	2a4e      	cmp	r2, #78	; 0x4e
 8010976:	f47f aed9 	bne.w	801072c <_strtod_l+0xc4>
 801097a:	499f      	ldr	r1, [pc, #636]	; (8010bf8 <_strtod_l+0x590>)
 801097c:	a817      	add	r0, sp, #92	; 0x5c
 801097e:	f001 fe3d 	bl	80125fc <__match>
 8010982:	2800      	cmp	r0, #0
 8010984:	f43f aed2 	beq.w	801072c <_strtod_l+0xc4>
 8010988:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801098a:	781b      	ldrb	r3, [r3, #0]
 801098c:	2b28      	cmp	r3, #40	; 0x28
 801098e:	d12d      	bne.n	80109ec <_strtod_l+0x384>
 8010990:	499a      	ldr	r1, [pc, #616]	; (8010bfc <_strtod_l+0x594>)
 8010992:	aa1a      	add	r2, sp, #104	; 0x68
 8010994:	a817      	add	r0, sp, #92	; 0x5c
 8010996:	f001 fe45 	bl	8012624 <__hexnan>
 801099a:	2805      	cmp	r0, #5
 801099c:	d126      	bne.n	80109ec <_strtod_l+0x384>
 801099e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80109a0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80109a4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80109a8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80109ac:	e6a0      	b.n	80106f0 <_strtod_l+0x88>
 80109ae:	210a      	movs	r1, #10
 80109b0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80109b4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80109b8:	e7b9      	b.n	801092e <_strtod_l+0x2c6>
 80109ba:	2a6e      	cmp	r2, #110	; 0x6e
 80109bc:	e7db      	b.n	8010976 <_strtod_l+0x30e>
 80109be:	4990      	ldr	r1, [pc, #576]	; (8010c00 <_strtod_l+0x598>)
 80109c0:	a817      	add	r0, sp, #92	; 0x5c
 80109c2:	f001 fe1b 	bl	80125fc <__match>
 80109c6:	2800      	cmp	r0, #0
 80109c8:	f43f aeb0 	beq.w	801072c <_strtod_l+0xc4>
 80109cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80109ce:	498d      	ldr	r1, [pc, #564]	; (8010c04 <_strtod_l+0x59c>)
 80109d0:	3b01      	subs	r3, #1
 80109d2:	a817      	add	r0, sp, #92	; 0x5c
 80109d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80109d6:	f001 fe11 	bl	80125fc <__match>
 80109da:	b910      	cbnz	r0, 80109e2 <_strtod_l+0x37a>
 80109dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80109de:	3301      	adds	r3, #1
 80109e0:	9317      	str	r3, [sp, #92]	; 0x5c
 80109e2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8010c14 <_strtod_l+0x5ac>
 80109e6:	f04f 0a00 	mov.w	sl, #0
 80109ea:	e681      	b.n	80106f0 <_strtod_l+0x88>
 80109ec:	4886      	ldr	r0, [pc, #536]	; (8010c08 <_strtod_l+0x5a0>)
 80109ee:	f002 fde7 	bl	80135c0 <nan>
 80109f2:	ec5b ab10 	vmov	sl, fp, d0
 80109f6:	e67b      	b.n	80106f0 <_strtod_l+0x88>
 80109f8:	9b05      	ldr	r3, [sp, #20]
 80109fa:	9807      	ldr	r0, [sp, #28]
 80109fc:	1af3      	subs	r3, r6, r3
 80109fe:	2f00      	cmp	r7, #0
 8010a00:	bf08      	it	eq
 8010a02:	462f      	moveq	r7, r5
 8010a04:	2d10      	cmp	r5, #16
 8010a06:	9306      	str	r3, [sp, #24]
 8010a08:	46a8      	mov	r8, r5
 8010a0a:	bfa8      	it	ge
 8010a0c:	f04f 0810 	movge.w	r8, #16
 8010a10:	f7ef fd78 	bl	8000504 <__aeabi_ui2d>
 8010a14:	2d09      	cmp	r5, #9
 8010a16:	4682      	mov	sl, r0
 8010a18:	468b      	mov	fp, r1
 8010a1a:	dd13      	ble.n	8010a44 <_strtod_l+0x3dc>
 8010a1c:	4b7b      	ldr	r3, [pc, #492]	; (8010c0c <_strtod_l+0x5a4>)
 8010a1e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010a22:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010a26:	f7ef fde7 	bl	80005f8 <__aeabi_dmul>
 8010a2a:	4682      	mov	sl, r0
 8010a2c:	4648      	mov	r0, r9
 8010a2e:	468b      	mov	fp, r1
 8010a30:	f7ef fd68 	bl	8000504 <__aeabi_ui2d>
 8010a34:	4602      	mov	r2, r0
 8010a36:	460b      	mov	r3, r1
 8010a38:	4650      	mov	r0, sl
 8010a3a:	4659      	mov	r1, fp
 8010a3c:	f7ef fc26 	bl	800028c <__adddf3>
 8010a40:	4682      	mov	sl, r0
 8010a42:	468b      	mov	fp, r1
 8010a44:	2d0f      	cmp	r5, #15
 8010a46:	dc38      	bgt.n	8010aba <_strtod_l+0x452>
 8010a48:	9b06      	ldr	r3, [sp, #24]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	f43f ae50 	beq.w	80106f0 <_strtod_l+0x88>
 8010a50:	dd24      	ble.n	8010a9c <_strtod_l+0x434>
 8010a52:	2b16      	cmp	r3, #22
 8010a54:	dc0b      	bgt.n	8010a6e <_strtod_l+0x406>
 8010a56:	496d      	ldr	r1, [pc, #436]	; (8010c0c <_strtod_l+0x5a4>)
 8010a58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010a5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a60:	4652      	mov	r2, sl
 8010a62:	465b      	mov	r3, fp
 8010a64:	f7ef fdc8 	bl	80005f8 <__aeabi_dmul>
 8010a68:	4682      	mov	sl, r0
 8010a6a:	468b      	mov	fp, r1
 8010a6c:	e640      	b.n	80106f0 <_strtod_l+0x88>
 8010a6e:	9a06      	ldr	r2, [sp, #24]
 8010a70:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010a74:	4293      	cmp	r3, r2
 8010a76:	db20      	blt.n	8010aba <_strtod_l+0x452>
 8010a78:	4c64      	ldr	r4, [pc, #400]	; (8010c0c <_strtod_l+0x5a4>)
 8010a7a:	f1c5 050f 	rsb	r5, r5, #15
 8010a7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010a82:	4652      	mov	r2, sl
 8010a84:	465b      	mov	r3, fp
 8010a86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a8a:	f7ef fdb5 	bl	80005f8 <__aeabi_dmul>
 8010a8e:	9b06      	ldr	r3, [sp, #24]
 8010a90:	1b5d      	subs	r5, r3, r5
 8010a92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010a96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010a9a:	e7e3      	b.n	8010a64 <_strtod_l+0x3fc>
 8010a9c:	9b06      	ldr	r3, [sp, #24]
 8010a9e:	3316      	adds	r3, #22
 8010aa0:	db0b      	blt.n	8010aba <_strtod_l+0x452>
 8010aa2:	9b05      	ldr	r3, [sp, #20]
 8010aa4:	1b9e      	subs	r6, r3, r6
 8010aa6:	4b59      	ldr	r3, [pc, #356]	; (8010c0c <_strtod_l+0x5a4>)
 8010aa8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8010aac:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010ab0:	4650      	mov	r0, sl
 8010ab2:	4659      	mov	r1, fp
 8010ab4:	f7ef feca 	bl	800084c <__aeabi_ddiv>
 8010ab8:	e7d6      	b.n	8010a68 <_strtod_l+0x400>
 8010aba:	9b06      	ldr	r3, [sp, #24]
 8010abc:	eba5 0808 	sub.w	r8, r5, r8
 8010ac0:	4498      	add	r8, r3
 8010ac2:	f1b8 0f00 	cmp.w	r8, #0
 8010ac6:	dd74      	ble.n	8010bb2 <_strtod_l+0x54a>
 8010ac8:	f018 030f 	ands.w	r3, r8, #15
 8010acc:	d00a      	beq.n	8010ae4 <_strtod_l+0x47c>
 8010ace:	494f      	ldr	r1, [pc, #316]	; (8010c0c <_strtod_l+0x5a4>)
 8010ad0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010ad4:	4652      	mov	r2, sl
 8010ad6:	465b      	mov	r3, fp
 8010ad8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010adc:	f7ef fd8c 	bl	80005f8 <__aeabi_dmul>
 8010ae0:	4682      	mov	sl, r0
 8010ae2:	468b      	mov	fp, r1
 8010ae4:	f038 080f 	bics.w	r8, r8, #15
 8010ae8:	d04f      	beq.n	8010b8a <_strtod_l+0x522>
 8010aea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010aee:	dd22      	ble.n	8010b36 <_strtod_l+0x4ce>
 8010af0:	2500      	movs	r5, #0
 8010af2:	462e      	mov	r6, r5
 8010af4:	9507      	str	r5, [sp, #28]
 8010af6:	9505      	str	r5, [sp, #20]
 8010af8:	2322      	movs	r3, #34	; 0x22
 8010afa:	f8df b118 	ldr.w	fp, [pc, #280]	; 8010c14 <_strtod_l+0x5ac>
 8010afe:	6023      	str	r3, [r4, #0]
 8010b00:	f04f 0a00 	mov.w	sl, #0
 8010b04:	9b07      	ldr	r3, [sp, #28]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	f43f adf2 	beq.w	80106f0 <_strtod_l+0x88>
 8010b0c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010b0e:	4620      	mov	r0, r4
 8010b10:	f001 fe82 	bl	8012818 <_Bfree>
 8010b14:	9905      	ldr	r1, [sp, #20]
 8010b16:	4620      	mov	r0, r4
 8010b18:	f001 fe7e 	bl	8012818 <_Bfree>
 8010b1c:	4631      	mov	r1, r6
 8010b1e:	4620      	mov	r0, r4
 8010b20:	f001 fe7a 	bl	8012818 <_Bfree>
 8010b24:	9907      	ldr	r1, [sp, #28]
 8010b26:	4620      	mov	r0, r4
 8010b28:	f001 fe76 	bl	8012818 <_Bfree>
 8010b2c:	4629      	mov	r1, r5
 8010b2e:	4620      	mov	r0, r4
 8010b30:	f001 fe72 	bl	8012818 <_Bfree>
 8010b34:	e5dc      	b.n	80106f0 <_strtod_l+0x88>
 8010b36:	4b36      	ldr	r3, [pc, #216]	; (8010c10 <_strtod_l+0x5a8>)
 8010b38:	9304      	str	r3, [sp, #16]
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010b40:	4650      	mov	r0, sl
 8010b42:	4659      	mov	r1, fp
 8010b44:	4699      	mov	r9, r3
 8010b46:	f1b8 0f01 	cmp.w	r8, #1
 8010b4a:	dc21      	bgt.n	8010b90 <_strtod_l+0x528>
 8010b4c:	b10b      	cbz	r3, 8010b52 <_strtod_l+0x4ea>
 8010b4e:	4682      	mov	sl, r0
 8010b50:	468b      	mov	fp, r1
 8010b52:	4b2f      	ldr	r3, [pc, #188]	; (8010c10 <_strtod_l+0x5a8>)
 8010b54:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010b58:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8010b5c:	4652      	mov	r2, sl
 8010b5e:	465b      	mov	r3, fp
 8010b60:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010b64:	f7ef fd48 	bl	80005f8 <__aeabi_dmul>
 8010b68:	4b2a      	ldr	r3, [pc, #168]	; (8010c14 <_strtod_l+0x5ac>)
 8010b6a:	460a      	mov	r2, r1
 8010b6c:	400b      	ands	r3, r1
 8010b6e:	492a      	ldr	r1, [pc, #168]	; (8010c18 <_strtod_l+0x5b0>)
 8010b70:	428b      	cmp	r3, r1
 8010b72:	4682      	mov	sl, r0
 8010b74:	d8bc      	bhi.n	8010af0 <_strtod_l+0x488>
 8010b76:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010b7a:	428b      	cmp	r3, r1
 8010b7c:	bf86      	itte	hi
 8010b7e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8010c1c <_strtod_l+0x5b4>
 8010b82:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8010b86:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	9304      	str	r3, [sp, #16]
 8010b8e:	e084      	b.n	8010c9a <_strtod_l+0x632>
 8010b90:	f018 0f01 	tst.w	r8, #1
 8010b94:	d005      	beq.n	8010ba2 <_strtod_l+0x53a>
 8010b96:	9b04      	ldr	r3, [sp, #16]
 8010b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b9c:	f7ef fd2c 	bl	80005f8 <__aeabi_dmul>
 8010ba0:	2301      	movs	r3, #1
 8010ba2:	9a04      	ldr	r2, [sp, #16]
 8010ba4:	3208      	adds	r2, #8
 8010ba6:	f109 0901 	add.w	r9, r9, #1
 8010baa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010bae:	9204      	str	r2, [sp, #16]
 8010bb0:	e7c9      	b.n	8010b46 <_strtod_l+0x4de>
 8010bb2:	d0ea      	beq.n	8010b8a <_strtod_l+0x522>
 8010bb4:	f1c8 0800 	rsb	r8, r8, #0
 8010bb8:	f018 020f 	ands.w	r2, r8, #15
 8010bbc:	d00a      	beq.n	8010bd4 <_strtod_l+0x56c>
 8010bbe:	4b13      	ldr	r3, [pc, #76]	; (8010c0c <_strtod_l+0x5a4>)
 8010bc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010bc4:	4650      	mov	r0, sl
 8010bc6:	4659      	mov	r1, fp
 8010bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bcc:	f7ef fe3e 	bl	800084c <__aeabi_ddiv>
 8010bd0:	4682      	mov	sl, r0
 8010bd2:	468b      	mov	fp, r1
 8010bd4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010bd8:	d0d7      	beq.n	8010b8a <_strtod_l+0x522>
 8010bda:	f1b8 0f1f 	cmp.w	r8, #31
 8010bde:	dd1f      	ble.n	8010c20 <_strtod_l+0x5b8>
 8010be0:	2500      	movs	r5, #0
 8010be2:	462e      	mov	r6, r5
 8010be4:	9507      	str	r5, [sp, #28]
 8010be6:	9505      	str	r5, [sp, #20]
 8010be8:	2322      	movs	r3, #34	; 0x22
 8010bea:	f04f 0a00 	mov.w	sl, #0
 8010bee:	f04f 0b00 	mov.w	fp, #0
 8010bf2:	6023      	str	r3, [r4, #0]
 8010bf4:	e786      	b.n	8010b04 <_strtod_l+0x49c>
 8010bf6:	bf00      	nop
 8010bf8:	08014dd1 	.word	0x08014dd1
 8010bfc:	08014e14 	.word	0x08014e14
 8010c00:	08014dc9 	.word	0x08014dc9
 8010c04:	08014f54 	.word	0x08014f54
 8010c08:	08015200 	.word	0x08015200
 8010c0c:	080150e0 	.word	0x080150e0
 8010c10:	080150b8 	.word	0x080150b8
 8010c14:	7ff00000 	.word	0x7ff00000
 8010c18:	7ca00000 	.word	0x7ca00000
 8010c1c:	7fefffff 	.word	0x7fefffff
 8010c20:	f018 0310 	ands.w	r3, r8, #16
 8010c24:	bf18      	it	ne
 8010c26:	236a      	movne	r3, #106	; 0x6a
 8010c28:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8010fd8 <_strtod_l+0x970>
 8010c2c:	9304      	str	r3, [sp, #16]
 8010c2e:	4650      	mov	r0, sl
 8010c30:	4659      	mov	r1, fp
 8010c32:	2300      	movs	r3, #0
 8010c34:	f018 0f01 	tst.w	r8, #1
 8010c38:	d004      	beq.n	8010c44 <_strtod_l+0x5dc>
 8010c3a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010c3e:	f7ef fcdb 	bl	80005f8 <__aeabi_dmul>
 8010c42:	2301      	movs	r3, #1
 8010c44:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010c48:	f109 0908 	add.w	r9, r9, #8
 8010c4c:	d1f2      	bne.n	8010c34 <_strtod_l+0x5cc>
 8010c4e:	b10b      	cbz	r3, 8010c54 <_strtod_l+0x5ec>
 8010c50:	4682      	mov	sl, r0
 8010c52:	468b      	mov	fp, r1
 8010c54:	9b04      	ldr	r3, [sp, #16]
 8010c56:	b1c3      	cbz	r3, 8010c8a <_strtod_l+0x622>
 8010c58:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010c5c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	4659      	mov	r1, fp
 8010c64:	dd11      	ble.n	8010c8a <_strtod_l+0x622>
 8010c66:	2b1f      	cmp	r3, #31
 8010c68:	f340 8124 	ble.w	8010eb4 <_strtod_l+0x84c>
 8010c6c:	2b34      	cmp	r3, #52	; 0x34
 8010c6e:	bfde      	ittt	le
 8010c70:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010c74:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8010c78:	fa03 f202 	lslle.w	r2, r3, r2
 8010c7c:	f04f 0a00 	mov.w	sl, #0
 8010c80:	bfcc      	ite	gt
 8010c82:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010c86:	ea02 0b01 	andle.w	fp, r2, r1
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	4650      	mov	r0, sl
 8010c90:	4659      	mov	r1, fp
 8010c92:	f7ef ff19 	bl	8000ac8 <__aeabi_dcmpeq>
 8010c96:	2800      	cmp	r0, #0
 8010c98:	d1a2      	bne.n	8010be0 <_strtod_l+0x578>
 8010c9a:	9b07      	ldr	r3, [sp, #28]
 8010c9c:	9300      	str	r3, [sp, #0]
 8010c9e:	9908      	ldr	r1, [sp, #32]
 8010ca0:	462b      	mov	r3, r5
 8010ca2:	463a      	mov	r2, r7
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	f001 fe1f 	bl	80128e8 <__s2b>
 8010caa:	9007      	str	r0, [sp, #28]
 8010cac:	2800      	cmp	r0, #0
 8010cae:	f43f af1f 	beq.w	8010af0 <_strtod_l+0x488>
 8010cb2:	9b05      	ldr	r3, [sp, #20]
 8010cb4:	1b9e      	subs	r6, r3, r6
 8010cb6:	9b06      	ldr	r3, [sp, #24]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	bfb4      	ite	lt
 8010cbc:	4633      	movlt	r3, r6
 8010cbe:	2300      	movge	r3, #0
 8010cc0:	930c      	str	r3, [sp, #48]	; 0x30
 8010cc2:	9b06      	ldr	r3, [sp, #24]
 8010cc4:	2500      	movs	r5, #0
 8010cc6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010cca:	9312      	str	r3, [sp, #72]	; 0x48
 8010ccc:	462e      	mov	r6, r5
 8010cce:	9b07      	ldr	r3, [sp, #28]
 8010cd0:	4620      	mov	r0, r4
 8010cd2:	6859      	ldr	r1, [r3, #4]
 8010cd4:	f001 fd60 	bl	8012798 <_Balloc>
 8010cd8:	9005      	str	r0, [sp, #20]
 8010cda:	2800      	cmp	r0, #0
 8010cdc:	f43f af0c 	beq.w	8010af8 <_strtod_l+0x490>
 8010ce0:	9b07      	ldr	r3, [sp, #28]
 8010ce2:	691a      	ldr	r2, [r3, #16]
 8010ce4:	3202      	adds	r2, #2
 8010ce6:	f103 010c 	add.w	r1, r3, #12
 8010cea:	0092      	lsls	r2, r2, #2
 8010cec:	300c      	adds	r0, #12
 8010cee:	f7fe fde7 	bl	800f8c0 <memcpy>
 8010cf2:	ec4b ab10 	vmov	d0, sl, fp
 8010cf6:	aa1a      	add	r2, sp, #104	; 0x68
 8010cf8:	a919      	add	r1, sp, #100	; 0x64
 8010cfa:	4620      	mov	r0, r4
 8010cfc:	f002 f93a 	bl	8012f74 <__d2b>
 8010d00:	ec4b ab18 	vmov	d8, sl, fp
 8010d04:	9018      	str	r0, [sp, #96]	; 0x60
 8010d06:	2800      	cmp	r0, #0
 8010d08:	f43f aef6 	beq.w	8010af8 <_strtod_l+0x490>
 8010d0c:	2101      	movs	r1, #1
 8010d0e:	4620      	mov	r0, r4
 8010d10:	f001 fe84 	bl	8012a1c <__i2b>
 8010d14:	4606      	mov	r6, r0
 8010d16:	2800      	cmp	r0, #0
 8010d18:	f43f aeee 	beq.w	8010af8 <_strtod_l+0x490>
 8010d1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010d1e:	9904      	ldr	r1, [sp, #16]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	bfab      	itete	ge
 8010d24:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8010d26:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8010d28:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010d2a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8010d2e:	bfac      	ite	ge
 8010d30:	eb03 0902 	addge.w	r9, r3, r2
 8010d34:	1ad7      	sublt	r7, r2, r3
 8010d36:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010d38:	eba3 0801 	sub.w	r8, r3, r1
 8010d3c:	4490      	add	r8, r2
 8010d3e:	4ba1      	ldr	r3, [pc, #644]	; (8010fc4 <_strtod_l+0x95c>)
 8010d40:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8010d44:	4598      	cmp	r8, r3
 8010d46:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010d4a:	f280 80c7 	bge.w	8010edc <_strtod_l+0x874>
 8010d4e:	eba3 0308 	sub.w	r3, r3, r8
 8010d52:	2b1f      	cmp	r3, #31
 8010d54:	eba2 0203 	sub.w	r2, r2, r3
 8010d58:	f04f 0101 	mov.w	r1, #1
 8010d5c:	f300 80b1 	bgt.w	8010ec2 <_strtod_l+0x85a>
 8010d60:	fa01 f303 	lsl.w	r3, r1, r3
 8010d64:	930d      	str	r3, [sp, #52]	; 0x34
 8010d66:	2300      	movs	r3, #0
 8010d68:	9308      	str	r3, [sp, #32]
 8010d6a:	eb09 0802 	add.w	r8, r9, r2
 8010d6e:	9b04      	ldr	r3, [sp, #16]
 8010d70:	45c1      	cmp	r9, r8
 8010d72:	4417      	add	r7, r2
 8010d74:	441f      	add	r7, r3
 8010d76:	464b      	mov	r3, r9
 8010d78:	bfa8      	it	ge
 8010d7a:	4643      	movge	r3, r8
 8010d7c:	42bb      	cmp	r3, r7
 8010d7e:	bfa8      	it	ge
 8010d80:	463b      	movge	r3, r7
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	bfc2      	ittt	gt
 8010d86:	eba8 0803 	subgt.w	r8, r8, r3
 8010d8a:	1aff      	subgt	r7, r7, r3
 8010d8c:	eba9 0903 	subgt.w	r9, r9, r3
 8010d90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	dd17      	ble.n	8010dc6 <_strtod_l+0x75e>
 8010d96:	4631      	mov	r1, r6
 8010d98:	461a      	mov	r2, r3
 8010d9a:	4620      	mov	r0, r4
 8010d9c:	f001 fefe 	bl	8012b9c <__pow5mult>
 8010da0:	4606      	mov	r6, r0
 8010da2:	2800      	cmp	r0, #0
 8010da4:	f43f aea8 	beq.w	8010af8 <_strtod_l+0x490>
 8010da8:	4601      	mov	r1, r0
 8010daa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010dac:	4620      	mov	r0, r4
 8010dae:	f001 fe4b 	bl	8012a48 <__multiply>
 8010db2:	900b      	str	r0, [sp, #44]	; 0x2c
 8010db4:	2800      	cmp	r0, #0
 8010db6:	f43f ae9f 	beq.w	8010af8 <_strtod_l+0x490>
 8010dba:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010dbc:	4620      	mov	r0, r4
 8010dbe:	f001 fd2b 	bl	8012818 <_Bfree>
 8010dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010dc4:	9318      	str	r3, [sp, #96]	; 0x60
 8010dc6:	f1b8 0f00 	cmp.w	r8, #0
 8010dca:	f300 808c 	bgt.w	8010ee6 <_strtod_l+0x87e>
 8010dce:	9b06      	ldr	r3, [sp, #24]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	dd08      	ble.n	8010de6 <_strtod_l+0x77e>
 8010dd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010dd6:	9905      	ldr	r1, [sp, #20]
 8010dd8:	4620      	mov	r0, r4
 8010dda:	f001 fedf 	bl	8012b9c <__pow5mult>
 8010dde:	9005      	str	r0, [sp, #20]
 8010de0:	2800      	cmp	r0, #0
 8010de2:	f43f ae89 	beq.w	8010af8 <_strtod_l+0x490>
 8010de6:	2f00      	cmp	r7, #0
 8010de8:	dd08      	ble.n	8010dfc <_strtod_l+0x794>
 8010dea:	9905      	ldr	r1, [sp, #20]
 8010dec:	463a      	mov	r2, r7
 8010dee:	4620      	mov	r0, r4
 8010df0:	f001 ff2e 	bl	8012c50 <__lshift>
 8010df4:	9005      	str	r0, [sp, #20]
 8010df6:	2800      	cmp	r0, #0
 8010df8:	f43f ae7e 	beq.w	8010af8 <_strtod_l+0x490>
 8010dfc:	f1b9 0f00 	cmp.w	r9, #0
 8010e00:	dd08      	ble.n	8010e14 <_strtod_l+0x7ac>
 8010e02:	4631      	mov	r1, r6
 8010e04:	464a      	mov	r2, r9
 8010e06:	4620      	mov	r0, r4
 8010e08:	f001 ff22 	bl	8012c50 <__lshift>
 8010e0c:	4606      	mov	r6, r0
 8010e0e:	2800      	cmp	r0, #0
 8010e10:	f43f ae72 	beq.w	8010af8 <_strtod_l+0x490>
 8010e14:	9a05      	ldr	r2, [sp, #20]
 8010e16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010e18:	4620      	mov	r0, r4
 8010e1a:	f001 ffa5 	bl	8012d68 <__mdiff>
 8010e1e:	4605      	mov	r5, r0
 8010e20:	2800      	cmp	r0, #0
 8010e22:	f43f ae69 	beq.w	8010af8 <_strtod_l+0x490>
 8010e26:	68c3      	ldr	r3, [r0, #12]
 8010e28:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	60c3      	str	r3, [r0, #12]
 8010e2e:	4631      	mov	r1, r6
 8010e30:	f001 ff7e 	bl	8012d30 <__mcmp>
 8010e34:	2800      	cmp	r0, #0
 8010e36:	da60      	bge.n	8010efa <_strtod_l+0x892>
 8010e38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e3a:	ea53 030a 	orrs.w	r3, r3, sl
 8010e3e:	f040 8082 	bne.w	8010f46 <_strtod_l+0x8de>
 8010e42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d17d      	bne.n	8010f46 <_strtod_l+0x8de>
 8010e4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010e4e:	0d1b      	lsrs	r3, r3, #20
 8010e50:	051b      	lsls	r3, r3, #20
 8010e52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010e56:	d976      	bls.n	8010f46 <_strtod_l+0x8de>
 8010e58:	696b      	ldr	r3, [r5, #20]
 8010e5a:	b913      	cbnz	r3, 8010e62 <_strtod_l+0x7fa>
 8010e5c:	692b      	ldr	r3, [r5, #16]
 8010e5e:	2b01      	cmp	r3, #1
 8010e60:	dd71      	ble.n	8010f46 <_strtod_l+0x8de>
 8010e62:	4629      	mov	r1, r5
 8010e64:	2201      	movs	r2, #1
 8010e66:	4620      	mov	r0, r4
 8010e68:	f001 fef2 	bl	8012c50 <__lshift>
 8010e6c:	4631      	mov	r1, r6
 8010e6e:	4605      	mov	r5, r0
 8010e70:	f001 ff5e 	bl	8012d30 <__mcmp>
 8010e74:	2800      	cmp	r0, #0
 8010e76:	dd66      	ble.n	8010f46 <_strtod_l+0x8de>
 8010e78:	9904      	ldr	r1, [sp, #16]
 8010e7a:	4a53      	ldr	r2, [pc, #332]	; (8010fc8 <_strtod_l+0x960>)
 8010e7c:	465b      	mov	r3, fp
 8010e7e:	2900      	cmp	r1, #0
 8010e80:	f000 8081 	beq.w	8010f86 <_strtod_l+0x91e>
 8010e84:	ea02 010b 	and.w	r1, r2, fp
 8010e88:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010e8c:	dc7b      	bgt.n	8010f86 <_strtod_l+0x91e>
 8010e8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010e92:	f77f aea9 	ble.w	8010be8 <_strtod_l+0x580>
 8010e96:	4b4d      	ldr	r3, [pc, #308]	; (8010fcc <_strtod_l+0x964>)
 8010e98:	4650      	mov	r0, sl
 8010e9a:	4659      	mov	r1, fp
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	f7ef fbab 	bl	80005f8 <__aeabi_dmul>
 8010ea2:	460b      	mov	r3, r1
 8010ea4:	4303      	orrs	r3, r0
 8010ea6:	bf08      	it	eq
 8010ea8:	2322      	moveq	r3, #34	; 0x22
 8010eaa:	4682      	mov	sl, r0
 8010eac:	468b      	mov	fp, r1
 8010eae:	bf08      	it	eq
 8010eb0:	6023      	streq	r3, [r4, #0]
 8010eb2:	e62b      	b.n	8010b0c <_strtod_l+0x4a4>
 8010eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8010ebc:	ea03 0a0a 	and.w	sl, r3, sl
 8010ec0:	e6e3      	b.n	8010c8a <_strtod_l+0x622>
 8010ec2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010ec6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010eca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010ece:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010ed2:	fa01 f308 	lsl.w	r3, r1, r8
 8010ed6:	9308      	str	r3, [sp, #32]
 8010ed8:	910d      	str	r1, [sp, #52]	; 0x34
 8010eda:	e746      	b.n	8010d6a <_strtod_l+0x702>
 8010edc:	2300      	movs	r3, #0
 8010ede:	9308      	str	r3, [sp, #32]
 8010ee0:	2301      	movs	r3, #1
 8010ee2:	930d      	str	r3, [sp, #52]	; 0x34
 8010ee4:	e741      	b.n	8010d6a <_strtod_l+0x702>
 8010ee6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010ee8:	4642      	mov	r2, r8
 8010eea:	4620      	mov	r0, r4
 8010eec:	f001 feb0 	bl	8012c50 <__lshift>
 8010ef0:	9018      	str	r0, [sp, #96]	; 0x60
 8010ef2:	2800      	cmp	r0, #0
 8010ef4:	f47f af6b 	bne.w	8010dce <_strtod_l+0x766>
 8010ef8:	e5fe      	b.n	8010af8 <_strtod_l+0x490>
 8010efa:	465f      	mov	r7, fp
 8010efc:	d16e      	bne.n	8010fdc <_strtod_l+0x974>
 8010efe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010f00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010f04:	b342      	cbz	r2, 8010f58 <_strtod_l+0x8f0>
 8010f06:	4a32      	ldr	r2, [pc, #200]	; (8010fd0 <_strtod_l+0x968>)
 8010f08:	4293      	cmp	r3, r2
 8010f0a:	d128      	bne.n	8010f5e <_strtod_l+0x8f6>
 8010f0c:	9b04      	ldr	r3, [sp, #16]
 8010f0e:	4651      	mov	r1, sl
 8010f10:	b1eb      	cbz	r3, 8010f4e <_strtod_l+0x8e6>
 8010f12:	4b2d      	ldr	r3, [pc, #180]	; (8010fc8 <_strtod_l+0x960>)
 8010f14:	403b      	ands	r3, r7
 8010f16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010f1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010f1e:	d819      	bhi.n	8010f54 <_strtod_l+0x8ec>
 8010f20:	0d1b      	lsrs	r3, r3, #20
 8010f22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010f26:	fa02 f303 	lsl.w	r3, r2, r3
 8010f2a:	4299      	cmp	r1, r3
 8010f2c:	d117      	bne.n	8010f5e <_strtod_l+0x8f6>
 8010f2e:	4b29      	ldr	r3, [pc, #164]	; (8010fd4 <_strtod_l+0x96c>)
 8010f30:	429f      	cmp	r7, r3
 8010f32:	d102      	bne.n	8010f3a <_strtod_l+0x8d2>
 8010f34:	3101      	adds	r1, #1
 8010f36:	f43f addf 	beq.w	8010af8 <_strtod_l+0x490>
 8010f3a:	4b23      	ldr	r3, [pc, #140]	; (8010fc8 <_strtod_l+0x960>)
 8010f3c:	403b      	ands	r3, r7
 8010f3e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010f42:	f04f 0a00 	mov.w	sl, #0
 8010f46:	9b04      	ldr	r3, [sp, #16]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d1a4      	bne.n	8010e96 <_strtod_l+0x82e>
 8010f4c:	e5de      	b.n	8010b0c <_strtod_l+0x4a4>
 8010f4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f52:	e7ea      	b.n	8010f2a <_strtod_l+0x8c2>
 8010f54:	4613      	mov	r3, r2
 8010f56:	e7e8      	b.n	8010f2a <_strtod_l+0x8c2>
 8010f58:	ea53 030a 	orrs.w	r3, r3, sl
 8010f5c:	d08c      	beq.n	8010e78 <_strtod_l+0x810>
 8010f5e:	9b08      	ldr	r3, [sp, #32]
 8010f60:	b1db      	cbz	r3, 8010f9a <_strtod_l+0x932>
 8010f62:	423b      	tst	r3, r7
 8010f64:	d0ef      	beq.n	8010f46 <_strtod_l+0x8de>
 8010f66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f68:	9a04      	ldr	r2, [sp, #16]
 8010f6a:	4650      	mov	r0, sl
 8010f6c:	4659      	mov	r1, fp
 8010f6e:	b1c3      	cbz	r3, 8010fa2 <_strtod_l+0x93a>
 8010f70:	f7ff fb5c 	bl	801062c <sulp>
 8010f74:	4602      	mov	r2, r0
 8010f76:	460b      	mov	r3, r1
 8010f78:	ec51 0b18 	vmov	r0, r1, d8
 8010f7c:	f7ef f986 	bl	800028c <__adddf3>
 8010f80:	4682      	mov	sl, r0
 8010f82:	468b      	mov	fp, r1
 8010f84:	e7df      	b.n	8010f46 <_strtod_l+0x8de>
 8010f86:	4013      	ands	r3, r2
 8010f88:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010f8c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010f90:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010f94:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010f98:	e7d5      	b.n	8010f46 <_strtod_l+0x8de>
 8010f9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f9c:	ea13 0f0a 	tst.w	r3, sl
 8010fa0:	e7e0      	b.n	8010f64 <_strtod_l+0x8fc>
 8010fa2:	f7ff fb43 	bl	801062c <sulp>
 8010fa6:	4602      	mov	r2, r0
 8010fa8:	460b      	mov	r3, r1
 8010faa:	ec51 0b18 	vmov	r0, r1, d8
 8010fae:	f7ef f96b 	bl	8000288 <__aeabi_dsub>
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	4682      	mov	sl, r0
 8010fb8:	468b      	mov	fp, r1
 8010fba:	f7ef fd85 	bl	8000ac8 <__aeabi_dcmpeq>
 8010fbe:	2800      	cmp	r0, #0
 8010fc0:	d0c1      	beq.n	8010f46 <_strtod_l+0x8de>
 8010fc2:	e611      	b.n	8010be8 <_strtod_l+0x580>
 8010fc4:	fffffc02 	.word	0xfffffc02
 8010fc8:	7ff00000 	.word	0x7ff00000
 8010fcc:	39500000 	.word	0x39500000
 8010fd0:	000fffff 	.word	0x000fffff
 8010fd4:	7fefffff 	.word	0x7fefffff
 8010fd8:	08014e28 	.word	0x08014e28
 8010fdc:	4631      	mov	r1, r6
 8010fde:	4628      	mov	r0, r5
 8010fe0:	f002 f824 	bl	801302c <__ratio>
 8010fe4:	ec59 8b10 	vmov	r8, r9, d0
 8010fe8:	ee10 0a10 	vmov	r0, s0
 8010fec:	2200      	movs	r2, #0
 8010fee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010ff2:	4649      	mov	r1, r9
 8010ff4:	f7ef fd7c 	bl	8000af0 <__aeabi_dcmple>
 8010ff8:	2800      	cmp	r0, #0
 8010ffa:	d07a      	beq.n	80110f2 <_strtod_l+0xa8a>
 8010ffc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d04a      	beq.n	8011098 <_strtod_l+0xa30>
 8011002:	4b95      	ldr	r3, [pc, #596]	; (8011258 <_strtod_l+0xbf0>)
 8011004:	2200      	movs	r2, #0
 8011006:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801100a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011258 <_strtod_l+0xbf0>
 801100e:	f04f 0800 	mov.w	r8, #0
 8011012:	4b92      	ldr	r3, [pc, #584]	; (801125c <_strtod_l+0xbf4>)
 8011014:	403b      	ands	r3, r7
 8011016:	930d      	str	r3, [sp, #52]	; 0x34
 8011018:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801101a:	4b91      	ldr	r3, [pc, #580]	; (8011260 <_strtod_l+0xbf8>)
 801101c:	429a      	cmp	r2, r3
 801101e:	f040 80b0 	bne.w	8011182 <_strtod_l+0xb1a>
 8011022:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011026:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801102a:	ec4b ab10 	vmov	d0, sl, fp
 801102e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011032:	f001 ff23 	bl	8012e7c <__ulp>
 8011036:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801103a:	ec53 2b10 	vmov	r2, r3, d0
 801103e:	f7ef fadb 	bl	80005f8 <__aeabi_dmul>
 8011042:	4652      	mov	r2, sl
 8011044:	465b      	mov	r3, fp
 8011046:	f7ef f921 	bl	800028c <__adddf3>
 801104a:	460b      	mov	r3, r1
 801104c:	4983      	ldr	r1, [pc, #524]	; (801125c <_strtod_l+0xbf4>)
 801104e:	4a85      	ldr	r2, [pc, #532]	; (8011264 <_strtod_l+0xbfc>)
 8011050:	4019      	ands	r1, r3
 8011052:	4291      	cmp	r1, r2
 8011054:	4682      	mov	sl, r0
 8011056:	d960      	bls.n	801111a <_strtod_l+0xab2>
 8011058:	ee18 3a90 	vmov	r3, s17
 801105c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011060:	4293      	cmp	r3, r2
 8011062:	d104      	bne.n	801106e <_strtod_l+0xa06>
 8011064:	ee18 3a10 	vmov	r3, s16
 8011068:	3301      	adds	r3, #1
 801106a:	f43f ad45 	beq.w	8010af8 <_strtod_l+0x490>
 801106e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8011270 <_strtod_l+0xc08>
 8011072:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011076:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011078:	4620      	mov	r0, r4
 801107a:	f001 fbcd 	bl	8012818 <_Bfree>
 801107e:	9905      	ldr	r1, [sp, #20]
 8011080:	4620      	mov	r0, r4
 8011082:	f001 fbc9 	bl	8012818 <_Bfree>
 8011086:	4631      	mov	r1, r6
 8011088:	4620      	mov	r0, r4
 801108a:	f001 fbc5 	bl	8012818 <_Bfree>
 801108e:	4629      	mov	r1, r5
 8011090:	4620      	mov	r0, r4
 8011092:	f001 fbc1 	bl	8012818 <_Bfree>
 8011096:	e61a      	b.n	8010cce <_strtod_l+0x666>
 8011098:	f1ba 0f00 	cmp.w	sl, #0
 801109c:	d11b      	bne.n	80110d6 <_strtod_l+0xa6e>
 801109e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80110a2:	b9f3      	cbnz	r3, 80110e2 <_strtod_l+0xa7a>
 80110a4:	4b6c      	ldr	r3, [pc, #432]	; (8011258 <_strtod_l+0xbf0>)
 80110a6:	2200      	movs	r2, #0
 80110a8:	4640      	mov	r0, r8
 80110aa:	4649      	mov	r1, r9
 80110ac:	f7ef fd16 	bl	8000adc <__aeabi_dcmplt>
 80110b0:	b9d0      	cbnz	r0, 80110e8 <_strtod_l+0xa80>
 80110b2:	4640      	mov	r0, r8
 80110b4:	4649      	mov	r1, r9
 80110b6:	4b6c      	ldr	r3, [pc, #432]	; (8011268 <_strtod_l+0xc00>)
 80110b8:	2200      	movs	r2, #0
 80110ba:	f7ef fa9d 	bl	80005f8 <__aeabi_dmul>
 80110be:	4680      	mov	r8, r0
 80110c0:	4689      	mov	r9, r1
 80110c2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80110c6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80110ca:	9315      	str	r3, [sp, #84]	; 0x54
 80110cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80110d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80110d4:	e79d      	b.n	8011012 <_strtod_l+0x9aa>
 80110d6:	f1ba 0f01 	cmp.w	sl, #1
 80110da:	d102      	bne.n	80110e2 <_strtod_l+0xa7a>
 80110dc:	2f00      	cmp	r7, #0
 80110de:	f43f ad83 	beq.w	8010be8 <_strtod_l+0x580>
 80110e2:	4b62      	ldr	r3, [pc, #392]	; (801126c <_strtod_l+0xc04>)
 80110e4:	2200      	movs	r2, #0
 80110e6:	e78e      	b.n	8011006 <_strtod_l+0x99e>
 80110e8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8011268 <_strtod_l+0xc00>
 80110ec:	f04f 0800 	mov.w	r8, #0
 80110f0:	e7e7      	b.n	80110c2 <_strtod_l+0xa5a>
 80110f2:	4b5d      	ldr	r3, [pc, #372]	; (8011268 <_strtod_l+0xc00>)
 80110f4:	4640      	mov	r0, r8
 80110f6:	4649      	mov	r1, r9
 80110f8:	2200      	movs	r2, #0
 80110fa:	f7ef fa7d 	bl	80005f8 <__aeabi_dmul>
 80110fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011100:	4680      	mov	r8, r0
 8011102:	4689      	mov	r9, r1
 8011104:	b933      	cbnz	r3, 8011114 <_strtod_l+0xaac>
 8011106:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801110a:	900e      	str	r0, [sp, #56]	; 0x38
 801110c:	930f      	str	r3, [sp, #60]	; 0x3c
 801110e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011112:	e7dd      	b.n	80110d0 <_strtod_l+0xa68>
 8011114:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8011118:	e7f9      	b.n	801110e <_strtod_l+0xaa6>
 801111a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801111e:	9b04      	ldr	r3, [sp, #16]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d1a8      	bne.n	8011076 <_strtod_l+0xa0e>
 8011124:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011128:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801112a:	0d1b      	lsrs	r3, r3, #20
 801112c:	051b      	lsls	r3, r3, #20
 801112e:	429a      	cmp	r2, r3
 8011130:	d1a1      	bne.n	8011076 <_strtod_l+0xa0e>
 8011132:	4640      	mov	r0, r8
 8011134:	4649      	mov	r1, r9
 8011136:	f7ef fdbf 	bl	8000cb8 <__aeabi_d2lz>
 801113a:	f7ef fa2f 	bl	800059c <__aeabi_l2d>
 801113e:	4602      	mov	r2, r0
 8011140:	460b      	mov	r3, r1
 8011142:	4640      	mov	r0, r8
 8011144:	4649      	mov	r1, r9
 8011146:	f7ef f89f 	bl	8000288 <__aeabi_dsub>
 801114a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801114c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011150:	ea43 030a 	orr.w	r3, r3, sl
 8011154:	4313      	orrs	r3, r2
 8011156:	4680      	mov	r8, r0
 8011158:	4689      	mov	r9, r1
 801115a:	d055      	beq.n	8011208 <_strtod_l+0xba0>
 801115c:	a336      	add	r3, pc, #216	; (adr r3, 8011238 <_strtod_l+0xbd0>)
 801115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011162:	f7ef fcbb 	bl	8000adc <__aeabi_dcmplt>
 8011166:	2800      	cmp	r0, #0
 8011168:	f47f acd0 	bne.w	8010b0c <_strtod_l+0x4a4>
 801116c:	a334      	add	r3, pc, #208	; (adr r3, 8011240 <_strtod_l+0xbd8>)
 801116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011172:	4640      	mov	r0, r8
 8011174:	4649      	mov	r1, r9
 8011176:	f7ef fccf 	bl	8000b18 <__aeabi_dcmpgt>
 801117a:	2800      	cmp	r0, #0
 801117c:	f43f af7b 	beq.w	8011076 <_strtod_l+0xa0e>
 8011180:	e4c4      	b.n	8010b0c <_strtod_l+0x4a4>
 8011182:	9b04      	ldr	r3, [sp, #16]
 8011184:	b333      	cbz	r3, 80111d4 <_strtod_l+0xb6c>
 8011186:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011188:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801118c:	d822      	bhi.n	80111d4 <_strtod_l+0xb6c>
 801118e:	a32e      	add	r3, pc, #184	; (adr r3, 8011248 <_strtod_l+0xbe0>)
 8011190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011194:	4640      	mov	r0, r8
 8011196:	4649      	mov	r1, r9
 8011198:	f7ef fcaa 	bl	8000af0 <__aeabi_dcmple>
 801119c:	b1a0      	cbz	r0, 80111c8 <_strtod_l+0xb60>
 801119e:	4649      	mov	r1, r9
 80111a0:	4640      	mov	r0, r8
 80111a2:	f7ef fd01 	bl	8000ba8 <__aeabi_d2uiz>
 80111a6:	2801      	cmp	r0, #1
 80111a8:	bf38      	it	cc
 80111aa:	2001      	movcc	r0, #1
 80111ac:	f7ef f9aa 	bl	8000504 <__aeabi_ui2d>
 80111b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111b2:	4680      	mov	r8, r0
 80111b4:	4689      	mov	r9, r1
 80111b6:	bb23      	cbnz	r3, 8011202 <_strtod_l+0xb9a>
 80111b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80111bc:	9010      	str	r0, [sp, #64]	; 0x40
 80111be:	9311      	str	r3, [sp, #68]	; 0x44
 80111c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80111c4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80111c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80111cc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80111d0:	1a9b      	subs	r3, r3, r2
 80111d2:	9309      	str	r3, [sp, #36]	; 0x24
 80111d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80111d8:	eeb0 0a48 	vmov.f32	s0, s16
 80111dc:	eef0 0a68 	vmov.f32	s1, s17
 80111e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80111e4:	f001 fe4a 	bl	8012e7c <__ulp>
 80111e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80111ec:	ec53 2b10 	vmov	r2, r3, d0
 80111f0:	f7ef fa02 	bl	80005f8 <__aeabi_dmul>
 80111f4:	ec53 2b18 	vmov	r2, r3, d8
 80111f8:	f7ef f848 	bl	800028c <__adddf3>
 80111fc:	4682      	mov	sl, r0
 80111fe:	468b      	mov	fp, r1
 8011200:	e78d      	b.n	801111e <_strtod_l+0xab6>
 8011202:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8011206:	e7db      	b.n	80111c0 <_strtod_l+0xb58>
 8011208:	a311      	add	r3, pc, #68	; (adr r3, 8011250 <_strtod_l+0xbe8>)
 801120a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801120e:	f7ef fc65 	bl	8000adc <__aeabi_dcmplt>
 8011212:	e7b2      	b.n	801117a <_strtod_l+0xb12>
 8011214:	2300      	movs	r3, #0
 8011216:	930a      	str	r3, [sp, #40]	; 0x28
 8011218:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801121a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801121c:	6013      	str	r3, [r2, #0]
 801121e:	f7ff ba6b 	b.w	80106f8 <_strtod_l+0x90>
 8011222:	2a65      	cmp	r2, #101	; 0x65
 8011224:	f43f ab5f 	beq.w	80108e6 <_strtod_l+0x27e>
 8011228:	2a45      	cmp	r2, #69	; 0x45
 801122a:	f43f ab5c 	beq.w	80108e6 <_strtod_l+0x27e>
 801122e:	2301      	movs	r3, #1
 8011230:	f7ff bb94 	b.w	801095c <_strtod_l+0x2f4>
 8011234:	f3af 8000 	nop.w
 8011238:	94a03595 	.word	0x94a03595
 801123c:	3fdfffff 	.word	0x3fdfffff
 8011240:	35afe535 	.word	0x35afe535
 8011244:	3fe00000 	.word	0x3fe00000
 8011248:	ffc00000 	.word	0xffc00000
 801124c:	41dfffff 	.word	0x41dfffff
 8011250:	94a03595 	.word	0x94a03595
 8011254:	3fcfffff 	.word	0x3fcfffff
 8011258:	3ff00000 	.word	0x3ff00000
 801125c:	7ff00000 	.word	0x7ff00000
 8011260:	7fe00000 	.word	0x7fe00000
 8011264:	7c9fffff 	.word	0x7c9fffff
 8011268:	3fe00000 	.word	0x3fe00000
 801126c:	bff00000 	.word	0xbff00000
 8011270:	7fefffff 	.word	0x7fefffff

08011274 <_strtod_r>:
 8011274:	4b01      	ldr	r3, [pc, #4]	; (801127c <_strtod_r+0x8>)
 8011276:	f7ff b9f7 	b.w	8010668 <_strtod_l>
 801127a:	bf00      	nop
 801127c:	2000007c 	.word	0x2000007c

08011280 <_strtol_l.constprop.0>:
 8011280:	2b01      	cmp	r3, #1
 8011282:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011286:	d001      	beq.n	801128c <_strtol_l.constprop.0+0xc>
 8011288:	2b24      	cmp	r3, #36	; 0x24
 801128a:	d906      	bls.n	801129a <_strtol_l.constprop.0+0x1a>
 801128c:	f7fe faee 	bl	800f86c <__errno>
 8011290:	2316      	movs	r3, #22
 8011292:	6003      	str	r3, [r0, #0]
 8011294:	2000      	movs	r0, #0
 8011296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801129a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011380 <_strtol_l.constprop.0+0x100>
 801129e:	460d      	mov	r5, r1
 80112a0:	462e      	mov	r6, r5
 80112a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80112a6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80112aa:	f017 0708 	ands.w	r7, r7, #8
 80112ae:	d1f7      	bne.n	80112a0 <_strtol_l.constprop.0+0x20>
 80112b0:	2c2d      	cmp	r4, #45	; 0x2d
 80112b2:	d132      	bne.n	801131a <_strtol_l.constprop.0+0x9a>
 80112b4:	782c      	ldrb	r4, [r5, #0]
 80112b6:	2701      	movs	r7, #1
 80112b8:	1cb5      	adds	r5, r6, #2
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d05b      	beq.n	8011376 <_strtol_l.constprop.0+0xf6>
 80112be:	2b10      	cmp	r3, #16
 80112c0:	d109      	bne.n	80112d6 <_strtol_l.constprop.0+0x56>
 80112c2:	2c30      	cmp	r4, #48	; 0x30
 80112c4:	d107      	bne.n	80112d6 <_strtol_l.constprop.0+0x56>
 80112c6:	782c      	ldrb	r4, [r5, #0]
 80112c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80112cc:	2c58      	cmp	r4, #88	; 0x58
 80112ce:	d14d      	bne.n	801136c <_strtol_l.constprop.0+0xec>
 80112d0:	786c      	ldrb	r4, [r5, #1]
 80112d2:	2310      	movs	r3, #16
 80112d4:	3502      	adds	r5, #2
 80112d6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80112da:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80112de:	f04f 0c00 	mov.w	ip, #0
 80112e2:	fbb8 f9f3 	udiv	r9, r8, r3
 80112e6:	4666      	mov	r6, ip
 80112e8:	fb03 8a19 	mls	sl, r3, r9, r8
 80112ec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80112f0:	f1be 0f09 	cmp.w	lr, #9
 80112f4:	d816      	bhi.n	8011324 <_strtol_l.constprop.0+0xa4>
 80112f6:	4674      	mov	r4, lr
 80112f8:	42a3      	cmp	r3, r4
 80112fa:	dd24      	ble.n	8011346 <_strtol_l.constprop.0+0xc6>
 80112fc:	f1bc 0f00 	cmp.w	ip, #0
 8011300:	db1e      	blt.n	8011340 <_strtol_l.constprop.0+0xc0>
 8011302:	45b1      	cmp	r9, r6
 8011304:	d31c      	bcc.n	8011340 <_strtol_l.constprop.0+0xc0>
 8011306:	d101      	bne.n	801130c <_strtol_l.constprop.0+0x8c>
 8011308:	45a2      	cmp	sl, r4
 801130a:	db19      	blt.n	8011340 <_strtol_l.constprop.0+0xc0>
 801130c:	fb06 4603 	mla	r6, r6, r3, r4
 8011310:	f04f 0c01 	mov.w	ip, #1
 8011314:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011318:	e7e8      	b.n	80112ec <_strtol_l.constprop.0+0x6c>
 801131a:	2c2b      	cmp	r4, #43	; 0x2b
 801131c:	bf04      	itt	eq
 801131e:	782c      	ldrbeq	r4, [r5, #0]
 8011320:	1cb5      	addeq	r5, r6, #2
 8011322:	e7ca      	b.n	80112ba <_strtol_l.constprop.0+0x3a>
 8011324:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011328:	f1be 0f19 	cmp.w	lr, #25
 801132c:	d801      	bhi.n	8011332 <_strtol_l.constprop.0+0xb2>
 801132e:	3c37      	subs	r4, #55	; 0x37
 8011330:	e7e2      	b.n	80112f8 <_strtol_l.constprop.0+0x78>
 8011332:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8011336:	f1be 0f19 	cmp.w	lr, #25
 801133a:	d804      	bhi.n	8011346 <_strtol_l.constprop.0+0xc6>
 801133c:	3c57      	subs	r4, #87	; 0x57
 801133e:	e7db      	b.n	80112f8 <_strtol_l.constprop.0+0x78>
 8011340:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8011344:	e7e6      	b.n	8011314 <_strtol_l.constprop.0+0x94>
 8011346:	f1bc 0f00 	cmp.w	ip, #0
 801134a:	da05      	bge.n	8011358 <_strtol_l.constprop.0+0xd8>
 801134c:	2322      	movs	r3, #34	; 0x22
 801134e:	6003      	str	r3, [r0, #0]
 8011350:	4646      	mov	r6, r8
 8011352:	b942      	cbnz	r2, 8011366 <_strtol_l.constprop.0+0xe6>
 8011354:	4630      	mov	r0, r6
 8011356:	e79e      	b.n	8011296 <_strtol_l.constprop.0+0x16>
 8011358:	b107      	cbz	r7, 801135c <_strtol_l.constprop.0+0xdc>
 801135a:	4276      	negs	r6, r6
 801135c:	2a00      	cmp	r2, #0
 801135e:	d0f9      	beq.n	8011354 <_strtol_l.constprop.0+0xd4>
 8011360:	f1bc 0f00 	cmp.w	ip, #0
 8011364:	d000      	beq.n	8011368 <_strtol_l.constprop.0+0xe8>
 8011366:	1e69      	subs	r1, r5, #1
 8011368:	6011      	str	r1, [r2, #0]
 801136a:	e7f3      	b.n	8011354 <_strtol_l.constprop.0+0xd4>
 801136c:	2430      	movs	r4, #48	; 0x30
 801136e:	2b00      	cmp	r3, #0
 8011370:	d1b1      	bne.n	80112d6 <_strtol_l.constprop.0+0x56>
 8011372:	2308      	movs	r3, #8
 8011374:	e7af      	b.n	80112d6 <_strtol_l.constprop.0+0x56>
 8011376:	2c30      	cmp	r4, #48	; 0x30
 8011378:	d0a5      	beq.n	80112c6 <_strtol_l.constprop.0+0x46>
 801137a:	230a      	movs	r3, #10
 801137c:	e7ab      	b.n	80112d6 <_strtol_l.constprop.0+0x56>
 801137e:	bf00      	nop
 8011380:	08014e51 	.word	0x08014e51

08011384 <_strtol_r>:
 8011384:	f7ff bf7c 	b.w	8011280 <_strtol_l.constprop.0>

08011388 <quorem>:
 8011388:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801138c:	6903      	ldr	r3, [r0, #16]
 801138e:	690c      	ldr	r4, [r1, #16]
 8011390:	42a3      	cmp	r3, r4
 8011392:	4607      	mov	r7, r0
 8011394:	f2c0 8081 	blt.w	801149a <quorem+0x112>
 8011398:	3c01      	subs	r4, #1
 801139a:	f101 0814 	add.w	r8, r1, #20
 801139e:	f100 0514 	add.w	r5, r0, #20
 80113a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80113a6:	9301      	str	r3, [sp, #4]
 80113a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80113ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80113b0:	3301      	adds	r3, #1
 80113b2:	429a      	cmp	r2, r3
 80113b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80113b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80113bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80113c0:	d331      	bcc.n	8011426 <quorem+0x9e>
 80113c2:	f04f 0e00 	mov.w	lr, #0
 80113c6:	4640      	mov	r0, r8
 80113c8:	46ac      	mov	ip, r5
 80113ca:	46f2      	mov	sl, lr
 80113cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80113d0:	b293      	uxth	r3, r2
 80113d2:	fb06 e303 	mla	r3, r6, r3, lr
 80113d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80113da:	b29b      	uxth	r3, r3
 80113dc:	ebaa 0303 	sub.w	r3, sl, r3
 80113e0:	f8dc a000 	ldr.w	sl, [ip]
 80113e4:	0c12      	lsrs	r2, r2, #16
 80113e6:	fa13 f38a 	uxtah	r3, r3, sl
 80113ea:	fb06 e202 	mla	r2, r6, r2, lr
 80113ee:	9300      	str	r3, [sp, #0]
 80113f0:	9b00      	ldr	r3, [sp, #0]
 80113f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80113f6:	b292      	uxth	r2, r2
 80113f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80113fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011400:	f8bd 3000 	ldrh.w	r3, [sp]
 8011404:	4581      	cmp	r9, r0
 8011406:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801140a:	f84c 3b04 	str.w	r3, [ip], #4
 801140e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011412:	d2db      	bcs.n	80113cc <quorem+0x44>
 8011414:	f855 300b 	ldr.w	r3, [r5, fp]
 8011418:	b92b      	cbnz	r3, 8011426 <quorem+0x9e>
 801141a:	9b01      	ldr	r3, [sp, #4]
 801141c:	3b04      	subs	r3, #4
 801141e:	429d      	cmp	r5, r3
 8011420:	461a      	mov	r2, r3
 8011422:	d32e      	bcc.n	8011482 <quorem+0xfa>
 8011424:	613c      	str	r4, [r7, #16]
 8011426:	4638      	mov	r0, r7
 8011428:	f001 fc82 	bl	8012d30 <__mcmp>
 801142c:	2800      	cmp	r0, #0
 801142e:	db24      	blt.n	801147a <quorem+0xf2>
 8011430:	3601      	adds	r6, #1
 8011432:	4628      	mov	r0, r5
 8011434:	f04f 0c00 	mov.w	ip, #0
 8011438:	f858 2b04 	ldr.w	r2, [r8], #4
 801143c:	f8d0 e000 	ldr.w	lr, [r0]
 8011440:	b293      	uxth	r3, r2
 8011442:	ebac 0303 	sub.w	r3, ip, r3
 8011446:	0c12      	lsrs	r2, r2, #16
 8011448:	fa13 f38e 	uxtah	r3, r3, lr
 801144c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011450:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011454:	b29b      	uxth	r3, r3
 8011456:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801145a:	45c1      	cmp	r9, r8
 801145c:	f840 3b04 	str.w	r3, [r0], #4
 8011460:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011464:	d2e8      	bcs.n	8011438 <quorem+0xb0>
 8011466:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801146a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801146e:	b922      	cbnz	r2, 801147a <quorem+0xf2>
 8011470:	3b04      	subs	r3, #4
 8011472:	429d      	cmp	r5, r3
 8011474:	461a      	mov	r2, r3
 8011476:	d30a      	bcc.n	801148e <quorem+0x106>
 8011478:	613c      	str	r4, [r7, #16]
 801147a:	4630      	mov	r0, r6
 801147c:	b003      	add	sp, #12
 801147e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011482:	6812      	ldr	r2, [r2, #0]
 8011484:	3b04      	subs	r3, #4
 8011486:	2a00      	cmp	r2, #0
 8011488:	d1cc      	bne.n	8011424 <quorem+0x9c>
 801148a:	3c01      	subs	r4, #1
 801148c:	e7c7      	b.n	801141e <quorem+0x96>
 801148e:	6812      	ldr	r2, [r2, #0]
 8011490:	3b04      	subs	r3, #4
 8011492:	2a00      	cmp	r2, #0
 8011494:	d1f0      	bne.n	8011478 <quorem+0xf0>
 8011496:	3c01      	subs	r4, #1
 8011498:	e7eb      	b.n	8011472 <quorem+0xea>
 801149a:	2000      	movs	r0, #0
 801149c:	e7ee      	b.n	801147c <quorem+0xf4>
	...

080114a0 <_dtoa_r>:
 80114a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114a4:	ed2d 8b04 	vpush	{d8-d9}
 80114a8:	ec57 6b10 	vmov	r6, r7, d0
 80114ac:	b093      	sub	sp, #76	; 0x4c
 80114ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80114b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80114b4:	9106      	str	r1, [sp, #24]
 80114b6:	ee10 aa10 	vmov	sl, s0
 80114ba:	4604      	mov	r4, r0
 80114bc:	9209      	str	r2, [sp, #36]	; 0x24
 80114be:	930c      	str	r3, [sp, #48]	; 0x30
 80114c0:	46bb      	mov	fp, r7
 80114c2:	b975      	cbnz	r5, 80114e2 <_dtoa_r+0x42>
 80114c4:	2010      	movs	r0, #16
 80114c6:	f001 f94d 	bl	8012764 <malloc>
 80114ca:	4602      	mov	r2, r0
 80114cc:	6260      	str	r0, [r4, #36]	; 0x24
 80114ce:	b920      	cbnz	r0, 80114da <_dtoa_r+0x3a>
 80114d0:	4ba7      	ldr	r3, [pc, #668]	; (8011770 <_dtoa_r+0x2d0>)
 80114d2:	21ea      	movs	r1, #234	; 0xea
 80114d4:	48a7      	ldr	r0, [pc, #668]	; (8011774 <_dtoa_r+0x2d4>)
 80114d6:	f002 f8ad 	bl	8013634 <__assert_func>
 80114da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80114de:	6005      	str	r5, [r0, #0]
 80114e0:	60c5      	str	r5, [r0, #12]
 80114e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80114e4:	6819      	ldr	r1, [r3, #0]
 80114e6:	b151      	cbz	r1, 80114fe <_dtoa_r+0x5e>
 80114e8:	685a      	ldr	r2, [r3, #4]
 80114ea:	604a      	str	r2, [r1, #4]
 80114ec:	2301      	movs	r3, #1
 80114ee:	4093      	lsls	r3, r2
 80114f0:	608b      	str	r3, [r1, #8]
 80114f2:	4620      	mov	r0, r4
 80114f4:	f001 f990 	bl	8012818 <_Bfree>
 80114f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80114fa:	2200      	movs	r2, #0
 80114fc:	601a      	str	r2, [r3, #0]
 80114fe:	1e3b      	subs	r3, r7, #0
 8011500:	bfaa      	itet	ge
 8011502:	2300      	movge	r3, #0
 8011504:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011508:	f8c8 3000 	strge.w	r3, [r8]
 801150c:	4b9a      	ldr	r3, [pc, #616]	; (8011778 <_dtoa_r+0x2d8>)
 801150e:	bfbc      	itt	lt
 8011510:	2201      	movlt	r2, #1
 8011512:	f8c8 2000 	strlt.w	r2, [r8]
 8011516:	ea33 030b 	bics.w	r3, r3, fp
 801151a:	d11b      	bne.n	8011554 <_dtoa_r+0xb4>
 801151c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801151e:	f242 730f 	movw	r3, #9999	; 0x270f
 8011522:	6013      	str	r3, [r2, #0]
 8011524:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011528:	4333      	orrs	r3, r6
 801152a:	f000 8592 	beq.w	8012052 <_dtoa_r+0xbb2>
 801152e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011530:	b963      	cbnz	r3, 801154c <_dtoa_r+0xac>
 8011532:	4b92      	ldr	r3, [pc, #584]	; (801177c <_dtoa_r+0x2dc>)
 8011534:	e022      	b.n	801157c <_dtoa_r+0xdc>
 8011536:	4b92      	ldr	r3, [pc, #584]	; (8011780 <_dtoa_r+0x2e0>)
 8011538:	9301      	str	r3, [sp, #4]
 801153a:	3308      	adds	r3, #8
 801153c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801153e:	6013      	str	r3, [r2, #0]
 8011540:	9801      	ldr	r0, [sp, #4]
 8011542:	b013      	add	sp, #76	; 0x4c
 8011544:	ecbd 8b04 	vpop	{d8-d9}
 8011548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801154c:	4b8b      	ldr	r3, [pc, #556]	; (801177c <_dtoa_r+0x2dc>)
 801154e:	9301      	str	r3, [sp, #4]
 8011550:	3303      	adds	r3, #3
 8011552:	e7f3      	b.n	801153c <_dtoa_r+0x9c>
 8011554:	2200      	movs	r2, #0
 8011556:	2300      	movs	r3, #0
 8011558:	4650      	mov	r0, sl
 801155a:	4659      	mov	r1, fp
 801155c:	f7ef fab4 	bl	8000ac8 <__aeabi_dcmpeq>
 8011560:	ec4b ab19 	vmov	d9, sl, fp
 8011564:	4680      	mov	r8, r0
 8011566:	b158      	cbz	r0, 8011580 <_dtoa_r+0xe0>
 8011568:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801156a:	2301      	movs	r3, #1
 801156c:	6013      	str	r3, [r2, #0]
 801156e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011570:	2b00      	cmp	r3, #0
 8011572:	f000 856b 	beq.w	801204c <_dtoa_r+0xbac>
 8011576:	4883      	ldr	r0, [pc, #524]	; (8011784 <_dtoa_r+0x2e4>)
 8011578:	6018      	str	r0, [r3, #0]
 801157a:	1e43      	subs	r3, r0, #1
 801157c:	9301      	str	r3, [sp, #4]
 801157e:	e7df      	b.n	8011540 <_dtoa_r+0xa0>
 8011580:	ec4b ab10 	vmov	d0, sl, fp
 8011584:	aa10      	add	r2, sp, #64	; 0x40
 8011586:	a911      	add	r1, sp, #68	; 0x44
 8011588:	4620      	mov	r0, r4
 801158a:	f001 fcf3 	bl	8012f74 <__d2b>
 801158e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8011592:	ee08 0a10 	vmov	s16, r0
 8011596:	2d00      	cmp	r5, #0
 8011598:	f000 8084 	beq.w	80116a4 <_dtoa_r+0x204>
 801159c:	ee19 3a90 	vmov	r3, s19
 80115a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80115a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80115a8:	4656      	mov	r6, sl
 80115aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80115ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80115b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80115b6:	4b74      	ldr	r3, [pc, #464]	; (8011788 <_dtoa_r+0x2e8>)
 80115b8:	2200      	movs	r2, #0
 80115ba:	4630      	mov	r0, r6
 80115bc:	4639      	mov	r1, r7
 80115be:	f7ee fe63 	bl	8000288 <__aeabi_dsub>
 80115c2:	a365      	add	r3, pc, #404	; (adr r3, 8011758 <_dtoa_r+0x2b8>)
 80115c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115c8:	f7ef f816 	bl	80005f8 <__aeabi_dmul>
 80115cc:	a364      	add	r3, pc, #400	; (adr r3, 8011760 <_dtoa_r+0x2c0>)
 80115ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115d2:	f7ee fe5b 	bl	800028c <__adddf3>
 80115d6:	4606      	mov	r6, r0
 80115d8:	4628      	mov	r0, r5
 80115da:	460f      	mov	r7, r1
 80115dc:	f7ee ffa2 	bl	8000524 <__aeabi_i2d>
 80115e0:	a361      	add	r3, pc, #388	; (adr r3, 8011768 <_dtoa_r+0x2c8>)
 80115e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115e6:	f7ef f807 	bl	80005f8 <__aeabi_dmul>
 80115ea:	4602      	mov	r2, r0
 80115ec:	460b      	mov	r3, r1
 80115ee:	4630      	mov	r0, r6
 80115f0:	4639      	mov	r1, r7
 80115f2:	f7ee fe4b 	bl	800028c <__adddf3>
 80115f6:	4606      	mov	r6, r0
 80115f8:	460f      	mov	r7, r1
 80115fa:	f7ef faad 	bl	8000b58 <__aeabi_d2iz>
 80115fe:	2200      	movs	r2, #0
 8011600:	9000      	str	r0, [sp, #0]
 8011602:	2300      	movs	r3, #0
 8011604:	4630      	mov	r0, r6
 8011606:	4639      	mov	r1, r7
 8011608:	f7ef fa68 	bl	8000adc <__aeabi_dcmplt>
 801160c:	b150      	cbz	r0, 8011624 <_dtoa_r+0x184>
 801160e:	9800      	ldr	r0, [sp, #0]
 8011610:	f7ee ff88 	bl	8000524 <__aeabi_i2d>
 8011614:	4632      	mov	r2, r6
 8011616:	463b      	mov	r3, r7
 8011618:	f7ef fa56 	bl	8000ac8 <__aeabi_dcmpeq>
 801161c:	b910      	cbnz	r0, 8011624 <_dtoa_r+0x184>
 801161e:	9b00      	ldr	r3, [sp, #0]
 8011620:	3b01      	subs	r3, #1
 8011622:	9300      	str	r3, [sp, #0]
 8011624:	9b00      	ldr	r3, [sp, #0]
 8011626:	2b16      	cmp	r3, #22
 8011628:	d85a      	bhi.n	80116e0 <_dtoa_r+0x240>
 801162a:	9a00      	ldr	r2, [sp, #0]
 801162c:	4b57      	ldr	r3, [pc, #348]	; (801178c <_dtoa_r+0x2ec>)
 801162e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011636:	ec51 0b19 	vmov	r0, r1, d9
 801163a:	f7ef fa4f 	bl	8000adc <__aeabi_dcmplt>
 801163e:	2800      	cmp	r0, #0
 8011640:	d050      	beq.n	80116e4 <_dtoa_r+0x244>
 8011642:	9b00      	ldr	r3, [sp, #0]
 8011644:	3b01      	subs	r3, #1
 8011646:	9300      	str	r3, [sp, #0]
 8011648:	2300      	movs	r3, #0
 801164a:	930b      	str	r3, [sp, #44]	; 0x2c
 801164c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801164e:	1b5d      	subs	r5, r3, r5
 8011650:	1e6b      	subs	r3, r5, #1
 8011652:	9305      	str	r3, [sp, #20]
 8011654:	bf45      	ittet	mi
 8011656:	f1c5 0301 	rsbmi	r3, r5, #1
 801165a:	9304      	strmi	r3, [sp, #16]
 801165c:	2300      	movpl	r3, #0
 801165e:	2300      	movmi	r3, #0
 8011660:	bf4c      	ite	mi
 8011662:	9305      	strmi	r3, [sp, #20]
 8011664:	9304      	strpl	r3, [sp, #16]
 8011666:	9b00      	ldr	r3, [sp, #0]
 8011668:	2b00      	cmp	r3, #0
 801166a:	db3d      	blt.n	80116e8 <_dtoa_r+0x248>
 801166c:	9b05      	ldr	r3, [sp, #20]
 801166e:	9a00      	ldr	r2, [sp, #0]
 8011670:	920a      	str	r2, [sp, #40]	; 0x28
 8011672:	4413      	add	r3, r2
 8011674:	9305      	str	r3, [sp, #20]
 8011676:	2300      	movs	r3, #0
 8011678:	9307      	str	r3, [sp, #28]
 801167a:	9b06      	ldr	r3, [sp, #24]
 801167c:	2b09      	cmp	r3, #9
 801167e:	f200 8089 	bhi.w	8011794 <_dtoa_r+0x2f4>
 8011682:	2b05      	cmp	r3, #5
 8011684:	bfc4      	itt	gt
 8011686:	3b04      	subgt	r3, #4
 8011688:	9306      	strgt	r3, [sp, #24]
 801168a:	9b06      	ldr	r3, [sp, #24]
 801168c:	f1a3 0302 	sub.w	r3, r3, #2
 8011690:	bfcc      	ite	gt
 8011692:	2500      	movgt	r5, #0
 8011694:	2501      	movle	r5, #1
 8011696:	2b03      	cmp	r3, #3
 8011698:	f200 8087 	bhi.w	80117aa <_dtoa_r+0x30a>
 801169c:	e8df f003 	tbb	[pc, r3]
 80116a0:	59383a2d 	.word	0x59383a2d
 80116a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80116a8:	441d      	add	r5, r3
 80116aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80116ae:	2b20      	cmp	r3, #32
 80116b0:	bfc1      	itttt	gt
 80116b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80116b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80116ba:	fa0b f303 	lslgt.w	r3, fp, r3
 80116be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80116c2:	bfda      	itte	le
 80116c4:	f1c3 0320 	rsble	r3, r3, #32
 80116c8:	fa06 f003 	lslle.w	r0, r6, r3
 80116cc:	4318      	orrgt	r0, r3
 80116ce:	f7ee ff19 	bl	8000504 <__aeabi_ui2d>
 80116d2:	2301      	movs	r3, #1
 80116d4:	4606      	mov	r6, r0
 80116d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80116da:	3d01      	subs	r5, #1
 80116dc:	930e      	str	r3, [sp, #56]	; 0x38
 80116de:	e76a      	b.n	80115b6 <_dtoa_r+0x116>
 80116e0:	2301      	movs	r3, #1
 80116e2:	e7b2      	b.n	801164a <_dtoa_r+0x1aa>
 80116e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80116e6:	e7b1      	b.n	801164c <_dtoa_r+0x1ac>
 80116e8:	9b04      	ldr	r3, [sp, #16]
 80116ea:	9a00      	ldr	r2, [sp, #0]
 80116ec:	1a9b      	subs	r3, r3, r2
 80116ee:	9304      	str	r3, [sp, #16]
 80116f0:	4253      	negs	r3, r2
 80116f2:	9307      	str	r3, [sp, #28]
 80116f4:	2300      	movs	r3, #0
 80116f6:	930a      	str	r3, [sp, #40]	; 0x28
 80116f8:	e7bf      	b.n	801167a <_dtoa_r+0x1da>
 80116fa:	2300      	movs	r3, #0
 80116fc:	9308      	str	r3, [sp, #32]
 80116fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011700:	2b00      	cmp	r3, #0
 8011702:	dc55      	bgt.n	80117b0 <_dtoa_r+0x310>
 8011704:	2301      	movs	r3, #1
 8011706:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801170a:	461a      	mov	r2, r3
 801170c:	9209      	str	r2, [sp, #36]	; 0x24
 801170e:	e00c      	b.n	801172a <_dtoa_r+0x28a>
 8011710:	2301      	movs	r3, #1
 8011712:	e7f3      	b.n	80116fc <_dtoa_r+0x25c>
 8011714:	2300      	movs	r3, #0
 8011716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011718:	9308      	str	r3, [sp, #32]
 801171a:	9b00      	ldr	r3, [sp, #0]
 801171c:	4413      	add	r3, r2
 801171e:	9302      	str	r3, [sp, #8]
 8011720:	3301      	adds	r3, #1
 8011722:	2b01      	cmp	r3, #1
 8011724:	9303      	str	r3, [sp, #12]
 8011726:	bfb8      	it	lt
 8011728:	2301      	movlt	r3, #1
 801172a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801172c:	2200      	movs	r2, #0
 801172e:	6042      	str	r2, [r0, #4]
 8011730:	2204      	movs	r2, #4
 8011732:	f102 0614 	add.w	r6, r2, #20
 8011736:	429e      	cmp	r6, r3
 8011738:	6841      	ldr	r1, [r0, #4]
 801173a:	d93d      	bls.n	80117b8 <_dtoa_r+0x318>
 801173c:	4620      	mov	r0, r4
 801173e:	f001 f82b 	bl	8012798 <_Balloc>
 8011742:	9001      	str	r0, [sp, #4]
 8011744:	2800      	cmp	r0, #0
 8011746:	d13b      	bne.n	80117c0 <_dtoa_r+0x320>
 8011748:	4b11      	ldr	r3, [pc, #68]	; (8011790 <_dtoa_r+0x2f0>)
 801174a:	4602      	mov	r2, r0
 801174c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011750:	e6c0      	b.n	80114d4 <_dtoa_r+0x34>
 8011752:	2301      	movs	r3, #1
 8011754:	e7df      	b.n	8011716 <_dtoa_r+0x276>
 8011756:	bf00      	nop
 8011758:	636f4361 	.word	0x636f4361
 801175c:	3fd287a7 	.word	0x3fd287a7
 8011760:	8b60c8b3 	.word	0x8b60c8b3
 8011764:	3fc68a28 	.word	0x3fc68a28
 8011768:	509f79fb 	.word	0x509f79fb
 801176c:	3fd34413 	.word	0x3fd34413
 8011770:	08014f5e 	.word	0x08014f5e
 8011774:	08014f75 	.word	0x08014f75
 8011778:	7ff00000 	.word	0x7ff00000
 801177c:	08014f5a 	.word	0x08014f5a
 8011780:	08014f51 	.word	0x08014f51
 8011784:	08014dd5 	.word	0x08014dd5
 8011788:	3ff80000 	.word	0x3ff80000
 801178c:	080150e0 	.word	0x080150e0
 8011790:	08014fd0 	.word	0x08014fd0
 8011794:	2501      	movs	r5, #1
 8011796:	2300      	movs	r3, #0
 8011798:	9306      	str	r3, [sp, #24]
 801179a:	9508      	str	r5, [sp, #32]
 801179c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80117a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80117a4:	2200      	movs	r2, #0
 80117a6:	2312      	movs	r3, #18
 80117a8:	e7b0      	b.n	801170c <_dtoa_r+0x26c>
 80117aa:	2301      	movs	r3, #1
 80117ac:	9308      	str	r3, [sp, #32]
 80117ae:	e7f5      	b.n	801179c <_dtoa_r+0x2fc>
 80117b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80117b6:	e7b8      	b.n	801172a <_dtoa_r+0x28a>
 80117b8:	3101      	adds	r1, #1
 80117ba:	6041      	str	r1, [r0, #4]
 80117bc:	0052      	lsls	r2, r2, #1
 80117be:	e7b8      	b.n	8011732 <_dtoa_r+0x292>
 80117c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80117c2:	9a01      	ldr	r2, [sp, #4]
 80117c4:	601a      	str	r2, [r3, #0]
 80117c6:	9b03      	ldr	r3, [sp, #12]
 80117c8:	2b0e      	cmp	r3, #14
 80117ca:	f200 809d 	bhi.w	8011908 <_dtoa_r+0x468>
 80117ce:	2d00      	cmp	r5, #0
 80117d0:	f000 809a 	beq.w	8011908 <_dtoa_r+0x468>
 80117d4:	9b00      	ldr	r3, [sp, #0]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	dd32      	ble.n	8011840 <_dtoa_r+0x3a0>
 80117da:	4ab7      	ldr	r2, [pc, #732]	; (8011ab8 <_dtoa_r+0x618>)
 80117dc:	f003 030f 	and.w	r3, r3, #15
 80117e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80117e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80117e8:	9b00      	ldr	r3, [sp, #0]
 80117ea:	05d8      	lsls	r0, r3, #23
 80117ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 80117f0:	d516      	bpl.n	8011820 <_dtoa_r+0x380>
 80117f2:	4bb2      	ldr	r3, [pc, #712]	; (8011abc <_dtoa_r+0x61c>)
 80117f4:	ec51 0b19 	vmov	r0, r1, d9
 80117f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80117fc:	f7ef f826 	bl	800084c <__aeabi_ddiv>
 8011800:	f007 070f 	and.w	r7, r7, #15
 8011804:	4682      	mov	sl, r0
 8011806:	468b      	mov	fp, r1
 8011808:	2503      	movs	r5, #3
 801180a:	4eac      	ldr	r6, [pc, #688]	; (8011abc <_dtoa_r+0x61c>)
 801180c:	b957      	cbnz	r7, 8011824 <_dtoa_r+0x384>
 801180e:	4642      	mov	r2, r8
 8011810:	464b      	mov	r3, r9
 8011812:	4650      	mov	r0, sl
 8011814:	4659      	mov	r1, fp
 8011816:	f7ef f819 	bl	800084c <__aeabi_ddiv>
 801181a:	4682      	mov	sl, r0
 801181c:	468b      	mov	fp, r1
 801181e:	e028      	b.n	8011872 <_dtoa_r+0x3d2>
 8011820:	2502      	movs	r5, #2
 8011822:	e7f2      	b.n	801180a <_dtoa_r+0x36a>
 8011824:	07f9      	lsls	r1, r7, #31
 8011826:	d508      	bpl.n	801183a <_dtoa_r+0x39a>
 8011828:	4640      	mov	r0, r8
 801182a:	4649      	mov	r1, r9
 801182c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011830:	f7ee fee2 	bl	80005f8 <__aeabi_dmul>
 8011834:	3501      	adds	r5, #1
 8011836:	4680      	mov	r8, r0
 8011838:	4689      	mov	r9, r1
 801183a:	107f      	asrs	r7, r7, #1
 801183c:	3608      	adds	r6, #8
 801183e:	e7e5      	b.n	801180c <_dtoa_r+0x36c>
 8011840:	f000 809b 	beq.w	801197a <_dtoa_r+0x4da>
 8011844:	9b00      	ldr	r3, [sp, #0]
 8011846:	4f9d      	ldr	r7, [pc, #628]	; (8011abc <_dtoa_r+0x61c>)
 8011848:	425e      	negs	r6, r3
 801184a:	4b9b      	ldr	r3, [pc, #620]	; (8011ab8 <_dtoa_r+0x618>)
 801184c:	f006 020f 	and.w	r2, r6, #15
 8011850:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011858:	ec51 0b19 	vmov	r0, r1, d9
 801185c:	f7ee fecc 	bl	80005f8 <__aeabi_dmul>
 8011860:	1136      	asrs	r6, r6, #4
 8011862:	4682      	mov	sl, r0
 8011864:	468b      	mov	fp, r1
 8011866:	2300      	movs	r3, #0
 8011868:	2502      	movs	r5, #2
 801186a:	2e00      	cmp	r6, #0
 801186c:	d17a      	bne.n	8011964 <_dtoa_r+0x4c4>
 801186e:	2b00      	cmp	r3, #0
 8011870:	d1d3      	bne.n	801181a <_dtoa_r+0x37a>
 8011872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011874:	2b00      	cmp	r3, #0
 8011876:	f000 8082 	beq.w	801197e <_dtoa_r+0x4de>
 801187a:	4b91      	ldr	r3, [pc, #580]	; (8011ac0 <_dtoa_r+0x620>)
 801187c:	2200      	movs	r2, #0
 801187e:	4650      	mov	r0, sl
 8011880:	4659      	mov	r1, fp
 8011882:	f7ef f92b 	bl	8000adc <__aeabi_dcmplt>
 8011886:	2800      	cmp	r0, #0
 8011888:	d079      	beq.n	801197e <_dtoa_r+0x4de>
 801188a:	9b03      	ldr	r3, [sp, #12]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d076      	beq.n	801197e <_dtoa_r+0x4de>
 8011890:	9b02      	ldr	r3, [sp, #8]
 8011892:	2b00      	cmp	r3, #0
 8011894:	dd36      	ble.n	8011904 <_dtoa_r+0x464>
 8011896:	9b00      	ldr	r3, [sp, #0]
 8011898:	4650      	mov	r0, sl
 801189a:	4659      	mov	r1, fp
 801189c:	1e5f      	subs	r7, r3, #1
 801189e:	2200      	movs	r2, #0
 80118a0:	4b88      	ldr	r3, [pc, #544]	; (8011ac4 <_dtoa_r+0x624>)
 80118a2:	f7ee fea9 	bl	80005f8 <__aeabi_dmul>
 80118a6:	9e02      	ldr	r6, [sp, #8]
 80118a8:	4682      	mov	sl, r0
 80118aa:	468b      	mov	fp, r1
 80118ac:	3501      	adds	r5, #1
 80118ae:	4628      	mov	r0, r5
 80118b0:	f7ee fe38 	bl	8000524 <__aeabi_i2d>
 80118b4:	4652      	mov	r2, sl
 80118b6:	465b      	mov	r3, fp
 80118b8:	f7ee fe9e 	bl	80005f8 <__aeabi_dmul>
 80118bc:	4b82      	ldr	r3, [pc, #520]	; (8011ac8 <_dtoa_r+0x628>)
 80118be:	2200      	movs	r2, #0
 80118c0:	f7ee fce4 	bl	800028c <__adddf3>
 80118c4:	46d0      	mov	r8, sl
 80118c6:	46d9      	mov	r9, fp
 80118c8:	4682      	mov	sl, r0
 80118ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80118ce:	2e00      	cmp	r6, #0
 80118d0:	d158      	bne.n	8011984 <_dtoa_r+0x4e4>
 80118d2:	4b7e      	ldr	r3, [pc, #504]	; (8011acc <_dtoa_r+0x62c>)
 80118d4:	2200      	movs	r2, #0
 80118d6:	4640      	mov	r0, r8
 80118d8:	4649      	mov	r1, r9
 80118da:	f7ee fcd5 	bl	8000288 <__aeabi_dsub>
 80118de:	4652      	mov	r2, sl
 80118e0:	465b      	mov	r3, fp
 80118e2:	4680      	mov	r8, r0
 80118e4:	4689      	mov	r9, r1
 80118e6:	f7ef f917 	bl	8000b18 <__aeabi_dcmpgt>
 80118ea:	2800      	cmp	r0, #0
 80118ec:	f040 8295 	bne.w	8011e1a <_dtoa_r+0x97a>
 80118f0:	4652      	mov	r2, sl
 80118f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80118f6:	4640      	mov	r0, r8
 80118f8:	4649      	mov	r1, r9
 80118fa:	f7ef f8ef 	bl	8000adc <__aeabi_dcmplt>
 80118fe:	2800      	cmp	r0, #0
 8011900:	f040 8289 	bne.w	8011e16 <_dtoa_r+0x976>
 8011904:	ec5b ab19 	vmov	sl, fp, d9
 8011908:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801190a:	2b00      	cmp	r3, #0
 801190c:	f2c0 8148 	blt.w	8011ba0 <_dtoa_r+0x700>
 8011910:	9a00      	ldr	r2, [sp, #0]
 8011912:	2a0e      	cmp	r2, #14
 8011914:	f300 8144 	bgt.w	8011ba0 <_dtoa_r+0x700>
 8011918:	4b67      	ldr	r3, [pc, #412]	; (8011ab8 <_dtoa_r+0x618>)
 801191a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801191e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011924:	2b00      	cmp	r3, #0
 8011926:	f280 80d5 	bge.w	8011ad4 <_dtoa_r+0x634>
 801192a:	9b03      	ldr	r3, [sp, #12]
 801192c:	2b00      	cmp	r3, #0
 801192e:	f300 80d1 	bgt.w	8011ad4 <_dtoa_r+0x634>
 8011932:	f040 826f 	bne.w	8011e14 <_dtoa_r+0x974>
 8011936:	4b65      	ldr	r3, [pc, #404]	; (8011acc <_dtoa_r+0x62c>)
 8011938:	2200      	movs	r2, #0
 801193a:	4640      	mov	r0, r8
 801193c:	4649      	mov	r1, r9
 801193e:	f7ee fe5b 	bl	80005f8 <__aeabi_dmul>
 8011942:	4652      	mov	r2, sl
 8011944:	465b      	mov	r3, fp
 8011946:	f7ef f8dd 	bl	8000b04 <__aeabi_dcmpge>
 801194a:	9e03      	ldr	r6, [sp, #12]
 801194c:	4637      	mov	r7, r6
 801194e:	2800      	cmp	r0, #0
 8011950:	f040 8245 	bne.w	8011dde <_dtoa_r+0x93e>
 8011954:	9d01      	ldr	r5, [sp, #4]
 8011956:	2331      	movs	r3, #49	; 0x31
 8011958:	f805 3b01 	strb.w	r3, [r5], #1
 801195c:	9b00      	ldr	r3, [sp, #0]
 801195e:	3301      	adds	r3, #1
 8011960:	9300      	str	r3, [sp, #0]
 8011962:	e240      	b.n	8011de6 <_dtoa_r+0x946>
 8011964:	07f2      	lsls	r2, r6, #31
 8011966:	d505      	bpl.n	8011974 <_dtoa_r+0x4d4>
 8011968:	e9d7 2300 	ldrd	r2, r3, [r7]
 801196c:	f7ee fe44 	bl	80005f8 <__aeabi_dmul>
 8011970:	3501      	adds	r5, #1
 8011972:	2301      	movs	r3, #1
 8011974:	1076      	asrs	r6, r6, #1
 8011976:	3708      	adds	r7, #8
 8011978:	e777      	b.n	801186a <_dtoa_r+0x3ca>
 801197a:	2502      	movs	r5, #2
 801197c:	e779      	b.n	8011872 <_dtoa_r+0x3d2>
 801197e:	9f00      	ldr	r7, [sp, #0]
 8011980:	9e03      	ldr	r6, [sp, #12]
 8011982:	e794      	b.n	80118ae <_dtoa_r+0x40e>
 8011984:	9901      	ldr	r1, [sp, #4]
 8011986:	4b4c      	ldr	r3, [pc, #304]	; (8011ab8 <_dtoa_r+0x618>)
 8011988:	4431      	add	r1, r6
 801198a:	910d      	str	r1, [sp, #52]	; 0x34
 801198c:	9908      	ldr	r1, [sp, #32]
 801198e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011992:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011996:	2900      	cmp	r1, #0
 8011998:	d043      	beq.n	8011a22 <_dtoa_r+0x582>
 801199a:	494d      	ldr	r1, [pc, #308]	; (8011ad0 <_dtoa_r+0x630>)
 801199c:	2000      	movs	r0, #0
 801199e:	f7ee ff55 	bl	800084c <__aeabi_ddiv>
 80119a2:	4652      	mov	r2, sl
 80119a4:	465b      	mov	r3, fp
 80119a6:	f7ee fc6f 	bl	8000288 <__aeabi_dsub>
 80119aa:	9d01      	ldr	r5, [sp, #4]
 80119ac:	4682      	mov	sl, r0
 80119ae:	468b      	mov	fp, r1
 80119b0:	4649      	mov	r1, r9
 80119b2:	4640      	mov	r0, r8
 80119b4:	f7ef f8d0 	bl	8000b58 <__aeabi_d2iz>
 80119b8:	4606      	mov	r6, r0
 80119ba:	f7ee fdb3 	bl	8000524 <__aeabi_i2d>
 80119be:	4602      	mov	r2, r0
 80119c0:	460b      	mov	r3, r1
 80119c2:	4640      	mov	r0, r8
 80119c4:	4649      	mov	r1, r9
 80119c6:	f7ee fc5f 	bl	8000288 <__aeabi_dsub>
 80119ca:	3630      	adds	r6, #48	; 0x30
 80119cc:	f805 6b01 	strb.w	r6, [r5], #1
 80119d0:	4652      	mov	r2, sl
 80119d2:	465b      	mov	r3, fp
 80119d4:	4680      	mov	r8, r0
 80119d6:	4689      	mov	r9, r1
 80119d8:	f7ef f880 	bl	8000adc <__aeabi_dcmplt>
 80119dc:	2800      	cmp	r0, #0
 80119de:	d163      	bne.n	8011aa8 <_dtoa_r+0x608>
 80119e0:	4642      	mov	r2, r8
 80119e2:	464b      	mov	r3, r9
 80119e4:	4936      	ldr	r1, [pc, #216]	; (8011ac0 <_dtoa_r+0x620>)
 80119e6:	2000      	movs	r0, #0
 80119e8:	f7ee fc4e 	bl	8000288 <__aeabi_dsub>
 80119ec:	4652      	mov	r2, sl
 80119ee:	465b      	mov	r3, fp
 80119f0:	f7ef f874 	bl	8000adc <__aeabi_dcmplt>
 80119f4:	2800      	cmp	r0, #0
 80119f6:	f040 80b5 	bne.w	8011b64 <_dtoa_r+0x6c4>
 80119fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80119fc:	429d      	cmp	r5, r3
 80119fe:	d081      	beq.n	8011904 <_dtoa_r+0x464>
 8011a00:	4b30      	ldr	r3, [pc, #192]	; (8011ac4 <_dtoa_r+0x624>)
 8011a02:	2200      	movs	r2, #0
 8011a04:	4650      	mov	r0, sl
 8011a06:	4659      	mov	r1, fp
 8011a08:	f7ee fdf6 	bl	80005f8 <__aeabi_dmul>
 8011a0c:	4b2d      	ldr	r3, [pc, #180]	; (8011ac4 <_dtoa_r+0x624>)
 8011a0e:	4682      	mov	sl, r0
 8011a10:	468b      	mov	fp, r1
 8011a12:	4640      	mov	r0, r8
 8011a14:	4649      	mov	r1, r9
 8011a16:	2200      	movs	r2, #0
 8011a18:	f7ee fdee 	bl	80005f8 <__aeabi_dmul>
 8011a1c:	4680      	mov	r8, r0
 8011a1e:	4689      	mov	r9, r1
 8011a20:	e7c6      	b.n	80119b0 <_dtoa_r+0x510>
 8011a22:	4650      	mov	r0, sl
 8011a24:	4659      	mov	r1, fp
 8011a26:	f7ee fde7 	bl	80005f8 <__aeabi_dmul>
 8011a2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a2c:	9d01      	ldr	r5, [sp, #4]
 8011a2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011a30:	4682      	mov	sl, r0
 8011a32:	468b      	mov	fp, r1
 8011a34:	4649      	mov	r1, r9
 8011a36:	4640      	mov	r0, r8
 8011a38:	f7ef f88e 	bl	8000b58 <__aeabi_d2iz>
 8011a3c:	4606      	mov	r6, r0
 8011a3e:	f7ee fd71 	bl	8000524 <__aeabi_i2d>
 8011a42:	3630      	adds	r6, #48	; 0x30
 8011a44:	4602      	mov	r2, r0
 8011a46:	460b      	mov	r3, r1
 8011a48:	4640      	mov	r0, r8
 8011a4a:	4649      	mov	r1, r9
 8011a4c:	f7ee fc1c 	bl	8000288 <__aeabi_dsub>
 8011a50:	f805 6b01 	strb.w	r6, [r5], #1
 8011a54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a56:	429d      	cmp	r5, r3
 8011a58:	4680      	mov	r8, r0
 8011a5a:	4689      	mov	r9, r1
 8011a5c:	f04f 0200 	mov.w	r2, #0
 8011a60:	d124      	bne.n	8011aac <_dtoa_r+0x60c>
 8011a62:	4b1b      	ldr	r3, [pc, #108]	; (8011ad0 <_dtoa_r+0x630>)
 8011a64:	4650      	mov	r0, sl
 8011a66:	4659      	mov	r1, fp
 8011a68:	f7ee fc10 	bl	800028c <__adddf3>
 8011a6c:	4602      	mov	r2, r0
 8011a6e:	460b      	mov	r3, r1
 8011a70:	4640      	mov	r0, r8
 8011a72:	4649      	mov	r1, r9
 8011a74:	f7ef f850 	bl	8000b18 <__aeabi_dcmpgt>
 8011a78:	2800      	cmp	r0, #0
 8011a7a:	d173      	bne.n	8011b64 <_dtoa_r+0x6c4>
 8011a7c:	4652      	mov	r2, sl
 8011a7e:	465b      	mov	r3, fp
 8011a80:	4913      	ldr	r1, [pc, #76]	; (8011ad0 <_dtoa_r+0x630>)
 8011a82:	2000      	movs	r0, #0
 8011a84:	f7ee fc00 	bl	8000288 <__aeabi_dsub>
 8011a88:	4602      	mov	r2, r0
 8011a8a:	460b      	mov	r3, r1
 8011a8c:	4640      	mov	r0, r8
 8011a8e:	4649      	mov	r1, r9
 8011a90:	f7ef f824 	bl	8000adc <__aeabi_dcmplt>
 8011a94:	2800      	cmp	r0, #0
 8011a96:	f43f af35 	beq.w	8011904 <_dtoa_r+0x464>
 8011a9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011a9c:	1e6b      	subs	r3, r5, #1
 8011a9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011aa0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011aa4:	2b30      	cmp	r3, #48	; 0x30
 8011aa6:	d0f8      	beq.n	8011a9a <_dtoa_r+0x5fa>
 8011aa8:	9700      	str	r7, [sp, #0]
 8011aaa:	e049      	b.n	8011b40 <_dtoa_r+0x6a0>
 8011aac:	4b05      	ldr	r3, [pc, #20]	; (8011ac4 <_dtoa_r+0x624>)
 8011aae:	f7ee fda3 	bl	80005f8 <__aeabi_dmul>
 8011ab2:	4680      	mov	r8, r0
 8011ab4:	4689      	mov	r9, r1
 8011ab6:	e7bd      	b.n	8011a34 <_dtoa_r+0x594>
 8011ab8:	080150e0 	.word	0x080150e0
 8011abc:	080150b8 	.word	0x080150b8
 8011ac0:	3ff00000 	.word	0x3ff00000
 8011ac4:	40240000 	.word	0x40240000
 8011ac8:	401c0000 	.word	0x401c0000
 8011acc:	40140000 	.word	0x40140000
 8011ad0:	3fe00000 	.word	0x3fe00000
 8011ad4:	9d01      	ldr	r5, [sp, #4]
 8011ad6:	4656      	mov	r6, sl
 8011ad8:	465f      	mov	r7, fp
 8011ada:	4642      	mov	r2, r8
 8011adc:	464b      	mov	r3, r9
 8011ade:	4630      	mov	r0, r6
 8011ae0:	4639      	mov	r1, r7
 8011ae2:	f7ee feb3 	bl	800084c <__aeabi_ddiv>
 8011ae6:	f7ef f837 	bl	8000b58 <__aeabi_d2iz>
 8011aea:	4682      	mov	sl, r0
 8011aec:	f7ee fd1a 	bl	8000524 <__aeabi_i2d>
 8011af0:	4642      	mov	r2, r8
 8011af2:	464b      	mov	r3, r9
 8011af4:	f7ee fd80 	bl	80005f8 <__aeabi_dmul>
 8011af8:	4602      	mov	r2, r0
 8011afa:	460b      	mov	r3, r1
 8011afc:	4630      	mov	r0, r6
 8011afe:	4639      	mov	r1, r7
 8011b00:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011b04:	f7ee fbc0 	bl	8000288 <__aeabi_dsub>
 8011b08:	f805 6b01 	strb.w	r6, [r5], #1
 8011b0c:	9e01      	ldr	r6, [sp, #4]
 8011b0e:	9f03      	ldr	r7, [sp, #12]
 8011b10:	1bae      	subs	r6, r5, r6
 8011b12:	42b7      	cmp	r7, r6
 8011b14:	4602      	mov	r2, r0
 8011b16:	460b      	mov	r3, r1
 8011b18:	d135      	bne.n	8011b86 <_dtoa_r+0x6e6>
 8011b1a:	f7ee fbb7 	bl	800028c <__adddf3>
 8011b1e:	4642      	mov	r2, r8
 8011b20:	464b      	mov	r3, r9
 8011b22:	4606      	mov	r6, r0
 8011b24:	460f      	mov	r7, r1
 8011b26:	f7ee fff7 	bl	8000b18 <__aeabi_dcmpgt>
 8011b2a:	b9d0      	cbnz	r0, 8011b62 <_dtoa_r+0x6c2>
 8011b2c:	4642      	mov	r2, r8
 8011b2e:	464b      	mov	r3, r9
 8011b30:	4630      	mov	r0, r6
 8011b32:	4639      	mov	r1, r7
 8011b34:	f7ee ffc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8011b38:	b110      	cbz	r0, 8011b40 <_dtoa_r+0x6a0>
 8011b3a:	f01a 0f01 	tst.w	sl, #1
 8011b3e:	d110      	bne.n	8011b62 <_dtoa_r+0x6c2>
 8011b40:	4620      	mov	r0, r4
 8011b42:	ee18 1a10 	vmov	r1, s16
 8011b46:	f000 fe67 	bl	8012818 <_Bfree>
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	9800      	ldr	r0, [sp, #0]
 8011b4e:	702b      	strb	r3, [r5, #0]
 8011b50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b52:	3001      	adds	r0, #1
 8011b54:	6018      	str	r0, [r3, #0]
 8011b56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	f43f acf1 	beq.w	8011540 <_dtoa_r+0xa0>
 8011b5e:	601d      	str	r5, [r3, #0]
 8011b60:	e4ee      	b.n	8011540 <_dtoa_r+0xa0>
 8011b62:	9f00      	ldr	r7, [sp, #0]
 8011b64:	462b      	mov	r3, r5
 8011b66:	461d      	mov	r5, r3
 8011b68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011b6c:	2a39      	cmp	r2, #57	; 0x39
 8011b6e:	d106      	bne.n	8011b7e <_dtoa_r+0x6de>
 8011b70:	9a01      	ldr	r2, [sp, #4]
 8011b72:	429a      	cmp	r2, r3
 8011b74:	d1f7      	bne.n	8011b66 <_dtoa_r+0x6c6>
 8011b76:	9901      	ldr	r1, [sp, #4]
 8011b78:	2230      	movs	r2, #48	; 0x30
 8011b7a:	3701      	adds	r7, #1
 8011b7c:	700a      	strb	r2, [r1, #0]
 8011b7e:	781a      	ldrb	r2, [r3, #0]
 8011b80:	3201      	adds	r2, #1
 8011b82:	701a      	strb	r2, [r3, #0]
 8011b84:	e790      	b.n	8011aa8 <_dtoa_r+0x608>
 8011b86:	4ba6      	ldr	r3, [pc, #664]	; (8011e20 <_dtoa_r+0x980>)
 8011b88:	2200      	movs	r2, #0
 8011b8a:	f7ee fd35 	bl	80005f8 <__aeabi_dmul>
 8011b8e:	2200      	movs	r2, #0
 8011b90:	2300      	movs	r3, #0
 8011b92:	4606      	mov	r6, r0
 8011b94:	460f      	mov	r7, r1
 8011b96:	f7ee ff97 	bl	8000ac8 <__aeabi_dcmpeq>
 8011b9a:	2800      	cmp	r0, #0
 8011b9c:	d09d      	beq.n	8011ada <_dtoa_r+0x63a>
 8011b9e:	e7cf      	b.n	8011b40 <_dtoa_r+0x6a0>
 8011ba0:	9a08      	ldr	r2, [sp, #32]
 8011ba2:	2a00      	cmp	r2, #0
 8011ba4:	f000 80d7 	beq.w	8011d56 <_dtoa_r+0x8b6>
 8011ba8:	9a06      	ldr	r2, [sp, #24]
 8011baa:	2a01      	cmp	r2, #1
 8011bac:	f300 80ba 	bgt.w	8011d24 <_dtoa_r+0x884>
 8011bb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011bb2:	2a00      	cmp	r2, #0
 8011bb4:	f000 80b2 	beq.w	8011d1c <_dtoa_r+0x87c>
 8011bb8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011bbc:	9e07      	ldr	r6, [sp, #28]
 8011bbe:	9d04      	ldr	r5, [sp, #16]
 8011bc0:	9a04      	ldr	r2, [sp, #16]
 8011bc2:	441a      	add	r2, r3
 8011bc4:	9204      	str	r2, [sp, #16]
 8011bc6:	9a05      	ldr	r2, [sp, #20]
 8011bc8:	2101      	movs	r1, #1
 8011bca:	441a      	add	r2, r3
 8011bcc:	4620      	mov	r0, r4
 8011bce:	9205      	str	r2, [sp, #20]
 8011bd0:	f000 ff24 	bl	8012a1c <__i2b>
 8011bd4:	4607      	mov	r7, r0
 8011bd6:	2d00      	cmp	r5, #0
 8011bd8:	dd0c      	ble.n	8011bf4 <_dtoa_r+0x754>
 8011bda:	9b05      	ldr	r3, [sp, #20]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	dd09      	ble.n	8011bf4 <_dtoa_r+0x754>
 8011be0:	42ab      	cmp	r3, r5
 8011be2:	9a04      	ldr	r2, [sp, #16]
 8011be4:	bfa8      	it	ge
 8011be6:	462b      	movge	r3, r5
 8011be8:	1ad2      	subs	r2, r2, r3
 8011bea:	9204      	str	r2, [sp, #16]
 8011bec:	9a05      	ldr	r2, [sp, #20]
 8011bee:	1aed      	subs	r5, r5, r3
 8011bf0:	1ad3      	subs	r3, r2, r3
 8011bf2:	9305      	str	r3, [sp, #20]
 8011bf4:	9b07      	ldr	r3, [sp, #28]
 8011bf6:	b31b      	cbz	r3, 8011c40 <_dtoa_r+0x7a0>
 8011bf8:	9b08      	ldr	r3, [sp, #32]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	f000 80af 	beq.w	8011d5e <_dtoa_r+0x8be>
 8011c00:	2e00      	cmp	r6, #0
 8011c02:	dd13      	ble.n	8011c2c <_dtoa_r+0x78c>
 8011c04:	4639      	mov	r1, r7
 8011c06:	4632      	mov	r2, r6
 8011c08:	4620      	mov	r0, r4
 8011c0a:	f000 ffc7 	bl	8012b9c <__pow5mult>
 8011c0e:	ee18 2a10 	vmov	r2, s16
 8011c12:	4601      	mov	r1, r0
 8011c14:	4607      	mov	r7, r0
 8011c16:	4620      	mov	r0, r4
 8011c18:	f000 ff16 	bl	8012a48 <__multiply>
 8011c1c:	ee18 1a10 	vmov	r1, s16
 8011c20:	4680      	mov	r8, r0
 8011c22:	4620      	mov	r0, r4
 8011c24:	f000 fdf8 	bl	8012818 <_Bfree>
 8011c28:	ee08 8a10 	vmov	s16, r8
 8011c2c:	9b07      	ldr	r3, [sp, #28]
 8011c2e:	1b9a      	subs	r2, r3, r6
 8011c30:	d006      	beq.n	8011c40 <_dtoa_r+0x7a0>
 8011c32:	ee18 1a10 	vmov	r1, s16
 8011c36:	4620      	mov	r0, r4
 8011c38:	f000 ffb0 	bl	8012b9c <__pow5mult>
 8011c3c:	ee08 0a10 	vmov	s16, r0
 8011c40:	2101      	movs	r1, #1
 8011c42:	4620      	mov	r0, r4
 8011c44:	f000 feea 	bl	8012a1c <__i2b>
 8011c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	4606      	mov	r6, r0
 8011c4e:	f340 8088 	ble.w	8011d62 <_dtoa_r+0x8c2>
 8011c52:	461a      	mov	r2, r3
 8011c54:	4601      	mov	r1, r0
 8011c56:	4620      	mov	r0, r4
 8011c58:	f000 ffa0 	bl	8012b9c <__pow5mult>
 8011c5c:	9b06      	ldr	r3, [sp, #24]
 8011c5e:	2b01      	cmp	r3, #1
 8011c60:	4606      	mov	r6, r0
 8011c62:	f340 8081 	ble.w	8011d68 <_dtoa_r+0x8c8>
 8011c66:	f04f 0800 	mov.w	r8, #0
 8011c6a:	6933      	ldr	r3, [r6, #16]
 8011c6c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011c70:	6918      	ldr	r0, [r3, #16]
 8011c72:	f000 fe83 	bl	801297c <__hi0bits>
 8011c76:	f1c0 0020 	rsb	r0, r0, #32
 8011c7a:	9b05      	ldr	r3, [sp, #20]
 8011c7c:	4418      	add	r0, r3
 8011c7e:	f010 001f 	ands.w	r0, r0, #31
 8011c82:	f000 8092 	beq.w	8011daa <_dtoa_r+0x90a>
 8011c86:	f1c0 0320 	rsb	r3, r0, #32
 8011c8a:	2b04      	cmp	r3, #4
 8011c8c:	f340 808a 	ble.w	8011da4 <_dtoa_r+0x904>
 8011c90:	f1c0 001c 	rsb	r0, r0, #28
 8011c94:	9b04      	ldr	r3, [sp, #16]
 8011c96:	4403      	add	r3, r0
 8011c98:	9304      	str	r3, [sp, #16]
 8011c9a:	9b05      	ldr	r3, [sp, #20]
 8011c9c:	4403      	add	r3, r0
 8011c9e:	4405      	add	r5, r0
 8011ca0:	9305      	str	r3, [sp, #20]
 8011ca2:	9b04      	ldr	r3, [sp, #16]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	dd07      	ble.n	8011cb8 <_dtoa_r+0x818>
 8011ca8:	ee18 1a10 	vmov	r1, s16
 8011cac:	461a      	mov	r2, r3
 8011cae:	4620      	mov	r0, r4
 8011cb0:	f000 ffce 	bl	8012c50 <__lshift>
 8011cb4:	ee08 0a10 	vmov	s16, r0
 8011cb8:	9b05      	ldr	r3, [sp, #20]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	dd05      	ble.n	8011cca <_dtoa_r+0x82a>
 8011cbe:	4631      	mov	r1, r6
 8011cc0:	461a      	mov	r2, r3
 8011cc2:	4620      	mov	r0, r4
 8011cc4:	f000 ffc4 	bl	8012c50 <__lshift>
 8011cc8:	4606      	mov	r6, r0
 8011cca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d06e      	beq.n	8011dae <_dtoa_r+0x90e>
 8011cd0:	ee18 0a10 	vmov	r0, s16
 8011cd4:	4631      	mov	r1, r6
 8011cd6:	f001 f82b 	bl	8012d30 <__mcmp>
 8011cda:	2800      	cmp	r0, #0
 8011cdc:	da67      	bge.n	8011dae <_dtoa_r+0x90e>
 8011cde:	9b00      	ldr	r3, [sp, #0]
 8011ce0:	3b01      	subs	r3, #1
 8011ce2:	ee18 1a10 	vmov	r1, s16
 8011ce6:	9300      	str	r3, [sp, #0]
 8011ce8:	220a      	movs	r2, #10
 8011cea:	2300      	movs	r3, #0
 8011cec:	4620      	mov	r0, r4
 8011cee:	f000 fdb5 	bl	801285c <__multadd>
 8011cf2:	9b08      	ldr	r3, [sp, #32]
 8011cf4:	ee08 0a10 	vmov	s16, r0
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	f000 81b1 	beq.w	8012060 <_dtoa_r+0xbc0>
 8011cfe:	2300      	movs	r3, #0
 8011d00:	4639      	mov	r1, r7
 8011d02:	220a      	movs	r2, #10
 8011d04:	4620      	mov	r0, r4
 8011d06:	f000 fda9 	bl	801285c <__multadd>
 8011d0a:	9b02      	ldr	r3, [sp, #8]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	4607      	mov	r7, r0
 8011d10:	f300 808e 	bgt.w	8011e30 <_dtoa_r+0x990>
 8011d14:	9b06      	ldr	r3, [sp, #24]
 8011d16:	2b02      	cmp	r3, #2
 8011d18:	dc51      	bgt.n	8011dbe <_dtoa_r+0x91e>
 8011d1a:	e089      	b.n	8011e30 <_dtoa_r+0x990>
 8011d1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011d1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011d22:	e74b      	b.n	8011bbc <_dtoa_r+0x71c>
 8011d24:	9b03      	ldr	r3, [sp, #12]
 8011d26:	1e5e      	subs	r6, r3, #1
 8011d28:	9b07      	ldr	r3, [sp, #28]
 8011d2a:	42b3      	cmp	r3, r6
 8011d2c:	bfbf      	itttt	lt
 8011d2e:	9b07      	ldrlt	r3, [sp, #28]
 8011d30:	9607      	strlt	r6, [sp, #28]
 8011d32:	1af2      	sublt	r2, r6, r3
 8011d34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011d36:	bfb6      	itet	lt
 8011d38:	189b      	addlt	r3, r3, r2
 8011d3a:	1b9e      	subge	r6, r3, r6
 8011d3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011d3e:	9b03      	ldr	r3, [sp, #12]
 8011d40:	bfb8      	it	lt
 8011d42:	2600      	movlt	r6, #0
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	bfb7      	itett	lt
 8011d48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011d4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011d50:	1a9d      	sublt	r5, r3, r2
 8011d52:	2300      	movlt	r3, #0
 8011d54:	e734      	b.n	8011bc0 <_dtoa_r+0x720>
 8011d56:	9e07      	ldr	r6, [sp, #28]
 8011d58:	9d04      	ldr	r5, [sp, #16]
 8011d5a:	9f08      	ldr	r7, [sp, #32]
 8011d5c:	e73b      	b.n	8011bd6 <_dtoa_r+0x736>
 8011d5e:	9a07      	ldr	r2, [sp, #28]
 8011d60:	e767      	b.n	8011c32 <_dtoa_r+0x792>
 8011d62:	9b06      	ldr	r3, [sp, #24]
 8011d64:	2b01      	cmp	r3, #1
 8011d66:	dc18      	bgt.n	8011d9a <_dtoa_r+0x8fa>
 8011d68:	f1ba 0f00 	cmp.w	sl, #0
 8011d6c:	d115      	bne.n	8011d9a <_dtoa_r+0x8fa>
 8011d6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011d72:	b993      	cbnz	r3, 8011d9a <_dtoa_r+0x8fa>
 8011d74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011d78:	0d1b      	lsrs	r3, r3, #20
 8011d7a:	051b      	lsls	r3, r3, #20
 8011d7c:	b183      	cbz	r3, 8011da0 <_dtoa_r+0x900>
 8011d7e:	9b04      	ldr	r3, [sp, #16]
 8011d80:	3301      	adds	r3, #1
 8011d82:	9304      	str	r3, [sp, #16]
 8011d84:	9b05      	ldr	r3, [sp, #20]
 8011d86:	3301      	adds	r3, #1
 8011d88:	9305      	str	r3, [sp, #20]
 8011d8a:	f04f 0801 	mov.w	r8, #1
 8011d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	f47f af6a 	bne.w	8011c6a <_dtoa_r+0x7ca>
 8011d96:	2001      	movs	r0, #1
 8011d98:	e76f      	b.n	8011c7a <_dtoa_r+0x7da>
 8011d9a:	f04f 0800 	mov.w	r8, #0
 8011d9e:	e7f6      	b.n	8011d8e <_dtoa_r+0x8ee>
 8011da0:	4698      	mov	r8, r3
 8011da2:	e7f4      	b.n	8011d8e <_dtoa_r+0x8ee>
 8011da4:	f43f af7d 	beq.w	8011ca2 <_dtoa_r+0x802>
 8011da8:	4618      	mov	r0, r3
 8011daa:	301c      	adds	r0, #28
 8011dac:	e772      	b.n	8011c94 <_dtoa_r+0x7f4>
 8011dae:	9b03      	ldr	r3, [sp, #12]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	dc37      	bgt.n	8011e24 <_dtoa_r+0x984>
 8011db4:	9b06      	ldr	r3, [sp, #24]
 8011db6:	2b02      	cmp	r3, #2
 8011db8:	dd34      	ble.n	8011e24 <_dtoa_r+0x984>
 8011dba:	9b03      	ldr	r3, [sp, #12]
 8011dbc:	9302      	str	r3, [sp, #8]
 8011dbe:	9b02      	ldr	r3, [sp, #8]
 8011dc0:	b96b      	cbnz	r3, 8011dde <_dtoa_r+0x93e>
 8011dc2:	4631      	mov	r1, r6
 8011dc4:	2205      	movs	r2, #5
 8011dc6:	4620      	mov	r0, r4
 8011dc8:	f000 fd48 	bl	801285c <__multadd>
 8011dcc:	4601      	mov	r1, r0
 8011dce:	4606      	mov	r6, r0
 8011dd0:	ee18 0a10 	vmov	r0, s16
 8011dd4:	f000 ffac 	bl	8012d30 <__mcmp>
 8011dd8:	2800      	cmp	r0, #0
 8011dda:	f73f adbb 	bgt.w	8011954 <_dtoa_r+0x4b4>
 8011dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011de0:	9d01      	ldr	r5, [sp, #4]
 8011de2:	43db      	mvns	r3, r3
 8011de4:	9300      	str	r3, [sp, #0]
 8011de6:	f04f 0800 	mov.w	r8, #0
 8011dea:	4631      	mov	r1, r6
 8011dec:	4620      	mov	r0, r4
 8011dee:	f000 fd13 	bl	8012818 <_Bfree>
 8011df2:	2f00      	cmp	r7, #0
 8011df4:	f43f aea4 	beq.w	8011b40 <_dtoa_r+0x6a0>
 8011df8:	f1b8 0f00 	cmp.w	r8, #0
 8011dfc:	d005      	beq.n	8011e0a <_dtoa_r+0x96a>
 8011dfe:	45b8      	cmp	r8, r7
 8011e00:	d003      	beq.n	8011e0a <_dtoa_r+0x96a>
 8011e02:	4641      	mov	r1, r8
 8011e04:	4620      	mov	r0, r4
 8011e06:	f000 fd07 	bl	8012818 <_Bfree>
 8011e0a:	4639      	mov	r1, r7
 8011e0c:	4620      	mov	r0, r4
 8011e0e:	f000 fd03 	bl	8012818 <_Bfree>
 8011e12:	e695      	b.n	8011b40 <_dtoa_r+0x6a0>
 8011e14:	2600      	movs	r6, #0
 8011e16:	4637      	mov	r7, r6
 8011e18:	e7e1      	b.n	8011dde <_dtoa_r+0x93e>
 8011e1a:	9700      	str	r7, [sp, #0]
 8011e1c:	4637      	mov	r7, r6
 8011e1e:	e599      	b.n	8011954 <_dtoa_r+0x4b4>
 8011e20:	40240000 	.word	0x40240000
 8011e24:	9b08      	ldr	r3, [sp, #32]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	f000 80ca 	beq.w	8011fc0 <_dtoa_r+0xb20>
 8011e2c:	9b03      	ldr	r3, [sp, #12]
 8011e2e:	9302      	str	r3, [sp, #8]
 8011e30:	2d00      	cmp	r5, #0
 8011e32:	dd05      	ble.n	8011e40 <_dtoa_r+0x9a0>
 8011e34:	4639      	mov	r1, r7
 8011e36:	462a      	mov	r2, r5
 8011e38:	4620      	mov	r0, r4
 8011e3a:	f000 ff09 	bl	8012c50 <__lshift>
 8011e3e:	4607      	mov	r7, r0
 8011e40:	f1b8 0f00 	cmp.w	r8, #0
 8011e44:	d05b      	beq.n	8011efe <_dtoa_r+0xa5e>
 8011e46:	6879      	ldr	r1, [r7, #4]
 8011e48:	4620      	mov	r0, r4
 8011e4a:	f000 fca5 	bl	8012798 <_Balloc>
 8011e4e:	4605      	mov	r5, r0
 8011e50:	b928      	cbnz	r0, 8011e5e <_dtoa_r+0x9be>
 8011e52:	4b87      	ldr	r3, [pc, #540]	; (8012070 <_dtoa_r+0xbd0>)
 8011e54:	4602      	mov	r2, r0
 8011e56:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011e5a:	f7ff bb3b 	b.w	80114d4 <_dtoa_r+0x34>
 8011e5e:	693a      	ldr	r2, [r7, #16]
 8011e60:	3202      	adds	r2, #2
 8011e62:	0092      	lsls	r2, r2, #2
 8011e64:	f107 010c 	add.w	r1, r7, #12
 8011e68:	300c      	adds	r0, #12
 8011e6a:	f7fd fd29 	bl	800f8c0 <memcpy>
 8011e6e:	2201      	movs	r2, #1
 8011e70:	4629      	mov	r1, r5
 8011e72:	4620      	mov	r0, r4
 8011e74:	f000 feec 	bl	8012c50 <__lshift>
 8011e78:	9b01      	ldr	r3, [sp, #4]
 8011e7a:	f103 0901 	add.w	r9, r3, #1
 8011e7e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011e82:	4413      	add	r3, r2
 8011e84:	9305      	str	r3, [sp, #20]
 8011e86:	f00a 0301 	and.w	r3, sl, #1
 8011e8a:	46b8      	mov	r8, r7
 8011e8c:	9304      	str	r3, [sp, #16]
 8011e8e:	4607      	mov	r7, r0
 8011e90:	4631      	mov	r1, r6
 8011e92:	ee18 0a10 	vmov	r0, s16
 8011e96:	f7ff fa77 	bl	8011388 <quorem>
 8011e9a:	4641      	mov	r1, r8
 8011e9c:	9002      	str	r0, [sp, #8]
 8011e9e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011ea2:	ee18 0a10 	vmov	r0, s16
 8011ea6:	f000 ff43 	bl	8012d30 <__mcmp>
 8011eaa:	463a      	mov	r2, r7
 8011eac:	9003      	str	r0, [sp, #12]
 8011eae:	4631      	mov	r1, r6
 8011eb0:	4620      	mov	r0, r4
 8011eb2:	f000 ff59 	bl	8012d68 <__mdiff>
 8011eb6:	68c2      	ldr	r2, [r0, #12]
 8011eb8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8011ebc:	4605      	mov	r5, r0
 8011ebe:	bb02      	cbnz	r2, 8011f02 <_dtoa_r+0xa62>
 8011ec0:	4601      	mov	r1, r0
 8011ec2:	ee18 0a10 	vmov	r0, s16
 8011ec6:	f000 ff33 	bl	8012d30 <__mcmp>
 8011eca:	4602      	mov	r2, r0
 8011ecc:	4629      	mov	r1, r5
 8011ece:	4620      	mov	r0, r4
 8011ed0:	9207      	str	r2, [sp, #28]
 8011ed2:	f000 fca1 	bl	8012818 <_Bfree>
 8011ed6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011eda:	ea43 0102 	orr.w	r1, r3, r2
 8011ede:	9b04      	ldr	r3, [sp, #16]
 8011ee0:	430b      	orrs	r3, r1
 8011ee2:	464d      	mov	r5, r9
 8011ee4:	d10f      	bne.n	8011f06 <_dtoa_r+0xa66>
 8011ee6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011eea:	d02a      	beq.n	8011f42 <_dtoa_r+0xaa2>
 8011eec:	9b03      	ldr	r3, [sp, #12]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	dd02      	ble.n	8011ef8 <_dtoa_r+0xa58>
 8011ef2:	9b02      	ldr	r3, [sp, #8]
 8011ef4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011ef8:	f88b a000 	strb.w	sl, [fp]
 8011efc:	e775      	b.n	8011dea <_dtoa_r+0x94a>
 8011efe:	4638      	mov	r0, r7
 8011f00:	e7ba      	b.n	8011e78 <_dtoa_r+0x9d8>
 8011f02:	2201      	movs	r2, #1
 8011f04:	e7e2      	b.n	8011ecc <_dtoa_r+0xa2c>
 8011f06:	9b03      	ldr	r3, [sp, #12]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	db04      	blt.n	8011f16 <_dtoa_r+0xa76>
 8011f0c:	9906      	ldr	r1, [sp, #24]
 8011f0e:	430b      	orrs	r3, r1
 8011f10:	9904      	ldr	r1, [sp, #16]
 8011f12:	430b      	orrs	r3, r1
 8011f14:	d122      	bne.n	8011f5c <_dtoa_r+0xabc>
 8011f16:	2a00      	cmp	r2, #0
 8011f18:	ddee      	ble.n	8011ef8 <_dtoa_r+0xa58>
 8011f1a:	ee18 1a10 	vmov	r1, s16
 8011f1e:	2201      	movs	r2, #1
 8011f20:	4620      	mov	r0, r4
 8011f22:	f000 fe95 	bl	8012c50 <__lshift>
 8011f26:	4631      	mov	r1, r6
 8011f28:	ee08 0a10 	vmov	s16, r0
 8011f2c:	f000 ff00 	bl	8012d30 <__mcmp>
 8011f30:	2800      	cmp	r0, #0
 8011f32:	dc03      	bgt.n	8011f3c <_dtoa_r+0xa9c>
 8011f34:	d1e0      	bne.n	8011ef8 <_dtoa_r+0xa58>
 8011f36:	f01a 0f01 	tst.w	sl, #1
 8011f3a:	d0dd      	beq.n	8011ef8 <_dtoa_r+0xa58>
 8011f3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011f40:	d1d7      	bne.n	8011ef2 <_dtoa_r+0xa52>
 8011f42:	2339      	movs	r3, #57	; 0x39
 8011f44:	f88b 3000 	strb.w	r3, [fp]
 8011f48:	462b      	mov	r3, r5
 8011f4a:	461d      	mov	r5, r3
 8011f4c:	3b01      	subs	r3, #1
 8011f4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011f52:	2a39      	cmp	r2, #57	; 0x39
 8011f54:	d071      	beq.n	801203a <_dtoa_r+0xb9a>
 8011f56:	3201      	adds	r2, #1
 8011f58:	701a      	strb	r2, [r3, #0]
 8011f5a:	e746      	b.n	8011dea <_dtoa_r+0x94a>
 8011f5c:	2a00      	cmp	r2, #0
 8011f5e:	dd07      	ble.n	8011f70 <_dtoa_r+0xad0>
 8011f60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011f64:	d0ed      	beq.n	8011f42 <_dtoa_r+0xaa2>
 8011f66:	f10a 0301 	add.w	r3, sl, #1
 8011f6a:	f88b 3000 	strb.w	r3, [fp]
 8011f6e:	e73c      	b.n	8011dea <_dtoa_r+0x94a>
 8011f70:	9b05      	ldr	r3, [sp, #20]
 8011f72:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011f76:	4599      	cmp	r9, r3
 8011f78:	d047      	beq.n	801200a <_dtoa_r+0xb6a>
 8011f7a:	ee18 1a10 	vmov	r1, s16
 8011f7e:	2300      	movs	r3, #0
 8011f80:	220a      	movs	r2, #10
 8011f82:	4620      	mov	r0, r4
 8011f84:	f000 fc6a 	bl	801285c <__multadd>
 8011f88:	45b8      	cmp	r8, r7
 8011f8a:	ee08 0a10 	vmov	s16, r0
 8011f8e:	f04f 0300 	mov.w	r3, #0
 8011f92:	f04f 020a 	mov.w	r2, #10
 8011f96:	4641      	mov	r1, r8
 8011f98:	4620      	mov	r0, r4
 8011f9a:	d106      	bne.n	8011faa <_dtoa_r+0xb0a>
 8011f9c:	f000 fc5e 	bl	801285c <__multadd>
 8011fa0:	4680      	mov	r8, r0
 8011fa2:	4607      	mov	r7, r0
 8011fa4:	f109 0901 	add.w	r9, r9, #1
 8011fa8:	e772      	b.n	8011e90 <_dtoa_r+0x9f0>
 8011faa:	f000 fc57 	bl	801285c <__multadd>
 8011fae:	4639      	mov	r1, r7
 8011fb0:	4680      	mov	r8, r0
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	220a      	movs	r2, #10
 8011fb6:	4620      	mov	r0, r4
 8011fb8:	f000 fc50 	bl	801285c <__multadd>
 8011fbc:	4607      	mov	r7, r0
 8011fbe:	e7f1      	b.n	8011fa4 <_dtoa_r+0xb04>
 8011fc0:	9b03      	ldr	r3, [sp, #12]
 8011fc2:	9302      	str	r3, [sp, #8]
 8011fc4:	9d01      	ldr	r5, [sp, #4]
 8011fc6:	ee18 0a10 	vmov	r0, s16
 8011fca:	4631      	mov	r1, r6
 8011fcc:	f7ff f9dc 	bl	8011388 <quorem>
 8011fd0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011fd4:	9b01      	ldr	r3, [sp, #4]
 8011fd6:	f805 ab01 	strb.w	sl, [r5], #1
 8011fda:	1aea      	subs	r2, r5, r3
 8011fdc:	9b02      	ldr	r3, [sp, #8]
 8011fde:	4293      	cmp	r3, r2
 8011fe0:	dd09      	ble.n	8011ff6 <_dtoa_r+0xb56>
 8011fe2:	ee18 1a10 	vmov	r1, s16
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	220a      	movs	r2, #10
 8011fea:	4620      	mov	r0, r4
 8011fec:	f000 fc36 	bl	801285c <__multadd>
 8011ff0:	ee08 0a10 	vmov	s16, r0
 8011ff4:	e7e7      	b.n	8011fc6 <_dtoa_r+0xb26>
 8011ff6:	9b02      	ldr	r3, [sp, #8]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	bfc8      	it	gt
 8011ffc:	461d      	movgt	r5, r3
 8011ffe:	9b01      	ldr	r3, [sp, #4]
 8012000:	bfd8      	it	le
 8012002:	2501      	movle	r5, #1
 8012004:	441d      	add	r5, r3
 8012006:	f04f 0800 	mov.w	r8, #0
 801200a:	ee18 1a10 	vmov	r1, s16
 801200e:	2201      	movs	r2, #1
 8012010:	4620      	mov	r0, r4
 8012012:	f000 fe1d 	bl	8012c50 <__lshift>
 8012016:	4631      	mov	r1, r6
 8012018:	ee08 0a10 	vmov	s16, r0
 801201c:	f000 fe88 	bl	8012d30 <__mcmp>
 8012020:	2800      	cmp	r0, #0
 8012022:	dc91      	bgt.n	8011f48 <_dtoa_r+0xaa8>
 8012024:	d102      	bne.n	801202c <_dtoa_r+0xb8c>
 8012026:	f01a 0f01 	tst.w	sl, #1
 801202a:	d18d      	bne.n	8011f48 <_dtoa_r+0xaa8>
 801202c:	462b      	mov	r3, r5
 801202e:	461d      	mov	r5, r3
 8012030:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012034:	2a30      	cmp	r2, #48	; 0x30
 8012036:	d0fa      	beq.n	801202e <_dtoa_r+0xb8e>
 8012038:	e6d7      	b.n	8011dea <_dtoa_r+0x94a>
 801203a:	9a01      	ldr	r2, [sp, #4]
 801203c:	429a      	cmp	r2, r3
 801203e:	d184      	bne.n	8011f4a <_dtoa_r+0xaaa>
 8012040:	9b00      	ldr	r3, [sp, #0]
 8012042:	3301      	adds	r3, #1
 8012044:	9300      	str	r3, [sp, #0]
 8012046:	2331      	movs	r3, #49	; 0x31
 8012048:	7013      	strb	r3, [r2, #0]
 801204a:	e6ce      	b.n	8011dea <_dtoa_r+0x94a>
 801204c:	4b09      	ldr	r3, [pc, #36]	; (8012074 <_dtoa_r+0xbd4>)
 801204e:	f7ff ba95 	b.w	801157c <_dtoa_r+0xdc>
 8012052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012054:	2b00      	cmp	r3, #0
 8012056:	f47f aa6e 	bne.w	8011536 <_dtoa_r+0x96>
 801205a:	4b07      	ldr	r3, [pc, #28]	; (8012078 <_dtoa_r+0xbd8>)
 801205c:	f7ff ba8e 	b.w	801157c <_dtoa_r+0xdc>
 8012060:	9b02      	ldr	r3, [sp, #8]
 8012062:	2b00      	cmp	r3, #0
 8012064:	dcae      	bgt.n	8011fc4 <_dtoa_r+0xb24>
 8012066:	9b06      	ldr	r3, [sp, #24]
 8012068:	2b02      	cmp	r3, #2
 801206a:	f73f aea8 	bgt.w	8011dbe <_dtoa_r+0x91e>
 801206e:	e7a9      	b.n	8011fc4 <_dtoa_r+0xb24>
 8012070:	08014fd0 	.word	0x08014fd0
 8012074:	08014dd4 	.word	0x08014dd4
 8012078:	08014f51 	.word	0x08014f51

0801207c <rshift>:
 801207c:	6903      	ldr	r3, [r0, #16]
 801207e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012082:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012086:	ea4f 1261 	mov.w	r2, r1, asr #5
 801208a:	f100 0414 	add.w	r4, r0, #20
 801208e:	dd45      	ble.n	801211c <rshift+0xa0>
 8012090:	f011 011f 	ands.w	r1, r1, #31
 8012094:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012098:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801209c:	d10c      	bne.n	80120b8 <rshift+0x3c>
 801209e:	f100 0710 	add.w	r7, r0, #16
 80120a2:	4629      	mov	r1, r5
 80120a4:	42b1      	cmp	r1, r6
 80120a6:	d334      	bcc.n	8012112 <rshift+0x96>
 80120a8:	1a9b      	subs	r3, r3, r2
 80120aa:	009b      	lsls	r3, r3, #2
 80120ac:	1eea      	subs	r2, r5, #3
 80120ae:	4296      	cmp	r6, r2
 80120b0:	bf38      	it	cc
 80120b2:	2300      	movcc	r3, #0
 80120b4:	4423      	add	r3, r4
 80120b6:	e015      	b.n	80120e4 <rshift+0x68>
 80120b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80120bc:	f1c1 0820 	rsb	r8, r1, #32
 80120c0:	40cf      	lsrs	r7, r1
 80120c2:	f105 0e04 	add.w	lr, r5, #4
 80120c6:	46a1      	mov	r9, r4
 80120c8:	4576      	cmp	r6, lr
 80120ca:	46f4      	mov	ip, lr
 80120cc:	d815      	bhi.n	80120fa <rshift+0x7e>
 80120ce:	1a9a      	subs	r2, r3, r2
 80120d0:	0092      	lsls	r2, r2, #2
 80120d2:	3a04      	subs	r2, #4
 80120d4:	3501      	adds	r5, #1
 80120d6:	42ae      	cmp	r6, r5
 80120d8:	bf38      	it	cc
 80120da:	2200      	movcc	r2, #0
 80120dc:	18a3      	adds	r3, r4, r2
 80120de:	50a7      	str	r7, [r4, r2]
 80120e0:	b107      	cbz	r7, 80120e4 <rshift+0x68>
 80120e2:	3304      	adds	r3, #4
 80120e4:	1b1a      	subs	r2, r3, r4
 80120e6:	42a3      	cmp	r3, r4
 80120e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80120ec:	bf08      	it	eq
 80120ee:	2300      	moveq	r3, #0
 80120f0:	6102      	str	r2, [r0, #16]
 80120f2:	bf08      	it	eq
 80120f4:	6143      	streq	r3, [r0, #20]
 80120f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120fa:	f8dc c000 	ldr.w	ip, [ip]
 80120fe:	fa0c fc08 	lsl.w	ip, ip, r8
 8012102:	ea4c 0707 	orr.w	r7, ip, r7
 8012106:	f849 7b04 	str.w	r7, [r9], #4
 801210a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801210e:	40cf      	lsrs	r7, r1
 8012110:	e7da      	b.n	80120c8 <rshift+0x4c>
 8012112:	f851 cb04 	ldr.w	ip, [r1], #4
 8012116:	f847 cf04 	str.w	ip, [r7, #4]!
 801211a:	e7c3      	b.n	80120a4 <rshift+0x28>
 801211c:	4623      	mov	r3, r4
 801211e:	e7e1      	b.n	80120e4 <rshift+0x68>

08012120 <__hexdig_fun>:
 8012120:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012124:	2b09      	cmp	r3, #9
 8012126:	d802      	bhi.n	801212e <__hexdig_fun+0xe>
 8012128:	3820      	subs	r0, #32
 801212a:	b2c0      	uxtb	r0, r0
 801212c:	4770      	bx	lr
 801212e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012132:	2b05      	cmp	r3, #5
 8012134:	d801      	bhi.n	801213a <__hexdig_fun+0x1a>
 8012136:	3847      	subs	r0, #71	; 0x47
 8012138:	e7f7      	b.n	801212a <__hexdig_fun+0xa>
 801213a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801213e:	2b05      	cmp	r3, #5
 8012140:	d801      	bhi.n	8012146 <__hexdig_fun+0x26>
 8012142:	3827      	subs	r0, #39	; 0x27
 8012144:	e7f1      	b.n	801212a <__hexdig_fun+0xa>
 8012146:	2000      	movs	r0, #0
 8012148:	4770      	bx	lr
	...

0801214c <__gethex>:
 801214c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012150:	ed2d 8b02 	vpush	{d8}
 8012154:	b089      	sub	sp, #36	; 0x24
 8012156:	ee08 0a10 	vmov	s16, r0
 801215a:	9304      	str	r3, [sp, #16]
 801215c:	4bb4      	ldr	r3, [pc, #720]	; (8012430 <__gethex+0x2e4>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	9301      	str	r3, [sp, #4]
 8012162:	4618      	mov	r0, r3
 8012164:	468b      	mov	fp, r1
 8012166:	4690      	mov	r8, r2
 8012168:	f7ee f832 	bl	80001d0 <strlen>
 801216c:	9b01      	ldr	r3, [sp, #4]
 801216e:	f8db 2000 	ldr.w	r2, [fp]
 8012172:	4403      	add	r3, r0
 8012174:	4682      	mov	sl, r0
 8012176:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801217a:	9305      	str	r3, [sp, #20]
 801217c:	1c93      	adds	r3, r2, #2
 801217e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012182:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012186:	32fe      	adds	r2, #254	; 0xfe
 8012188:	18d1      	adds	r1, r2, r3
 801218a:	461f      	mov	r7, r3
 801218c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012190:	9100      	str	r1, [sp, #0]
 8012192:	2830      	cmp	r0, #48	; 0x30
 8012194:	d0f8      	beq.n	8012188 <__gethex+0x3c>
 8012196:	f7ff ffc3 	bl	8012120 <__hexdig_fun>
 801219a:	4604      	mov	r4, r0
 801219c:	2800      	cmp	r0, #0
 801219e:	d13a      	bne.n	8012216 <__gethex+0xca>
 80121a0:	9901      	ldr	r1, [sp, #4]
 80121a2:	4652      	mov	r2, sl
 80121a4:	4638      	mov	r0, r7
 80121a6:	f001 fa23 	bl	80135f0 <strncmp>
 80121aa:	4605      	mov	r5, r0
 80121ac:	2800      	cmp	r0, #0
 80121ae:	d168      	bne.n	8012282 <__gethex+0x136>
 80121b0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80121b4:	eb07 060a 	add.w	r6, r7, sl
 80121b8:	f7ff ffb2 	bl	8012120 <__hexdig_fun>
 80121bc:	2800      	cmp	r0, #0
 80121be:	d062      	beq.n	8012286 <__gethex+0x13a>
 80121c0:	4633      	mov	r3, r6
 80121c2:	7818      	ldrb	r0, [r3, #0]
 80121c4:	2830      	cmp	r0, #48	; 0x30
 80121c6:	461f      	mov	r7, r3
 80121c8:	f103 0301 	add.w	r3, r3, #1
 80121cc:	d0f9      	beq.n	80121c2 <__gethex+0x76>
 80121ce:	f7ff ffa7 	bl	8012120 <__hexdig_fun>
 80121d2:	2301      	movs	r3, #1
 80121d4:	fab0 f480 	clz	r4, r0
 80121d8:	0964      	lsrs	r4, r4, #5
 80121da:	4635      	mov	r5, r6
 80121dc:	9300      	str	r3, [sp, #0]
 80121de:	463a      	mov	r2, r7
 80121e0:	4616      	mov	r6, r2
 80121e2:	3201      	adds	r2, #1
 80121e4:	7830      	ldrb	r0, [r6, #0]
 80121e6:	f7ff ff9b 	bl	8012120 <__hexdig_fun>
 80121ea:	2800      	cmp	r0, #0
 80121ec:	d1f8      	bne.n	80121e0 <__gethex+0x94>
 80121ee:	9901      	ldr	r1, [sp, #4]
 80121f0:	4652      	mov	r2, sl
 80121f2:	4630      	mov	r0, r6
 80121f4:	f001 f9fc 	bl	80135f0 <strncmp>
 80121f8:	b980      	cbnz	r0, 801221c <__gethex+0xd0>
 80121fa:	b94d      	cbnz	r5, 8012210 <__gethex+0xc4>
 80121fc:	eb06 050a 	add.w	r5, r6, sl
 8012200:	462a      	mov	r2, r5
 8012202:	4616      	mov	r6, r2
 8012204:	3201      	adds	r2, #1
 8012206:	7830      	ldrb	r0, [r6, #0]
 8012208:	f7ff ff8a 	bl	8012120 <__hexdig_fun>
 801220c:	2800      	cmp	r0, #0
 801220e:	d1f8      	bne.n	8012202 <__gethex+0xb6>
 8012210:	1bad      	subs	r5, r5, r6
 8012212:	00ad      	lsls	r5, r5, #2
 8012214:	e004      	b.n	8012220 <__gethex+0xd4>
 8012216:	2400      	movs	r4, #0
 8012218:	4625      	mov	r5, r4
 801221a:	e7e0      	b.n	80121de <__gethex+0x92>
 801221c:	2d00      	cmp	r5, #0
 801221e:	d1f7      	bne.n	8012210 <__gethex+0xc4>
 8012220:	7833      	ldrb	r3, [r6, #0]
 8012222:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012226:	2b50      	cmp	r3, #80	; 0x50
 8012228:	d13b      	bne.n	80122a2 <__gethex+0x156>
 801222a:	7873      	ldrb	r3, [r6, #1]
 801222c:	2b2b      	cmp	r3, #43	; 0x2b
 801222e:	d02c      	beq.n	801228a <__gethex+0x13e>
 8012230:	2b2d      	cmp	r3, #45	; 0x2d
 8012232:	d02e      	beq.n	8012292 <__gethex+0x146>
 8012234:	1c71      	adds	r1, r6, #1
 8012236:	f04f 0900 	mov.w	r9, #0
 801223a:	7808      	ldrb	r0, [r1, #0]
 801223c:	f7ff ff70 	bl	8012120 <__hexdig_fun>
 8012240:	1e43      	subs	r3, r0, #1
 8012242:	b2db      	uxtb	r3, r3
 8012244:	2b18      	cmp	r3, #24
 8012246:	d82c      	bhi.n	80122a2 <__gethex+0x156>
 8012248:	f1a0 0210 	sub.w	r2, r0, #16
 801224c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012250:	f7ff ff66 	bl	8012120 <__hexdig_fun>
 8012254:	1e43      	subs	r3, r0, #1
 8012256:	b2db      	uxtb	r3, r3
 8012258:	2b18      	cmp	r3, #24
 801225a:	d91d      	bls.n	8012298 <__gethex+0x14c>
 801225c:	f1b9 0f00 	cmp.w	r9, #0
 8012260:	d000      	beq.n	8012264 <__gethex+0x118>
 8012262:	4252      	negs	r2, r2
 8012264:	4415      	add	r5, r2
 8012266:	f8cb 1000 	str.w	r1, [fp]
 801226a:	b1e4      	cbz	r4, 80122a6 <__gethex+0x15a>
 801226c:	9b00      	ldr	r3, [sp, #0]
 801226e:	2b00      	cmp	r3, #0
 8012270:	bf14      	ite	ne
 8012272:	2700      	movne	r7, #0
 8012274:	2706      	moveq	r7, #6
 8012276:	4638      	mov	r0, r7
 8012278:	b009      	add	sp, #36	; 0x24
 801227a:	ecbd 8b02 	vpop	{d8}
 801227e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012282:	463e      	mov	r6, r7
 8012284:	4625      	mov	r5, r4
 8012286:	2401      	movs	r4, #1
 8012288:	e7ca      	b.n	8012220 <__gethex+0xd4>
 801228a:	f04f 0900 	mov.w	r9, #0
 801228e:	1cb1      	adds	r1, r6, #2
 8012290:	e7d3      	b.n	801223a <__gethex+0xee>
 8012292:	f04f 0901 	mov.w	r9, #1
 8012296:	e7fa      	b.n	801228e <__gethex+0x142>
 8012298:	230a      	movs	r3, #10
 801229a:	fb03 0202 	mla	r2, r3, r2, r0
 801229e:	3a10      	subs	r2, #16
 80122a0:	e7d4      	b.n	801224c <__gethex+0x100>
 80122a2:	4631      	mov	r1, r6
 80122a4:	e7df      	b.n	8012266 <__gethex+0x11a>
 80122a6:	1bf3      	subs	r3, r6, r7
 80122a8:	3b01      	subs	r3, #1
 80122aa:	4621      	mov	r1, r4
 80122ac:	2b07      	cmp	r3, #7
 80122ae:	dc0b      	bgt.n	80122c8 <__gethex+0x17c>
 80122b0:	ee18 0a10 	vmov	r0, s16
 80122b4:	f000 fa70 	bl	8012798 <_Balloc>
 80122b8:	4604      	mov	r4, r0
 80122ba:	b940      	cbnz	r0, 80122ce <__gethex+0x182>
 80122bc:	4b5d      	ldr	r3, [pc, #372]	; (8012434 <__gethex+0x2e8>)
 80122be:	4602      	mov	r2, r0
 80122c0:	21de      	movs	r1, #222	; 0xde
 80122c2:	485d      	ldr	r0, [pc, #372]	; (8012438 <__gethex+0x2ec>)
 80122c4:	f001 f9b6 	bl	8013634 <__assert_func>
 80122c8:	3101      	adds	r1, #1
 80122ca:	105b      	asrs	r3, r3, #1
 80122cc:	e7ee      	b.n	80122ac <__gethex+0x160>
 80122ce:	f100 0914 	add.w	r9, r0, #20
 80122d2:	f04f 0b00 	mov.w	fp, #0
 80122d6:	f1ca 0301 	rsb	r3, sl, #1
 80122da:	f8cd 9008 	str.w	r9, [sp, #8]
 80122de:	f8cd b000 	str.w	fp, [sp]
 80122e2:	9306      	str	r3, [sp, #24]
 80122e4:	42b7      	cmp	r7, r6
 80122e6:	d340      	bcc.n	801236a <__gethex+0x21e>
 80122e8:	9802      	ldr	r0, [sp, #8]
 80122ea:	9b00      	ldr	r3, [sp, #0]
 80122ec:	f840 3b04 	str.w	r3, [r0], #4
 80122f0:	eba0 0009 	sub.w	r0, r0, r9
 80122f4:	1080      	asrs	r0, r0, #2
 80122f6:	0146      	lsls	r6, r0, #5
 80122f8:	6120      	str	r0, [r4, #16]
 80122fa:	4618      	mov	r0, r3
 80122fc:	f000 fb3e 	bl	801297c <__hi0bits>
 8012300:	1a30      	subs	r0, r6, r0
 8012302:	f8d8 6000 	ldr.w	r6, [r8]
 8012306:	42b0      	cmp	r0, r6
 8012308:	dd63      	ble.n	80123d2 <__gethex+0x286>
 801230a:	1b87      	subs	r7, r0, r6
 801230c:	4639      	mov	r1, r7
 801230e:	4620      	mov	r0, r4
 8012310:	f000 fee2 	bl	80130d8 <__any_on>
 8012314:	4682      	mov	sl, r0
 8012316:	b1a8      	cbz	r0, 8012344 <__gethex+0x1f8>
 8012318:	1e7b      	subs	r3, r7, #1
 801231a:	1159      	asrs	r1, r3, #5
 801231c:	f003 021f 	and.w	r2, r3, #31
 8012320:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012324:	f04f 0a01 	mov.w	sl, #1
 8012328:	fa0a f202 	lsl.w	r2, sl, r2
 801232c:	420a      	tst	r2, r1
 801232e:	d009      	beq.n	8012344 <__gethex+0x1f8>
 8012330:	4553      	cmp	r3, sl
 8012332:	dd05      	ble.n	8012340 <__gethex+0x1f4>
 8012334:	1eb9      	subs	r1, r7, #2
 8012336:	4620      	mov	r0, r4
 8012338:	f000 fece 	bl	80130d8 <__any_on>
 801233c:	2800      	cmp	r0, #0
 801233e:	d145      	bne.n	80123cc <__gethex+0x280>
 8012340:	f04f 0a02 	mov.w	sl, #2
 8012344:	4639      	mov	r1, r7
 8012346:	4620      	mov	r0, r4
 8012348:	f7ff fe98 	bl	801207c <rshift>
 801234c:	443d      	add	r5, r7
 801234e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012352:	42ab      	cmp	r3, r5
 8012354:	da4c      	bge.n	80123f0 <__gethex+0x2a4>
 8012356:	ee18 0a10 	vmov	r0, s16
 801235a:	4621      	mov	r1, r4
 801235c:	f000 fa5c 	bl	8012818 <_Bfree>
 8012360:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012362:	2300      	movs	r3, #0
 8012364:	6013      	str	r3, [r2, #0]
 8012366:	27a3      	movs	r7, #163	; 0xa3
 8012368:	e785      	b.n	8012276 <__gethex+0x12a>
 801236a:	1e73      	subs	r3, r6, #1
 801236c:	9a05      	ldr	r2, [sp, #20]
 801236e:	9303      	str	r3, [sp, #12]
 8012370:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012374:	4293      	cmp	r3, r2
 8012376:	d019      	beq.n	80123ac <__gethex+0x260>
 8012378:	f1bb 0f20 	cmp.w	fp, #32
 801237c:	d107      	bne.n	801238e <__gethex+0x242>
 801237e:	9b02      	ldr	r3, [sp, #8]
 8012380:	9a00      	ldr	r2, [sp, #0]
 8012382:	f843 2b04 	str.w	r2, [r3], #4
 8012386:	9302      	str	r3, [sp, #8]
 8012388:	2300      	movs	r3, #0
 801238a:	9300      	str	r3, [sp, #0]
 801238c:	469b      	mov	fp, r3
 801238e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012392:	f7ff fec5 	bl	8012120 <__hexdig_fun>
 8012396:	9b00      	ldr	r3, [sp, #0]
 8012398:	f000 000f 	and.w	r0, r0, #15
 801239c:	fa00 f00b 	lsl.w	r0, r0, fp
 80123a0:	4303      	orrs	r3, r0
 80123a2:	9300      	str	r3, [sp, #0]
 80123a4:	f10b 0b04 	add.w	fp, fp, #4
 80123a8:	9b03      	ldr	r3, [sp, #12]
 80123aa:	e00d      	b.n	80123c8 <__gethex+0x27c>
 80123ac:	9b03      	ldr	r3, [sp, #12]
 80123ae:	9a06      	ldr	r2, [sp, #24]
 80123b0:	4413      	add	r3, r2
 80123b2:	42bb      	cmp	r3, r7
 80123b4:	d3e0      	bcc.n	8012378 <__gethex+0x22c>
 80123b6:	4618      	mov	r0, r3
 80123b8:	9901      	ldr	r1, [sp, #4]
 80123ba:	9307      	str	r3, [sp, #28]
 80123bc:	4652      	mov	r2, sl
 80123be:	f001 f917 	bl	80135f0 <strncmp>
 80123c2:	9b07      	ldr	r3, [sp, #28]
 80123c4:	2800      	cmp	r0, #0
 80123c6:	d1d7      	bne.n	8012378 <__gethex+0x22c>
 80123c8:	461e      	mov	r6, r3
 80123ca:	e78b      	b.n	80122e4 <__gethex+0x198>
 80123cc:	f04f 0a03 	mov.w	sl, #3
 80123d0:	e7b8      	b.n	8012344 <__gethex+0x1f8>
 80123d2:	da0a      	bge.n	80123ea <__gethex+0x29e>
 80123d4:	1a37      	subs	r7, r6, r0
 80123d6:	4621      	mov	r1, r4
 80123d8:	ee18 0a10 	vmov	r0, s16
 80123dc:	463a      	mov	r2, r7
 80123de:	f000 fc37 	bl	8012c50 <__lshift>
 80123e2:	1bed      	subs	r5, r5, r7
 80123e4:	4604      	mov	r4, r0
 80123e6:	f100 0914 	add.w	r9, r0, #20
 80123ea:	f04f 0a00 	mov.w	sl, #0
 80123ee:	e7ae      	b.n	801234e <__gethex+0x202>
 80123f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80123f4:	42a8      	cmp	r0, r5
 80123f6:	dd72      	ble.n	80124de <__gethex+0x392>
 80123f8:	1b45      	subs	r5, r0, r5
 80123fa:	42ae      	cmp	r6, r5
 80123fc:	dc36      	bgt.n	801246c <__gethex+0x320>
 80123fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012402:	2b02      	cmp	r3, #2
 8012404:	d02a      	beq.n	801245c <__gethex+0x310>
 8012406:	2b03      	cmp	r3, #3
 8012408:	d02c      	beq.n	8012464 <__gethex+0x318>
 801240a:	2b01      	cmp	r3, #1
 801240c:	d11c      	bne.n	8012448 <__gethex+0x2fc>
 801240e:	42ae      	cmp	r6, r5
 8012410:	d11a      	bne.n	8012448 <__gethex+0x2fc>
 8012412:	2e01      	cmp	r6, #1
 8012414:	d112      	bne.n	801243c <__gethex+0x2f0>
 8012416:	9a04      	ldr	r2, [sp, #16]
 8012418:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801241c:	6013      	str	r3, [r2, #0]
 801241e:	2301      	movs	r3, #1
 8012420:	6123      	str	r3, [r4, #16]
 8012422:	f8c9 3000 	str.w	r3, [r9]
 8012426:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012428:	2762      	movs	r7, #98	; 0x62
 801242a:	601c      	str	r4, [r3, #0]
 801242c:	e723      	b.n	8012276 <__gethex+0x12a>
 801242e:	bf00      	nop
 8012430:	08015048 	.word	0x08015048
 8012434:	08014fd0 	.word	0x08014fd0
 8012438:	08014fe1 	.word	0x08014fe1
 801243c:	1e71      	subs	r1, r6, #1
 801243e:	4620      	mov	r0, r4
 8012440:	f000 fe4a 	bl	80130d8 <__any_on>
 8012444:	2800      	cmp	r0, #0
 8012446:	d1e6      	bne.n	8012416 <__gethex+0x2ca>
 8012448:	ee18 0a10 	vmov	r0, s16
 801244c:	4621      	mov	r1, r4
 801244e:	f000 f9e3 	bl	8012818 <_Bfree>
 8012452:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012454:	2300      	movs	r3, #0
 8012456:	6013      	str	r3, [r2, #0]
 8012458:	2750      	movs	r7, #80	; 0x50
 801245a:	e70c      	b.n	8012276 <__gethex+0x12a>
 801245c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801245e:	2b00      	cmp	r3, #0
 8012460:	d1f2      	bne.n	8012448 <__gethex+0x2fc>
 8012462:	e7d8      	b.n	8012416 <__gethex+0x2ca>
 8012464:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012466:	2b00      	cmp	r3, #0
 8012468:	d1d5      	bne.n	8012416 <__gethex+0x2ca>
 801246a:	e7ed      	b.n	8012448 <__gethex+0x2fc>
 801246c:	1e6f      	subs	r7, r5, #1
 801246e:	f1ba 0f00 	cmp.w	sl, #0
 8012472:	d131      	bne.n	80124d8 <__gethex+0x38c>
 8012474:	b127      	cbz	r7, 8012480 <__gethex+0x334>
 8012476:	4639      	mov	r1, r7
 8012478:	4620      	mov	r0, r4
 801247a:	f000 fe2d 	bl	80130d8 <__any_on>
 801247e:	4682      	mov	sl, r0
 8012480:	117b      	asrs	r3, r7, #5
 8012482:	2101      	movs	r1, #1
 8012484:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012488:	f007 071f 	and.w	r7, r7, #31
 801248c:	fa01 f707 	lsl.w	r7, r1, r7
 8012490:	421f      	tst	r7, r3
 8012492:	4629      	mov	r1, r5
 8012494:	4620      	mov	r0, r4
 8012496:	bf18      	it	ne
 8012498:	f04a 0a02 	orrne.w	sl, sl, #2
 801249c:	1b76      	subs	r6, r6, r5
 801249e:	f7ff fded 	bl	801207c <rshift>
 80124a2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80124a6:	2702      	movs	r7, #2
 80124a8:	f1ba 0f00 	cmp.w	sl, #0
 80124ac:	d048      	beq.n	8012540 <__gethex+0x3f4>
 80124ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80124b2:	2b02      	cmp	r3, #2
 80124b4:	d015      	beq.n	80124e2 <__gethex+0x396>
 80124b6:	2b03      	cmp	r3, #3
 80124b8:	d017      	beq.n	80124ea <__gethex+0x39e>
 80124ba:	2b01      	cmp	r3, #1
 80124bc:	d109      	bne.n	80124d2 <__gethex+0x386>
 80124be:	f01a 0f02 	tst.w	sl, #2
 80124c2:	d006      	beq.n	80124d2 <__gethex+0x386>
 80124c4:	f8d9 0000 	ldr.w	r0, [r9]
 80124c8:	ea4a 0a00 	orr.w	sl, sl, r0
 80124cc:	f01a 0f01 	tst.w	sl, #1
 80124d0:	d10e      	bne.n	80124f0 <__gethex+0x3a4>
 80124d2:	f047 0710 	orr.w	r7, r7, #16
 80124d6:	e033      	b.n	8012540 <__gethex+0x3f4>
 80124d8:	f04f 0a01 	mov.w	sl, #1
 80124dc:	e7d0      	b.n	8012480 <__gethex+0x334>
 80124de:	2701      	movs	r7, #1
 80124e0:	e7e2      	b.n	80124a8 <__gethex+0x35c>
 80124e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80124e4:	f1c3 0301 	rsb	r3, r3, #1
 80124e8:	9315      	str	r3, [sp, #84]	; 0x54
 80124ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d0f0      	beq.n	80124d2 <__gethex+0x386>
 80124f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80124f4:	f104 0314 	add.w	r3, r4, #20
 80124f8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80124fc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012500:	f04f 0c00 	mov.w	ip, #0
 8012504:	4618      	mov	r0, r3
 8012506:	f853 2b04 	ldr.w	r2, [r3], #4
 801250a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801250e:	d01c      	beq.n	801254a <__gethex+0x3fe>
 8012510:	3201      	adds	r2, #1
 8012512:	6002      	str	r2, [r0, #0]
 8012514:	2f02      	cmp	r7, #2
 8012516:	f104 0314 	add.w	r3, r4, #20
 801251a:	d13f      	bne.n	801259c <__gethex+0x450>
 801251c:	f8d8 2000 	ldr.w	r2, [r8]
 8012520:	3a01      	subs	r2, #1
 8012522:	42b2      	cmp	r2, r6
 8012524:	d10a      	bne.n	801253c <__gethex+0x3f0>
 8012526:	1171      	asrs	r1, r6, #5
 8012528:	2201      	movs	r2, #1
 801252a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801252e:	f006 061f 	and.w	r6, r6, #31
 8012532:	fa02 f606 	lsl.w	r6, r2, r6
 8012536:	421e      	tst	r6, r3
 8012538:	bf18      	it	ne
 801253a:	4617      	movne	r7, r2
 801253c:	f047 0720 	orr.w	r7, r7, #32
 8012540:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012542:	601c      	str	r4, [r3, #0]
 8012544:	9b04      	ldr	r3, [sp, #16]
 8012546:	601d      	str	r5, [r3, #0]
 8012548:	e695      	b.n	8012276 <__gethex+0x12a>
 801254a:	4299      	cmp	r1, r3
 801254c:	f843 cc04 	str.w	ip, [r3, #-4]
 8012550:	d8d8      	bhi.n	8012504 <__gethex+0x3b8>
 8012552:	68a3      	ldr	r3, [r4, #8]
 8012554:	459b      	cmp	fp, r3
 8012556:	db19      	blt.n	801258c <__gethex+0x440>
 8012558:	6861      	ldr	r1, [r4, #4]
 801255a:	ee18 0a10 	vmov	r0, s16
 801255e:	3101      	adds	r1, #1
 8012560:	f000 f91a 	bl	8012798 <_Balloc>
 8012564:	4681      	mov	r9, r0
 8012566:	b918      	cbnz	r0, 8012570 <__gethex+0x424>
 8012568:	4b1a      	ldr	r3, [pc, #104]	; (80125d4 <__gethex+0x488>)
 801256a:	4602      	mov	r2, r0
 801256c:	2184      	movs	r1, #132	; 0x84
 801256e:	e6a8      	b.n	80122c2 <__gethex+0x176>
 8012570:	6922      	ldr	r2, [r4, #16]
 8012572:	3202      	adds	r2, #2
 8012574:	f104 010c 	add.w	r1, r4, #12
 8012578:	0092      	lsls	r2, r2, #2
 801257a:	300c      	adds	r0, #12
 801257c:	f7fd f9a0 	bl	800f8c0 <memcpy>
 8012580:	4621      	mov	r1, r4
 8012582:	ee18 0a10 	vmov	r0, s16
 8012586:	f000 f947 	bl	8012818 <_Bfree>
 801258a:	464c      	mov	r4, r9
 801258c:	6923      	ldr	r3, [r4, #16]
 801258e:	1c5a      	adds	r2, r3, #1
 8012590:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012594:	6122      	str	r2, [r4, #16]
 8012596:	2201      	movs	r2, #1
 8012598:	615a      	str	r2, [r3, #20]
 801259a:	e7bb      	b.n	8012514 <__gethex+0x3c8>
 801259c:	6922      	ldr	r2, [r4, #16]
 801259e:	455a      	cmp	r2, fp
 80125a0:	dd0b      	ble.n	80125ba <__gethex+0x46e>
 80125a2:	2101      	movs	r1, #1
 80125a4:	4620      	mov	r0, r4
 80125a6:	f7ff fd69 	bl	801207c <rshift>
 80125aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80125ae:	3501      	adds	r5, #1
 80125b0:	42ab      	cmp	r3, r5
 80125b2:	f6ff aed0 	blt.w	8012356 <__gethex+0x20a>
 80125b6:	2701      	movs	r7, #1
 80125b8:	e7c0      	b.n	801253c <__gethex+0x3f0>
 80125ba:	f016 061f 	ands.w	r6, r6, #31
 80125be:	d0fa      	beq.n	80125b6 <__gethex+0x46a>
 80125c0:	4453      	add	r3, sl
 80125c2:	f1c6 0620 	rsb	r6, r6, #32
 80125c6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80125ca:	f000 f9d7 	bl	801297c <__hi0bits>
 80125ce:	42b0      	cmp	r0, r6
 80125d0:	dbe7      	blt.n	80125a2 <__gethex+0x456>
 80125d2:	e7f0      	b.n	80125b6 <__gethex+0x46a>
 80125d4:	08014fd0 	.word	0x08014fd0

080125d8 <L_shift>:
 80125d8:	f1c2 0208 	rsb	r2, r2, #8
 80125dc:	0092      	lsls	r2, r2, #2
 80125de:	b570      	push	{r4, r5, r6, lr}
 80125e0:	f1c2 0620 	rsb	r6, r2, #32
 80125e4:	6843      	ldr	r3, [r0, #4]
 80125e6:	6804      	ldr	r4, [r0, #0]
 80125e8:	fa03 f506 	lsl.w	r5, r3, r6
 80125ec:	432c      	orrs	r4, r5
 80125ee:	40d3      	lsrs	r3, r2
 80125f0:	6004      	str	r4, [r0, #0]
 80125f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80125f6:	4288      	cmp	r0, r1
 80125f8:	d3f4      	bcc.n	80125e4 <L_shift+0xc>
 80125fa:	bd70      	pop	{r4, r5, r6, pc}

080125fc <__match>:
 80125fc:	b530      	push	{r4, r5, lr}
 80125fe:	6803      	ldr	r3, [r0, #0]
 8012600:	3301      	adds	r3, #1
 8012602:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012606:	b914      	cbnz	r4, 801260e <__match+0x12>
 8012608:	6003      	str	r3, [r0, #0]
 801260a:	2001      	movs	r0, #1
 801260c:	bd30      	pop	{r4, r5, pc}
 801260e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012612:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012616:	2d19      	cmp	r5, #25
 8012618:	bf98      	it	ls
 801261a:	3220      	addls	r2, #32
 801261c:	42a2      	cmp	r2, r4
 801261e:	d0f0      	beq.n	8012602 <__match+0x6>
 8012620:	2000      	movs	r0, #0
 8012622:	e7f3      	b.n	801260c <__match+0x10>

08012624 <__hexnan>:
 8012624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012628:	680b      	ldr	r3, [r1, #0]
 801262a:	115e      	asrs	r6, r3, #5
 801262c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012630:	f013 031f 	ands.w	r3, r3, #31
 8012634:	b087      	sub	sp, #28
 8012636:	bf18      	it	ne
 8012638:	3604      	addne	r6, #4
 801263a:	2500      	movs	r5, #0
 801263c:	1f37      	subs	r7, r6, #4
 801263e:	4690      	mov	r8, r2
 8012640:	6802      	ldr	r2, [r0, #0]
 8012642:	9301      	str	r3, [sp, #4]
 8012644:	4682      	mov	sl, r0
 8012646:	f846 5c04 	str.w	r5, [r6, #-4]
 801264a:	46b9      	mov	r9, r7
 801264c:	463c      	mov	r4, r7
 801264e:	9502      	str	r5, [sp, #8]
 8012650:	46ab      	mov	fp, r5
 8012652:	7851      	ldrb	r1, [r2, #1]
 8012654:	1c53      	adds	r3, r2, #1
 8012656:	9303      	str	r3, [sp, #12]
 8012658:	b341      	cbz	r1, 80126ac <__hexnan+0x88>
 801265a:	4608      	mov	r0, r1
 801265c:	9205      	str	r2, [sp, #20]
 801265e:	9104      	str	r1, [sp, #16]
 8012660:	f7ff fd5e 	bl	8012120 <__hexdig_fun>
 8012664:	2800      	cmp	r0, #0
 8012666:	d14f      	bne.n	8012708 <__hexnan+0xe4>
 8012668:	9904      	ldr	r1, [sp, #16]
 801266a:	9a05      	ldr	r2, [sp, #20]
 801266c:	2920      	cmp	r1, #32
 801266e:	d818      	bhi.n	80126a2 <__hexnan+0x7e>
 8012670:	9b02      	ldr	r3, [sp, #8]
 8012672:	459b      	cmp	fp, r3
 8012674:	dd13      	ble.n	801269e <__hexnan+0x7a>
 8012676:	454c      	cmp	r4, r9
 8012678:	d206      	bcs.n	8012688 <__hexnan+0x64>
 801267a:	2d07      	cmp	r5, #7
 801267c:	dc04      	bgt.n	8012688 <__hexnan+0x64>
 801267e:	462a      	mov	r2, r5
 8012680:	4649      	mov	r1, r9
 8012682:	4620      	mov	r0, r4
 8012684:	f7ff ffa8 	bl	80125d8 <L_shift>
 8012688:	4544      	cmp	r4, r8
 801268a:	d950      	bls.n	801272e <__hexnan+0x10a>
 801268c:	2300      	movs	r3, #0
 801268e:	f1a4 0904 	sub.w	r9, r4, #4
 8012692:	f844 3c04 	str.w	r3, [r4, #-4]
 8012696:	f8cd b008 	str.w	fp, [sp, #8]
 801269a:	464c      	mov	r4, r9
 801269c:	461d      	mov	r5, r3
 801269e:	9a03      	ldr	r2, [sp, #12]
 80126a0:	e7d7      	b.n	8012652 <__hexnan+0x2e>
 80126a2:	2929      	cmp	r1, #41	; 0x29
 80126a4:	d156      	bne.n	8012754 <__hexnan+0x130>
 80126a6:	3202      	adds	r2, #2
 80126a8:	f8ca 2000 	str.w	r2, [sl]
 80126ac:	f1bb 0f00 	cmp.w	fp, #0
 80126b0:	d050      	beq.n	8012754 <__hexnan+0x130>
 80126b2:	454c      	cmp	r4, r9
 80126b4:	d206      	bcs.n	80126c4 <__hexnan+0xa0>
 80126b6:	2d07      	cmp	r5, #7
 80126b8:	dc04      	bgt.n	80126c4 <__hexnan+0xa0>
 80126ba:	462a      	mov	r2, r5
 80126bc:	4649      	mov	r1, r9
 80126be:	4620      	mov	r0, r4
 80126c0:	f7ff ff8a 	bl	80125d8 <L_shift>
 80126c4:	4544      	cmp	r4, r8
 80126c6:	d934      	bls.n	8012732 <__hexnan+0x10e>
 80126c8:	f1a8 0204 	sub.w	r2, r8, #4
 80126cc:	4623      	mov	r3, r4
 80126ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80126d2:	f842 1f04 	str.w	r1, [r2, #4]!
 80126d6:	429f      	cmp	r7, r3
 80126d8:	d2f9      	bcs.n	80126ce <__hexnan+0xaa>
 80126da:	1b3b      	subs	r3, r7, r4
 80126dc:	f023 0303 	bic.w	r3, r3, #3
 80126e0:	3304      	adds	r3, #4
 80126e2:	3401      	adds	r4, #1
 80126e4:	3e03      	subs	r6, #3
 80126e6:	42b4      	cmp	r4, r6
 80126e8:	bf88      	it	hi
 80126ea:	2304      	movhi	r3, #4
 80126ec:	4443      	add	r3, r8
 80126ee:	2200      	movs	r2, #0
 80126f0:	f843 2b04 	str.w	r2, [r3], #4
 80126f4:	429f      	cmp	r7, r3
 80126f6:	d2fb      	bcs.n	80126f0 <__hexnan+0xcc>
 80126f8:	683b      	ldr	r3, [r7, #0]
 80126fa:	b91b      	cbnz	r3, 8012704 <__hexnan+0xe0>
 80126fc:	4547      	cmp	r7, r8
 80126fe:	d127      	bne.n	8012750 <__hexnan+0x12c>
 8012700:	2301      	movs	r3, #1
 8012702:	603b      	str	r3, [r7, #0]
 8012704:	2005      	movs	r0, #5
 8012706:	e026      	b.n	8012756 <__hexnan+0x132>
 8012708:	3501      	adds	r5, #1
 801270a:	2d08      	cmp	r5, #8
 801270c:	f10b 0b01 	add.w	fp, fp, #1
 8012710:	dd06      	ble.n	8012720 <__hexnan+0xfc>
 8012712:	4544      	cmp	r4, r8
 8012714:	d9c3      	bls.n	801269e <__hexnan+0x7a>
 8012716:	2300      	movs	r3, #0
 8012718:	f844 3c04 	str.w	r3, [r4, #-4]
 801271c:	2501      	movs	r5, #1
 801271e:	3c04      	subs	r4, #4
 8012720:	6822      	ldr	r2, [r4, #0]
 8012722:	f000 000f 	and.w	r0, r0, #15
 8012726:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801272a:	6022      	str	r2, [r4, #0]
 801272c:	e7b7      	b.n	801269e <__hexnan+0x7a>
 801272e:	2508      	movs	r5, #8
 8012730:	e7b5      	b.n	801269e <__hexnan+0x7a>
 8012732:	9b01      	ldr	r3, [sp, #4]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d0df      	beq.n	80126f8 <__hexnan+0xd4>
 8012738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801273c:	f1c3 0320 	rsb	r3, r3, #32
 8012740:	fa22 f303 	lsr.w	r3, r2, r3
 8012744:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012748:	401a      	ands	r2, r3
 801274a:	f846 2c04 	str.w	r2, [r6, #-4]
 801274e:	e7d3      	b.n	80126f8 <__hexnan+0xd4>
 8012750:	3f04      	subs	r7, #4
 8012752:	e7d1      	b.n	80126f8 <__hexnan+0xd4>
 8012754:	2004      	movs	r0, #4
 8012756:	b007      	add	sp, #28
 8012758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801275c <_localeconv_r>:
 801275c:	4800      	ldr	r0, [pc, #0]	; (8012760 <_localeconv_r+0x4>)
 801275e:	4770      	bx	lr
 8012760:	2000016c 	.word	0x2000016c

08012764 <malloc>:
 8012764:	4b02      	ldr	r3, [pc, #8]	; (8012770 <malloc+0xc>)
 8012766:	4601      	mov	r1, r0
 8012768:	6818      	ldr	r0, [r3, #0]
 801276a:	f000 bd59 	b.w	8013220 <_malloc_r>
 801276e:	bf00      	nop
 8012770:	20000014 	.word	0x20000014

08012774 <__ascii_mbtowc>:
 8012774:	b082      	sub	sp, #8
 8012776:	b901      	cbnz	r1, 801277a <__ascii_mbtowc+0x6>
 8012778:	a901      	add	r1, sp, #4
 801277a:	b142      	cbz	r2, 801278e <__ascii_mbtowc+0x1a>
 801277c:	b14b      	cbz	r3, 8012792 <__ascii_mbtowc+0x1e>
 801277e:	7813      	ldrb	r3, [r2, #0]
 8012780:	600b      	str	r3, [r1, #0]
 8012782:	7812      	ldrb	r2, [r2, #0]
 8012784:	1e10      	subs	r0, r2, #0
 8012786:	bf18      	it	ne
 8012788:	2001      	movne	r0, #1
 801278a:	b002      	add	sp, #8
 801278c:	4770      	bx	lr
 801278e:	4610      	mov	r0, r2
 8012790:	e7fb      	b.n	801278a <__ascii_mbtowc+0x16>
 8012792:	f06f 0001 	mvn.w	r0, #1
 8012796:	e7f8      	b.n	801278a <__ascii_mbtowc+0x16>

08012798 <_Balloc>:
 8012798:	b570      	push	{r4, r5, r6, lr}
 801279a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801279c:	4604      	mov	r4, r0
 801279e:	460d      	mov	r5, r1
 80127a0:	b976      	cbnz	r6, 80127c0 <_Balloc+0x28>
 80127a2:	2010      	movs	r0, #16
 80127a4:	f7ff ffde 	bl	8012764 <malloc>
 80127a8:	4602      	mov	r2, r0
 80127aa:	6260      	str	r0, [r4, #36]	; 0x24
 80127ac:	b920      	cbnz	r0, 80127b8 <_Balloc+0x20>
 80127ae:	4b18      	ldr	r3, [pc, #96]	; (8012810 <_Balloc+0x78>)
 80127b0:	4818      	ldr	r0, [pc, #96]	; (8012814 <_Balloc+0x7c>)
 80127b2:	2166      	movs	r1, #102	; 0x66
 80127b4:	f000 ff3e 	bl	8013634 <__assert_func>
 80127b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80127bc:	6006      	str	r6, [r0, #0]
 80127be:	60c6      	str	r6, [r0, #12]
 80127c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80127c2:	68f3      	ldr	r3, [r6, #12]
 80127c4:	b183      	cbz	r3, 80127e8 <_Balloc+0x50>
 80127c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80127c8:	68db      	ldr	r3, [r3, #12]
 80127ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80127ce:	b9b8      	cbnz	r0, 8012800 <_Balloc+0x68>
 80127d0:	2101      	movs	r1, #1
 80127d2:	fa01 f605 	lsl.w	r6, r1, r5
 80127d6:	1d72      	adds	r2, r6, #5
 80127d8:	0092      	lsls	r2, r2, #2
 80127da:	4620      	mov	r0, r4
 80127dc:	f000 fc9d 	bl	801311a <_calloc_r>
 80127e0:	b160      	cbz	r0, 80127fc <_Balloc+0x64>
 80127e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80127e6:	e00e      	b.n	8012806 <_Balloc+0x6e>
 80127e8:	2221      	movs	r2, #33	; 0x21
 80127ea:	2104      	movs	r1, #4
 80127ec:	4620      	mov	r0, r4
 80127ee:	f000 fc94 	bl	801311a <_calloc_r>
 80127f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80127f4:	60f0      	str	r0, [r6, #12]
 80127f6:	68db      	ldr	r3, [r3, #12]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d1e4      	bne.n	80127c6 <_Balloc+0x2e>
 80127fc:	2000      	movs	r0, #0
 80127fe:	bd70      	pop	{r4, r5, r6, pc}
 8012800:	6802      	ldr	r2, [r0, #0]
 8012802:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012806:	2300      	movs	r3, #0
 8012808:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801280c:	e7f7      	b.n	80127fe <_Balloc+0x66>
 801280e:	bf00      	nop
 8012810:	08014f5e 	.word	0x08014f5e
 8012814:	0801505c 	.word	0x0801505c

08012818 <_Bfree>:
 8012818:	b570      	push	{r4, r5, r6, lr}
 801281a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801281c:	4605      	mov	r5, r0
 801281e:	460c      	mov	r4, r1
 8012820:	b976      	cbnz	r6, 8012840 <_Bfree+0x28>
 8012822:	2010      	movs	r0, #16
 8012824:	f7ff ff9e 	bl	8012764 <malloc>
 8012828:	4602      	mov	r2, r0
 801282a:	6268      	str	r0, [r5, #36]	; 0x24
 801282c:	b920      	cbnz	r0, 8012838 <_Bfree+0x20>
 801282e:	4b09      	ldr	r3, [pc, #36]	; (8012854 <_Bfree+0x3c>)
 8012830:	4809      	ldr	r0, [pc, #36]	; (8012858 <_Bfree+0x40>)
 8012832:	218a      	movs	r1, #138	; 0x8a
 8012834:	f000 fefe 	bl	8013634 <__assert_func>
 8012838:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801283c:	6006      	str	r6, [r0, #0]
 801283e:	60c6      	str	r6, [r0, #12]
 8012840:	b13c      	cbz	r4, 8012852 <_Bfree+0x3a>
 8012842:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012844:	6862      	ldr	r2, [r4, #4]
 8012846:	68db      	ldr	r3, [r3, #12]
 8012848:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801284c:	6021      	str	r1, [r4, #0]
 801284e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012852:	bd70      	pop	{r4, r5, r6, pc}
 8012854:	08014f5e 	.word	0x08014f5e
 8012858:	0801505c 	.word	0x0801505c

0801285c <__multadd>:
 801285c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012860:	690d      	ldr	r5, [r1, #16]
 8012862:	4607      	mov	r7, r0
 8012864:	460c      	mov	r4, r1
 8012866:	461e      	mov	r6, r3
 8012868:	f101 0c14 	add.w	ip, r1, #20
 801286c:	2000      	movs	r0, #0
 801286e:	f8dc 3000 	ldr.w	r3, [ip]
 8012872:	b299      	uxth	r1, r3
 8012874:	fb02 6101 	mla	r1, r2, r1, r6
 8012878:	0c1e      	lsrs	r6, r3, #16
 801287a:	0c0b      	lsrs	r3, r1, #16
 801287c:	fb02 3306 	mla	r3, r2, r6, r3
 8012880:	b289      	uxth	r1, r1
 8012882:	3001      	adds	r0, #1
 8012884:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012888:	4285      	cmp	r5, r0
 801288a:	f84c 1b04 	str.w	r1, [ip], #4
 801288e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012892:	dcec      	bgt.n	801286e <__multadd+0x12>
 8012894:	b30e      	cbz	r6, 80128da <__multadd+0x7e>
 8012896:	68a3      	ldr	r3, [r4, #8]
 8012898:	42ab      	cmp	r3, r5
 801289a:	dc19      	bgt.n	80128d0 <__multadd+0x74>
 801289c:	6861      	ldr	r1, [r4, #4]
 801289e:	4638      	mov	r0, r7
 80128a0:	3101      	adds	r1, #1
 80128a2:	f7ff ff79 	bl	8012798 <_Balloc>
 80128a6:	4680      	mov	r8, r0
 80128a8:	b928      	cbnz	r0, 80128b6 <__multadd+0x5a>
 80128aa:	4602      	mov	r2, r0
 80128ac:	4b0c      	ldr	r3, [pc, #48]	; (80128e0 <__multadd+0x84>)
 80128ae:	480d      	ldr	r0, [pc, #52]	; (80128e4 <__multadd+0x88>)
 80128b0:	21b5      	movs	r1, #181	; 0xb5
 80128b2:	f000 febf 	bl	8013634 <__assert_func>
 80128b6:	6922      	ldr	r2, [r4, #16]
 80128b8:	3202      	adds	r2, #2
 80128ba:	f104 010c 	add.w	r1, r4, #12
 80128be:	0092      	lsls	r2, r2, #2
 80128c0:	300c      	adds	r0, #12
 80128c2:	f7fc fffd 	bl	800f8c0 <memcpy>
 80128c6:	4621      	mov	r1, r4
 80128c8:	4638      	mov	r0, r7
 80128ca:	f7ff ffa5 	bl	8012818 <_Bfree>
 80128ce:	4644      	mov	r4, r8
 80128d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80128d4:	3501      	adds	r5, #1
 80128d6:	615e      	str	r6, [r3, #20]
 80128d8:	6125      	str	r5, [r4, #16]
 80128da:	4620      	mov	r0, r4
 80128dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128e0:	08014fd0 	.word	0x08014fd0
 80128e4:	0801505c 	.word	0x0801505c

080128e8 <__s2b>:
 80128e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80128ec:	460c      	mov	r4, r1
 80128ee:	4615      	mov	r5, r2
 80128f0:	461f      	mov	r7, r3
 80128f2:	2209      	movs	r2, #9
 80128f4:	3308      	adds	r3, #8
 80128f6:	4606      	mov	r6, r0
 80128f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80128fc:	2100      	movs	r1, #0
 80128fe:	2201      	movs	r2, #1
 8012900:	429a      	cmp	r2, r3
 8012902:	db09      	blt.n	8012918 <__s2b+0x30>
 8012904:	4630      	mov	r0, r6
 8012906:	f7ff ff47 	bl	8012798 <_Balloc>
 801290a:	b940      	cbnz	r0, 801291e <__s2b+0x36>
 801290c:	4602      	mov	r2, r0
 801290e:	4b19      	ldr	r3, [pc, #100]	; (8012974 <__s2b+0x8c>)
 8012910:	4819      	ldr	r0, [pc, #100]	; (8012978 <__s2b+0x90>)
 8012912:	21ce      	movs	r1, #206	; 0xce
 8012914:	f000 fe8e 	bl	8013634 <__assert_func>
 8012918:	0052      	lsls	r2, r2, #1
 801291a:	3101      	adds	r1, #1
 801291c:	e7f0      	b.n	8012900 <__s2b+0x18>
 801291e:	9b08      	ldr	r3, [sp, #32]
 8012920:	6143      	str	r3, [r0, #20]
 8012922:	2d09      	cmp	r5, #9
 8012924:	f04f 0301 	mov.w	r3, #1
 8012928:	6103      	str	r3, [r0, #16]
 801292a:	dd16      	ble.n	801295a <__s2b+0x72>
 801292c:	f104 0909 	add.w	r9, r4, #9
 8012930:	46c8      	mov	r8, r9
 8012932:	442c      	add	r4, r5
 8012934:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012938:	4601      	mov	r1, r0
 801293a:	3b30      	subs	r3, #48	; 0x30
 801293c:	220a      	movs	r2, #10
 801293e:	4630      	mov	r0, r6
 8012940:	f7ff ff8c 	bl	801285c <__multadd>
 8012944:	45a0      	cmp	r8, r4
 8012946:	d1f5      	bne.n	8012934 <__s2b+0x4c>
 8012948:	f1a5 0408 	sub.w	r4, r5, #8
 801294c:	444c      	add	r4, r9
 801294e:	1b2d      	subs	r5, r5, r4
 8012950:	1963      	adds	r3, r4, r5
 8012952:	42bb      	cmp	r3, r7
 8012954:	db04      	blt.n	8012960 <__s2b+0x78>
 8012956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801295a:	340a      	adds	r4, #10
 801295c:	2509      	movs	r5, #9
 801295e:	e7f6      	b.n	801294e <__s2b+0x66>
 8012960:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012964:	4601      	mov	r1, r0
 8012966:	3b30      	subs	r3, #48	; 0x30
 8012968:	220a      	movs	r2, #10
 801296a:	4630      	mov	r0, r6
 801296c:	f7ff ff76 	bl	801285c <__multadd>
 8012970:	e7ee      	b.n	8012950 <__s2b+0x68>
 8012972:	bf00      	nop
 8012974:	08014fd0 	.word	0x08014fd0
 8012978:	0801505c 	.word	0x0801505c

0801297c <__hi0bits>:
 801297c:	0c03      	lsrs	r3, r0, #16
 801297e:	041b      	lsls	r3, r3, #16
 8012980:	b9d3      	cbnz	r3, 80129b8 <__hi0bits+0x3c>
 8012982:	0400      	lsls	r0, r0, #16
 8012984:	2310      	movs	r3, #16
 8012986:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801298a:	bf04      	itt	eq
 801298c:	0200      	lsleq	r0, r0, #8
 801298e:	3308      	addeq	r3, #8
 8012990:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012994:	bf04      	itt	eq
 8012996:	0100      	lsleq	r0, r0, #4
 8012998:	3304      	addeq	r3, #4
 801299a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801299e:	bf04      	itt	eq
 80129a0:	0080      	lsleq	r0, r0, #2
 80129a2:	3302      	addeq	r3, #2
 80129a4:	2800      	cmp	r0, #0
 80129a6:	db05      	blt.n	80129b4 <__hi0bits+0x38>
 80129a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80129ac:	f103 0301 	add.w	r3, r3, #1
 80129b0:	bf08      	it	eq
 80129b2:	2320      	moveq	r3, #32
 80129b4:	4618      	mov	r0, r3
 80129b6:	4770      	bx	lr
 80129b8:	2300      	movs	r3, #0
 80129ba:	e7e4      	b.n	8012986 <__hi0bits+0xa>

080129bc <__lo0bits>:
 80129bc:	6803      	ldr	r3, [r0, #0]
 80129be:	f013 0207 	ands.w	r2, r3, #7
 80129c2:	4601      	mov	r1, r0
 80129c4:	d00b      	beq.n	80129de <__lo0bits+0x22>
 80129c6:	07da      	lsls	r2, r3, #31
 80129c8:	d423      	bmi.n	8012a12 <__lo0bits+0x56>
 80129ca:	0798      	lsls	r0, r3, #30
 80129cc:	bf49      	itett	mi
 80129ce:	085b      	lsrmi	r3, r3, #1
 80129d0:	089b      	lsrpl	r3, r3, #2
 80129d2:	2001      	movmi	r0, #1
 80129d4:	600b      	strmi	r3, [r1, #0]
 80129d6:	bf5c      	itt	pl
 80129d8:	600b      	strpl	r3, [r1, #0]
 80129da:	2002      	movpl	r0, #2
 80129dc:	4770      	bx	lr
 80129de:	b298      	uxth	r0, r3
 80129e0:	b9a8      	cbnz	r0, 8012a0e <__lo0bits+0x52>
 80129e2:	0c1b      	lsrs	r3, r3, #16
 80129e4:	2010      	movs	r0, #16
 80129e6:	b2da      	uxtb	r2, r3
 80129e8:	b90a      	cbnz	r2, 80129ee <__lo0bits+0x32>
 80129ea:	3008      	adds	r0, #8
 80129ec:	0a1b      	lsrs	r3, r3, #8
 80129ee:	071a      	lsls	r2, r3, #28
 80129f0:	bf04      	itt	eq
 80129f2:	091b      	lsreq	r3, r3, #4
 80129f4:	3004      	addeq	r0, #4
 80129f6:	079a      	lsls	r2, r3, #30
 80129f8:	bf04      	itt	eq
 80129fa:	089b      	lsreq	r3, r3, #2
 80129fc:	3002      	addeq	r0, #2
 80129fe:	07da      	lsls	r2, r3, #31
 8012a00:	d403      	bmi.n	8012a0a <__lo0bits+0x4e>
 8012a02:	085b      	lsrs	r3, r3, #1
 8012a04:	f100 0001 	add.w	r0, r0, #1
 8012a08:	d005      	beq.n	8012a16 <__lo0bits+0x5a>
 8012a0a:	600b      	str	r3, [r1, #0]
 8012a0c:	4770      	bx	lr
 8012a0e:	4610      	mov	r0, r2
 8012a10:	e7e9      	b.n	80129e6 <__lo0bits+0x2a>
 8012a12:	2000      	movs	r0, #0
 8012a14:	4770      	bx	lr
 8012a16:	2020      	movs	r0, #32
 8012a18:	4770      	bx	lr
	...

08012a1c <__i2b>:
 8012a1c:	b510      	push	{r4, lr}
 8012a1e:	460c      	mov	r4, r1
 8012a20:	2101      	movs	r1, #1
 8012a22:	f7ff feb9 	bl	8012798 <_Balloc>
 8012a26:	4602      	mov	r2, r0
 8012a28:	b928      	cbnz	r0, 8012a36 <__i2b+0x1a>
 8012a2a:	4b05      	ldr	r3, [pc, #20]	; (8012a40 <__i2b+0x24>)
 8012a2c:	4805      	ldr	r0, [pc, #20]	; (8012a44 <__i2b+0x28>)
 8012a2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012a32:	f000 fdff 	bl	8013634 <__assert_func>
 8012a36:	2301      	movs	r3, #1
 8012a38:	6144      	str	r4, [r0, #20]
 8012a3a:	6103      	str	r3, [r0, #16]
 8012a3c:	bd10      	pop	{r4, pc}
 8012a3e:	bf00      	nop
 8012a40:	08014fd0 	.word	0x08014fd0
 8012a44:	0801505c 	.word	0x0801505c

08012a48 <__multiply>:
 8012a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a4c:	4691      	mov	r9, r2
 8012a4e:	690a      	ldr	r2, [r1, #16]
 8012a50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012a54:	429a      	cmp	r2, r3
 8012a56:	bfb8      	it	lt
 8012a58:	460b      	movlt	r3, r1
 8012a5a:	460c      	mov	r4, r1
 8012a5c:	bfbc      	itt	lt
 8012a5e:	464c      	movlt	r4, r9
 8012a60:	4699      	movlt	r9, r3
 8012a62:	6927      	ldr	r7, [r4, #16]
 8012a64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012a68:	68a3      	ldr	r3, [r4, #8]
 8012a6a:	6861      	ldr	r1, [r4, #4]
 8012a6c:	eb07 060a 	add.w	r6, r7, sl
 8012a70:	42b3      	cmp	r3, r6
 8012a72:	b085      	sub	sp, #20
 8012a74:	bfb8      	it	lt
 8012a76:	3101      	addlt	r1, #1
 8012a78:	f7ff fe8e 	bl	8012798 <_Balloc>
 8012a7c:	b930      	cbnz	r0, 8012a8c <__multiply+0x44>
 8012a7e:	4602      	mov	r2, r0
 8012a80:	4b44      	ldr	r3, [pc, #272]	; (8012b94 <__multiply+0x14c>)
 8012a82:	4845      	ldr	r0, [pc, #276]	; (8012b98 <__multiply+0x150>)
 8012a84:	f240 115d 	movw	r1, #349	; 0x15d
 8012a88:	f000 fdd4 	bl	8013634 <__assert_func>
 8012a8c:	f100 0514 	add.w	r5, r0, #20
 8012a90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012a94:	462b      	mov	r3, r5
 8012a96:	2200      	movs	r2, #0
 8012a98:	4543      	cmp	r3, r8
 8012a9a:	d321      	bcc.n	8012ae0 <__multiply+0x98>
 8012a9c:	f104 0314 	add.w	r3, r4, #20
 8012aa0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012aa4:	f109 0314 	add.w	r3, r9, #20
 8012aa8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012aac:	9202      	str	r2, [sp, #8]
 8012aae:	1b3a      	subs	r2, r7, r4
 8012ab0:	3a15      	subs	r2, #21
 8012ab2:	f022 0203 	bic.w	r2, r2, #3
 8012ab6:	3204      	adds	r2, #4
 8012ab8:	f104 0115 	add.w	r1, r4, #21
 8012abc:	428f      	cmp	r7, r1
 8012abe:	bf38      	it	cc
 8012ac0:	2204      	movcc	r2, #4
 8012ac2:	9201      	str	r2, [sp, #4]
 8012ac4:	9a02      	ldr	r2, [sp, #8]
 8012ac6:	9303      	str	r3, [sp, #12]
 8012ac8:	429a      	cmp	r2, r3
 8012aca:	d80c      	bhi.n	8012ae6 <__multiply+0x9e>
 8012acc:	2e00      	cmp	r6, #0
 8012ace:	dd03      	ble.n	8012ad8 <__multiply+0x90>
 8012ad0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d05a      	beq.n	8012b8e <__multiply+0x146>
 8012ad8:	6106      	str	r6, [r0, #16]
 8012ada:	b005      	add	sp, #20
 8012adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ae0:	f843 2b04 	str.w	r2, [r3], #4
 8012ae4:	e7d8      	b.n	8012a98 <__multiply+0x50>
 8012ae6:	f8b3 a000 	ldrh.w	sl, [r3]
 8012aea:	f1ba 0f00 	cmp.w	sl, #0
 8012aee:	d024      	beq.n	8012b3a <__multiply+0xf2>
 8012af0:	f104 0e14 	add.w	lr, r4, #20
 8012af4:	46a9      	mov	r9, r5
 8012af6:	f04f 0c00 	mov.w	ip, #0
 8012afa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012afe:	f8d9 1000 	ldr.w	r1, [r9]
 8012b02:	fa1f fb82 	uxth.w	fp, r2
 8012b06:	b289      	uxth	r1, r1
 8012b08:	fb0a 110b 	mla	r1, sl, fp, r1
 8012b0c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012b10:	f8d9 2000 	ldr.w	r2, [r9]
 8012b14:	4461      	add	r1, ip
 8012b16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012b1a:	fb0a c20b 	mla	r2, sl, fp, ip
 8012b1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012b22:	b289      	uxth	r1, r1
 8012b24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012b28:	4577      	cmp	r7, lr
 8012b2a:	f849 1b04 	str.w	r1, [r9], #4
 8012b2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012b32:	d8e2      	bhi.n	8012afa <__multiply+0xb2>
 8012b34:	9a01      	ldr	r2, [sp, #4]
 8012b36:	f845 c002 	str.w	ip, [r5, r2]
 8012b3a:	9a03      	ldr	r2, [sp, #12]
 8012b3c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012b40:	3304      	adds	r3, #4
 8012b42:	f1b9 0f00 	cmp.w	r9, #0
 8012b46:	d020      	beq.n	8012b8a <__multiply+0x142>
 8012b48:	6829      	ldr	r1, [r5, #0]
 8012b4a:	f104 0c14 	add.w	ip, r4, #20
 8012b4e:	46ae      	mov	lr, r5
 8012b50:	f04f 0a00 	mov.w	sl, #0
 8012b54:	f8bc b000 	ldrh.w	fp, [ip]
 8012b58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012b5c:	fb09 220b 	mla	r2, r9, fp, r2
 8012b60:	4492      	add	sl, r2
 8012b62:	b289      	uxth	r1, r1
 8012b64:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012b68:	f84e 1b04 	str.w	r1, [lr], #4
 8012b6c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012b70:	f8be 1000 	ldrh.w	r1, [lr]
 8012b74:	0c12      	lsrs	r2, r2, #16
 8012b76:	fb09 1102 	mla	r1, r9, r2, r1
 8012b7a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012b7e:	4567      	cmp	r7, ip
 8012b80:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012b84:	d8e6      	bhi.n	8012b54 <__multiply+0x10c>
 8012b86:	9a01      	ldr	r2, [sp, #4]
 8012b88:	50a9      	str	r1, [r5, r2]
 8012b8a:	3504      	adds	r5, #4
 8012b8c:	e79a      	b.n	8012ac4 <__multiply+0x7c>
 8012b8e:	3e01      	subs	r6, #1
 8012b90:	e79c      	b.n	8012acc <__multiply+0x84>
 8012b92:	bf00      	nop
 8012b94:	08014fd0 	.word	0x08014fd0
 8012b98:	0801505c 	.word	0x0801505c

08012b9c <__pow5mult>:
 8012b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ba0:	4615      	mov	r5, r2
 8012ba2:	f012 0203 	ands.w	r2, r2, #3
 8012ba6:	4606      	mov	r6, r0
 8012ba8:	460f      	mov	r7, r1
 8012baa:	d007      	beq.n	8012bbc <__pow5mult+0x20>
 8012bac:	4c25      	ldr	r4, [pc, #148]	; (8012c44 <__pow5mult+0xa8>)
 8012bae:	3a01      	subs	r2, #1
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012bb6:	f7ff fe51 	bl	801285c <__multadd>
 8012bba:	4607      	mov	r7, r0
 8012bbc:	10ad      	asrs	r5, r5, #2
 8012bbe:	d03d      	beq.n	8012c3c <__pow5mult+0xa0>
 8012bc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012bc2:	b97c      	cbnz	r4, 8012be4 <__pow5mult+0x48>
 8012bc4:	2010      	movs	r0, #16
 8012bc6:	f7ff fdcd 	bl	8012764 <malloc>
 8012bca:	4602      	mov	r2, r0
 8012bcc:	6270      	str	r0, [r6, #36]	; 0x24
 8012bce:	b928      	cbnz	r0, 8012bdc <__pow5mult+0x40>
 8012bd0:	4b1d      	ldr	r3, [pc, #116]	; (8012c48 <__pow5mult+0xac>)
 8012bd2:	481e      	ldr	r0, [pc, #120]	; (8012c4c <__pow5mult+0xb0>)
 8012bd4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012bd8:	f000 fd2c 	bl	8013634 <__assert_func>
 8012bdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012be0:	6004      	str	r4, [r0, #0]
 8012be2:	60c4      	str	r4, [r0, #12]
 8012be4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012be8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012bec:	b94c      	cbnz	r4, 8012c02 <__pow5mult+0x66>
 8012bee:	f240 2171 	movw	r1, #625	; 0x271
 8012bf2:	4630      	mov	r0, r6
 8012bf4:	f7ff ff12 	bl	8012a1c <__i2b>
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	f8c8 0008 	str.w	r0, [r8, #8]
 8012bfe:	4604      	mov	r4, r0
 8012c00:	6003      	str	r3, [r0, #0]
 8012c02:	f04f 0900 	mov.w	r9, #0
 8012c06:	07eb      	lsls	r3, r5, #31
 8012c08:	d50a      	bpl.n	8012c20 <__pow5mult+0x84>
 8012c0a:	4639      	mov	r1, r7
 8012c0c:	4622      	mov	r2, r4
 8012c0e:	4630      	mov	r0, r6
 8012c10:	f7ff ff1a 	bl	8012a48 <__multiply>
 8012c14:	4639      	mov	r1, r7
 8012c16:	4680      	mov	r8, r0
 8012c18:	4630      	mov	r0, r6
 8012c1a:	f7ff fdfd 	bl	8012818 <_Bfree>
 8012c1e:	4647      	mov	r7, r8
 8012c20:	106d      	asrs	r5, r5, #1
 8012c22:	d00b      	beq.n	8012c3c <__pow5mult+0xa0>
 8012c24:	6820      	ldr	r0, [r4, #0]
 8012c26:	b938      	cbnz	r0, 8012c38 <__pow5mult+0x9c>
 8012c28:	4622      	mov	r2, r4
 8012c2a:	4621      	mov	r1, r4
 8012c2c:	4630      	mov	r0, r6
 8012c2e:	f7ff ff0b 	bl	8012a48 <__multiply>
 8012c32:	6020      	str	r0, [r4, #0]
 8012c34:	f8c0 9000 	str.w	r9, [r0]
 8012c38:	4604      	mov	r4, r0
 8012c3a:	e7e4      	b.n	8012c06 <__pow5mult+0x6a>
 8012c3c:	4638      	mov	r0, r7
 8012c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c42:	bf00      	nop
 8012c44:	080151a8 	.word	0x080151a8
 8012c48:	08014f5e 	.word	0x08014f5e
 8012c4c:	0801505c 	.word	0x0801505c

08012c50 <__lshift>:
 8012c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c54:	460c      	mov	r4, r1
 8012c56:	6849      	ldr	r1, [r1, #4]
 8012c58:	6923      	ldr	r3, [r4, #16]
 8012c5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012c5e:	68a3      	ldr	r3, [r4, #8]
 8012c60:	4607      	mov	r7, r0
 8012c62:	4691      	mov	r9, r2
 8012c64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012c68:	f108 0601 	add.w	r6, r8, #1
 8012c6c:	42b3      	cmp	r3, r6
 8012c6e:	db0b      	blt.n	8012c88 <__lshift+0x38>
 8012c70:	4638      	mov	r0, r7
 8012c72:	f7ff fd91 	bl	8012798 <_Balloc>
 8012c76:	4605      	mov	r5, r0
 8012c78:	b948      	cbnz	r0, 8012c8e <__lshift+0x3e>
 8012c7a:	4602      	mov	r2, r0
 8012c7c:	4b2a      	ldr	r3, [pc, #168]	; (8012d28 <__lshift+0xd8>)
 8012c7e:	482b      	ldr	r0, [pc, #172]	; (8012d2c <__lshift+0xdc>)
 8012c80:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012c84:	f000 fcd6 	bl	8013634 <__assert_func>
 8012c88:	3101      	adds	r1, #1
 8012c8a:	005b      	lsls	r3, r3, #1
 8012c8c:	e7ee      	b.n	8012c6c <__lshift+0x1c>
 8012c8e:	2300      	movs	r3, #0
 8012c90:	f100 0114 	add.w	r1, r0, #20
 8012c94:	f100 0210 	add.w	r2, r0, #16
 8012c98:	4618      	mov	r0, r3
 8012c9a:	4553      	cmp	r3, sl
 8012c9c:	db37      	blt.n	8012d0e <__lshift+0xbe>
 8012c9e:	6920      	ldr	r0, [r4, #16]
 8012ca0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012ca4:	f104 0314 	add.w	r3, r4, #20
 8012ca8:	f019 091f 	ands.w	r9, r9, #31
 8012cac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012cb0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012cb4:	d02f      	beq.n	8012d16 <__lshift+0xc6>
 8012cb6:	f1c9 0e20 	rsb	lr, r9, #32
 8012cba:	468a      	mov	sl, r1
 8012cbc:	f04f 0c00 	mov.w	ip, #0
 8012cc0:	681a      	ldr	r2, [r3, #0]
 8012cc2:	fa02 f209 	lsl.w	r2, r2, r9
 8012cc6:	ea42 020c 	orr.w	r2, r2, ip
 8012cca:	f84a 2b04 	str.w	r2, [sl], #4
 8012cce:	f853 2b04 	ldr.w	r2, [r3], #4
 8012cd2:	4298      	cmp	r0, r3
 8012cd4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012cd8:	d8f2      	bhi.n	8012cc0 <__lshift+0x70>
 8012cda:	1b03      	subs	r3, r0, r4
 8012cdc:	3b15      	subs	r3, #21
 8012cde:	f023 0303 	bic.w	r3, r3, #3
 8012ce2:	3304      	adds	r3, #4
 8012ce4:	f104 0215 	add.w	r2, r4, #21
 8012ce8:	4290      	cmp	r0, r2
 8012cea:	bf38      	it	cc
 8012cec:	2304      	movcc	r3, #4
 8012cee:	f841 c003 	str.w	ip, [r1, r3]
 8012cf2:	f1bc 0f00 	cmp.w	ip, #0
 8012cf6:	d001      	beq.n	8012cfc <__lshift+0xac>
 8012cf8:	f108 0602 	add.w	r6, r8, #2
 8012cfc:	3e01      	subs	r6, #1
 8012cfe:	4638      	mov	r0, r7
 8012d00:	612e      	str	r6, [r5, #16]
 8012d02:	4621      	mov	r1, r4
 8012d04:	f7ff fd88 	bl	8012818 <_Bfree>
 8012d08:	4628      	mov	r0, r5
 8012d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012d12:	3301      	adds	r3, #1
 8012d14:	e7c1      	b.n	8012c9a <__lshift+0x4a>
 8012d16:	3904      	subs	r1, #4
 8012d18:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d1c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012d20:	4298      	cmp	r0, r3
 8012d22:	d8f9      	bhi.n	8012d18 <__lshift+0xc8>
 8012d24:	e7ea      	b.n	8012cfc <__lshift+0xac>
 8012d26:	bf00      	nop
 8012d28:	08014fd0 	.word	0x08014fd0
 8012d2c:	0801505c 	.word	0x0801505c

08012d30 <__mcmp>:
 8012d30:	b530      	push	{r4, r5, lr}
 8012d32:	6902      	ldr	r2, [r0, #16]
 8012d34:	690c      	ldr	r4, [r1, #16]
 8012d36:	1b12      	subs	r2, r2, r4
 8012d38:	d10e      	bne.n	8012d58 <__mcmp+0x28>
 8012d3a:	f100 0314 	add.w	r3, r0, #20
 8012d3e:	3114      	adds	r1, #20
 8012d40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012d44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012d48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012d4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012d50:	42a5      	cmp	r5, r4
 8012d52:	d003      	beq.n	8012d5c <__mcmp+0x2c>
 8012d54:	d305      	bcc.n	8012d62 <__mcmp+0x32>
 8012d56:	2201      	movs	r2, #1
 8012d58:	4610      	mov	r0, r2
 8012d5a:	bd30      	pop	{r4, r5, pc}
 8012d5c:	4283      	cmp	r3, r0
 8012d5e:	d3f3      	bcc.n	8012d48 <__mcmp+0x18>
 8012d60:	e7fa      	b.n	8012d58 <__mcmp+0x28>
 8012d62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012d66:	e7f7      	b.n	8012d58 <__mcmp+0x28>

08012d68 <__mdiff>:
 8012d68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d6c:	460c      	mov	r4, r1
 8012d6e:	4606      	mov	r6, r0
 8012d70:	4611      	mov	r1, r2
 8012d72:	4620      	mov	r0, r4
 8012d74:	4690      	mov	r8, r2
 8012d76:	f7ff ffdb 	bl	8012d30 <__mcmp>
 8012d7a:	1e05      	subs	r5, r0, #0
 8012d7c:	d110      	bne.n	8012da0 <__mdiff+0x38>
 8012d7e:	4629      	mov	r1, r5
 8012d80:	4630      	mov	r0, r6
 8012d82:	f7ff fd09 	bl	8012798 <_Balloc>
 8012d86:	b930      	cbnz	r0, 8012d96 <__mdiff+0x2e>
 8012d88:	4b3a      	ldr	r3, [pc, #232]	; (8012e74 <__mdiff+0x10c>)
 8012d8a:	4602      	mov	r2, r0
 8012d8c:	f240 2132 	movw	r1, #562	; 0x232
 8012d90:	4839      	ldr	r0, [pc, #228]	; (8012e78 <__mdiff+0x110>)
 8012d92:	f000 fc4f 	bl	8013634 <__assert_func>
 8012d96:	2301      	movs	r3, #1
 8012d98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012d9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012da0:	bfa4      	itt	ge
 8012da2:	4643      	movge	r3, r8
 8012da4:	46a0      	movge	r8, r4
 8012da6:	4630      	mov	r0, r6
 8012da8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012dac:	bfa6      	itte	ge
 8012dae:	461c      	movge	r4, r3
 8012db0:	2500      	movge	r5, #0
 8012db2:	2501      	movlt	r5, #1
 8012db4:	f7ff fcf0 	bl	8012798 <_Balloc>
 8012db8:	b920      	cbnz	r0, 8012dc4 <__mdiff+0x5c>
 8012dba:	4b2e      	ldr	r3, [pc, #184]	; (8012e74 <__mdiff+0x10c>)
 8012dbc:	4602      	mov	r2, r0
 8012dbe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012dc2:	e7e5      	b.n	8012d90 <__mdiff+0x28>
 8012dc4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012dc8:	6926      	ldr	r6, [r4, #16]
 8012dca:	60c5      	str	r5, [r0, #12]
 8012dcc:	f104 0914 	add.w	r9, r4, #20
 8012dd0:	f108 0514 	add.w	r5, r8, #20
 8012dd4:	f100 0e14 	add.w	lr, r0, #20
 8012dd8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012ddc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012de0:	f108 0210 	add.w	r2, r8, #16
 8012de4:	46f2      	mov	sl, lr
 8012de6:	2100      	movs	r1, #0
 8012de8:	f859 3b04 	ldr.w	r3, [r9], #4
 8012dec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012df0:	fa1f f883 	uxth.w	r8, r3
 8012df4:	fa11 f18b 	uxtah	r1, r1, fp
 8012df8:	0c1b      	lsrs	r3, r3, #16
 8012dfa:	eba1 0808 	sub.w	r8, r1, r8
 8012dfe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012e02:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012e06:	fa1f f888 	uxth.w	r8, r8
 8012e0a:	1419      	asrs	r1, r3, #16
 8012e0c:	454e      	cmp	r6, r9
 8012e0e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012e12:	f84a 3b04 	str.w	r3, [sl], #4
 8012e16:	d8e7      	bhi.n	8012de8 <__mdiff+0x80>
 8012e18:	1b33      	subs	r3, r6, r4
 8012e1a:	3b15      	subs	r3, #21
 8012e1c:	f023 0303 	bic.w	r3, r3, #3
 8012e20:	3304      	adds	r3, #4
 8012e22:	3415      	adds	r4, #21
 8012e24:	42a6      	cmp	r6, r4
 8012e26:	bf38      	it	cc
 8012e28:	2304      	movcc	r3, #4
 8012e2a:	441d      	add	r5, r3
 8012e2c:	4473      	add	r3, lr
 8012e2e:	469e      	mov	lr, r3
 8012e30:	462e      	mov	r6, r5
 8012e32:	4566      	cmp	r6, ip
 8012e34:	d30e      	bcc.n	8012e54 <__mdiff+0xec>
 8012e36:	f10c 0203 	add.w	r2, ip, #3
 8012e3a:	1b52      	subs	r2, r2, r5
 8012e3c:	f022 0203 	bic.w	r2, r2, #3
 8012e40:	3d03      	subs	r5, #3
 8012e42:	45ac      	cmp	ip, r5
 8012e44:	bf38      	it	cc
 8012e46:	2200      	movcc	r2, #0
 8012e48:	441a      	add	r2, r3
 8012e4a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012e4e:	b17b      	cbz	r3, 8012e70 <__mdiff+0x108>
 8012e50:	6107      	str	r7, [r0, #16]
 8012e52:	e7a3      	b.n	8012d9c <__mdiff+0x34>
 8012e54:	f856 8b04 	ldr.w	r8, [r6], #4
 8012e58:	fa11 f288 	uxtah	r2, r1, r8
 8012e5c:	1414      	asrs	r4, r2, #16
 8012e5e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012e62:	b292      	uxth	r2, r2
 8012e64:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012e68:	f84e 2b04 	str.w	r2, [lr], #4
 8012e6c:	1421      	asrs	r1, r4, #16
 8012e6e:	e7e0      	b.n	8012e32 <__mdiff+0xca>
 8012e70:	3f01      	subs	r7, #1
 8012e72:	e7ea      	b.n	8012e4a <__mdiff+0xe2>
 8012e74:	08014fd0 	.word	0x08014fd0
 8012e78:	0801505c 	.word	0x0801505c

08012e7c <__ulp>:
 8012e7c:	b082      	sub	sp, #8
 8012e7e:	ed8d 0b00 	vstr	d0, [sp]
 8012e82:	9b01      	ldr	r3, [sp, #4]
 8012e84:	4912      	ldr	r1, [pc, #72]	; (8012ed0 <__ulp+0x54>)
 8012e86:	4019      	ands	r1, r3
 8012e88:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012e8c:	2900      	cmp	r1, #0
 8012e8e:	dd05      	ble.n	8012e9c <__ulp+0x20>
 8012e90:	2200      	movs	r2, #0
 8012e92:	460b      	mov	r3, r1
 8012e94:	ec43 2b10 	vmov	d0, r2, r3
 8012e98:	b002      	add	sp, #8
 8012e9a:	4770      	bx	lr
 8012e9c:	4249      	negs	r1, r1
 8012e9e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012ea2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012ea6:	f04f 0200 	mov.w	r2, #0
 8012eaa:	f04f 0300 	mov.w	r3, #0
 8012eae:	da04      	bge.n	8012eba <__ulp+0x3e>
 8012eb0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012eb4:	fa41 f300 	asr.w	r3, r1, r0
 8012eb8:	e7ec      	b.n	8012e94 <__ulp+0x18>
 8012eba:	f1a0 0114 	sub.w	r1, r0, #20
 8012ebe:	291e      	cmp	r1, #30
 8012ec0:	bfda      	itte	le
 8012ec2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012ec6:	fa20 f101 	lsrle.w	r1, r0, r1
 8012eca:	2101      	movgt	r1, #1
 8012ecc:	460a      	mov	r2, r1
 8012ece:	e7e1      	b.n	8012e94 <__ulp+0x18>
 8012ed0:	7ff00000 	.word	0x7ff00000

08012ed4 <__b2d>:
 8012ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ed6:	6905      	ldr	r5, [r0, #16]
 8012ed8:	f100 0714 	add.w	r7, r0, #20
 8012edc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012ee0:	1f2e      	subs	r6, r5, #4
 8012ee2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012ee6:	4620      	mov	r0, r4
 8012ee8:	f7ff fd48 	bl	801297c <__hi0bits>
 8012eec:	f1c0 0320 	rsb	r3, r0, #32
 8012ef0:	280a      	cmp	r0, #10
 8012ef2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012f70 <__b2d+0x9c>
 8012ef6:	600b      	str	r3, [r1, #0]
 8012ef8:	dc14      	bgt.n	8012f24 <__b2d+0x50>
 8012efa:	f1c0 0e0b 	rsb	lr, r0, #11
 8012efe:	fa24 f10e 	lsr.w	r1, r4, lr
 8012f02:	42b7      	cmp	r7, r6
 8012f04:	ea41 030c 	orr.w	r3, r1, ip
 8012f08:	bf34      	ite	cc
 8012f0a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012f0e:	2100      	movcs	r1, #0
 8012f10:	3015      	adds	r0, #21
 8012f12:	fa04 f000 	lsl.w	r0, r4, r0
 8012f16:	fa21 f10e 	lsr.w	r1, r1, lr
 8012f1a:	ea40 0201 	orr.w	r2, r0, r1
 8012f1e:	ec43 2b10 	vmov	d0, r2, r3
 8012f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f24:	42b7      	cmp	r7, r6
 8012f26:	bf3a      	itte	cc
 8012f28:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012f2c:	f1a5 0608 	subcc.w	r6, r5, #8
 8012f30:	2100      	movcs	r1, #0
 8012f32:	380b      	subs	r0, #11
 8012f34:	d017      	beq.n	8012f66 <__b2d+0x92>
 8012f36:	f1c0 0c20 	rsb	ip, r0, #32
 8012f3a:	fa04 f500 	lsl.w	r5, r4, r0
 8012f3e:	42be      	cmp	r6, r7
 8012f40:	fa21 f40c 	lsr.w	r4, r1, ip
 8012f44:	ea45 0504 	orr.w	r5, r5, r4
 8012f48:	bf8c      	ite	hi
 8012f4a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012f4e:	2400      	movls	r4, #0
 8012f50:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012f54:	fa01 f000 	lsl.w	r0, r1, r0
 8012f58:	fa24 f40c 	lsr.w	r4, r4, ip
 8012f5c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012f60:	ea40 0204 	orr.w	r2, r0, r4
 8012f64:	e7db      	b.n	8012f1e <__b2d+0x4a>
 8012f66:	ea44 030c 	orr.w	r3, r4, ip
 8012f6a:	460a      	mov	r2, r1
 8012f6c:	e7d7      	b.n	8012f1e <__b2d+0x4a>
 8012f6e:	bf00      	nop
 8012f70:	3ff00000 	.word	0x3ff00000

08012f74 <__d2b>:
 8012f74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012f78:	4689      	mov	r9, r1
 8012f7a:	2101      	movs	r1, #1
 8012f7c:	ec57 6b10 	vmov	r6, r7, d0
 8012f80:	4690      	mov	r8, r2
 8012f82:	f7ff fc09 	bl	8012798 <_Balloc>
 8012f86:	4604      	mov	r4, r0
 8012f88:	b930      	cbnz	r0, 8012f98 <__d2b+0x24>
 8012f8a:	4602      	mov	r2, r0
 8012f8c:	4b25      	ldr	r3, [pc, #148]	; (8013024 <__d2b+0xb0>)
 8012f8e:	4826      	ldr	r0, [pc, #152]	; (8013028 <__d2b+0xb4>)
 8012f90:	f240 310a 	movw	r1, #778	; 0x30a
 8012f94:	f000 fb4e 	bl	8013634 <__assert_func>
 8012f98:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012f9c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012fa0:	bb35      	cbnz	r5, 8012ff0 <__d2b+0x7c>
 8012fa2:	2e00      	cmp	r6, #0
 8012fa4:	9301      	str	r3, [sp, #4]
 8012fa6:	d028      	beq.n	8012ffa <__d2b+0x86>
 8012fa8:	4668      	mov	r0, sp
 8012faa:	9600      	str	r6, [sp, #0]
 8012fac:	f7ff fd06 	bl	80129bc <__lo0bits>
 8012fb0:	9900      	ldr	r1, [sp, #0]
 8012fb2:	b300      	cbz	r0, 8012ff6 <__d2b+0x82>
 8012fb4:	9a01      	ldr	r2, [sp, #4]
 8012fb6:	f1c0 0320 	rsb	r3, r0, #32
 8012fba:	fa02 f303 	lsl.w	r3, r2, r3
 8012fbe:	430b      	orrs	r3, r1
 8012fc0:	40c2      	lsrs	r2, r0
 8012fc2:	6163      	str	r3, [r4, #20]
 8012fc4:	9201      	str	r2, [sp, #4]
 8012fc6:	9b01      	ldr	r3, [sp, #4]
 8012fc8:	61a3      	str	r3, [r4, #24]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	bf14      	ite	ne
 8012fce:	2202      	movne	r2, #2
 8012fd0:	2201      	moveq	r2, #1
 8012fd2:	6122      	str	r2, [r4, #16]
 8012fd4:	b1d5      	cbz	r5, 801300c <__d2b+0x98>
 8012fd6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012fda:	4405      	add	r5, r0
 8012fdc:	f8c9 5000 	str.w	r5, [r9]
 8012fe0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012fe4:	f8c8 0000 	str.w	r0, [r8]
 8012fe8:	4620      	mov	r0, r4
 8012fea:	b003      	add	sp, #12
 8012fec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ff0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012ff4:	e7d5      	b.n	8012fa2 <__d2b+0x2e>
 8012ff6:	6161      	str	r1, [r4, #20]
 8012ff8:	e7e5      	b.n	8012fc6 <__d2b+0x52>
 8012ffa:	a801      	add	r0, sp, #4
 8012ffc:	f7ff fcde 	bl	80129bc <__lo0bits>
 8013000:	9b01      	ldr	r3, [sp, #4]
 8013002:	6163      	str	r3, [r4, #20]
 8013004:	2201      	movs	r2, #1
 8013006:	6122      	str	r2, [r4, #16]
 8013008:	3020      	adds	r0, #32
 801300a:	e7e3      	b.n	8012fd4 <__d2b+0x60>
 801300c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013010:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013014:	f8c9 0000 	str.w	r0, [r9]
 8013018:	6918      	ldr	r0, [r3, #16]
 801301a:	f7ff fcaf 	bl	801297c <__hi0bits>
 801301e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013022:	e7df      	b.n	8012fe4 <__d2b+0x70>
 8013024:	08014fd0 	.word	0x08014fd0
 8013028:	0801505c 	.word	0x0801505c

0801302c <__ratio>:
 801302c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013030:	4688      	mov	r8, r1
 8013032:	4669      	mov	r1, sp
 8013034:	4681      	mov	r9, r0
 8013036:	f7ff ff4d 	bl	8012ed4 <__b2d>
 801303a:	a901      	add	r1, sp, #4
 801303c:	4640      	mov	r0, r8
 801303e:	ec55 4b10 	vmov	r4, r5, d0
 8013042:	f7ff ff47 	bl	8012ed4 <__b2d>
 8013046:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801304a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801304e:	eba3 0c02 	sub.w	ip, r3, r2
 8013052:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013056:	1a9b      	subs	r3, r3, r2
 8013058:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801305c:	ec51 0b10 	vmov	r0, r1, d0
 8013060:	2b00      	cmp	r3, #0
 8013062:	bfd6      	itet	le
 8013064:	460a      	movle	r2, r1
 8013066:	462a      	movgt	r2, r5
 8013068:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801306c:	468b      	mov	fp, r1
 801306e:	462f      	mov	r7, r5
 8013070:	bfd4      	ite	le
 8013072:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013076:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801307a:	4620      	mov	r0, r4
 801307c:	ee10 2a10 	vmov	r2, s0
 8013080:	465b      	mov	r3, fp
 8013082:	4639      	mov	r1, r7
 8013084:	f7ed fbe2 	bl	800084c <__aeabi_ddiv>
 8013088:	ec41 0b10 	vmov	d0, r0, r1
 801308c:	b003      	add	sp, #12
 801308e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013092 <__copybits>:
 8013092:	3901      	subs	r1, #1
 8013094:	b570      	push	{r4, r5, r6, lr}
 8013096:	1149      	asrs	r1, r1, #5
 8013098:	6914      	ldr	r4, [r2, #16]
 801309a:	3101      	adds	r1, #1
 801309c:	f102 0314 	add.w	r3, r2, #20
 80130a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80130a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80130a8:	1f05      	subs	r5, r0, #4
 80130aa:	42a3      	cmp	r3, r4
 80130ac:	d30c      	bcc.n	80130c8 <__copybits+0x36>
 80130ae:	1aa3      	subs	r3, r4, r2
 80130b0:	3b11      	subs	r3, #17
 80130b2:	f023 0303 	bic.w	r3, r3, #3
 80130b6:	3211      	adds	r2, #17
 80130b8:	42a2      	cmp	r2, r4
 80130ba:	bf88      	it	hi
 80130bc:	2300      	movhi	r3, #0
 80130be:	4418      	add	r0, r3
 80130c0:	2300      	movs	r3, #0
 80130c2:	4288      	cmp	r0, r1
 80130c4:	d305      	bcc.n	80130d2 <__copybits+0x40>
 80130c6:	bd70      	pop	{r4, r5, r6, pc}
 80130c8:	f853 6b04 	ldr.w	r6, [r3], #4
 80130cc:	f845 6f04 	str.w	r6, [r5, #4]!
 80130d0:	e7eb      	b.n	80130aa <__copybits+0x18>
 80130d2:	f840 3b04 	str.w	r3, [r0], #4
 80130d6:	e7f4      	b.n	80130c2 <__copybits+0x30>

080130d8 <__any_on>:
 80130d8:	f100 0214 	add.w	r2, r0, #20
 80130dc:	6900      	ldr	r0, [r0, #16]
 80130de:	114b      	asrs	r3, r1, #5
 80130e0:	4298      	cmp	r0, r3
 80130e2:	b510      	push	{r4, lr}
 80130e4:	db11      	blt.n	801310a <__any_on+0x32>
 80130e6:	dd0a      	ble.n	80130fe <__any_on+0x26>
 80130e8:	f011 011f 	ands.w	r1, r1, #31
 80130ec:	d007      	beq.n	80130fe <__any_on+0x26>
 80130ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80130f2:	fa24 f001 	lsr.w	r0, r4, r1
 80130f6:	fa00 f101 	lsl.w	r1, r0, r1
 80130fa:	428c      	cmp	r4, r1
 80130fc:	d10b      	bne.n	8013116 <__any_on+0x3e>
 80130fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013102:	4293      	cmp	r3, r2
 8013104:	d803      	bhi.n	801310e <__any_on+0x36>
 8013106:	2000      	movs	r0, #0
 8013108:	bd10      	pop	{r4, pc}
 801310a:	4603      	mov	r3, r0
 801310c:	e7f7      	b.n	80130fe <__any_on+0x26>
 801310e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013112:	2900      	cmp	r1, #0
 8013114:	d0f5      	beq.n	8013102 <__any_on+0x2a>
 8013116:	2001      	movs	r0, #1
 8013118:	e7f6      	b.n	8013108 <__any_on+0x30>

0801311a <_calloc_r>:
 801311a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801311c:	fba1 2402 	umull	r2, r4, r1, r2
 8013120:	b94c      	cbnz	r4, 8013136 <_calloc_r+0x1c>
 8013122:	4611      	mov	r1, r2
 8013124:	9201      	str	r2, [sp, #4]
 8013126:	f000 f87b 	bl	8013220 <_malloc_r>
 801312a:	9a01      	ldr	r2, [sp, #4]
 801312c:	4605      	mov	r5, r0
 801312e:	b930      	cbnz	r0, 801313e <_calloc_r+0x24>
 8013130:	4628      	mov	r0, r5
 8013132:	b003      	add	sp, #12
 8013134:	bd30      	pop	{r4, r5, pc}
 8013136:	220c      	movs	r2, #12
 8013138:	6002      	str	r2, [r0, #0]
 801313a:	2500      	movs	r5, #0
 801313c:	e7f8      	b.n	8013130 <_calloc_r+0x16>
 801313e:	4621      	mov	r1, r4
 8013140:	f7fc fbcc 	bl	800f8dc <memset>
 8013144:	e7f4      	b.n	8013130 <_calloc_r+0x16>
	...

08013148 <_free_r>:
 8013148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801314a:	2900      	cmp	r1, #0
 801314c:	d044      	beq.n	80131d8 <_free_r+0x90>
 801314e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013152:	9001      	str	r0, [sp, #4]
 8013154:	2b00      	cmp	r3, #0
 8013156:	f1a1 0404 	sub.w	r4, r1, #4
 801315a:	bfb8      	it	lt
 801315c:	18e4      	addlt	r4, r4, r3
 801315e:	f000 fab3 	bl	80136c8 <__malloc_lock>
 8013162:	4a1e      	ldr	r2, [pc, #120]	; (80131dc <_free_r+0x94>)
 8013164:	9801      	ldr	r0, [sp, #4]
 8013166:	6813      	ldr	r3, [r2, #0]
 8013168:	b933      	cbnz	r3, 8013178 <_free_r+0x30>
 801316a:	6063      	str	r3, [r4, #4]
 801316c:	6014      	str	r4, [r2, #0]
 801316e:	b003      	add	sp, #12
 8013170:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013174:	f000 baae 	b.w	80136d4 <__malloc_unlock>
 8013178:	42a3      	cmp	r3, r4
 801317a:	d908      	bls.n	801318e <_free_r+0x46>
 801317c:	6825      	ldr	r5, [r4, #0]
 801317e:	1961      	adds	r1, r4, r5
 8013180:	428b      	cmp	r3, r1
 8013182:	bf01      	itttt	eq
 8013184:	6819      	ldreq	r1, [r3, #0]
 8013186:	685b      	ldreq	r3, [r3, #4]
 8013188:	1949      	addeq	r1, r1, r5
 801318a:	6021      	streq	r1, [r4, #0]
 801318c:	e7ed      	b.n	801316a <_free_r+0x22>
 801318e:	461a      	mov	r2, r3
 8013190:	685b      	ldr	r3, [r3, #4]
 8013192:	b10b      	cbz	r3, 8013198 <_free_r+0x50>
 8013194:	42a3      	cmp	r3, r4
 8013196:	d9fa      	bls.n	801318e <_free_r+0x46>
 8013198:	6811      	ldr	r1, [r2, #0]
 801319a:	1855      	adds	r5, r2, r1
 801319c:	42a5      	cmp	r5, r4
 801319e:	d10b      	bne.n	80131b8 <_free_r+0x70>
 80131a0:	6824      	ldr	r4, [r4, #0]
 80131a2:	4421      	add	r1, r4
 80131a4:	1854      	adds	r4, r2, r1
 80131a6:	42a3      	cmp	r3, r4
 80131a8:	6011      	str	r1, [r2, #0]
 80131aa:	d1e0      	bne.n	801316e <_free_r+0x26>
 80131ac:	681c      	ldr	r4, [r3, #0]
 80131ae:	685b      	ldr	r3, [r3, #4]
 80131b0:	6053      	str	r3, [r2, #4]
 80131b2:	4421      	add	r1, r4
 80131b4:	6011      	str	r1, [r2, #0]
 80131b6:	e7da      	b.n	801316e <_free_r+0x26>
 80131b8:	d902      	bls.n	80131c0 <_free_r+0x78>
 80131ba:	230c      	movs	r3, #12
 80131bc:	6003      	str	r3, [r0, #0]
 80131be:	e7d6      	b.n	801316e <_free_r+0x26>
 80131c0:	6825      	ldr	r5, [r4, #0]
 80131c2:	1961      	adds	r1, r4, r5
 80131c4:	428b      	cmp	r3, r1
 80131c6:	bf04      	itt	eq
 80131c8:	6819      	ldreq	r1, [r3, #0]
 80131ca:	685b      	ldreq	r3, [r3, #4]
 80131cc:	6063      	str	r3, [r4, #4]
 80131ce:	bf04      	itt	eq
 80131d0:	1949      	addeq	r1, r1, r5
 80131d2:	6021      	streq	r1, [r4, #0]
 80131d4:	6054      	str	r4, [r2, #4]
 80131d6:	e7ca      	b.n	801316e <_free_r+0x26>
 80131d8:	b003      	add	sp, #12
 80131da:	bd30      	pop	{r4, r5, pc}
 80131dc:	200063bc 	.word	0x200063bc

080131e0 <sbrk_aligned>:
 80131e0:	b570      	push	{r4, r5, r6, lr}
 80131e2:	4e0e      	ldr	r6, [pc, #56]	; (801321c <sbrk_aligned+0x3c>)
 80131e4:	460c      	mov	r4, r1
 80131e6:	6831      	ldr	r1, [r6, #0]
 80131e8:	4605      	mov	r5, r0
 80131ea:	b911      	cbnz	r1, 80131f2 <sbrk_aligned+0x12>
 80131ec:	f000 f9f0 	bl	80135d0 <_sbrk_r>
 80131f0:	6030      	str	r0, [r6, #0]
 80131f2:	4621      	mov	r1, r4
 80131f4:	4628      	mov	r0, r5
 80131f6:	f000 f9eb 	bl	80135d0 <_sbrk_r>
 80131fa:	1c43      	adds	r3, r0, #1
 80131fc:	d00a      	beq.n	8013214 <sbrk_aligned+0x34>
 80131fe:	1cc4      	adds	r4, r0, #3
 8013200:	f024 0403 	bic.w	r4, r4, #3
 8013204:	42a0      	cmp	r0, r4
 8013206:	d007      	beq.n	8013218 <sbrk_aligned+0x38>
 8013208:	1a21      	subs	r1, r4, r0
 801320a:	4628      	mov	r0, r5
 801320c:	f000 f9e0 	bl	80135d0 <_sbrk_r>
 8013210:	3001      	adds	r0, #1
 8013212:	d101      	bne.n	8013218 <sbrk_aligned+0x38>
 8013214:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013218:	4620      	mov	r0, r4
 801321a:	bd70      	pop	{r4, r5, r6, pc}
 801321c:	200063c0 	.word	0x200063c0

08013220 <_malloc_r>:
 8013220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013224:	1ccd      	adds	r5, r1, #3
 8013226:	f025 0503 	bic.w	r5, r5, #3
 801322a:	3508      	adds	r5, #8
 801322c:	2d0c      	cmp	r5, #12
 801322e:	bf38      	it	cc
 8013230:	250c      	movcc	r5, #12
 8013232:	2d00      	cmp	r5, #0
 8013234:	4607      	mov	r7, r0
 8013236:	db01      	blt.n	801323c <_malloc_r+0x1c>
 8013238:	42a9      	cmp	r1, r5
 801323a:	d905      	bls.n	8013248 <_malloc_r+0x28>
 801323c:	230c      	movs	r3, #12
 801323e:	603b      	str	r3, [r7, #0]
 8013240:	2600      	movs	r6, #0
 8013242:	4630      	mov	r0, r6
 8013244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013248:	4e2e      	ldr	r6, [pc, #184]	; (8013304 <_malloc_r+0xe4>)
 801324a:	f000 fa3d 	bl	80136c8 <__malloc_lock>
 801324e:	6833      	ldr	r3, [r6, #0]
 8013250:	461c      	mov	r4, r3
 8013252:	bb34      	cbnz	r4, 80132a2 <_malloc_r+0x82>
 8013254:	4629      	mov	r1, r5
 8013256:	4638      	mov	r0, r7
 8013258:	f7ff ffc2 	bl	80131e0 <sbrk_aligned>
 801325c:	1c43      	adds	r3, r0, #1
 801325e:	4604      	mov	r4, r0
 8013260:	d14d      	bne.n	80132fe <_malloc_r+0xde>
 8013262:	6834      	ldr	r4, [r6, #0]
 8013264:	4626      	mov	r6, r4
 8013266:	2e00      	cmp	r6, #0
 8013268:	d140      	bne.n	80132ec <_malloc_r+0xcc>
 801326a:	6823      	ldr	r3, [r4, #0]
 801326c:	4631      	mov	r1, r6
 801326e:	4638      	mov	r0, r7
 8013270:	eb04 0803 	add.w	r8, r4, r3
 8013274:	f000 f9ac 	bl	80135d0 <_sbrk_r>
 8013278:	4580      	cmp	r8, r0
 801327a:	d13a      	bne.n	80132f2 <_malloc_r+0xd2>
 801327c:	6821      	ldr	r1, [r4, #0]
 801327e:	3503      	adds	r5, #3
 8013280:	1a6d      	subs	r5, r5, r1
 8013282:	f025 0503 	bic.w	r5, r5, #3
 8013286:	3508      	adds	r5, #8
 8013288:	2d0c      	cmp	r5, #12
 801328a:	bf38      	it	cc
 801328c:	250c      	movcc	r5, #12
 801328e:	4629      	mov	r1, r5
 8013290:	4638      	mov	r0, r7
 8013292:	f7ff ffa5 	bl	80131e0 <sbrk_aligned>
 8013296:	3001      	adds	r0, #1
 8013298:	d02b      	beq.n	80132f2 <_malloc_r+0xd2>
 801329a:	6823      	ldr	r3, [r4, #0]
 801329c:	442b      	add	r3, r5
 801329e:	6023      	str	r3, [r4, #0]
 80132a0:	e00e      	b.n	80132c0 <_malloc_r+0xa0>
 80132a2:	6822      	ldr	r2, [r4, #0]
 80132a4:	1b52      	subs	r2, r2, r5
 80132a6:	d41e      	bmi.n	80132e6 <_malloc_r+0xc6>
 80132a8:	2a0b      	cmp	r2, #11
 80132aa:	d916      	bls.n	80132da <_malloc_r+0xba>
 80132ac:	1961      	adds	r1, r4, r5
 80132ae:	42a3      	cmp	r3, r4
 80132b0:	6025      	str	r5, [r4, #0]
 80132b2:	bf18      	it	ne
 80132b4:	6059      	strne	r1, [r3, #4]
 80132b6:	6863      	ldr	r3, [r4, #4]
 80132b8:	bf08      	it	eq
 80132ba:	6031      	streq	r1, [r6, #0]
 80132bc:	5162      	str	r2, [r4, r5]
 80132be:	604b      	str	r3, [r1, #4]
 80132c0:	4638      	mov	r0, r7
 80132c2:	f104 060b 	add.w	r6, r4, #11
 80132c6:	f000 fa05 	bl	80136d4 <__malloc_unlock>
 80132ca:	f026 0607 	bic.w	r6, r6, #7
 80132ce:	1d23      	adds	r3, r4, #4
 80132d0:	1af2      	subs	r2, r6, r3
 80132d2:	d0b6      	beq.n	8013242 <_malloc_r+0x22>
 80132d4:	1b9b      	subs	r3, r3, r6
 80132d6:	50a3      	str	r3, [r4, r2]
 80132d8:	e7b3      	b.n	8013242 <_malloc_r+0x22>
 80132da:	6862      	ldr	r2, [r4, #4]
 80132dc:	42a3      	cmp	r3, r4
 80132de:	bf0c      	ite	eq
 80132e0:	6032      	streq	r2, [r6, #0]
 80132e2:	605a      	strne	r2, [r3, #4]
 80132e4:	e7ec      	b.n	80132c0 <_malloc_r+0xa0>
 80132e6:	4623      	mov	r3, r4
 80132e8:	6864      	ldr	r4, [r4, #4]
 80132ea:	e7b2      	b.n	8013252 <_malloc_r+0x32>
 80132ec:	4634      	mov	r4, r6
 80132ee:	6876      	ldr	r6, [r6, #4]
 80132f0:	e7b9      	b.n	8013266 <_malloc_r+0x46>
 80132f2:	230c      	movs	r3, #12
 80132f4:	603b      	str	r3, [r7, #0]
 80132f6:	4638      	mov	r0, r7
 80132f8:	f000 f9ec 	bl	80136d4 <__malloc_unlock>
 80132fc:	e7a1      	b.n	8013242 <_malloc_r+0x22>
 80132fe:	6025      	str	r5, [r4, #0]
 8013300:	e7de      	b.n	80132c0 <_malloc_r+0xa0>
 8013302:	bf00      	nop
 8013304:	200063bc 	.word	0x200063bc

08013308 <__ssputs_r>:
 8013308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801330c:	688e      	ldr	r6, [r1, #8]
 801330e:	429e      	cmp	r6, r3
 8013310:	4682      	mov	sl, r0
 8013312:	460c      	mov	r4, r1
 8013314:	4690      	mov	r8, r2
 8013316:	461f      	mov	r7, r3
 8013318:	d838      	bhi.n	801338c <__ssputs_r+0x84>
 801331a:	898a      	ldrh	r2, [r1, #12]
 801331c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013320:	d032      	beq.n	8013388 <__ssputs_r+0x80>
 8013322:	6825      	ldr	r5, [r4, #0]
 8013324:	6909      	ldr	r1, [r1, #16]
 8013326:	eba5 0901 	sub.w	r9, r5, r1
 801332a:	6965      	ldr	r5, [r4, #20]
 801332c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013330:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013334:	3301      	adds	r3, #1
 8013336:	444b      	add	r3, r9
 8013338:	106d      	asrs	r5, r5, #1
 801333a:	429d      	cmp	r5, r3
 801333c:	bf38      	it	cc
 801333e:	461d      	movcc	r5, r3
 8013340:	0553      	lsls	r3, r2, #21
 8013342:	d531      	bpl.n	80133a8 <__ssputs_r+0xa0>
 8013344:	4629      	mov	r1, r5
 8013346:	f7ff ff6b 	bl	8013220 <_malloc_r>
 801334a:	4606      	mov	r6, r0
 801334c:	b950      	cbnz	r0, 8013364 <__ssputs_r+0x5c>
 801334e:	230c      	movs	r3, #12
 8013350:	f8ca 3000 	str.w	r3, [sl]
 8013354:	89a3      	ldrh	r3, [r4, #12]
 8013356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801335a:	81a3      	strh	r3, [r4, #12]
 801335c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013364:	6921      	ldr	r1, [r4, #16]
 8013366:	464a      	mov	r2, r9
 8013368:	f7fc faaa 	bl	800f8c0 <memcpy>
 801336c:	89a3      	ldrh	r3, [r4, #12]
 801336e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013376:	81a3      	strh	r3, [r4, #12]
 8013378:	6126      	str	r6, [r4, #16]
 801337a:	6165      	str	r5, [r4, #20]
 801337c:	444e      	add	r6, r9
 801337e:	eba5 0509 	sub.w	r5, r5, r9
 8013382:	6026      	str	r6, [r4, #0]
 8013384:	60a5      	str	r5, [r4, #8]
 8013386:	463e      	mov	r6, r7
 8013388:	42be      	cmp	r6, r7
 801338a:	d900      	bls.n	801338e <__ssputs_r+0x86>
 801338c:	463e      	mov	r6, r7
 801338e:	6820      	ldr	r0, [r4, #0]
 8013390:	4632      	mov	r2, r6
 8013392:	4641      	mov	r1, r8
 8013394:	f000 f97e 	bl	8013694 <memmove>
 8013398:	68a3      	ldr	r3, [r4, #8]
 801339a:	1b9b      	subs	r3, r3, r6
 801339c:	60a3      	str	r3, [r4, #8]
 801339e:	6823      	ldr	r3, [r4, #0]
 80133a0:	4433      	add	r3, r6
 80133a2:	6023      	str	r3, [r4, #0]
 80133a4:	2000      	movs	r0, #0
 80133a6:	e7db      	b.n	8013360 <__ssputs_r+0x58>
 80133a8:	462a      	mov	r2, r5
 80133aa:	f000 f999 	bl	80136e0 <_realloc_r>
 80133ae:	4606      	mov	r6, r0
 80133b0:	2800      	cmp	r0, #0
 80133b2:	d1e1      	bne.n	8013378 <__ssputs_r+0x70>
 80133b4:	6921      	ldr	r1, [r4, #16]
 80133b6:	4650      	mov	r0, sl
 80133b8:	f7ff fec6 	bl	8013148 <_free_r>
 80133bc:	e7c7      	b.n	801334e <__ssputs_r+0x46>
	...

080133c0 <_svfiprintf_r>:
 80133c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133c4:	4698      	mov	r8, r3
 80133c6:	898b      	ldrh	r3, [r1, #12]
 80133c8:	061b      	lsls	r3, r3, #24
 80133ca:	b09d      	sub	sp, #116	; 0x74
 80133cc:	4607      	mov	r7, r0
 80133ce:	460d      	mov	r5, r1
 80133d0:	4614      	mov	r4, r2
 80133d2:	d50e      	bpl.n	80133f2 <_svfiprintf_r+0x32>
 80133d4:	690b      	ldr	r3, [r1, #16]
 80133d6:	b963      	cbnz	r3, 80133f2 <_svfiprintf_r+0x32>
 80133d8:	2140      	movs	r1, #64	; 0x40
 80133da:	f7ff ff21 	bl	8013220 <_malloc_r>
 80133de:	6028      	str	r0, [r5, #0]
 80133e0:	6128      	str	r0, [r5, #16]
 80133e2:	b920      	cbnz	r0, 80133ee <_svfiprintf_r+0x2e>
 80133e4:	230c      	movs	r3, #12
 80133e6:	603b      	str	r3, [r7, #0]
 80133e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80133ec:	e0d1      	b.n	8013592 <_svfiprintf_r+0x1d2>
 80133ee:	2340      	movs	r3, #64	; 0x40
 80133f0:	616b      	str	r3, [r5, #20]
 80133f2:	2300      	movs	r3, #0
 80133f4:	9309      	str	r3, [sp, #36]	; 0x24
 80133f6:	2320      	movs	r3, #32
 80133f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80133fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8013400:	2330      	movs	r3, #48	; 0x30
 8013402:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80135ac <_svfiprintf_r+0x1ec>
 8013406:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801340a:	f04f 0901 	mov.w	r9, #1
 801340e:	4623      	mov	r3, r4
 8013410:	469a      	mov	sl, r3
 8013412:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013416:	b10a      	cbz	r2, 801341c <_svfiprintf_r+0x5c>
 8013418:	2a25      	cmp	r2, #37	; 0x25
 801341a:	d1f9      	bne.n	8013410 <_svfiprintf_r+0x50>
 801341c:	ebba 0b04 	subs.w	fp, sl, r4
 8013420:	d00b      	beq.n	801343a <_svfiprintf_r+0x7a>
 8013422:	465b      	mov	r3, fp
 8013424:	4622      	mov	r2, r4
 8013426:	4629      	mov	r1, r5
 8013428:	4638      	mov	r0, r7
 801342a:	f7ff ff6d 	bl	8013308 <__ssputs_r>
 801342e:	3001      	adds	r0, #1
 8013430:	f000 80aa 	beq.w	8013588 <_svfiprintf_r+0x1c8>
 8013434:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013436:	445a      	add	r2, fp
 8013438:	9209      	str	r2, [sp, #36]	; 0x24
 801343a:	f89a 3000 	ldrb.w	r3, [sl]
 801343e:	2b00      	cmp	r3, #0
 8013440:	f000 80a2 	beq.w	8013588 <_svfiprintf_r+0x1c8>
 8013444:	2300      	movs	r3, #0
 8013446:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801344a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801344e:	f10a 0a01 	add.w	sl, sl, #1
 8013452:	9304      	str	r3, [sp, #16]
 8013454:	9307      	str	r3, [sp, #28]
 8013456:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801345a:	931a      	str	r3, [sp, #104]	; 0x68
 801345c:	4654      	mov	r4, sl
 801345e:	2205      	movs	r2, #5
 8013460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013464:	4851      	ldr	r0, [pc, #324]	; (80135ac <_svfiprintf_r+0x1ec>)
 8013466:	f7ec febb 	bl	80001e0 <memchr>
 801346a:	9a04      	ldr	r2, [sp, #16]
 801346c:	b9d8      	cbnz	r0, 80134a6 <_svfiprintf_r+0xe6>
 801346e:	06d0      	lsls	r0, r2, #27
 8013470:	bf44      	itt	mi
 8013472:	2320      	movmi	r3, #32
 8013474:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013478:	0711      	lsls	r1, r2, #28
 801347a:	bf44      	itt	mi
 801347c:	232b      	movmi	r3, #43	; 0x2b
 801347e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013482:	f89a 3000 	ldrb.w	r3, [sl]
 8013486:	2b2a      	cmp	r3, #42	; 0x2a
 8013488:	d015      	beq.n	80134b6 <_svfiprintf_r+0xf6>
 801348a:	9a07      	ldr	r2, [sp, #28]
 801348c:	4654      	mov	r4, sl
 801348e:	2000      	movs	r0, #0
 8013490:	f04f 0c0a 	mov.w	ip, #10
 8013494:	4621      	mov	r1, r4
 8013496:	f811 3b01 	ldrb.w	r3, [r1], #1
 801349a:	3b30      	subs	r3, #48	; 0x30
 801349c:	2b09      	cmp	r3, #9
 801349e:	d94e      	bls.n	801353e <_svfiprintf_r+0x17e>
 80134a0:	b1b0      	cbz	r0, 80134d0 <_svfiprintf_r+0x110>
 80134a2:	9207      	str	r2, [sp, #28]
 80134a4:	e014      	b.n	80134d0 <_svfiprintf_r+0x110>
 80134a6:	eba0 0308 	sub.w	r3, r0, r8
 80134aa:	fa09 f303 	lsl.w	r3, r9, r3
 80134ae:	4313      	orrs	r3, r2
 80134b0:	9304      	str	r3, [sp, #16]
 80134b2:	46a2      	mov	sl, r4
 80134b4:	e7d2      	b.n	801345c <_svfiprintf_r+0x9c>
 80134b6:	9b03      	ldr	r3, [sp, #12]
 80134b8:	1d19      	adds	r1, r3, #4
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	9103      	str	r1, [sp, #12]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	bfbb      	ittet	lt
 80134c2:	425b      	neglt	r3, r3
 80134c4:	f042 0202 	orrlt.w	r2, r2, #2
 80134c8:	9307      	strge	r3, [sp, #28]
 80134ca:	9307      	strlt	r3, [sp, #28]
 80134cc:	bfb8      	it	lt
 80134ce:	9204      	strlt	r2, [sp, #16]
 80134d0:	7823      	ldrb	r3, [r4, #0]
 80134d2:	2b2e      	cmp	r3, #46	; 0x2e
 80134d4:	d10c      	bne.n	80134f0 <_svfiprintf_r+0x130>
 80134d6:	7863      	ldrb	r3, [r4, #1]
 80134d8:	2b2a      	cmp	r3, #42	; 0x2a
 80134da:	d135      	bne.n	8013548 <_svfiprintf_r+0x188>
 80134dc:	9b03      	ldr	r3, [sp, #12]
 80134de:	1d1a      	adds	r2, r3, #4
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	9203      	str	r2, [sp, #12]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	bfb8      	it	lt
 80134e8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80134ec:	3402      	adds	r4, #2
 80134ee:	9305      	str	r3, [sp, #20]
 80134f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80135bc <_svfiprintf_r+0x1fc>
 80134f4:	7821      	ldrb	r1, [r4, #0]
 80134f6:	2203      	movs	r2, #3
 80134f8:	4650      	mov	r0, sl
 80134fa:	f7ec fe71 	bl	80001e0 <memchr>
 80134fe:	b140      	cbz	r0, 8013512 <_svfiprintf_r+0x152>
 8013500:	2340      	movs	r3, #64	; 0x40
 8013502:	eba0 000a 	sub.w	r0, r0, sl
 8013506:	fa03 f000 	lsl.w	r0, r3, r0
 801350a:	9b04      	ldr	r3, [sp, #16]
 801350c:	4303      	orrs	r3, r0
 801350e:	3401      	adds	r4, #1
 8013510:	9304      	str	r3, [sp, #16]
 8013512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013516:	4826      	ldr	r0, [pc, #152]	; (80135b0 <_svfiprintf_r+0x1f0>)
 8013518:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801351c:	2206      	movs	r2, #6
 801351e:	f7ec fe5f 	bl	80001e0 <memchr>
 8013522:	2800      	cmp	r0, #0
 8013524:	d038      	beq.n	8013598 <_svfiprintf_r+0x1d8>
 8013526:	4b23      	ldr	r3, [pc, #140]	; (80135b4 <_svfiprintf_r+0x1f4>)
 8013528:	bb1b      	cbnz	r3, 8013572 <_svfiprintf_r+0x1b2>
 801352a:	9b03      	ldr	r3, [sp, #12]
 801352c:	3307      	adds	r3, #7
 801352e:	f023 0307 	bic.w	r3, r3, #7
 8013532:	3308      	adds	r3, #8
 8013534:	9303      	str	r3, [sp, #12]
 8013536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013538:	4433      	add	r3, r6
 801353a:	9309      	str	r3, [sp, #36]	; 0x24
 801353c:	e767      	b.n	801340e <_svfiprintf_r+0x4e>
 801353e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013542:	460c      	mov	r4, r1
 8013544:	2001      	movs	r0, #1
 8013546:	e7a5      	b.n	8013494 <_svfiprintf_r+0xd4>
 8013548:	2300      	movs	r3, #0
 801354a:	3401      	adds	r4, #1
 801354c:	9305      	str	r3, [sp, #20]
 801354e:	4619      	mov	r1, r3
 8013550:	f04f 0c0a 	mov.w	ip, #10
 8013554:	4620      	mov	r0, r4
 8013556:	f810 2b01 	ldrb.w	r2, [r0], #1
 801355a:	3a30      	subs	r2, #48	; 0x30
 801355c:	2a09      	cmp	r2, #9
 801355e:	d903      	bls.n	8013568 <_svfiprintf_r+0x1a8>
 8013560:	2b00      	cmp	r3, #0
 8013562:	d0c5      	beq.n	80134f0 <_svfiprintf_r+0x130>
 8013564:	9105      	str	r1, [sp, #20]
 8013566:	e7c3      	b.n	80134f0 <_svfiprintf_r+0x130>
 8013568:	fb0c 2101 	mla	r1, ip, r1, r2
 801356c:	4604      	mov	r4, r0
 801356e:	2301      	movs	r3, #1
 8013570:	e7f0      	b.n	8013554 <_svfiprintf_r+0x194>
 8013572:	ab03      	add	r3, sp, #12
 8013574:	9300      	str	r3, [sp, #0]
 8013576:	462a      	mov	r2, r5
 8013578:	4b0f      	ldr	r3, [pc, #60]	; (80135b8 <_svfiprintf_r+0x1f8>)
 801357a:	a904      	add	r1, sp, #16
 801357c:	4638      	mov	r0, r7
 801357e:	f7fc fa55 	bl	800fa2c <_printf_float>
 8013582:	1c42      	adds	r2, r0, #1
 8013584:	4606      	mov	r6, r0
 8013586:	d1d6      	bne.n	8013536 <_svfiprintf_r+0x176>
 8013588:	89ab      	ldrh	r3, [r5, #12]
 801358a:	065b      	lsls	r3, r3, #25
 801358c:	f53f af2c 	bmi.w	80133e8 <_svfiprintf_r+0x28>
 8013590:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013592:	b01d      	add	sp, #116	; 0x74
 8013594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013598:	ab03      	add	r3, sp, #12
 801359a:	9300      	str	r3, [sp, #0]
 801359c:	462a      	mov	r2, r5
 801359e:	4b06      	ldr	r3, [pc, #24]	; (80135b8 <_svfiprintf_r+0x1f8>)
 80135a0:	a904      	add	r1, sp, #16
 80135a2:	4638      	mov	r0, r7
 80135a4:	f7fc fce6 	bl	800ff74 <_printf_i>
 80135a8:	e7eb      	b.n	8013582 <_svfiprintf_r+0x1c2>
 80135aa:	bf00      	nop
 80135ac:	080151b4 	.word	0x080151b4
 80135b0:	080151be 	.word	0x080151be
 80135b4:	0800fa2d 	.word	0x0800fa2d
 80135b8:	08013309 	.word	0x08013309
 80135bc:	080151ba 	.word	0x080151ba

080135c0 <nan>:
 80135c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80135c8 <nan+0x8>
 80135c4:	4770      	bx	lr
 80135c6:	bf00      	nop
 80135c8:	00000000 	.word	0x00000000
 80135cc:	7ff80000 	.word	0x7ff80000

080135d0 <_sbrk_r>:
 80135d0:	b538      	push	{r3, r4, r5, lr}
 80135d2:	4d06      	ldr	r5, [pc, #24]	; (80135ec <_sbrk_r+0x1c>)
 80135d4:	2300      	movs	r3, #0
 80135d6:	4604      	mov	r4, r0
 80135d8:	4608      	mov	r0, r1
 80135da:	602b      	str	r3, [r5, #0]
 80135dc:	f7f3 f964 	bl	80068a8 <_sbrk>
 80135e0:	1c43      	adds	r3, r0, #1
 80135e2:	d102      	bne.n	80135ea <_sbrk_r+0x1a>
 80135e4:	682b      	ldr	r3, [r5, #0]
 80135e6:	b103      	cbz	r3, 80135ea <_sbrk_r+0x1a>
 80135e8:	6023      	str	r3, [r4, #0]
 80135ea:	bd38      	pop	{r3, r4, r5, pc}
 80135ec:	200063c4 	.word	0x200063c4

080135f0 <strncmp>:
 80135f0:	b510      	push	{r4, lr}
 80135f2:	b17a      	cbz	r2, 8013614 <strncmp+0x24>
 80135f4:	4603      	mov	r3, r0
 80135f6:	3901      	subs	r1, #1
 80135f8:	1884      	adds	r4, r0, r2
 80135fa:	f813 0b01 	ldrb.w	r0, [r3], #1
 80135fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013602:	4290      	cmp	r0, r2
 8013604:	d101      	bne.n	801360a <strncmp+0x1a>
 8013606:	42a3      	cmp	r3, r4
 8013608:	d101      	bne.n	801360e <strncmp+0x1e>
 801360a:	1a80      	subs	r0, r0, r2
 801360c:	bd10      	pop	{r4, pc}
 801360e:	2800      	cmp	r0, #0
 8013610:	d1f3      	bne.n	80135fa <strncmp+0xa>
 8013612:	e7fa      	b.n	801360a <strncmp+0x1a>
 8013614:	4610      	mov	r0, r2
 8013616:	e7f9      	b.n	801360c <strncmp+0x1c>

08013618 <__ascii_wctomb>:
 8013618:	b149      	cbz	r1, 801362e <__ascii_wctomb+0x16>
 801361a:	2aff      	cmp	r2, #255	; 0xff
 801361c:	bf85      	ittet	hi
 801361e:	238a      	movhi	r3, #138	; 0x8a
 8013620:	6003      	strhi	r3, [r0, #0]
 8013622:	700a      	strbls	r2, [r1, #0]
 8013624:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013628:	bf98      	it	ls
 801362a:	2001      	movls	r0, #1
 801362c:	4770      	bx	lr
 801362e:	4608      	mov	r0, r1
 8013630:	4770      	bx	lr
	...

08013634 <__assert_func>:
 8013634:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013636:	4614      	mov	r4, r2
 8013638:	461a      	mov	r2, r3
 801363a:	4b09      	ldr	r3, [pc, #36]	; (8013660 <__assert_func+0x2c>)
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	4605      	mov	r5, r0
 8013640:	68d8      	ldr	r0, [r3, #12]
 8013642:	b14c      	cbz	r4, 8013658 <__assert_func+0x24>
 8013644:	4b07      	ldr	r3, [pc, #28]	; (8013664 <__assert_func+0x30>)
 8013646:	9100      	str	r1, [sp, #0]
 8013648:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801364c:	4906      	ldr	r1, [pc, #24]	; (8013668 <__assert_func+0x34>)
 801364e:	462b      	mov	r3, r5
 8013650:	f000 f80e 	bl	8013670 <fiprintf>
 8013654:	f000 fa8c 	bl	8013b70 <abort>
 8013658:	4b04      	ldr	r3, [pc, #16]	; (801366c <__assert_func+0x38>)
 801365a:	461c      	mov	r4, r3
 801365c:	e7f3      	b.n	8013646 <__assert_func+0x12>
 801365e:	bf00      	nop
 8013660:	20000014 	.word	0x20000014
 8013664:	080151c5 	.word	0x080151c5
 8013668:	080151d2 	.word	0x080151d2
 801366c:	08015200 	.word	0x08015200

08013670 <fiprintf>:
 8013670:	b40e      	push	{r1, r2, r3}
 8013672:	b503      	push	{r0, r1, lr}
 8013674:	4601      	mov	r1, r0
 8013676:	ab03      	add	r3, sp, #12
 8013678:	4805      	ldr	r0, [pc, #20]	; (8013690 <fiprintf+0x20>)
 801367a:	f853 2b04 	ldr.w	r2, [r3], #4
 801367e:	6800      	ldr	r0, [r0, #0]
 8013680:	9301      	str	r3, [sp, #4]
 8013682:	f000 f885 	bl	8013790 <_vfiprintf_r>
 8013686:	b002      	add	sp, #8
 8013688:	f85d eb04 	ldr.w	lr, [sp], #4
 801368c:	b003      	add	sp, #12
 801368e:	4770      	bx	lr
 8013690:	20000014 	.word	0x20000014

08013694 <memmove>:
 8013694:	4288      	cmp	r0, r1
 8013696:	b510      	push	{r4, lr}
 8013698:	eb01 0402 	add.w	r4, r1, r2
 801369c:	d902      	bls.n	80136a4 <memmove+0x10>
 801369e:	4284      	cmp	r4, r0
 80136a0:	4623      	mov	r3, r4
 80136a2:	d807      	bhi.n	80136b4 <memmove+0x20>
 80136a4:	1e43      	subs	r3, r0, #1
 80136a6:	42a1      	cmp	r1, r4
 80136a8:	d008      	beq.n	80136bc <memmove+0x28>
 80136aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80136ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80136b2:	e7f8      	b.n	80136a6 <memmove+0x12>
 80136b4:	4402      	add	r2, r0
 80136b6:	4601      	mov	r1, r0
 80136b8:	428a      	cmp	r2, r1
 80136ba:	d100      	bne.n	80136be <memmove+0x2a>
 80136bc:	bd10      	pop	{r4, pc}
 80136be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80136c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80136c6:	e7f7      	b.n	80136b8 <memmove+0x24>

080136c8 <__malloc_lock>:
 80136c8:	4801      	ldr	r0, [pc, #4]	; (80136d0 <__malloc_lock+0x8>)
 80136ca:	f000 bc11 	b.w	8013ef0 <__retarget_lock_acquire_recursive>
 80136ce:	bf00      	nop
 80136d0:	200063c8 	.word	0x200063c8

080136d4 <__malloc_unlock>:
 80136d4:	4801      	ldr	r0, [pc, #4]	; (80136dc <__malloc_unlock+0x8>)
 80136d6:	f000 bc0c 	b.w	8013ef2 <__retarget_lock_release_recursive>
 80136da:	bf00      	nop
 80136dc:	200063c8 	.word	0x200063c8

080136e0 <_realloc_r>:
 80136e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136e4:	4680      	mov	r8, r0
 80136e6:	4614      	mov	r4, r2
 80136e8:	460e      	mov	r6, r1
 80136ea:	b921      	cbnz	r1, 80136f6 <_realloc_r+0x16>
 80136ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136f0:	4611      	mov	r1, r2
 80136f2:	f7ff bd95 	b.w	8013220 <_malloc_r>
 80136f6:	b92a      	cbnz	r2, 8013704 <_realloc_r+0x24>
 80136f8:	f7ff fd26 	bl	8013148 <_free_r>
 80136fc:	4625      	mov	r5, r4
 80136fe:	4628      	mov	r0, r5
 8013700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013704:	f000 fc5c 	bl	8013fc0 <_malloc_usable_size_r>
 8013708:	4284      	cmp	r4, r0
 801370a:	4607      	mov	r7, r0
 801370c:	d802      	bhi.n	8013714 <_realloc_r+0x34>
 801370e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013712:	d812      	bhi.n	801373a <_realloc_r+0x5a>
 8013714:	4621      	mov	r1, r4
 8013716:	4640      	mov	r0, r8
 8013718:	f7ff fd82 	bl	8013220 <_malloc_r>
 801371c:	4605      	mov	r5, r0
 801371e:	2800      	cmp	r0, #0
 8013720:	d0ed      	beq.n	80136fe <_realloc_r+0x1e>
 8013722:	42bc      	cmp	r4, r7
 8013724:	4622      	mov	r2, r4
 8013726:	4631      	mov	r1, r6
 8013728:	bf28      	it	cs
 801372a:	463a      	movcs	r2, r7
 801372c:	f7fc f8c8 	bl	800f8c0 <memcpy>
 8013730:	4631      	mov	r1, r6
 8013732:	4640      	mov	r0, r8
 8013734:	f7ff fd08 	bl	8013148 <_free_r>
 8013738:	e7e1      	b.n	80136fe <_realloc_r+0x1e>
 801373a:	4635      	mov	r5, r6
 801373c:	e7df      	b.n	80136fe <_realloc_r+0x1e>

0801373e <__sfputc_r>:
 801373e:	6893      	ldr	r3, [r2, #8]
 8013740:	3b01      	subs	r3, #1
 8013742:	2b00      	cmp	r3, #0
 8013744:	b410      	push	{r4}
 8013746:	6093      	str	r3, [r2, #8]
 8013748:	da08      	bge.n	801375c <__sfputc_r+0x1e>
 801374a:	6994      	ldr	r4, [r2, #24]
 801374c:	42a3      	cmp	r3, r4
 801374e:	db01      	blt.n	8013754 <__sfputc_r+0x16>
 8013750:	290a      	cmp	r1, #10
 8013752:	d103      	bne.n	801375c <__sfputc_r+0x1e>
 8013754:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013758:	f000 b94a 	b.w	80139f0 <__swbuf_r>
 801375c:	6813      	ldr	r3, [r2, #0]
 801375e:	1c58      	adds	r0, r3, #1
 8013760:	6010      	str	r0, [r2, #0]
 8013762:	7019      	strb	r1, [r3, #0]
 8013764:	4608      	mov	r0, r1
 8013766:	f85d 4b04 	ldr.w	r4, [sp], #4
 801376a:	4770      	bx	lr

0801376c <__sfputs_r>:
 801376c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801376e:	4606      	mov	r6, r0
 8013770:	460f      	mov	r7, r1
 8013772:	4614      	mov	r4, r2
 8013774:	18d5      	adds	r5, r2, r3
 8013776:	42ac      	cmp	r4, r5
 8013778:	d101      	bne.n	801377e <__sfputs_r+0x12>
 801377a:	2000      	movs	r0, #0
 801377c:	e007      	b.n	801378e <__sfputs_r+0x22>
 801377e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013782:	463a      	mov	r2, r7
 8013784:	4630      	mov	r0, r6
 8013786:	f7ff ffda 	bl	801373e <__sfputc_r>
 801378a:	1c43      	adds	r3, r0, #1
 801378c:	d1f3      	bne.n	8013776 <__sfputs_r+0xa>
 801378e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013790 <_vfiprintf_r>:
 8013790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013794:	460d      	mov	r5, r1
 8013796:	b09d      	sub	sp, #116	; 0x74
 8013798:	4614      	mov	r4, r2
 801379a:	4698      	mov	r8, r3
 801379c:	4606      	mov	r6, r0
 801379e:	b118      	cbz	r0, 80137a8 <_vfiprintf_r+0x18>
 80137a0:	6983      	ldr	r3, [r0, #24]
 80137a2:	b90b      	cbnz	r3, 80137a8 <_vfiprintf_r+0x18>
 80137a4:	f000 fb06 	bl	8013db4 <__sinit>
 80137a8:	4b89      	ldr	r3, [pc, #548]	; (80139d0 <_vfiprintf_r+0x240>)
 80137aa:	429d      	cmp	r5, r3
 80137ac:	d11b      	bne.n	80137e6 <_vfiprintf_r+0x56>
 80137ae:	6875      	ldr	r5, [r6, #4]
 80137b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80137b2:	07d9      	lsls	r1, r3, #31
 80137b4:	d405      	bmi.n	80137c2 <_vfiprintf_r+0x32>
 80137b6:	89ab      	ldrh	r3, [r5, #12]
 80137b8:	059a      	lsls	r2, r3, #22
 80137ba:	d402      	bmi.n	80137c2 <_vfiprintf_r+0x32>
 80137bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80137be:	f000 fb97 	bl	8013ef0 <__retarget_lock_acquire_recursive>
 80137c2:	89ab      	ldrh	r3, [r5, #12]
 80137c4:	071b      	lsls	r3, r3, #28
 80137c6:	d501      	bpl.n	80137cc <_vfiprintf_r+0x3c>
 80137c8:	692b      	ldr	r3, [r5, #16]
 80137ca:	b9eb      	cbnz	r3, 8013808 <_vfiprintf_r+0x78>
 80137cc:	4629      	mov	r1, r5
 80137ce:	4630      	mov	r0, r6
 80137d0:	f000 f960 	bl	8013a94 <__swsetup_r>
 80137d4:	b1c0      	cbz	r0, 8013808 <_vfiprintf_r+0x78>
 80137d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80137d8:	07dc      	lsls	r4, r3, #31
 80137da:	d50e      	bpl.n	80137fa <_vfiprintf_r+0x6a>
 80137dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80137e0:	b01d      	add	sp, #116	; 0x74
 80137e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137e6:	4b7b      	ldr	r3, [pc, #492]	; (80139d4 <_vfiprintf_r+0x244>)
 80137e8:	429d      	cmp	r5, r3
 80137ea:	d101      	bne.n	80137f0 <_vfiprintf_r+0x60>
 80137ec:	68b5      	ldr	r5, [r6, #8]
 80137ee:	e7df      	b.n	80137b0 <_vfiprintf_r+0x20>
 80137f0:	4b79      	ldr	r3, [pc, #484]	; (80139d8 <_vfiprintf_r+0x248>)
 80137f2:	429d      	cmp	r5, r3
 80137f4:	bf08      	it	eq
 80137f6:	68f5      	ldreq	r5, [r6, #12]
 80137f8:	e7da      	b.n	80137b0 <_vfiprintf_r+0x20>
 80137fa:	89ab      	ldrh	r3, [r5, #12]
 80137fc:	0598      	lsls	r0, r3, #22
 80137fe:	d4ed      	bmi.n	80137dc <_vfiprintf_r+0x4c>
 8013800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013802:	f000 fb76 	bl	8013ef2 <__retarget_lock_release_recursive>
 8013806:	e7e9      	b.n	80137dc <_vfiprintf_r+0x4c>
 8013808:	2300      	movs	r3, #0
 801380a:	9309      	str	r3, [sp, #36]	; 0x24
 801380c:	2320      	movs	r3, #32
 801380e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013812:	f8cd 800c 	str.w	r8, [sp, #12]
 8013816:	2330      	movs	r3, #48	; 0x30
 8013818:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80139dc <_vfiprintf_r+0x24c>
 801381c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013820:	f04f 0901 	mov.w	r9, #1
 8013824:	4623      	mov	r3, r4
 8013826:	469a      	mov	sl, r3
 8013828:	f813 2b01 	ldrb.w	r2, [r3], #1
 801382c:	b10a      	cbz	r2, 8013832 <_vfiprintf_r+0xa2>
 801382e:	2a25      	cmp	r2, #37	; 0x25
 8013830:	d1f9      	bne.n	8013826 <_vfiprintf_r+0x96>
 8013832:	ebba 0b04 	subs.w	fp, sl, r4
 8013836:	d00b      	beq.n	8013850 <_vfiprintf_r+0xc0>
 8013838:	465b      	mov	r3, fp
 801383a:	4622      	mov	r2, r4
 801383c:	4629      	mov	r1, r5
 801383e:	4630      	mov	r0, r6
 8013840:	f7ff ff94 	bl	801376c <__sfputs_r>
 8013844:	3001      	adds	r0, #1
 8013846:	f000 80aa 	beq.w	801399e <_vfiprintf_r+0x20e>
 801384a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801384c:	445a      	add	r2, fp
 801384e:	9209      	str	r2, [sp, #36]	; 0x24
 8013850:	f89a 3000 	ldrb.w	r3, [sl]
 8013854:	2b00      	cmp	r3, #0
 8013856:	f000 80a2 	beq.w	801399e <_vfiprintf_r+0x20e>
 801385a:	2300      	movs	r3, #0
 801385c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013860:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013864:	f10a 0a01 	add.w	sl, sl, #1
 8013868:	9304      	str	r3, [sp, #16]
 801386a:	9307      	str	r3, [sp, #28]
 801386c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013870:	931a      	str	r3, [sp, #104]	; 0x68
 8013872:	4654      	mov	r4, sl
 8013874:	2205      	movs	r2, #5
 8013876:	f814 1b01 	ldrb.w	r1, [r4], #1
 801387a:	4858      	ldr	r0, [pc, #352]	; (80139dc <_vfiprintf_r+0x24c>)
 801387c:	f7ec fcb0 	bl	80001e0 <memchr>
 8013880:	9a04      	ldr	r2, [sp, #16]
 8013882:	b9d8      	cbnz	r0, 80138bc <_vfiprintf_r+0x12c>
 8013884:	06d1      	lsls	r1, r2, #27
 8013886:	bf44      	itt	mi
 8013888:	2320      	movmi	r3, #32
 801388a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801388e:	0713      	lsls	r3, r2, #28
 8013890:	bf44      	itt	mi
 8013892:	232b      	movmi	r3, #43	; 0x2b
 8013894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013898:	f89a 3000 	ldrb.w	r3, [sl]
 801389c:	2b2a      	cmp	r3, #42	; 0x2a
 801389e:	d015      	beq.n	80138cc <_vfiprintf_r+0x13c>
 80138a0:	9a07      	ldr	r2, [sp, #28]
 80138a2:	4654      	mov	r4, sl
 80138a4:	2000      	movs	r0, #0
 80138a6:	f04f 0c0a 	mov.w	ip, #10
 80138aa:	4621      	mov	r1, r4
 80138ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80138b0:	3b30      	subs	r3, #48	; 0x30
 80138b2:	2b09      	cmp	r3, #9
 80138b4:	d94e      	bls.n	8013954 <_vfiprintf_r+0x1c4>
 80138b6:	b1b0      	cbz	r0, 80138e6 <_vfiprintf_r+0x156>
 80138b8:	9207      	str	r2, [sp, #28]
 80138ba:	e014      	b.n	80138e6 <_vfiprintf_r+0x156>
 80138bc:	eba0 0308 	sub.w	r3, r0, r8
 80138c0:	fa09 f303 	lsl.w	r3, r9, r3
 80138c4:	4313      	orrs	r3, r2
 80138c6:	9304      	str	r3, [sp, #16]
 80138c8:	46a2      	mov	sl, r4
 80138ca:	e7d2      	b.n	8013872 <_vfiprintf_r+0xe2>
 80138cc:	9b03      	ldr	r3, [sp, #12]
 80138ce:	1d19      	adds	r1, r3, #4
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	9103      	str	r1, [sp, #12]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	bfbb      	ittet	lt
 80138d8:	425b      	neglt	r3, r3
 80138da:	f042 0202 	orrlt.w	r2, r2, #2
 80138de:	9307      	strge	r3, [sp, #28]
 80138e0:	9307      	strlt	r3, [sp, #28]
 80138e2:	bfb8      	it	lt
 80138e4:	9204      	strlt	r2, [sp, #16]
 80138e6:	7823      	ldrb	r3, [r4, #0]
 80138e8:	2b2e      	cmp	r3, #46	; 0x2e
 80138ea:	d10c      	bne.n	8013906 <_vfiprintf_r+0x176>
 80138ec:	7863      	ldrb	r3, [r4, #1]
 80138ee:	2b2a      	cmp	r3, #42	; 0x2a
 80138f0:	d135      	bne.n	801395e <_vfiprintf_r+0x1ce>
 80138f2:	9b03      	ldr	r3, [sp, #12]
 80138f4:	1d1a      	adds	r2, r3, #4
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	9203      	str	r2, [sp, #12]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	bfb8      	it	lt
 80138fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013902:	3402      	adds	r4, #2
 8013904:	9305      	str	r3, [sp, #20]
 8013906:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80139ec <_vfiprintf_r+0x25c>
 801390a:	7821      	ldrb	r1, [r4, #0]
 801390c:	2203      	movs	r2, #3
 801390e:	4650      	mov	r0, sl
 8013910:	f7ec fc66 	bl	80001e0 <memchr>
 8013914:	b140      	cbz	r0, 8013928 <_vfiprintf_r+0x198>
 8013916:	2340      	movs	r3, #64	; 0x40
 8013918:	eba0 000a 	sub.w	r0, r0, sl
 801391c:	fa03 f000 	lsl.w	r0, r3, r0
 8013920:	9b04      	ldr	r3, [sp, #16]
 8013922:	4303      	orrs	r3, r0
 8013924:	3401      	adds	r4, #1
 8013926:	9304      	str	r3, [sp, #16]
 8013928:	f814 1b01 	ldrb.w	r1, [r4], #1
 801392c:	482c      	ldr	r0, [pc, #176]	; (80139e0 <_vfiprintf_r+0x250>)
 801392e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013932:	2206      	movs	r2, #6
 8013934:	f7ec fc54 	bl	80001e0 <memchr>
 8013938:	2800      	cmp	r0, #0
 801393a:	d03f      	beq.n	80139bc <_vfiprintf_r+0x22c>
 801393c:	4b29      	ldr	r3, [pc, #164]	; (80139e4 <_vfiprintf_r+0x254>)
 801393e:	bb1b      	cbnz	r3, 8013988 <_vfiprintf_r+0x1f8>
 8013940:	9b03      	ldr	r3, [sp, #12]
 8013942:	3307      	adds	r3, #7
 8013944:	f023 0307 	bic.w	r3, r3, #7
 8013948:	3308      	adds	r3, #8
 801394a:	9303      	str	r3, [sp, #12]
 801394c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801394e:	443b      	add	r3, r7
 8013950:	9309      	str	r3, [sp, #36]	; 0x24
 8013952:	e767      	b.n	8013824 <_vfiprintf_r+0x94>
 8013954:	fb0c 3202 	mla	r2, ip, r2, r3
 8013958:	460c      	mov	r4, r1
 801395a:	2001      	movs	r0, #1
 801395c:	e7a5      	b.n	80138aa <_vfiprintf_r+0x11a>
 801395e:	2300      	movs	r3, #0
 8013960:	3401      	adds	r4, #1
 8013962:	9305      	str	r3, [sp, #20]
 8013964:	4619      	mov	r1, r3
 8013966:	f04f 0c0a 	mov.w	ip, #10
 801396a:	4620      	mov	r0, r4
 801396c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013970:	3a30      	subs	r2, #48	; 0x30
 8013972:	2a09      	cmp	r2, #9
 8013974:	d903      	bls.n	801397e <_vfiprintf_r+0x1ee>
 8013976:	2b00      	cmp	r3, #0
 8013978:	d0c5      	beq.n	8013906 <_vfiprintf_r+0x176>
 801397a:	9105      	str	r1, [sp, #20]
 801397c:	e7c3      	b.n	8013906 <_vfiprintf_r+0x176>
 801397e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013982:	4604      	mov	r4, r0
 8013984:	2301      	movs	r3, #1
 8013986:	e7f0      	b.n	801396a <_vfiprintf_r+0x1da>
 8013988:	ab03      	add	r3, sp, #12
 801398a:	9300      	str	r3, [sp, #0]
 801398c:	462a      	mov	r2, r5
 801398e:	4b16      	ldr	r3, [pc, #88]	; (80139e8 <_vfiprintf_r+0x258>)
 8013990:	a904      	add	r1, sp, #16
 8013992:	4630      	mov	r0, r6
 8013994:	f7fc f84a 	bl	800fa2c <_printf_float>
 8013998:	4607      	mov	r7, r0
 801399a:	1c78      	adds	r0, r7, #1
 801399c:	d1d6      	bne.n	801394c <_vfiprintf_r+0x1bc>
 801399e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80139a0:	07d9      	lsls	r1, r3, #31
 80139a2:	d405      	bmi.n	80139b0 <_vfiprintf_r+0x220>
 80139a4:	89ab      	ldrh	r3, [r5, #12]
 80139a6:	059a      	lsls	r2, r3, #22
 80139a8:	d402      	bmi.n	80139b0 <_vfiprintf_r+0x220>
 80139aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80139ac:	f000 faa1 	bl	8013ef2 <__retarget_lock_release_recursive>
 80139b0:	89ab      	ldrh	r3, [r5, #12]
 80139b2:	065b      	lsls	r3, r3, #25
 80139b4:	f53f af12 	bmi.w	80137dc <_vfiprintf_r+0x4c>
 80139b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80139ba:	e711      	b.n	80137e0 <_vfiprintf_r+0x50>
 80139bc:	ab03      	add	r3, sp, #12
 80139be:	9300      	str	r3, [sp, #0]
 80139c0:	462a      	mov	r2, r5
 80139c2:	4b09      	ldr	r3, [pc, #36]	; (80139e8 <_vfiprintf_r+0x258>)
 80139c4:	a904      	add	r1, sp, #16
 80139c6:	4630      	mov	r0, r6
 80139c8:	f7fc fad4 	bl	800ff74 <_printf_i>
 80139cc:	e7e4      	b.n	8013998 <_vfiprintf_r+0x208>
 80139ce:	bf00      	nop
 80139d0:	08015224 	.word	0x08015224
 80139d4:	08015244 	.word	0x08015244
 80139d8:	08015204 	.word	0x08015204
 80139dc:	080151b4 	.word	0x080151b4
 80139e0:	080151be 	.word	0x080151be
 80139e4:	0800fa2d 	.word	0x0800fa2d
 80139e8:	0801376d 	.word	0x0801376d
 80139ec:	080151ba 	.word	0x080151ba

080139f0 <__swbuf_r>:
 80139f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139f2:	460e      	mov	r6, r1
 80139f4:	4614      	mov	r4, r2
 80139f6:	4605      	mov	r5, r0
 80139f8:	b118      	cbz	r0, 8013a02 <__swbuf_r+0x12>
 80139fa:	6983      	ldr	r3, [r0, #24]
 80139fc:	b90b      	cbnz	r3, 8013a02 <__swbuf_r+0x12>
 80139fe:	f000 f9d9 	bl	8013db4 <__sinit>
 8013a02:	4b21      	ldr	r3, [pc, #132]	; (8013a88 <__swbuf_r+0x98>)
 8013a04:	429c      	cmp	r4, r3
 8013a06:	d12b      	bne.n	8013a60 <__swbuf_r+0x70>
 8013a08:	686c      	ldr	r4, [r5, #4]
 8013a0a:	69a3      	ldr	r3, [r4, #24]
 8013a0c:	60a3      	str	r3, [r4, #8]
 8013a0e:	89a3      	ldrh	r3, [r4, #12]
 8013a10:	071a      	lsls	r2, r3, #28
 8013a12:	d52f      	bpl.n	8013a74 <__swbuf_r+0x84>
 8013a14:	6923      	ldr	r3, [r4, #16]
 8013a16:	b36b      	cbz	r3, 8013a74 <__swbuf_r+0x84>
 8013a18:	6923      	ldr	r3, [r4, #16]
 8013a1a:	6820      	ldr	r0, [r4, #0]
 8013a1c:	1ac0      	subs	r0, r0, r3
 8013a1e:	6963      	ldr	r3, [r4, #20]
 8013a20:	b2f6      	uxtb	r6, r6
 8013a22:	4283      	cmp	r3, r0
 8013a24:	4637      	mov	r7, r6
 8013a26:	dc04      	bgt.n	8013a32 <__swbuf_r+0x42>
 8013a28:	4621      	mov	r1, r4
 8013a2a:	4628      	mov	r0, r5
 8013a2c:	f000 f92e 	bl	8013c8c <_fflush_r>
 8013a30:	bb30      	cbnz	r0, 8013a80 <__swbuf_r+0x90>
 8013a32:	68a3      	ldr	r3, [r4, #8]
 8013a34:	3b01      	subs	r3, #1
 8013a36:	60a3      	str	r3, [r4, #8]
 8013a38:	6823      	ldr	r3, [r4, #0]
 8013a3a:	1c5a      	adds	r2, r3, #1
 8013a3c:	6022      	str	r2, [r4, #0]
 8013a3e:	701e      	strb	r6, [r3, #0]
 8013a40:	6963      	ldr	r3, [r4, #20]
 8013a42:	3001      	adds	r0, #1
 8013a44:	4283      	cmp	r3, r0
 8013a46:	d004      	beq.n	8013a52 <__swbuf_r+0x62>
 8013a48:	89a3      	ldrh	r3, [r4, #12]
 8013a4a:	07db      	lsls	r3, r3, #31
 8013a4c:	d506      	bpl.n	8013a5c <__swbuf_r+0x6c>
 8013a4e:	2e0a      	cmp	r6, #10
 8013a50:	d104      	bne.n	8013a5c <__swbuf_r+0x6c>
 8013a52:	4621      	mov	r1, r4
 8013a54:	4628      	mov	r0, r5
 8013a56:	f000 f919 	bl	8013c8c <_fflush_r>
 8013a5a:	b988      	cbnz	r0, 8013a80 <__swbuf_r+0x90>
 8013a5c:	4638      	mov	r0, r7
 8013a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a60:	4b0a      	ldr	r3, [pc, #40]	; (8013a8c <__swbuf_r+0x9c>)
 8013a62:	429c      	cmp	r4, r3
 8013a64:	d101      	bne.n	8013a6a <__swbuf_r+0x7a>
 8013a66:	68ac      	ldr	r4, [r5, #8]
 8013a68:	e7cf      	b.n	8013a0a <__swbuf_r+0x1a>
 8013a6a:	4b09      	ldr	r3, [pc, #36]	; (8013a90 <__swbuf_r+0xa0>)
 8013a6c:	429c      	cmp	r4, r3
 8013a6e:	bf08      	it	eq
 8013a70:	68ec      	ldreq	r4, [r5, #12]
 8013a72:	e7ca      	b.n	8013a0a <__swbuf_r+0x1a>
 8013a74:	4621      	mov	r1, r4
 8013a76:	4628      	mov	r0, r5
 8013a78:	f000 f80c 	bl	8013a94 <__swsetup_r>
 8013a7c:	2800      	cmp	r0, #0
 8013a7e:	d0cb      	beq.n	8013a18 <__swbuf_r+0x28>
 8013a80:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013a84:	e7ea      	b.n	8013a5c <__swbuf_r+0x6c>
 8013a86:	bf00      	nop
 8013a88:	08015224 	.word	0x08015224
 8013a8c:	08015244 	.word	0x08015244
 8013a90:	08015204 	.word	0x08015204

08013a94 <__swsetup_r>:
 8013a94:	4b32      	ldr	r3, [pc, #200]	; (8013b60 <__swsetup_r+0xcc>)
 8013a96:	b570      	push	{r4, r5, r6, lr}
 8013a98:	681d      	ldr	r5, [r3, #0]
 8013a9a:	4606      	mov	r6, r0
 8013a9c:	460c      	mov	r4, r1
 8013a9e:	b125      	cbz	r5, 8013aaa <__swsetup_r+0x16>
 8013aa0:	69ab      	ldr	r3, [r5, #24]
 8013aa2:	b913      	cbnz	r3, 8013aaa <__swsetup_r+0x16>
 8013aa4:	4628      	mov	r0, r5
 8013aa6:	f000 f985 	bl	8013db4 <__sinit>
 8013aaa:	4b2e      	ldr	r3, [pc, #184]	; (8013b64 <__swsetup_r+0xd0>)
 8013aac:	429c      	cmp	r4, r3
 8013aae:	d10f      	bne.n	8013ad0 <__swsetup_r+0x3c>
 8013ab0:	686c      	ldr	r4, [r5, #4]
 8013ab2:	89a3      	ldrh	r3, [r4, #12]
 8013ab4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013ab8:	0719      	lsls	r1, r3, #28
 8013aba:	d42c      	bmi.n	8013b16 <__swsetup_r+0x82>
 8013abc:	06dd      	lsls	r5, r3, #27
 8013abe:	d411      	bmi.n	8013ae4 <__swsetup_r+0x50>
 8013ac0:	2309      	movs	r3, #9
 8013ac2:	6033      	str	r3, [r6, #0]
 8013ac4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013ac8:	81a3      	strh	r3, [r4, #12]
 8013aca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ace:	e03e      	b.n	8013b4e <__swsetup_r+0xba>
 8013ad0:	4b25      	ldr	r3, [pc, #148]	; (8013b68 <__swsetup_r+0xd4>)
 8013ad2:	429c      	cmp	r4, r3
 8013ad4:	d101      	bne.n	8013ada <__swsetup_r+0x46>
 8013ad6:	68ac      	ldr	r4, [r5, #8]
 8013ad8:	e7eb      	b.n	8013ab2 <__swsetup_r+0x1e>
 8013ada:	4b24      	ldr	r3, [pc, #144]	; (8013b6c <__swsetup_r+0xd8>)
 8013adc:	429c      	cmp	r4, r3
 8013ade:	bf08      	it	eq
 8013ae0:	68ec      	ldreq	r4, [r5, #12]
 8013ae2:	e7e6      	b.n	8013ab2 <__swsetup_r+0x1e>
 8013ae4:	0758      	lsls	r0, r3, #29
 8013ae6:	d512      	bpl.n	8013b0e <__swsetup_r+0x7a>
 8013ae8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013aea:	b141      	cbz	r1, 8013afe <__swsetup_r+0x6a>
 8013aec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013af0:	4299      	cmp	r1, r3
 8013af2:	d002      	beq.n	8013afa <__swsetup_r+0x66>
 8013af4:	4630      	mov	r0, r6
 8013af6:	f7ff fb27 	bl	8013148 <_free_r>
 8013afa:	2300      	movs	r3, #0
 8013afc:	6363      	str	r3, [r4, #52]	; 0x34
 8013afe:	89a3      	ldrh	r3, [r4, #12]
 8013b00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013b04:	81a3      	strh	r3, [r4, #12]
 8013b06:	2300      	movs	r3, #0
 8013b08:	6063      	str	r3, [r4, #4]
 8013b0a:	6923      	ldr	r3, [r4, #16]
 8013b0c:	6023      	str	r3, [r4, #0]
 8013b0e:	89a3      	ldrh	r3, [r4, #12]
 8013b10:	f043 0308 	orr.w	r3, r3, #8
 8013b14:	81a3      	strh	r3, [r4, #12]
 8013b16:	6923      	ldr	r3, [r4, #16]
 8013b18:	b94b      	cbnz	r3, 8013b2e <__swsetup_r+0x9a>
 8013b1a:	89a3      	ldrh	r3, [r4, #12]
 8013b1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b24:	d003      	beq.n	8013b2e <__swsetup_r+0x9a>
 8013b26:	4621      	mov	r1, r4
 8013b28:	4630      	mov	r0, r6
 8013b2a:	f000 fa09 	bl	8013f40 <__smakebuf_r>
 8013b2e:	89a0      	ldrh	r0, [r4, #12]
 8013b30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013b34:	f010 0301 	ands.w	r3, r0, #1
 8013b38:	d00a      	beq.n	8013b50 <__swsetup_r+0xbc>
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	60a3      	str	r3, [r4, #8]
 8013b3e:	6963      	ldr	r3, [r4, #20]
 8013b40:	425b      	negs	r3, r3
 8013b42:	61a3      	str	r3, [r4, #24]
 8013b44:	6923      	ldr	r3, [r4, #16]
 8013b46:	b943      	cbnz	r3, 8013b5a <__swsetup_r+0xc6>
 8013b48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013b4c:	d1ba      	bne.n	8013ac4 <__swsetup_r+0x30>
 8013b4e:	bd70      	pop	{r4, r5, r6, pc}
 8013b50:	0781      	lsls	r1, r0, #30
 8013b52:	bf58      	it	pl
 8013b54:	6963      	ldrpl	r3, [r4, #20]
 8013b56:	60a3      	str	r3, [r4, #8]
 8013b58:	e7f4      	b.n	8013b44 <__swsetup_r+0xb0>
 8013b5a:	2000      	movs	r0, #0
 8013b5c:	e7f7      	b.n	8013b4e <__swsetup_r+0xba>
 8013b5e:	bf00      	nop
 8013b60:	20000014 	.word	0x20000014
 8013b64:	08015224 	.word	0x08015224
 8013b68:	08015244 	.word	0x08015244
 8013b6c:	08015204 	.word	0x08015204

08013b70 <abort>:
 8013b70:	b508      	push	{r3, lr}
 8013b72:	2006      	movs	r0, #6
 8013b74:	f000 fa54 	bl	8014020 <raise>
 8013b78:	2001      	movs	r0, #1
 8013b7a:	f7f2 fe1d 	bl	80067b8 <_exit>
	...

08013b80 <__sflush_r>:
 8013b80:	898a      	ldrh	r2, [r1, #12]
 8013b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b86:	4605      	mov	r5, r0
 8013b88:	0710      	lsls	r0, r2, #28
 8013b8a:	460c      	mov	r4, r1
 8013b8c:	d458      	bmi.n	8013c40 <__sflush_r+0xc0>
 8013b8e:	684b      	ldr	r3, [r1, #4]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	dc05      	bgt.n	8013ba0 <__sflush_r+0x20>
 8013b94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	dc02      	bgt.n	8013ba0 <__sflush_r+0x20>
 8013b9a:	2000      	movs	r0, #0
 8013b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013ba2:	2e00      	cmp	r6, #0
 8013ba4:	d0f9      	beq.n	8013b9a <__sflush_r+0x1a>
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013bac:	682f      	ldr	r7, [r5, #0]
 8013bae:	602b      	str	r3, [r5, #0]
 8013bb0:	d032      	beq.n	8013c18 <__sflush_r+0x98>
 8013bb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013bb4:	89a3      	ldrh	r3, [r4, #12]
 8013bb6:	075a      	lsls	r2, r3, #29
 8013bb8:	d505      	bpl.n	8013bc6 <__sflush_r+0x46>
 8013bba:	6863      	ldr	r3, [r4, #4]
 8013bbc:	1ac0      	subs	r0, r0, r3
 8013bbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013bc0:	b10b      	cbz	r3, 8013bc6 <__sflush_r+0x46>
 8013bc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013bc4:	1ac0      	subs	r0, r0, r3
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	4602      	mov	r2, r0
 8013bca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013bcc:	6a21      	ldr	r1, [r4, #32]
 8013bce:	4628      	mov	r0, r5
 8013bd0:	47b0      	blx	r6
 8013bd2:	1c43      	adds	r3, r0, #1
 8013bd4:	89a3      	ldrh	r3, [r4, #12]
 8013bd6:	d106      	bne.n	8013be6 <__sflush_r+0x66>
 8013bd8:	6829      	ldr	r1, [r5, #0]
 8013bda:	291d      	cmp	r1, #29
 8013bdc:	d82c      	bhi.n	8013c38 <__sflush_r+0xb8>
 8013bde:	4a2a      	ldr	r2, [pc, #168]	; (8013c88 <__sflush_r+0x108>)
 8013be0:	40ca      	lsrs	r2, r1
 8013be2:	07d6      	lsls	r6, r2, #31
 8013be4:	d528      	bpl.n	8013c38 <__sflush_r+0xb8>
 8013be6:	2200      	movs	r2, #0
 8013be8:	6062      	str	r2, [r4, #4]
 8013bea:	04d9      	lsls	r1, r3, #19
 8013bec:	6922      	ldr	r2, [r4, #16]
 8013bee:	6022      	str	r2, [r4, #0]
 8013bf0:	d504      	bpl.n	8013bfc <__sflush_r+0x7c>
 8013bf2:	1c42      	adds	r2, r0, #1
 8013bf4:	d101      	bne.n	8013bfa <__sflush_r+0x7a>
 8013bf6:	682b      	ldr	r3, [r5, #0]
 8013bf8:	b903      	cbnz	r3, 8013bfc <__sflush_r+0x7c>
 8013bfa:	6560      	str	r0, [r4, #84]	; 0x54
 8013bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013bfe:	602f      	str	r7, [r5, #0]
 8013c00:	2900      	cmp	r1, #0
 8013c02:	d0ca      	beq.n	8013b9a <__sflush_r+0x1a>
 8013c04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c08:	4299      	cmp	r1, r3
 8013c0a:	d002      	beq.n	8013c12 <__sflush_r+0x92>
 8013c0c:	4628      	mov	r0, r5
 8013c0e:	f7ff fa9b 	bl	8013148 <_free_r>
 8013c12:	2000      	movs	r0, #0
 8013c14:	6360      	str	r0, [r4, #52]	; 0x34
 8013c16:	e7c1      	b.n	8013b9c <__sflush_r+0x1c>
 8013c18:	6a21      	ldr	r1, [r4, #32]
 8013c1a:	2301      	movs	r3, #1
 8013c1c:	4628      	mov	r0, r5
 8013c1e:	47b0      	blx	r6
 8013c20:	1c41      	adds	r1, r0, #1
 8013c22:	d1c7      	bne.n	8013bb4 <__sflush_r+0x34>
 8013c24:	682b      	ldr	r3, [r5, #0]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d0c4      	beq.n	8013bb4 <__sflush_r+0x34>
 8013c2a:	2b1d      	cmp	r3, #29
 8013c2c:	d001      	beq.n	8013c32 <__sflush_r+0xb2>
 8013c2e:	2b16      	cmp	r3, #22
 8013c30:	d101      	bne.n	8013c36 <__sflush_r+0xb6>
 8013c32:	602f      	str	r7, [r5, #0]
 8013c34:	e7b1      	b.n	8013b9a <__sflush_r+0x1a>
 8013c36:	89a3      	ldrh	r3, [r4, #12]
 8013c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c3c:	81a3      	strh	r3, [r4, #12]
 8013c3e:	e7ad      	b.n	8013b9c <__sflush_r+0x1c>
 8013c40:	690f      	ldr	r7, [r1, #16]
 8013c42:	2f00      	cmp	r7, #0
 8013c44:	d0a9      	beq.n	8013b9a <__sflush_r+0x1a>
 8013c46:	0793      	lsls	r3, r2, #30
 8013c48:	680e      	ldr	r6, [r1, #0]
 8013c4a:	bf08      	it	eq
 8013c4c:	694b      	ldreq	r3, [r1, #20]
 8013c4e:	600f      	str	r7, [r1, #0]
 8013c50:	bf18      	it	ne
 8013c52:	2300      	movne	r3, #0
 8013c54:	eba6 0807 	sub.w	r8, r6, r7
 8013c58:	608b      	str	r3, [r1, #8]
 8013c5a:	f1b8 0f00 	cmp.w	r8, #0
 8013c5e:	dd9c      	ble.n	8013b9a <__sflush_r+0x1a>
 8013c60:	6a21      	ldr	r1, [r4, #32]
 8013c62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013c64:	4643      	mov	r3, r8
 8013c66:	463a      	mov	r2, r7
 8013c68:	4628      	mov	r0, r5
 8013c6a:	47b0      	blx	r6
 8013c6c:	2800      	cmp	r0, #0
 8013c6e:	dc06      	bgt.n	8013c7e <__sflush_r+0xfe>
 8013c70:	89a3      	ldrh	r3, [r4, #12]
 8013c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c76:	81a3      	strh	r3, [r4, #12]
 8013c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c7c:	e78e      	b.n	8013b9c <__sflush_r+0x1c>
 8013c7e:	4407      	add	r7, r0
 8013c80:	eba8 0800 	sub.w	r8, r8, r0
 8013c84:	e7e9      	b.n	8013c5a <__sflush_r+0xda>
 8013c86:	bf00      	nop
 8013c88:	20400001 	.word	0x20400001

08013c8c <_fflush_r>:
 8013c8c:	b538      	push	{r3, r4, r5, lr}
 8013c8e:	690b      	ldr	r3, [r1, #16]
 8013c90:	4605      	mov	r5, r0
 8013c92:	460c      	mov	r4, r1
 8013c94:	b913      	cbnz	r3, 8013c9c <_fflush_r+0x10>
 8013c96:	2500      	movs	r5, #0
 8013c98:	4628      	mov	r0, r5
 8013c9a:	bd38      	pop	{r3, r4, r5, pc}
 8013c9c:	b118      	cbz	r0, 8013ca6 <_fflush_r+0x1a>
 8013c9e:	6983      	ldr	r3, [r0, #24]
 8013ca0:	b90b      	cbnz	r3, 8013ca6 <_fflush_r+0x1a>
 8013ca2:	f000 f887 	bl	8013db4 <__sinit>
 8013ca6:	4b14      	ldr	r3, [pc, #80]	; (8013cf8 <_fflush_r+0x6c>)
 8013ca8:	429c      	cmp	r4, r3
 8013caa:	d11b      	bne.n	8013ce4 <_fflush_r+0x58>
 8013cac:	686c      	ldr	r4, [r5, #4]
 8013cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d0ef      	beq.n	8013c96 <_fflush_r+0xa>
 8013cb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013cb8:	07d0      	lsls	r0, r2, #31
 8013cba:	d404      	bmi.n	8013cc6 <_fflush_r+0x3a>
 8013cbc:	0599      	lsls	r1, r3, #22
 8013cbe:	d402      	bmi.n	8013cc6 <_fflush_r+0x3a>
 8013cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013cc2:	f000 f915 	bl	8013ef0 <__retarget_lock_acquire_recursive>
 8013cc6:	4628      	mov	r0, r5
 8013cc8:	4621      	mov	r1, r4
 8013cca:	f7ff ff59 	bl	8013b80 <__sflush_r>
 8013cce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013cd0:	07da      	lsls	r2, r3, #31
 8013cd2:	4605      	mov	r5, r0
 8013cd4:	d4e0      	bmi.n	8013c98 <_fflush_r+0xc>
 8013cd6:	89a3      	ldrh	r3, [r4, #12]
 8013cd8:	059b      	lsls	r3, r3, #22
 8013cda:	d4dd      	bmi.n	8013c98 <_fflush_r+0xc>
 8013cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013cde:	f000 f908 	bl	8013ef2 <__retarget_lock_release_recursive>
 8013ce2:	e7d9      	b.n	8013c98 <_fflush_r+0xc>
 8013ce4:	4b05      	ldr	r3, [pc, #20]	; (8013cfc <_fflush_r+0x70>)
 8013ce6:	429c      	cmp	r4, r3
 8013ce8:	d101      	bne.n	8013cee <_fflush_r+0x62>
 8013cea:	68ac      	ldr	r4, [r5, #8]
 8013cec:	e7df      	b.n	8013cae <_fflush_r+0x22>
 8013cee:	4b04      	ldr	r3, [pc, #16]	; (8013d00 <_fflush_r+0x74>)
 8013cf0:	429c      	cmp	r4, r3
 8013cf2:	bf08      	it	eq
 8013cf4:	68ec      	ldreq	r4, [r5, #12]
 8013cf6:	e7da      	b.n	8013cae <_fflush_r+0x22>
 8013cf8:	08015224 	.word	0x08015224
 8013cfc:	08015244 	.word	0x08015244
 8013d00:	08015204 	.word	0x08015204

08013d04 <std>:
 8013d04:	2300      	movs	r3, #0
 8013d06:	b510      	push	{r4, lr}
 8013d08:	4604      	mov	r4, r0
 8013d0a:	e9c0 3300 	strd	r3, r3, [r0]
 8013d0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013d12:	6083      	str	r3, [r0, #8]
 8013d14:	8181      	strh	r1, [r0, #12]
 8013d16:	6643      	str	r3, [r0, #100]	; 0x64
 8013d18:	81c2      	strh	r2, [r0, #14]
 8013d1a:	6183      	str	r3, [r0, #24]
 8013d1c:	4619      	mov	r1, r3
 8013d1e:	2208      	movs	r2, #8
 8013d20:	305c      	adds	r0, #92	; 0x5c
 8013d22:	f7fb fddb 	bl	800f8dc <memset>
 8013d26:	4b05      	ldr	r3, [pc, #20]	; (8013d3c <std+0x38>)
 8013d28:	6263      	str	r3, [r4, #36]	; 0x24
 8013d2a:	4b05      	ldr	r3, [pc, #20]	; (8013d40 <std+0x3c>)
 8013d2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8013d2e:	4b05      	ldr	r3, [pc, #20]	; (8013d44 <std+0x40>)
 8013d30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013d32:	4b05      	ldr	r3, [pc, #20]	; (8013d48 <std+0x44>)
 8013d34:	6224      	str	r4, [r4, #32]
 8013d36:	6323      	str	r3, [r4, #48]	; 0x30
 8013d38:	bd10      	pop	{r4, pc}
 8013d3a:	bf00      	nop
 8013d3c:	08014059 	.word	0x08014059
 8013d40:	0801407b 	.word	0x0801407b
 8013d44:	080140b3 	.word	0x080140b3
 8013d48:	080140d7 	.word	0x080140d7

08013d4c <_cleanup_r>:
 8013d4c:	4901      	ldr	r1, [pc, #4]	; (8013d54 <_cleanup_r+0x8>)
 8013d4e:	f000 b8af 	b.w	8013eb0 <_fwalk_reent>
 8013d52:	bf00      	nop
 8013d54:	08013c8d 	.word	0x08013c8d

08013d58 <__sfmoreglue>:
 8013d58:	b570      	push	{r4, r5, r6, lr}
 8013d5a:	2268      	movs	r2, #104	; 0x68
 8013d5c:	1e4d      	subs	r5, r1, #1
 8013d5e:	4355      	muls	r5, r2
 8013d60:	460e      	mov	r6, r1
 8013d62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013d66:	f7ff fa5b 	bl	8013220 <_malloc_r>
 8013d6a:	4604      	mov	r4, r0
 8013d6c:	b140      	cbz	r0, 8013d80 <__sfmoreglue+0x28>
 8013d6e:	2100      	movs	r1, #0
 8013d70:	e9c0 1600 	strd	r1, r6, [r0]
 8013d74:	300c      	adds	r0, #12
 8013d76:	60a0      	str	r0, [r4, #8]
 8013d78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013d7c:	f7fb fdae 	bl	800f8dc <memset>
 8013d80:	4620      	mov	r0, r4
 8013d82:	bd70      	pop	{r4, r5, r6, pc}

08013d84 <__sfp_lock_acquire>:
 8013d84:	4801      	ldr	r0, [pc, #4]	; (8013d8c <__sfp_lock_acquire+0x8>)
 8013d86:	f000 b8b3 	b.w	8013ef0 <__retarget_lock_acquire_recursive>
 8013d8a:	bf00      	nop
 8013d8c:	200063c9 	.word	0x200063c9

08013d90 <__sfp_lock_release>:
 8013d90:	4801      	ldr	r0, [pc, #4]	; (8013d98 <__sfp_lock_release+0x8>)
 8013d92:	f000 b8ae 	b.w	8013ef2 <__retarget_lock_release_recursive>
 8013d96:	bf00      	nop
 8013d98:	200063c9 	.word	0x200063c9

08013d9c <__sinit_lock_acquire>:
 8013d9c:	4801      	ldr	r0, [pc, #4]	; (8013da4 <__sinit_lock_acquire+0x8>)
 8013d9e:	f000 b8a7 	b.w	8013ef0 <__retarget_lock_acquire_recursive>
 8013da2:	bf00      	nop
 8013da4:	200063ca 	.word	0x200063ca

08013da8 <__sinit_lock_release>:
 8013da8:	4801      	ldr	r0, [pc, #4]	; (8013db0 <__sinit_lock_release+0x8>)
 8013daa:	f000 b8a2 	b.w	8013ef2 <__retarget_lock_release_recursive>
 8013dae:	bf00      	nop
 8013db0:	200063ca 	.word	0x200063ca

08013db4 <__sinit>:
 8013db4:	b510      	push	{r4, lr}
 8013db6:	4604      	mov	r4, r0
 8013db8:	f7ff fff0 	bl	8013d9c <__sinit_lock_acquire>
 8013dbc:	69a3      	ldr	r3, [r4, #24]
 8013dbe:	b11b      	cbz	r3, 8013dc8 <__sinit+0x14>
 8013dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013dc4:	f7ff bff0 	b.w	8013da8 <__sinit_lock_release>
 8013dc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013dcc:	6523      	str	r3, [r4, #80]	; 0x50
 8013dce:	4b13      	ldr	r3, [pc, #76]	; (8013e1c <__sinit+0x68>)
 8013dd0:	4a13      	ldr	r2, [pc, #76]	; (8013e20 <__sinit+0x6c>)
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8013dd6:	42a3      	cmp	r3, r4
 8013dd8:	bf04      	itt	eq
 8013dda:	2301      	moveq	r3, #1
 8013ddc:	61a3      	streq	r3, [r4, #24]
 8013dde:	4620      	mov	r0, r4
 8013de0:	f000 f820 	bl	8013e24 <__sfp>
 8013de4:	6060      	str	r0, [r4, #4]
 8013de6:	4620      	mov	r0, r4
 8013de8:	f000 f81c 	bl	8013e24 <__sfp>
 8013dec:	60a0      	str	r0, [r4, #8]
 8013dee:	4620      	mov	r0, r4
 8013df0:	f000 f818 	bl	8013e24 <__sfp>
 8013df4:	2200      	movs	r2, #0
 8013df6:	60e0      	str	r0, [r4, #12]
 8013df8:	2104      	movs	r1, #4
 8013dfa:	6860      	ldr	r0, [r4, #4]
 8013dfc:	f7ff ff82 	bl	8013d04 <std>
 8013e00:	68a0      	ldr	r0, [r4, #8]
 8013e02:	2201      	movs	r2, #1
 8013e04:	2109      	movs	r1, #9
 8013e06:	f7ff ff7d 	bl	8013d04 <std>
 8013e0a:	68e0      	ldr	r0, [r4, #12]
 8013e0c:	2202      	movs	r2, #2
 8013e0e:	2112      	movs	r1, #18
 8013e10:	f7ff ff78 	bl	8013d04 <std>
 8013e14:	2301      	movs	r3, #1
 8013e16:	61a3      	str	r3, [r4, #24]
 8013e18:	e7d2      	b.n	8013dc0 <__sinit+0xc>
 8013e1a:	bf00      	nop
 8013e1c:	08014dc0 	.word	0x08014dc0
 8013e20:	08013d4d 	.word	0x08013d4d

08013e24 <__sfp>:
 8013e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e26:	4607      	mov	r7, r0
 8013e28:	f7ff ffac 	bl	8013d84 <__sfp_lock_acquire>
 8013e2c:	4b1e      	ldr	r3, [pc, #120]	; (8013ea8 <__sfp+0x84>)
 8013e2e:	681e      	ldr	r6, [r3, #0]
 8013e30:	69b3      	ldr	r3, [r6, #24]
 8013e32:	b913      	cbnz	r3, 8013e3a <__sfp+0x16>
 8013e34:	4630      	mov	r0, r6
 8013e36:	f7ff ffbd 	bl	8013db4 <__sinit>
 8013e3a:	3648      	adds	r6, #72	; 0x48
 8013e3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013e40:	3b01      	subs	r3, #1
 8013e42:	d503      	bpl.n	8013e4c <__sfp+0x28>
 8013e44:	6833      	ldr	r3, [r6, #0]
 8013e46:	b30b      	cbz	r3, 8013e8c <__sfp+0x68>
 8013e48:	6836      	ldr	r6, [r6, #0]
 8013e4a:	e7f7      	b.n	8013e3c <__sfp+0x18>
 8013e4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013e50:	b9d5      	cbnz	r5, 8013e88 <__sfp+0x64>
 8013e52:	4b16      	ldr	r3, [pc, #88]	; (8013eac <__sfp+0x88>)
 8013e54:	60e3      	str	r3, [r4, #12]
 8013e56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013e5a:	6665      	str	r5, [r4, #100]	; 0x64
 8013e5c:	f000 f847 	bl	8013eee <__retarget_lock_init_recursive>
 8013e60:	f7ff ff96 	bl	8013d90 <__sfp_lock_release>
 8013e64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013e68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013e6c:	6025      	str	r5, [r4, #0]
 8013e6e:	61a5      	str	r5, [r4, #24]
 8013e70:	2208      	movs	r2, #8
 8013e72:	4629      	mov	r1, r5
 8013e74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013e78:	f7fb fd30 	bl	800f8dc <memset>
 8013e7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013e80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013e84:	4620      	mov	r0, r4
 8013e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e88:	3468      	adds	r4, #104	; 0x68
 8013e8a:	e7d9      	b.n	8013e40 <__sfp+0x1c>
 8013e8c:	2104      	movs	r1, #4
 8013e8e:	4638      	mov	r0, r7
 8013e90:	f7ff ff62 	bl	8013d58 <__sfmoreglue>
 8013e94:	4604      	mov	r4, r0
 8013e96:	6030      	str	r0, [r6, #0]
 8013e98:	2800      	cmp	r0, #0
 8013e9a:	d1d5      	bne.n	8013e48 <__sfp+0x24>
 8013e9c:	f7ff ff78 	bl	8013d90 <__sfp_lock_release>
 8013ea0:	230c      	movs	r3, #12
 8013ea2:	603b      	str	r3, [r7, #0]
 8013ea4:	e7ee      	b.n	8013e84 <__sfp+0x60>
 8013ea6:	bf00      	nop
 8013ea8:	08014dc0 	.word	0x08014dc0
 8013eac:	ffff0001 	.word	0xffff0001

08013eb0 <_fwalk_reent>:
 8013eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013eb4:	4606      	mov	r6, r0
 8013eb6:	4688      	mov	r8, r1
 8013eb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013ebc:	2700      	movs	r7, #0
 8013ebe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013ec2:	f1b9 0901 	subs.w	r9, r9, #1
 8013ec6:	d505      	bpl.n	8013ed4 <_fwalk_reent+0x24>
 8013ec8:	6824      	ldr	r4, [r4, #0]
 8013eca:	2c00      	cmp	r4, #0
 8013ecc:	d1f7      	bne.n	8013ebe <_fwalk_reent+0xe>
 8013ece:	4638      	mov	r0, r7
 8013ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ed4:	89ab      	ldrh	r3, [r5, #12]
 8013ed6:	2b01      	cmp	r3, #1
 8013ed8:	d907      	bls.n	8013eea <_fwalk_reent+0x3a>
 8013eda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013ede:	3301      	adds	r3, #1
 8013ee0:	d003      	beq.n	8013eea <_fwalk_reent+0x3a>
 8013ee2:	4629      	mov	r1, r5
 8013ee4:	4630      	mov	r0, r6
 8013ee6:	47c0      	blx	r8
 8013ee8:	4307      	orrs	r7, r0
 8013eea:	3568      	adds	r5, #104	; 0x68
 8013eec:	e7e9      	b.n	8013ec2 <_fwalk_reent+0x12>

08013eee <__retarget_lock_init_recursive>:
 8013eee:	4770      	bx	lr

08013ef0 <__retarget_lock_acquire_recursive>:
 8013ef0:	4770      	bx	lr

08013ef2 <__retarget_lock_release_recursive>:
 8013ef2:	4770      	bx	lr

08013ef4 <__swhatbuf_r>:
 8013ef4:	b570      	push	{r4, r5, r6, lr}
 8013ef6:	460e      	mov	r6, r1
 8013ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013efc:	2900      	cmp	r1, #0
 8013efe:	b096      	sub	sp, #88	; 0x58
 8013f00:	4614      	mov	r4, r2
 8013f02:	461d      	mov	r5, r3
 8013f04:	da08      	bge.n	8013f18 <__swhatbuf_r+0x24>
 8013f06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	602a      	str	r2, [r5, #0]
 8013f0e:	061a      	lsls	r2, r3, #24
 8013f10:	d410      	bmi.n	8013f34 <__swhatbuf_r+0x40>
 8013f12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013f16:	e00e      	b.n	8013f36 <__swhatbuf_r+0x42>
 8013f18:	466a      	mov	r2, sp
 8013f1a:	f000 f903 	bl	8014124 <_fstat_r>
 8013f1e:	2800      	cmp	r0, #0
 8013f20:	dbf1      	blt.n	8013f06 <__swhatbuf_r+0x12>
 8013f22:	9a01      	ldr	r2, [sp, #4]
 8013f24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013f28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013f2c:	425a      	negs	r2, r3
 8013f2e:	415a      	adcs	r2, r3
 8013f30:	602a      	str	r2, [r5, #0]
 8013f32:	e7ee      	b.n	8013f12 <__swhatbuf_r+0x1e>
 8013f34:	2340      	movs	r3, #64	; 0x40
 8013f36:	2000      	movs	r0, #0
 8013f38:	6023      	str	r3, [r4, #0]
 8013f3a:	b016      	add	sp, #88	; 0x58
 8013f3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013f40 <__smakebuf_r>:
 8013f40:	898b      	ldrh	r3, [r1, #12]
 8013f42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013f44:	079d      	lsls	r5, r3, #30
 8013f46:	4606      	mov	r6, r0
 8013f48:	460c      	mov	r4, r1
 8013f4a:	d507      	bpl.n	8013f5c <__smakebuf_r+0x1c>
 8013f4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013f50:	6023      	str	r3, [r4, #0]
 8013f52:	6123      	str	r3, [r4, #16]
 8013f54:	2301      	movs	r3, #1
 8013f56:	6163      	str	r3, [r4, #20]
 8013f58:	b002      	add	sp, #8
 8013f5a:	bd70      	pop	{r4, r5, r6, pc}
 8013f5c:	ab01      	add	r3, sp, #4
 8013f5e:	466a      	mov	r2, sp
 8013f60:	f7ff ffc8 	bl	8013ef4 <__swhatbuf_r>
 8013f64:	9900      	ldr	r1, [sp, #0]
 8013f66:	4605      	mov	r5, r0
 8013f68:	4630      	mov	r0, r6
 8013f6a:	f7ff f959 	bl	8013220 <_malloc_r>
 8013f6e:	b948      	cbnz	r0, 8013f84 <__smakebuf_r+0x44>
 8013f70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f74:	059a      	lsls	r2, r3, #22
 8013f76:	d4ef      	bmi.n	8013f58 <__smakebuf_r+0x18>
 8013f78:	f023 0303 	bic.w	r3, r3, #3
 8013f7c:	f043 0302 	orr.w	r3, r3, #2
 8013f80:	81a3      	strh	r3, [r4, #12]
 8013f82:	e7e3      	b.n	8013f4c <__smakebuf_r+0xc>
 8013f84:	4b0d      	ldr	r3, [pc, #52]	; (8013fbc <__smakebuf_r+0x7c>)
 8013f86:	62b3      	str	r3, [r6, #40]	; 0x28
 8013f88:	89a3      	ldrh	r3, [r4, #12]
 8013f8a:	6020      	str	r0, [r4, #0]
 8013f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f90:	81a3      	strh	r3, [r4, #12]
 8013f92:	9b00      	ldr	r3, [sp, #0]
 8013f94:	6163      	str	r3, [r4, #20]
 8013f96:	9b01      	ldr	r3, [sp, #4]
 8013f98:	6120      	str	r0, [r4, #16]
 8013f9a:	b15b      	cbz	r3, 8013fb4 <__smakebuf_r+0x74>
 8013f9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013fa0:	4630      	mov	r0, r6
 8013fa2:	f000 f8d1 	bl	8014148 <_isatty_r>
 8013fa6:	b128      	cbz	r0, 8013fb4 <__smakebuf_r+0x74>
 8013fa8:	89a3      	ldrh	r3, [r4, #12]
 8013faa:	f023 0303 	bic.w	r3, r3, #3
 8013fae:	f043 0301 	orr.w	r3, r3, #1
 8013fb2:	81a3      	strh	r3, [r4, #12]
 8013fb4:	89a0      	ldrh	r0, [r4, #12]
 8013fb6:	4305      	orrs	r5, r0
 8013fb8:	81a5      	strh	r5, [r4, #12]
 8013fba:	e7cd      	b.n	8013f58 <__smakebuf_r+0x18>
 8013fbc:	08013d4d 	.word	0x08013d4d

08013fc0 <_malloc_usable_size_r>:
 8013fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013fc4:	1f18      	subs	r0, r3, #4
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	bfbc      	itt	lt
 8013fca:	580b      	ldrlt	r3, [r1, r0]
 8013fcc:	18c0      	addlt	r0, r0, r3
 8013fce:	4770      	bx	lr

08013fd0 <_raise_r>:
 8013fd0:	291f      	cmp	r1, #31
 8013fd2:	b538      	push	{r3, r4, r5, lr}
 8013fd4:	4604      	mov	r4, r0
 8013fd6:	460d      	mov	r5, r1
 8013fd8:	d904      	bls.n	8013fe4 <_raise_r+0x14>
 8013fda:	2316      	movs	r3, #22
 8013fdc:	6003      	str	r3, [r0, #0]
 8013fde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013fe2:	bd38      	pop	{r3, r4, r5, pc}
 8013fe4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013fe6:	b112      	cbz	r2, 8013fee <_raise_r+0x1e>
 8013fe8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013fec:	b94b      	cbnz	r3, 8014002 <_raise_r+0x32>
 8013fee:	4620      	mov	r0, r4
 8013ff0:	f000 f830 	bl	8014054 <_getpid_r>
 8013ff4:	462a      	mov	r2, r5
 8013ff6:	4601      	mov	r1, r0
 8013ff8:	4620      	mov	r0, r4
 8013ffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013ffe:	f000 b817 	b.w	8014030 <_kill_r>
 8014002:	2b01      	cmp	r3, #1
 8014004:	d00a      	beq.n	801401c <_raise_r+0x4c>
 8014006:	1c59      	adds	r1, r3, #1
 8014008:	d103      	bne.n	8014012 <_raise_r+0x42>
 801400a:	2316      	movs	r3, #22
 801400c:	6003      	str	r3, [r0, #0]
 801400e:	2001      	movs	r0, #1
 8014010:	e7e7      	b.n	8013fe2 <_raise_r+0x12>
 8014012:	2400      	movs	r4, #0
 8014014:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014018:	4628      	mov	r0, r5
 801401a:	4798      	blx	r3
 801401c:	2000      	movs	r0, #0
 801401e:	e7e0      	b.n	8013fe2 <_raise_r+0x12>

08014020 <raise>:
 8014020:	4b02      	ldr	r3, [pc, #8]	; (801402c <raise+0xc>)
 8014022:	4601      	mov	r1, r0
 8014024:	6818      	ldr	r0, [r3, #0]
 8014026:	f7ff bfd3 	b.w	8013fd0 <_raise_r>
 801402a:	bf00      	nop
 801402c:	20000014 	.word	0x20000014

08014030 <_kill_r>:
 8014030:	b538      	push	{r3, r4, r5, lr}
 8014032:	4d07      	ldr	r5, [pc, #28]	; (8014050 <_kill_r+0x20>)
 8014034:	2300      	movs	r3, #0
 8014036:	4604      	mov	r4, r0
 8014038:	4608      	mov	r0, r1
 801403a:	4611      	mov	r1, r2
 801403c:	602b      	str	r3, [r5, #0]
 801403e:	f7f2 fbab 	bl	8006798 <_kill>
 8014042:	1c43      	adds	r3, r0, #1
 8014044:	d102      	bne.n	801404c <_kill_r+0x1c>
 8014046:	682b      	ldr	r3, [r5, #0]
 8014048:	b103      	cbz	r3, 801404c <_kill_r+0x1c>
 801404a:	6023      	str	r3, [r4, #0]
 801404c:	bd38      	pop	{r3, r4, r5, pc}
 801404e:	bf00      	nop
 8014050:	200063c4 	.word	0x200063c4

08014054 <_getpid_r>:
 8014054:	f7f2 bb98 	b.w	8006788 <_getpid>

08014058 <__sread>:
 8014058:	b510      	push	{r4, lr}
 801405a:	460c      	mov	r4, r1
 801405c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014060:	f000 f894 	bl	801418c <_read_r>
 8014064:	2800      	cmp	r0, #0
 8014066:	bfab      	itete	ge
 8014068:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801406a:	89a3      	ldrhlt	r3, [r4, #12]
 801406c:	181b      	addge	r3, r3, r0
 801406e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014072:	bfac      	ite	ge
 8014074:	6563      	strge	r3, [r4, #84]	; 0x54
 8014076:	81a3      	strhlt	r3, [r4, #12]
 8014078:	bd10      	pop	{r4, pc}

0801407a <__swrite>:
 801407a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801407e:	461f      	mov	r7, r3
 8014080:	898b      	ldrh	r3, [r1, #12]
 8014082:	05db      	lsls	r3, r3, #23
 8014084:	4605      	mov	r5, r0
 8014086:	460c      	mov	r4, r1
 8014088:	4616      	mov	r6, r2
 801408a:	d505      	bpl.n	8014098 <__swrite+0x1e>
 801408c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014090:	2302      	movs	r3, #2
 8014092:	2200      	movs	r2, #0
 8014094:	f000 f868 	bl	8014168 <_lseek_r>
 8014098:	89a3      	ldrh	r3, [r4, #12]
 801409a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801409e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80140a2:	81a3      	strh	r3, [r4, #12]
 80140a4:	4632      	mov	r2, r6
 80140a6:	463b      	mov	r3, r7
 80140a8:	4628      	mov	r0, r5
 80140aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140ae:	f000 b817 	b.w	80140e0 <_write_r>

080140b2 <__sseek>:
 80140b2:	b510      	push	{r4, lr}
 80140b4:	460c      	mov	r4, r1
 80140b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140ba:	f000 f855 	bl	8014168 <_lseek_r>
 80140be:	1c43      	adds	r3, r0, #1
 80140c0:	89a3      	ldrh	r3, [r4, #12]
 80140c2:	bf15      	itete	ne
 80140c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80140c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80140ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80140ce:	81a3      	strheq	r3, [r4, #12]
 80140d0:	bf18      	it	ne
 80140d2:	81a3      	strhne	r3, [r4, #12]
 80140d4:	bd10      	pop	{r4, pc}

080140d6 <__sclose>:
 80140d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140da:	f000 b813 	b.w	8014104 <_close_r>
	...

080140e0 <_write_r>:
 80140e0:	b538      	push	{r3, r4, r5, lr}
 80140e2:	4d07      	ldr	r5, [pc, #28]	; (8014100 <_write_r+0x20>)
 80140e4:	4604      	mov	r4, r0
 80140e6:	4608      	mov	r0, r1
 80140e8:	4611      	mov	r1, r2
 80140ea:	2200      	movs	r2, #0
 80140ec:	602a      	str	r2, [r5, #0]
 80140ee:	461a      	mov	r2, r3
 80140f0:	f7f2 fb89 	bl	8006806 <_write>
 80140f4:	1c43      	adds	r3, r0, #1
 80140f6:	d102      	bne.n	80140fe <_write_r+0x1e>
 80140f8:	682b      	ldr	r3, [r5, #0]
 80140fa:	b103      	cbz	r3, 80140fe <_write_r+0x1e>
 80140fc:	6023      	str	r3, [r4, #0]
 80140fe:	bd38      	pop	{r3, r4, r5, pc}
 8014100:	200063c4 	.word	0x200063c4

08014104 <_close_r>:
 8014104:	b538      	push	{r3, r4, r5, lr}
 8014106:	4d06      	ldr	r5, [pc, #24]	; (8014120 <_close_r+0x1c>)
 8014108:	2300      	movs	r3, #0
 801410a:	4604      	mov	r4, r0
 801410c:	4608      	mov	r0, r1
 801410e:	602b      	str	r3, [r5, #0]
 8014110:	f7f2 fb95 	bl	800683e <_close>
 8014114:	1c43      	adds	r3, r0, #1
 8014116:	d102      	bne.n	801411e <_close_r+0x1a>
 8014118:	682b      	ldr	r3, [r5, #0]
 801411a:	b103      	cbz	r3, 801411e <_close_r+0x1a>
 801411c:	6023      	str	r3, [r4, #0]
 801411e:	bd38      	pop	{r3, r4, r5, pc}
 8014120:	200063c4 	.word	0x200063c4

08014124 <_fstat_r>:
 8014124:	b538      	push	{r3, r4, r5, lr}
 8014126:	4d07      	ldr	r5, [pc, #28]	; (8014144 <_fstat_r+0x20>)
 8014128:	2300      	movs	r3, #0
 801412a:	4604      	mov	r4, r0
 801412c:	4608      	mov	r0, r1
 801412e:	4611      	mov	r1, r2
 8014130:	602b      	str	r3, [r5, #0]
 8014132:	f7f2 fb90 	bl	8006856 <_fstat>
 8014136:	1c43      	adds	r3, r0, #1
 8014138:	d102      	bne.n	8014140 <_fstat_r+0x1c>
 801413a:	682b      	ldr	r3, [r5, #0]
 801413c:	b103      	cbz	r3, 8014140 <_fstat_r+0x1c>
 801413e:	6023      	str	r3, [r4, #0]
 8014140:	bd38      	pop	{r3, r4, r5, pc}
 8014142:	bf00      	nop
 8014144:	200063c4 	.word	0x200063c4

08014148 <_isatty_r>:
 8014148:	b538      	push	{r3, r4, r5, lr}
 801414a:	4d06      	ldr	r5, [pc, #24]	; (8014164 <_isatty_r+0x1c>)
 801414c:	2300      	movs	r3, #0
 801414e:	4604      	mov	r4, r0
 8014150:	4608      	mov	r0, r1
 8014152:	602b      	str	r3, [r5, #0]
 8014154:	f7f2 fb8f 	bl	8006876 <_isatty>
 8014158:	1c43      	adds	r3, r0, #1
 801415a:	d102      	bne.n	8014162 <_isatty_r+0x1a>
 801415c:	682b      	ldr	r3, [r5, #0]
 801415e:	b103      	cbz	r3, 8014162 <_isatty_r+0x1a>
 8014160:	6023      	str	r3, [r4, #0]
 8014162:	bd38      	pop	{r3, r4, r5, pc}
 8014164:	200063c4 	.word	0x200063c4

08014168 <_lseek_r>:
 8014168:	b538      	push	{r3, r4, r5, lr}
 801416a:	4d07      	ldr	r5, [pc, #28]	; (8014188 <_lseek_r+0x20>)
 801416c:	4604      	mov	r4, r0
 801416e:	4608      	mov	r0, r1
 8014170:	4611      	mov	r1, r2
 8014172:	2200      	movs	r2, #0
 8014174:	602a      	str	r2, [r5, #0]
 8014176:	461a      	mov	r2, r3
 8014178:	f7f2 fb88 	bl	800688c <_lseek>
 801417c:	1c43      	adds	r3, r0, #1
 801417e:	d102      	bne.n	8014186 <_lseek_r+0x1e>
 8014180:	682b      	ldr	r3, [r5, #0]
 8014182:	b103      	cbz	r3, 8014186 <_lseek_r+0x1e>
 8014184:	6023      	str	r3, [r4, #0]
 8014186:	bd38      	pop	{r3, r4, r5, pc}
 8014188:	200063c4 	.word	0x200063c4

0801418c <_read_r>:
 801418c:	b538      	push	{r3, r4, r5, lr}
 801418e:	4d07      	ldr	r5, [pc, #28]	; (80141ac <_read_r+0x20>)
 8014190:	4604      	mov	r4, r0
 8014192:	4608      	mov	r0, r1
 8014194:	4611      	mov	r1, r2
 8014196:	2200      	movs	r2, #0
 8014198:	602a      	str	r2, [r5, #0]
 801419a:	461a      	mov	r2, r3
 801419c:	f7f2 fb16 	bl	80067cc <_read>
 80141a0:	1c43      	adds	r3, r0, #1
 80141a2:	d102      	bne.n	80141aa <_read_r+0x1e>
 80141a4:	682b      	ldr	r3, [r5, #0]
 80141a6:	b103      	cbz	r3, 80141aa <_read_r+0x1e>
 80141a8:	6023      	str	r3, [r4, #0]
 80141aa:	bd38      	pop	{r3, r4, r5, pc}
 80141ac:	200063c4 	.word	0x200063c4

080141b0 <_init>:
 80141b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141b2:	bf00      	nop
 80141b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141b6:	bc08      	pop	{r3}
 80141b8:	469e      	mov	lr, r3
 80141ba:	4770      	bx	lr

080141bc <_fini>:
 80141bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141be:	bf00      	nop
 80141c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141c2:	bc08      	pop	{r3}
 80141c4:	469e      	mov	lr, r3
 80141c6:	4770      	bx	lr
